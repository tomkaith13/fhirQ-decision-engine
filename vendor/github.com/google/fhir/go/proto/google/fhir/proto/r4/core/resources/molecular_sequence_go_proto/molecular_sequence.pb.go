//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/molecular_sequence.proto

package molecular_sequence_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MolecularSequence, last updated
// 2019-11-01T09:29:23.356+11:00. Information about a biological sequence. See
// http://hl7.org/fhir/StructureDefinition/MolecularSequence
type MolecularSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique ID for this particular sequence. This is a FHIR-defined id
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Type       *MolecularSequence_TypeCode      `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Base number of coordinate system (0 for 0-based numbering or coordinates,
	// inclusive start, exclusive end, 1 for 1-based numbering, inclusive start,
	// inclusive end)
	CoordinateSystem *datatypes_go_proto.Integer `protobuf:"bytes,12,opt,name=coordinate_system,json=coordinateSystem,proto3" json:"coordinate_system,omitempty"`
	// Who and/or what this is about
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=patient,proto3" json:"patient,omitempty"`
	// Specimen used for sequencing
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// The method for sequencing
	Device *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=device,proto3" json:"device,omitempty"`
	// Who should be responsible for test result
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=performer,proto3" json:"performer,omitempty"`
	// The number of copies of the sequence of interest.  (RNASeq)
	Quantity     *datatypes_go_proto.Quantity    `protobuf:"bytes,17,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ReferenceSeq *MolecularSequence_ReferenceSeq `protobuf:"bytes,18,opt,name=reference_seq,json=referenceSeq,proto3" json:"reference_seq,omitempty"`
	Variant      []*MolecularSequence_Variant    `protobuf:"bytes,19,rep,name=variant,proto3" json:"variant,omitempty"`
	// Sequence that was observed
	ObservedSeq *datatypes_go_proto.String   `protobuf:"bytes,20,opt,name=observed_seq,json=observedSeq,proto3" json:"observed_seq,omitempty"`
	Quality     []*MolecularSequence_Quality `protobuf:"bytes,21,rep,name=quality,proto3" json:"quality,omitempty"`
	// Average number of reads representing a given nucleotide in the
	// reconstructed sequence
	ReadCoverage *datatypes_go_proto.Integer     `protobuf:"bytes,22,opt,name=read_coverage,json=readCoverage,proto3" json:"read_coverage,omitempty"`
	Repository   []*MolecularSequence_Repository `protobuf:"bytes,23,rep,name=repository,proto3" json:"repository,omitempty"`
	// Pointer to next atomic sequence
	Pointer          []*datatypes_go_proto.Reference       `protobuf:"bytes,24,rep,name=pointer,proto3" json:"pointer,omitempty"`
	StructureVariant []*MolecularSequence_StructureVariant `protobuf:"bytes,25,rep,name=structure_variant,json=structureVariant,proto3" json:"structure_variant,omitempty"`
}

func (x *MolecularSequence) Reset() {
	*x = MolecularSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence) ProtoMessage() {}

func (x *MolecularSequence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence.ProtoReflect.Descriptor instead.
func (*MolecularSequence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0}
}

func (x *MolecularSequence) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MolecularSequence) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MolecularSequence) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MolecularSequence) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MolecularSequence) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MolecularSequence) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MolecularSequence) GetType() *MolecularSequence_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MolecularSequence) GetCoordinateSystem() *datatypes_go_proto.Integer {
	if x != nil {
		return x.CoordinateSystem
	}
	return nil
}

func (x *MolecularSequence) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *MolecularSequence) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *MolecularSequence) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MolecularSequence) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *MolecularSequence) GetQuantity() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MolecularSequence) GetReferenceSeq() *MolecularSequence_ReferenceSeq {
	if x != nil {
		return x.ReferenceSeq
	}
	return nil
}

func (x *MolecularSequence) GetVariant() []*MolecularSequence_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *MolecularSequence) GetObservedSeq() *datatypes_go_proto.String {
	if x != nil {
		return x.ObservedSeq
	}
	return nil
}

func (x *MolecularSequence) GetQuality() []*MolecularSequence_Quality {
	if x != nil {
		return x.Quality
	}
	return nil
}

func (x *MolecularSequence) GetReadCoverage() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ReadCoverage
	}
	return nil
}

func (x *MolecularSequence) GetRepository() []*MolecularSequence_Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *MolecularSequence) GetPointer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *MolecularSequence) GetStructureVariant() []*MolecularSequence_StructureVariant {
	if x != nil {
		return x.StructureVariant
	}
	return nil
}

// aa | dna | rna
type MolecularSequence_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SequenceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.SequenceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MolecularSequence_TypeCode) Reset() {
	*x = MolecularSequence_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_TypeCode) ProtoMessage() {}

func (x *MolecularSequence_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_TypeCode.ProtoReflect.Descriptor instead.
func (*MolecularSequence_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MolecularSequence_TypeCode) GetValue() codes_go_proto.SequenceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SequenceTypeCode_INVALID_UNINITIALIZED
}

func (x *MolecularSequence_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A sequence used as reference
type MolecularSequence_ReferenceSeq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Chromosome containing genetic finding
	Chromosome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	// The Genome Build used for reference, following GRCh build versions e.g.
	// 'GRCh 37'
	GenomeBuild *datatypes_go_proto.String                      `protobuf:"bytes,5,opt,name=genome_build,json=genomeBuild,proto3" json:"genome_build,omitempty"`
	Orientation *MolecularSequence_ReferenceSeq_OrientationCode `protobuf:"bytes,6,opt,name=orientation,proto3" json:"orientation,omitempty"`
	// Reference identifier
	ReferenceSeqId *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=reference_seq_id,json=referenceSeqId,proto3" json:"reference_seq_id,omitempty"`
	// A pointer to another MolecularSequence entity as reference sequence
	ReferenceSeqPointer *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=reference_seq_pointer,json=referenceSeqPointer,proto3" json:"reference_seq_pointer,omitempty"`
	// A string to represent reference sequence
	ReferenceSeqString *datatypes_go_proto.String                 `protobuf:"bytes,9,opt,name=reference_seq_string,json=referenceSeqString,proto3" json:"reference_seq_string,omitempty"`
	Strand             *MolecularSequence_ReferenceSeq_StrandCode `protobuf:"bytes,10,opt,name=strand,proto3" json:"strand,omitempty"`
	// Start position of the window on the  reference sequence
	WindowStart *datatypes_go_proto.Integer `protobuf:"bytes,11,opt,name=window_start,json=windowStart,proto3" json:"window_start,omitempty"`
	// End position of the window on the reference sequence
	WindowEnd *datatypes_go_proto.Integer `protobuf:"bytes,12,opt,name=window_end,json=windowEnd,proto3" json:"window_end,omitempty"`
}

func (x *MolecularSequence_ReferenceSeq) Reset() {
	*x = MolecularSequence_ReferenceSeq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_ReferenceSeq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_ReferenceSeq) ProtoMessage() {}

func (x *MolecularSequence_ReferenceSeq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_ReferenceSeq.ProtoReflect.Descriptor instead.
func (*MolecularSequence_ReferenceSeq) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MolecularSequence_ReferenceSeq) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetChromosome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Chromosome
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetGenomeBuild() *datatypes_go_proto.String {
	if x != nil {
		return x.GenomeBuild
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetOrientation() *MolecularSequence_ReferenceSeq_OrientationCode {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetReferenceSeqId() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReferenceSeqId
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetReferenceSeqPointer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ReferenceSeqPointer
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetReferenceSeqString() *datatypes_go_proto.String {
	if x != nil {
		return x.ReferenceSeqString
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetStrand() *MolecularSequence_ReferenceSeq_StrandCode {
	if x != nil {
		return x.Strand
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetWindowStart() *datatypes_go_proto.Integer {
	if x != nil {
		return x.WindowStart
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq) GetWindowEnd() *datatypes_go_proto.Integer {
	if x != nil {
		return x.WindowEnd
	}
	return nil
}

// Variant in sequence
type MolecularSequence_Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Start position of the variant on the  reference sequence
	Start *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// End position of the variant on the reference sequence
	End *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	// Allele that was observed
	ObservedAllele *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=observed_allele,json=observedAllele,proto3" json:"observed_allele,omitempty"`
	// Allele in the reference sequence
	ReferenceAllele *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=reference_allele,json=referenceAllele,proto3" json:"reference_allele,omitempty"`
	// Extended CIGAR string for aligning the sequence with reference bases
	Cigar *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=cigar,proto3" json:"cigar,omitempty"`
	// Pointer to observed variant information
	VariantPointer *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=variant_pointer,json=variantPointer,proto3" json:"variant_pointer,omitempty"`
}

func (x *MolecularSequence_Variant) Reset() {
	*x = MolecularSequence_Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_Variant) ProtoMessage() {}

func (x *MolecularSequence_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_Variant.ProtoReflect.Descriptor instead.
func (*MolecularSequence_Variant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MolecularSequence_Variant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_Variant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_Variant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_Variant) GetStart() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *MolecularSequence_Variant) GetEnd() *datatypes_go_proto.Integer {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *MolecularSequence_Variant) GetObservedAllele() *datatypes_go_proto.String {
	if x != nil {
		return x.ObservedAllele
	}
	return nil
}

func (x *MolecularSequence_Variant) GetReferenceAllele() *datatypes_go_proto.String {
	if x != nil {
		return x.ReferenceAllele
	}
	return nil
}

func (x *MolecularSequence_Variant) GetCigar() *datatypes_go_proto.String {
	if x != nil {
		return x.Cigar
	}
	return nil
}

func (x *MolecularSequence_Variant) GetVariantPointer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.VariantPointer
	}
	return nil
}

// An set of value as quality of sequence
type MolecularSequence_Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Type              *MolecularSequence_Quality_TypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Standard sequence for comparison
	StandardSequence *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=standard_sequence,json=standardSequence,proto3" json:"standard_sequence,omitempty"`
	// Start position of the sequence
	Start *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
	// End position of the sequence
	End *datatypes_go_proto.Integer `protobuf:"bytes,7,opt,name=end,proto3" json:"end,omitempty"`
	// Quality score for the comparison
	Score *datatypes_go_proto.Quantity `protobuf:"bytes,8,opt,name=score,proto3" json:"score,omitempty"`
	// Method to get quality
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=method,proto3" json:"method,omitempty"`
	// True positives from the perspective of the truth data
	TruthTp *datatypes_go_proto.Decimal `protobuf:"bytes,10,opt,name=truth_tp,json=truthTP,proto3" json:"truth_tp,omitempty"`
	// True positives from the perspective of the query data
	QueryTp *datatypes_go_proto.Decimal `protobuf:"bytes,11,opt,name=query_tp,json=queryTP,proto3" json:"query_tp,omitempty"`
	// False negatives
	TruthFn *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=truth_fn,json=truthFN,proto3" json:"truth_fn,omitempty"`
	// False positives
	QueryFp *datatypes_go_proto.Decimal `protobuf:"bytes,13,opt,name=query_fp,json=queryFP,proto3" json:"query_fp,omitempty"`
	// False positives where the non-REF alleles in the Truth and Query Call
	// Sets match
	GtFp *datatypes_go_proto.Decimal `protobuf:"bytes,14,opt,name=gt_fp,json=gtFP,proto3" json:"gt_fp,omitempty"`
	// Precision of comparison
	Precision *datatypes_go_proto.Decimal `protobuf:"bytes,15,opt,name=precision,proto3" json:"precision,omitempty"`
	// Recall of comparison
	Recall *datatypes_go_proto.Decimal `protobuf:"bytes,16,opt,name=recall,proto3" json:"recall,omitempty"`
	// F-score
	FScore *datatypes_go_proto.Decimal    `protobuf:"bytes,17,opt,name=f_score,json=fScore,proto3" json:"f_score,omitempty"`
	Roc    *MolecularSequence_Quality_Roc `protobuf:"bytes,18,opt,name=roc,proto3" json:"roc,omitempty"`
}

func (x *MolecularSequence_Quality) Reset() {
	*x = MolecularSequence_Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_Quality) ProtoMessage() {}

func (x *MolecularSequence_Quality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_Quality.ProtoReflect.Descriptor instead.
func (*MolecularSequence_Quality) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MolecularSequence_Quality) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_Quality) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_Quality) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_Quality) GetType() *MolecularSequence_Quality_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MolecularSequence_Quality) GetStandardSequence() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StandardSequence
	}
	return nil
}

func (x *MolecularSequence_Quality) GetStart() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *MolecularSequence_Quality) GetEnd() *datatypes_go_proto.Integer {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *MolecularSequence_Quality) GetScore() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *MolecularSequence_Quality) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *MolecularSequence_Quality) GetTruthTp() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.TruthTp
	}
	return nil
}

func (x *MolecularSequence_Quality) GetQueryTp() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.QueryTp
	}
	return nil
}

func (x *MolecularSequence_Quality) GetTruthFn() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.TruthFn
	}
	return nil
}

func (x *MolecularSequence_Quality) GetQueryFp() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.QueryFp
	}
	return nil
}

func (x *MolecularSequence_Quality) GetGtFp() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.GtFp
	}
	return nil
}

func (x *MolecularSequence_Quality) GetPrecision() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *MolecularSequence_Quality) GetRecall() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Recall
	}
	return nil
}

func (x *MolecularSequence_Quality) GetFScore() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.FScore
	}
	return nil
}

func (x *MolecularSequence_Quality) GetRoc() *MolecularSequence_Quality_Roc {
	if x != nil {
		return x.Roc
	}
	return nil
}

// External repository which contains detailed report related with observedSeq
// in this resource
type MolecularSequence_Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Type              *MolecularSequence_Repository_TypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// URI of the repository
	Url *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Repository's name
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Id of the dataset that used to call for dataset in repository
	DatasetId *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Id of the variantset that used to call for variantset in repository
	VariantsetId *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=variantset_id,json=variantsetId,proto3" json:"variantset_id,omitempty"`
	// Id of the read
	ReadsetId *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=readset_id,json=readsetId,proto3" json:"readset_id,omitempty"`
}

func (x *MolecularSequence_Repository) Reset() {
	*x = MolecularSequence_Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_Repository) ProtoMessage() {}

func (x *MolecularSequence_Repository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_Repository.ProtoReflect.Descriptor instead.
func (*MolecularSequence_Repository) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MolecularSequence_Repository) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_Repository) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_Repository) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_Repository) GetType() *MolecularSequence_Repository_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MolecularSequence_Repository) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *MolecularSequence_Repository) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MolecularSequence_Repository) GetDatasetId() *datatypes_go_proto.String {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *MolecularSequence_Repository) GetVariantsetId() *datatypes_go_proto.String {
	if x != nil {
		return x.VariantsetId
	}
	return nil
}

func (x *MolecularSequence_Repository) GetReadsetId() *datatypes_go_proto.String {
	if x != nil {
		return x.ReadsetId
	}
	return nil
}

// Structural variant
type MolecularSequence_StructureVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Structural variant change type
	VariantType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=variant_type,json=variantType,proto3" json:"variant_type,omitempty"`
	// Does the structural variant have base pair resolution breakpoints?
	Exact *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=exact,proto3" json:"exact,omitempty"`
	// Structural variant length
	Length *datatypes_go_proto.Integer               `protobuf:"bytes,6,opt,name=length,proto3" json:"length,omitempty"`
	Outer  *MolecularSequence_StructureVariant_Outer `protobuf:"bytes,7,opt,name=outer,proto3" json:"outer,omitempty"`
	Inner  *MolecularSequence_StructureVariant_Inner `protobuf:"bytes,8,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *MolecularSequence_StructureVariant) Reset() {
	*x = MolecularSequence_StructureVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_StructureVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_StructureVariant) ProtoMessage() {}

func (x *MolecularSequence_StructureVariant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_StructureVariant.ProtoReflect.Descriptor instead.
func (*MolecularSequence_StructureVariant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MolecularSequence_StructureVariant) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetVariantType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VariantType
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetExact() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Exact
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetOuter() *MolecularSequence_StructureVariant_Outer {
	if x != nil {
		return x.Outer
	}
	return nil
}

func (x *MolecularSequence_StructureVariant) GetInner() *MolecularSequence_StructureVariant_Inner {
	if x != nil {
		return x.Inner
	}
	return nil
}

// sense | antisense
type MolecularSequence_ReferenceSeq_OrientationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.OrientationTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.OrientationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MolecularSequence_ReferenceSeq_OrientationCode) Reset() {
	*x = MolecularSequence_ReferenceSeq_OrientationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_ReferenceSeq_OrientationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_ReferenceSeq_OrientationCode) ProtoMessage() {}

func (x *MolecularSequence_ReferenceSeq_OrientationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_ReferenceSeq_OrientationCode.ProtoReflect.Descriptor instead.
func (*MolecularSequence_ReferenceSeq_OrientationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *MolecularSequence_ReferenceSeq_OrientationCode) GetValue() codes_go_proto.OrientationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.OrientationTypeCode_INVALID_UNINITIALIZED
}

func (x *MolecularSequence_ReferenceSeq_OrientationCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq_OrientationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// watson | crick
type MolecularSequence_ReferenceSeq_StrandCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.StrandTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.StrandTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MolecularSequence_ReferenceSeq_StrandCode) Reset() {
	*x = MolecularSequence_ReferenceSeq_StrandCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_ReferenceSeq_StrandCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_ReferenceSeq_StrandCode) ProtoMessage() {}

func (x *MolecularSequence_ReferenceSeq_StrandCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_ReferenceSeq_StrandCode.ProtoReflect.Descriptor instead.
func (*MolecularSequence_ReferenceSeq_StrandCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *MolecularSequence_ReferenceSeq_StrandCode) GetValue() codes_go_proto.StrandTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.StrandTypeCode_INVALID_UNINITIALIZED
}

func (x *MolecularSequence_ReferenceSeq_StrandCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_ReferenceSeq_StrandCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// indel | snp | unknown
type MolecularSequence_Quality_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QualityTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.QualityTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MolecularSequence_Quality_TypeCode) Reset() {
	*x = MolecularSequence_Quality_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_Quality_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_Quality_TypeCode) ProtoMessage() {}

func (x *MolecularSequence_Quality_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_Quality_TypeCode.ProtoReflect.Descriptor instead.
func (*MolecularSequence_Quality_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *MolecularSequence_Quality_TypeCode) GetValue() codes_go_proto.QualityTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QualityTypeCode_INVALID_UNINITIALIZED
}

func (x *MolecularSequence_Quality_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_Quality_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Receiver Operator Characteristic (ROC) Curve
type MolecularSequence_Quality_Roc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Genotype quality score
	Score []*datatypes_go_proto.Integer `protobuf:"bytes,4,rep,name=score,proto3" json:"score,omitempty"`
	// Roc score true positive numbers
	NumTp []*datatypes_go_proto.Integer `protobuf:"bytes,5,rep,name=num_tp,json=numTP,proto3" json:"num_tp,omitempty"`
	// Roc score false positive numbers
	NumFp []*datatypes_go_proto.Integer `protobuf:"bytes,6,rep,name=num_fp,json=numFP,proto3" json:"num_fp,omitempty"`
	// Roc score false negative numbers
	NumFn []*datatypes_go_proto.Integer `protobuf:"bytes,7,rep,name=num_fn,json=numFN,proto3" json:"num_fn,omitempty"`
	// Precision of the GQ score
	Precision []*datatypes_go_proto.Decimal `protobuf:"bytes,8,rep,name=precision,proto3" json:"precision,omitempty"`
	// Sensitivity of the GQ score
	Sensitivity []*datatypes_go_proto.Decimal `protobuf:"bytes,9,rep,name=sensitivity,proto3" json:"sensitivity,omitempty"`
	// FScore of the GQ score
	FMeasure []*datatypes_go_proto.Decimal `protobuf:"bytes,10,rep,name=f_measure,json=fMeasure,proto3" json:"f_measure,omitempty"`
}

func (x *MolecularSequence_Quality_Roc) Reset() {
	*x = MolecularSequence_Quality_Roc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_Quality_Roc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_Quality_Roc) ProtoMessage() {}

func (x *MolecularSequence_Quality_Roc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_Quality_Roc.ProtoReflect.Descriptor instead.
func (*MolecularSequence_Quality_Roc) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *MolecularSequence_Quality_Roc) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetScore() []*datatypes_go_proto.Integer {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetNumTp() []*datatypes_go_proto.Integer {
	if x != nil {
		return x.NumTp
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetNumFp() []*datatypes_go_proto.Integer {
	if x != nil {
		return x.NumFp
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetNumFn() []*datatypes_go_proto.Integer {
	if x != nil {
		return x.NumFn
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetPrecision() []*datatypes_go_proto.Decimal {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetSensitivity() []*datatypes_go_proto.Decimal {
	if x != nil {
		return x.Sensitivity
	}
	return nil
}

func (x *MolecularSequence_Quality_Roc) GetFMeasure() []*datatypes_go_proto.Decimal {
	if x != nil {
		return x.FMeasure
	}
	return nil
}

// directlink | openapi | login | oauth | other
type MolecularSequence_Repository_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RepositoryTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RepositoryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MolecularSequence_Repository_TypeCode) Reset() {
	*x = MolecularSequence_Repository_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_Repository_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_Repository_TypeCode) ProtoMessage() {}

func (x *MolecularSequence_Repository_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_Repository_TypeCode.ProtoReflect.Descriptor instead.
func (*MolecularSequence_Repository_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *MolecularSequence_Repository_TypeCode) GetValue() codes_go_proto.RepositoryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RepositoryTypeCode_INVALID_UNINITIALIZED
}

func (x *MolecularSequence_Repository_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_Repository_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Structural variant outer
type MolecularSequence_StructureVariant_Outer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Structural variant outer start
	Start *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// Structural variant outer end
	End *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *MolecularSequence_StructureVariant_Outer) Reset() {
	*x = MolecularSequence_StructureVariant_Outer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_StructureVariant_Outer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_StructureVariant_Outer) ProtoMessage() {}

func (x *MolecularSequence_StructureVariant_Outer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_StructureVariant_Outer.ProtoReflect.Descriptor instead.
func (*MolecularSequence_StructureVariant_Outer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *MolecularSequence_StructureVariant_Outer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Outer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Outer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Outer) GetStart() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Outer) GetEnd() *datatypes_go_proto.Integer {
	if x != nil {
		return x.End
	}
	return nil
}

// Structural variant inner
type MolecularSequence_StructureVariant_Inner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Structural variant inner start
	Start *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	// Structural variant inner end
	End *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *MolecularSequence_StructureVariant_Inner) Reset() {
	*x = MolecularSequence_StructureVariant_Inner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MolecularSequence_StructureVariant_Inner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MolecularSequence_StructureVariant_Inner) ProtoMessage() {}

func (x *MolecularSequence_StructureVariant_Inner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MolecularSequence_StructureVariant_Inner.ProtoReflect.Descriptor instead.
func (*MolecularSequence_StructureVariant_Inner) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *MolecularSequence_StructureVariant_Inner) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Inner) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Inner) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Inner) GetStart() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *MolecularSequence_StructureVariant_Inner) GetEnd() *datatypes_go_proto.Integer {
	if x != nil {
		return x.End
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDesc = []byte{
	0x0a, 0x42, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x6c, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x41,
	0x0a, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f,
	0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51,
	0x0a, 0x11, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x10, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x71, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x65, 0x71, 0x12, 0x48, 0x0a,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a,
	0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x64, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0xa2, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc2, 0x0d, 0x0a, 0x0c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f,
	0x73, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x71, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x56, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x71, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x45, 0x6e, 0x64, 0x1a, 0xaf, 0x02, 0x0a, 0x0f, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa0, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x66, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xd3, 0x01, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x5e, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x6f,
	0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x69, 0x28, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x2b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x49, 0x64, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x28, 0x29, 0x2b, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x2b,
	0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x29, 0x20, 0x3d, 0x20, 0x31,
	0x1a, 0xc4, 0x04, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65,
	0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x69, 0x67, 0x61,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x63, 0x69, 0x67, 0x61, 0x72, 0x12, 0x5a, 0x0a, 0x0f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0xb7, 0x0f, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x08,
	0x74, 0x72, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x74, 0x72,
	0x75, 0x74, 0x68, 0x54, 0x50, 0x12, 0x37, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x50, 0x12, 0x37,
	0x0a, 0x08, 0x74, 0x72, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07,
	0x74, 0x72, 0x75, 0x74, 0x68, 0x46, 0x4e, 0x12, 0x37, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x50,
	0x12, 0x31, 0x0a, 0x05, 0x67, 0x74, 0x5f, 0x66, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x67,
	0x74, 0x46, 0x50, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x03,
	0x72, 0x6f, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x6f, 0x63, 0x52, 0x03, 0x72,
	0x6f, 0x63, 0x1a, 0xa0, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc9, 0x04, 0x0a, 0x03, 0x52, 0x6f, 0x63, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x5f, 0x74, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x54, 0x50,
	0x12, 0x33, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05,
	0x6e, 0x75, 0x6d, 0x46, 0x50, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x05, 0x6e, 0x75, 0x6d, 0x46, 0x4e, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x1a, 0xde, 0x06, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x65, 0x74, 0x49, 0x64, 0x1a, 0xa6, 0x02, 0x0a, 0x08, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xf9, 0x08, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0xa5,
	0x02, 0x0a, 0x05, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0xa5, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x3a, 0x77,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2c, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x31, 0x20,
	0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x30, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x82, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5,
	0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_goTypes = []interface{}{
	(*MolecularSequence)(nil),                              // 0: google.fhir.r4.core.MolecularSequence
	(*MolecularSequence_TypeCode)(nil),                     // 1: google.fhir.r4.core.MolecularSequence.TypeCode
	(*MolecularSequence_ReferenceSeq)(nil),                 // 2: google.fhir.r4.core.MolecularSequence.ReferenceSeq
	(*MolecularSequence_Variant)(nil),                      // 3: google.fhir.r4.core.MolecularSequence.Variant
	(*MolecularSequence_Quality)(nil),                      // 4: google.fhir.r4.core.MolecularSequence.Quality
	(*MolecularSequence_Repository)(nil),                   // 5: google.fhir.r4.core.MolecularSequence.Repository
	(*MolecularSequence_StructureVariant)(nil),             // 6: google.fhir.r4.core.MolecularSequence.StructureVariant
	(*MolecularSequence_ReferenceSeq_OrientationCode)(nil), // 7: google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode
	(*MolecularSequence_ReferenceSeq_StrandCode)(nil),      // 8: google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode
	(*MolecularSequence_Quality_TypeCode)(nil),             // 9: google.fhir.r4.core.MolecularSequence.Quality.TypeCode
	(*MolecularSequence_Quality_Roc)(nil),                  // 10: google.fhir.r4.core.MolecularSequence.Quality.Roc
	(*MolecularSequence_Repository_TypeCode)(nil),          // 11: google.fhir.r4.core.MolecularSequence.Repository.TypeCode
	(*MolecularSequence_StructureVariant_Outer)(nil),       // 12: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer
	(*MolecularSequence_StructureVariant_Inner)(nil),       // 13: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner
	(*datatypes_go_proto.Id)(nil),                          // 14: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                        // 15: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                         // 16: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                        // 17: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                   // 18: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                        // 19: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                   // 20: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                  // 21: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.Integer)(nil),                     // 22: google.fhir.r4.core.Integer
	(*datatypes_go_proto.Reference)(nil),                   // 23: google.fhir.r4.core.Reference
	(*datatypes_go_proto.Quantity)(nil),                    // 24: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.String)(nil),                      // 25: google.fhir.r4.core.String
	(codes_go_proto.SequenceTypeCode_Value)(0),             // 26: google.fhir.r4.core.SequenceTypeCode.Value
	(*datatypes_go_proto.CodeableConcept)(nil),             // 27: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Decimal)(nil),                     // 28: google.fhir.r4.core.Decimal
	(*datatypes_go_proto.Boolean)(nil),                     // 29: google.fhir.r4.core.Boolean
	(codes_go_proto.OrientationTypeCode_Value)(0),          // 30: google.fhir.r4.core.OrientationTypeCode.Value
	(codes_go_proto.StrandTypeCode_Value)(0),               // 31: google.fhir.r4.core.StrandTypeCode.Value
	(codes_go_proto.QualityTypeCode_Value)(0),              // 32: google.fhir.r4.core.QualityTypeCode.Value
	(codes_go_proto.RepositoryTypeCode_Value)(0),           // 33: google.fhir.r4.core.RepositoryTypeCode.Value
}
var file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_depIdxs = []int32{
	14,  // 0: google.fhir.r4.core.MolecularSequence.id:type_name -> google.fhir.r4.core.Id
	15,  // 1: google.fhir.r4.core.MolecularSequence.meta:type_name -> google.fhir.r4.core.Meta
	16,  // 2: google.fhir.r4.core.MolecularSequence.implicit_rules:type_name -> google.fhir.r4.core.Uri
	17,  // 3: google.fhir.r4.core.MolecularSequence.language:type_name -> google.fhir.r4.core.Code
	18,  // 4: google.fhir.r4.core.MolecularSequence.text:type_name -> google.fhir.r4.core.Narrative
	19,  // 5: google.fhir.r4.core.MolecularSequence.contained:type_name -> google.protobuf.Any
	20,  // 6: google.fhir.r4.core.MolecularSequence.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 7: google.fhir.r4.core.MolecularSequence.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21,  // 8: google.fhir.r4.core.MolecularSequence.identifier:type_name -> google.fhir.r4.core.Identifier
	1,   // 9: google.fhir.r4.core.MolecularSequence.type:type_name -> google.fhir.r4.core.MolecularSequence.TypeCode
	22,  // 10: google.fhir.r4.core.MolecularSequence.coordinate_system:type_name -> google.fhir.r4.core.Integer
	23,  // 11: google.fhir.r4.core.MolecularSequence.patient:type_name -> google.fhir.r4.core.Reference
	23,  // 12: google.fhir.r4.core.MolecularSequence.specimen:type_name -> google.fhir.r4.core.Reference
	23,  // 13: google.fhir.r4.core.MolecularSequence.device:type_name -> google.fhir.r4.core.Reference
	23,  // 14: google.fhir.r4.core.MolecularSequence.performer:type_name -> google.fhir.r4.core.Reference
	24,  // 15: google.fhir.r4.core.MolecularSequence.quantity:type_name -> google.fhir.r4.core.Quantity
	2,   // 16: google.fhir.r4.core.MolecularSequence.reference_seq:type_name -> google.fhir.r4.core.MolecularSequence.ReferenceSeq
	3,   // 17: google.fhir.r4.core.MolecularSequence.variant:type_name -> google.fhir.r4.core.MolecularSequence.Variant
	25,  // 18: google.fhir.r4.core.MolecularSequence.observed_seq:type_name -> google.fhir.r4.core.String
	4,   // 19: google.fhir.r4.core.MolecularSequence.quality:type_name -> google.fhir.r4.core.MolecularSequence.Quality
	22,  // 20: google.fhir.r4.core.MolecularSequence.read_coverage:type_name -> google.fhir.r4.core.Integer
	5,   // 21: google.fhir.r4.core.MolecularSequence.repository:type_name -> google.fhir.r4.core.MolecularSequence.Repository
	23,  // 22: google.fhir.r4.core.MolecularSequence.pointer:type_name -> google.fhir.r4.core.Reference
	6,   // 23: google.fhir.r4.core.MolecularSequence.structure_variant:type_name -> google.fhir.r4.core.MolecularSequence.StructureVariant
	26,  // 24: google.fhir.r4.core.MolecularSequence.TypeCode.value:type_name -> google.fhir.r4.core.SequenceTypeCode.Value
	25,  // 25: google.fhir.r4.core.MolecularSequence.TypeCode.id:type_name -> google.fhir.r4.core.String
	20,  // 26: google.fhir.r4.core.MolecularSequence.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	25,  // 27: google.fhir.r4.core.MolecularSequence.ReferenceSeq.id:type_name -> google.fhir.r4.core.String
	20,  // 28: google.fhir.r4.core.MolecularSequence.ReferenceSeq.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 29: google.fhir.r4.core.MolecularSequence.ReferenceSeq.modifier_extension:type_name -> google.fhir.r4.core.Extension
	27,  // 30: google.fhir.r4.core.MolecularSequence.ReferenceSeq.chromosome:type_name -> google.fhir.r4.core.CodeableConcept
	25,  // 31: google.fhir.r4.core.MolecularSequence.ReferenceSeq.genome_build:type_name -> google.fhir.r4.core.String
	7,   // 32: google.fhir.r4.core.MolecularSequence.ReferenceSeq.orientation:type_name -> google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode
	27,  // 33: google.fhir.r4.core.MolecularSequence.ReferenceSeq.reference_seq_id:type_name -> google.fhir.r4.core.CodeableConcept
	23,  // 34: google.fhir.r4.core.MolecularSequence.ReferenceSeq.reference_seq_pointer:type_name -> google.fhir.r4.core.Reference
	25,  // 35: google.fhir.r4.core.MolecularSequence.ReferenceSeq.reference_seq_string:type_name -> google.fhir.r4.core.String
	8,   // 36: google.fhir.r4.core.MolecularSequence.ReferenceSeq.strand:type_name -> google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode
	22,  // 37: google.fhir.r4.core.MolecularSequence.ReferenceSeq.window_start:type_name -> google.fhir.r4.core.Integer
	22,  // 38: google.fhir.r4.core.MolecularSequence.ReferenceSeq.window_end:type_name -> google.fhir.r4.core.Integer
	25,  // 39: google.fhir.r4.core.MolecularSequence.Variant.id:type_name -> google.fhir.r4.core.String
	20,  // 40: google.fhir.r4.core.MolecularSequence.Variant.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 41: google.fhir.r4.core.MolecularSequence.Variant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22,  // 42: google.fhir.r4.core.MolecularSequence.Variant.start:type_name -> google.fhir.r4.core.Integer
	22,  // 43: google.fhir.r4.core.MolecularSequence.Variant.end:type_name -> google.fhir.r4.core.Integer
	25,  // 44: google.fhir.r4.core.MolecularSequence.Variant.observed_allele:type_name -> google.fhir.r4.core.String
	25,  // 45: google.fhir.r4.core.MolecularSequence.Variant.reference_allele:type_name -> google.fhir.r4.core.String
	25,  // 46: google.fhir.r4.core.MolecularSequence.Variant.cigar:type_name -> google.fhir.r4.core.String
	23,  // 47: google.fhir.r4.core.MolecularSequence.Variant.variant_pointer:type_name -> google.fhir.r4.core.Reference
	25,  // 48: google.fhir.r4.core.MolecularSequence.Quality.id:type_name -> google.fhir.r4.core.String
	20,  // 49: google.fhir.r4.core.MolecularSequence.Quality.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 50: google.fhir.r4.core.MolecularSequence.Quality.modifier_extension:type_name -> google.fhir.r4.core.Extension
	9,   // 51: google.fhir.r4.core.MolecularSequence.Quality.type:type_name -> google.fhir.r4.core.MolecularSequence.Quality.TypeCode
	27,  // 52: google.fhir.r4.core.MolecularSequence.Quality.standard_sequence:type_name -> google.fhir.r4.core.CodeableConcept
	22,  // 53: google.fhir.r4.core.MolecularSequence.Quality.start:type_name -> google.fhir.r4.core.Integer
	22,  // 54: google.fhir.r4.core.MolecularSequence.Quality.end:type_name -> google.fhir.r4.core.Integer
	24,  // 55: google.fhir.r4.core.MolecularSequence.Quality.score:type_name -> google.fhir.r4.core.Quantity
	27,  // 56: google.fhir.r4.core.MolecularSequence.Quality.method:type_name -> google.fhir.r4.core.CodeableConcept
	28,  // 57: google.fhir.r4.core.MolecularSequence.Quality.truth_tp:type_name -> google.fhir.r4.core.Decimal
	28,  // 58: google.fhir.r4.core.MolecularSequence.Quality.query_tp:type_name -> google.fhir.r4.core.Decimal
	28,  // 59: google.fhir.r4.core.MolecularSequence.Quality.truth_fn:type_name -> google.fhir.r4.core.Decimal
	28,  // 60: google.fhir.r4.core.MolecularSequence.Quality.query_fp:type_name -> google.fhir.r4.core.Decimal
	28,  // 61: google.fhir.r4.core.MolecularSequence.Quality.gt_fp:type_name -> google.fhir.r4.core.Decimal
	28,  // 62: google.fhir.r4.core.MolecularSequence.Quality.precision:type_name -> google.fhir.r4.core.Decimal
	28,  // 63: google.fhir.r4.core.MolecularSequence.Quality.recall:type_name -> google.fhir.r4.core.Decimal
	28,  // 64: google.fhir.r4.core.MolecularSequence.Quality.f_score:type_name -> google.fhir.r4.core.Decimal
	10,  // 65: google.fhir.r4.core.MolecularSequence.Quality.roc:type_name -> google.fhir.r4.core.MolecularSequence.Quality.Roc
	25,  // 66: google.fhir.r4.core.MolecularSequence.Repository.id:type_name -> google.fhir.r4.core.String
	20,  // 67: google.fhir.r4.core.MolecularSequence.Repository.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 68: google.fhir.r4.core.MolecularSequence.Repository.modifier_extension:type_name -> google.fhir.r4.core.Extension
	11,  // 69: google.fhir.r4.core.MolecularSequence.Repository.type:type_name -> google.fhir.r4.core.MolecularSequence.Repository.TypeCode
	16,  // 70: google.fhir.r4.core.MolecularSequence.Repository.url:type_name -> google.fhir.r4.core.Uri
	25,  // 71: google.fhir.r4.core.MolecularSequence.Repository.name:type_name -> google.fhir.r4.core.String
	25,  // 72: google.fhir.r4.core.MolecularSequence.Repository.dataset_id:type_name -> google.fhir.r4.core.String
	25,  // 73: google.fhir.r4.core.MolecularSequence.Repository.variantset_id:type_name -> google.fhir.r4.core.String
	25,  // 74: google.fhir.r4.core.MolecularSequence.Repository.readset_id:type_name -> google.fhir.r4.core.String
	25,  // 75: google.fhir.r4.core.MolecularSequence.StructureVariant.id:type_name -> google.fhir.r4.core.String
	20,  // 76: google.fhir.r4.core.MolecularSequence.StructureVariant.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 77: google.fhir.r4.core.MolecularSequence.StructureVariant.modifier_extension:type_name -> google.fhir.r4.core.Extension
	27,  // 78: google.fhir.r4.core.MolecularSequence.StructureVariant.variant_type:type_name -> google.fhir.r4.core.CodeableConcept
	29,  // 79: google.fhir.r4.core.MolecularSequence.StructureVariant.exact:type_name -> google.fhir.r4.core.Boolean
	22,  // 80: google.fhir.r4.core.MolecularSequence.StructureVariant.length:type_name -> google.fhir.r4.core.Integer
	12,  // 81: google.fhir.r4.core.MolecularSequence.StructureVariant.outer:type_name -> google.fhir.r4.core.MolecularSequence.StructureVariant.Outer
	13,  // 82: google.fhir.r4.core.MolecularSequence.StructureVariant.inner:type_name -> google.fhir.r4.core.MolecularSequence.StructureVariant.Inner
	30,  // 83: google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode.value:type_name -> google.fhir.r4.core.OrientationTypeCode.Value
	25,  // 84: google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode.id:type_name -> google.fhir.r4.core.String
	20,  // 85: google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode.extension:type_name -> google.fhir.r4.core.Extension
	31,  // 86: google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode.value:type_name -> google.fhir.r4.core.StrandTypeCode.Value
	25,  // 87: google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode.id:type_name -> google.fhir.r4.core.String
	20,  // 88: google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode.extension:type_name -> google.fhir.r4.core.Extension
	32,  // 89: google.fhir.r4.core.MolecularSequence.Quality.TypeCode.value:type_name -> google.fhir.r4.core.QualityTypeCode.Value
	25,  // 90: google.fhir.r4.core.MolecularSequence.Quality.TypeCode.id:type_name -> google.fhir.r4.core.String
	20,  // 91: google.fhir.r4.core.MolecularSequence.Quality.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	25,  // 92: google.fhir.r4.core.MolecularSequence.Quality.Roc.id:type_name -> google.fhir.r4.core.String
	20,  // 93: google.fhir.r4.core.MolecularSequence.Quality.Roc.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 94: google.fhir.r4.core.MolecularSequence.Quality.Roc.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22,  // 95: google.fhir.r4.core.MolecularSequence.Quality.Roc.score:type_name -> google.fhir.r4.core.Integer
	22,  // 96: google.fhir.r4.core.MolecularSequence.Quality.Roc.num_tp:type_name -> google.fhir.r4.core.Integer
	22,  // 97: google.fhir.r4.core.MolecularSequence.Quality.Roc.num_fp:type_name -> google.fhir.r4.core.Integer
	22,  // 98: google.fhir.r4.core.MolecularSequence.Quality.Roc.num_fn:type_name -> google.fhir.r4.core.Integer
	28,  // 99: google.fhir.r4.core.MolecularSequence.Quality.Roc.precision:type_name -> google.fhir.r4.core.Decimal
	28,  // 100: google.fhir.r4.core.MolecularSequence.Quality.Roc.sensitivity:type_name -> google.fhir.r4.core.Decimal
	28,  // 101: google.fhir.r4.core.MolecularSequence.Quality.Roc.f_measure:type_name -> google.fhir.r4.core.Decimal
	33,  // 102: google.fhir.r4.core.MolecularSequence.Repository.TypeCode.value:type_name -> google.fhir.r4.core.RepositoryTypeCode.Value
	25,  // 103: google.fhir.r4.core.MolecularSequence.Repository.TypeCode.id:type_name -> google.fhir.r4.core.String
	20,  // 104: google.fhir.r4.core.MolecularSequence.Repository.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	25,  // 105: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer.id:type_name -> google.fhir.r4.core.String
	20,  // 106: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 107: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22,  // 108: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer.start:type_name -> google.fhir.r4.core.Integer
	22,  // 109: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer.end:type_name -> google.fhir.r4.core.Integer
	25,  // 110: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner.id:type_name -> google.fhir.r4.core.String
	20,  // 111: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner.extension:type_name -> google.fhir.r4.core.Extension
	20,  // 112: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22,  // 113: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner.start:type_name -> google.fhir.r4.core.Integer
	22,  // 114: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner.end:type_name -> google.fhir.r4.core.Integer
	115, // [115:115] is the sub-list for method output_type
	115, // [115:115] is the sub-list for method input_type
	115, // [115:115] is the sub-list for extension type_name
	115, // [115:115] is the sub-list for extension extendee
	0,   // [0:115] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_ReferenceSeq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_StructureVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_ReferenceSeq_OrientationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_ReferenceSeq_StrandCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_Quality_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_Quality_Roc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_Repository_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_StructureVariant_Outer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MolecularSequence_StructureVariant_Inner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_molecular_sequence_proto_depIdxs = nil
}
