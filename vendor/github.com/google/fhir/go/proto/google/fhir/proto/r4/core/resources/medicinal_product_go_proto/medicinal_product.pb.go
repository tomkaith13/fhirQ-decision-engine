//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/medicinal_product.proto

package medicinal_product_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicinalProduct, last updated
// 2019-11-01T09:29:23.356+11:00. Detailed definition of a medicinal product,
// typically for uses other than direct patient care (e.g. regulatory use). See
// http://hl7.org/fhir/StructureDefinition/MedicinalProduct
type MedicinalProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for this product. Could be an MPID
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Regulatory type, e.g. Investigational or Authorized
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// If this medicine applies to human or veterinary uses
	Domain *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=domain,proto3" json:"domain,omitempty"`
	// The dose form for a single part product, or combined form of a multiple
	// part product
	CombinedPharmaceuticalDoseForm *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=combined_pharmaceutical_dose_form,json=combinedPharmaceuticalDoseForm,proto3" json:"combined_pharmaceutical_dose_form,omitempty"`
	// The legal status of supply of the medicinal product as classified by the
	// regulator
	LegalStatusOfSupply *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// Whether the Medicinal Product is subject to additional monitoring for
	// regulatory reasons
	AdditionalMonitoringIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=additional_monitoring_indicator,json=additionalMonitoringIndicator,proto3" json:"additional_monitoring_indicator,omitempty"`
	// Whether the Medicinal Product is subject to special measures for regulatory
	// reasons
	SpecialMeasures []*datatypes_go_proto.String `protobuf:"bytes,16,rep,name=special_measures,json=specialMeasures,proto3" json:"special_measures,omitempty"`
	// If authorised for use in children
	PaediatricUseIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=paediatric_use_indicator,json=paediatricUseIndicator,proto3" json:"paediatric_use_indicator,omitempty"`
	// Allows the product to be classified by various systems
	ProductClassification []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=product_classification,json=productClassification,proto3" json:"product_classification,omitempty"`
	// Marketing status of the medicinal product, in contrast to marketing
	// authorizaton
	MarketingStatus []*datatypes_go_proto.MarketingStatus `protobuf:"bytes,19,rep,name=marketing_status,json=marketingStatus,proto3" json:"marketing_status,omitempty"`
	// Pharmaceutical aspects of product
	PharmaceuticalProduct []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=pharmaceutical_product,json=pharmaceuticalProduct,proto3" json:"pharmaceutical_product,omitempty"`
	// Package representation for the product
	PackagedMedicinalProduct []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=packaged_medicinal_product,json=packagedMedicinalProduct,proto3" json:"packaged_medicinal_product,omitempty"`
	// Supporting documentation, typically for regulatory submission
	AttachedDocument []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=attached_document,json=attachedDocument,proto3" json:"attached_document,omitempty"`
	// A master file for to the medicinal product (e.g. Pharmacovigilance System
	// Master File)
	MasterFile []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=master_file,json=masterFile,proto3" json:"master_file,omitempty"`
	// A product specific contact, person (in a role), or an organization
	Contact []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=contact,proto3" json:"contact,omitempty"`
	// Clinical trials or studies that this product is involved in
	ClinicalTrial []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=clinical_trial,json=clinicalTrial,proto3" json:"clinical_trial,omitempty"`
	Name          []*MedicinalProduct_Name        `protobuf:"bytes,26,rep,name=name,proto3" json:"name,omitempty"`
	// Reference to another product, e.g. for linking authorised to
	// investigational product
	CrossReference                 []*datatypes_go_proto.Identifier                   `protobuf:"bytes,27,rep,name=cross_reference,json=crossReference,proto3" json:"cross_reference,omitempty"`
	ManufacturingBusinessOperation []*MedicinalProduct_ManufacturingBusinessOperation `protobuf:"bytes,28,rep,name=manufacturing_business_operation,json=manufacturingBusinessOperation,proto3" json:"manufacturing_business_operation,omitempty"`
	SpecialDesignation             []*MedicinalProduct_SpecialDesignation             `protobuf:"bytes,29,rep,name=special_designation,json=specialDesignation,proto3" json:"special_designation,omitempty"`
}

func (x *MedicinalProduct) Reset() {
	*x = MedicinalProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct) ProtoMessage() {}

func (x *MedicinalProduct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct.ProtoReflect.Descriptor instead.
func (*MedicinalProduct) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0}
}

func (x *MedicinalProduct) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProduct) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicinalProduct) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicinalProduct) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicinalProduct) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicinalProduct) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicinalProduct) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProduct) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProduct) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProduct) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProduct) GetDomain() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *MedicinalProduct) GetCombinedPharmaceuticalDoseForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CombinedPharmaceuticalDoseForm
	}
	return nil
}

func (x *MedicinalProduct) GetLegalStatusOfSupply() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *MedicinalProduct) GetAdditionalMonitoringIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditionalMonitoringIndicator
	}
	return nil
}

func (x *MedicinalProduct) GetSpecialMeasures() []*datatypes_go_proto.String {
	if x != nil {
		return x.SpecialMeasures
	}
	return nil
}

func (x *MedicinalProduct) GetPaediatricUseIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PaediatricUseIndicator
	}
	return nil
}

func (x *MedicinalProduct) GetProductClassification() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductClassification
	}
	return nil
}

func (x *MedicinalProduct) GetMarketingStatus() []*datatypes_go_proto.MarketingStatus {
	if x != nil {
		return x.MarketingStatus
	}
	return nil
}

func (x *MedicinalProduct) GetPharmaceuticalProduct() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PharmaceuticalProduct
	}
	return nil
}

func (x *MedicinalProduct) GetPackagedMedicinalProduct() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.PackagedMedicinalProduct
	}
	return nil
}

func (x *MedicinalProduct) GetAttachedDocument() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AttachedDocument
	}
	return nil
}

func (x *MedicinalProduct) GetMasterFile() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.MasterFile
	}
	return nil
}

func (x *MedicinalProduct) GetContact() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *MedicinalProduct) GetClinicalTrial() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ClinicalTrial
	}
	return nil
}

func (x *MedicinalProduct) GetName() []*MedicinalProduct_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MedicinalProduct) GetCrossReference() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.CrossReference
	}
	return nil
}

func (x *MedicinalProduct) GetManufacturingBusinessOperation() []*MedicinalProduct_ManufacturingBusinessOperation {
	if x != nil {
		return x.ManufacturingBusinessOperation
	}
	return nil
}

func (x *MedicinalProduct) GetSpecialDesignation() []*MedicinalProduct_SpecialDesignation {
	if x != nil {
		return x.SpecialDesignation
	}
	return nil
}

// The product's name, including full name and possibly coded parts
type MedicinalProduct_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The full product name
	ProductName     *datatypes_go_proto.String               `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	NamePart        []*MedicinalProduct_Name_NamePart        `protobuf:"bytes,5,rep,name=name_part,json=namePart,proto3" json:"name_part,omitempty"`
	CountryLanguage []*MedicinalProduct_Name_CountryLanguage `protobuf:"bytes,6,rep,name=country_language,json=countryLanguage,proto3" json:"country_language,omitempty"`
}

func (x *MedicinalProduct_Name) Reset() {
	*x = MedicinalProduct_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct_Name) ProtoMessage() {}

func (x *MedicinalProduct_Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct_Name.ProtoReflect.Descriptor instead.
func (*MedicinalProduct_Name) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicinalProduct_Name) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProduct_Name) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProduct_Name) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProduct_Name) GetProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *MedicinalProduct_Name) GetNamePart() []*MedicinalProduct_Name_NamePart {
	if x != nil {
		return x.NamePart
	}
	return nil
}

func (x *MedicinalProduct_Name) GetCountryLanguage() []*MedicinalProduct_Name_CountryLanguage {
	if x != nil {
		return x.CountryLanguage
	}
	return nil
}

// An operation applied to the product, for manufacturing or adminsitrative
// purpose
type MedicinalProduct_ManufacturingBusinessOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of manufacturing operation
	OperationType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Regulatory authorization reference number
	AuthorisationReferenceNumber *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=authorisation_reference_number,json=authorisationReferenceNumber,proto3" json:"authorisation_reference_number,omitempty"`
	// Regulatory authorization date
	EffectiveDate *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// To indicate if this proces is commercially confidential
	ConfidentialityIndicator *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=confidentiality_indicator,json=confidentialityIndicator,proto3" json:"confidentiality_indicator,omitempty"`
	// The manufacturer or establishment associated with the process
	Manufacturer []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// A regulator which oversees the operation
	Regulator *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=regulator,proto3" json:"regulator,omitempty"`
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) Reset() {
	*x = MedicinalProduct_ManufacturingBusinessOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct_ManufacturingBusinessOperation) ProtoMessage() {}

func (x *MedicinalProduct_ManufacturingBusinessOperation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct_ManufacturingBusinessOperation.ProtoReflect.Descriptor instead.
func (*MedicinalProduct_ManufacturingBusinessOperation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetOperationType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OperationType
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetAuthorisationReferenceNumber() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.AuthorisationReferenceNumber
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetEffectiveDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetConfidentialityIndicator() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ConfidentialityIndicator
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *MedicinalProduct_ManufacturingBusinessOperation) GetRegulator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Regulator
	}
	return nil
}

// Indicates if the medicinal product has an orphan designation for the
// treatment of a rare disease
type MedicinalProduct_SpecialDesignation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier for the designation, or procedure number
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The type of special designation, e.g. orphan drug, minor use
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The intended use of the product, e.g. prevention, treatment
	IntendedUse *datatypes_go_proto.CodeableConcept              `protobuf:"bytes,6,opt,name=intended_use,json=intendedUse,proto3" json:"intended_use,omitempty"`
	Indication  *MedicinalProduct_SpecialDesignation_IndicationX `protobuf:"bytes,7,opt,name=indication,proto3" json:"indication,omitempty"`
	// For example granted, pending, expired or withdrawn
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// Date when the designation was granted
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date,proto3" json:"date,omitempty"`
	// Animal species for which this applies
	Species *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=species,proto3" json:"species,omitempty"`
}

func (x *MedicinalProduct_SpecialDesignation) Reset() {
	*x = MedicinalProduct_SpecialDesignation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct_SpecialDesignation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct_SpecialDesignation) ProtoMessage() {}

func (x *MedicinalProduct_SpecialDesignation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct_SpecialDesignation.ProtoReflect.Descriptor instead.
func (*MedicinalProduct_SpecialDesignation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MedicinalProduct_SpecialDesignation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetIntendedUse() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedUse
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetIndication() *MedicinalProduct_SpecialDesignation_IndicationX {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation) GetSpecies() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Species
	}
	return nil
}

// Coding words or phrases of the name
type MedicinalProduct_Name_NamePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A fragment of a product name
	Part *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=part,proto3" json:"part,omitempty"`
	// Idenifying type for this part of the name (e.g. strength part)
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MedicinalProduct_Name_NamePart) Reset() {
	*x = MedicinalProduct_Name_NamePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct_Name_NamePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct_Name_NamePart) ProtoMessage() {}

func (x *MedicinalProduct_Name_NamePart) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct_Name_NamePart.ProtoReflect.Descriptor instead.
func (*MedicinalProduct_Name_NamePart) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MedicinalProduct_Name_NamePart) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProduct_Name_NamePart) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProduct_Name_NamePart) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProduct_Name_NamePart) GetPart() *datatypes_go_proto.String {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *MedicinalProduct_Name_NamePart) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

// Country where the name applies
type MedicinalProduct_Name_CountryLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Country code for where this name applies
	Country *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	// Jurisdiction code for where this name applies
	Jurisdiction *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Language code for this name
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *MedicinalProduct_Name_CountryLanguage) Reset() {
	*x = MedicinalProduct_Name_CountryLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct_Name_CountryLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct_Name_CountryLanguage) ProtoMessage() {}

func (x *MedicinalProduct_Name_CountryLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct_Name_CountryLanguage.ProtoReflect.Descriptor instead.
func (*MedicinalProduct_Name_CountryLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *MedicinalProduct_Name_CountryLanguage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProduct_Name_CountryLanguage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProduct_Name_CountryLanguage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProduct_Name_CountryLanguage) GetCountry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MedicinalProduct_Name_CountryLanguage) GetJurisdiction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MedicinalProduct_Name_CountryLanguage) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

// Condition for which the medicinal use applies
type MedicinalProduct_SpecialDesignation_IndicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicinalProduct_SpecialDesignation_IndicationX_CodeableConcept
	//	*MedicinalProduct_SpecialDesignation_IndicationX_Reference
	Choice isMedicinalProduct_SpecialDesignation_IndicationX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicinalProduct_SpecialDesignation_IndicationX) Reset() {
	*x = MedicinalProduct_SpecialDesignation_IndicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProduct_SpecialDesignation_IndicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProduct_SpecialDesignation_IndicationX) ProtoMessage() {}

func (x *MedicinalProduct_SpecialDesignation_IndicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProduct_SpecialDesignation_IndicationX.ProtoReflect.Descriptor instead.
func (*MedicinalProduct_SpecialDesignation_IndicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *MedicinalProduct_SpecialDesignation_IndicationX) GetChoice() isMedicinalProduct_SpecialDesignation_IndicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation_IndicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicinalProduct_SpecialDesignation_IndicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicinalProduct_SpecialDesignation_IndicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MedicinalProduct_SpecialDesignation_IndicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicinalProduct_SpecialDesignation_IndicationX_Choice interface {
	isMedicinalProduct_SpecialDesignation_IndicationX_Choice()
}

type MedicinalProduct_SpecialDesignation_IndicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicinalProduct_SpecialDesignation_IndicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicinalProduct_SpecialDesignation_IndicationX_CodeableConcept) isMedicinalProduct_SpecialDesignation_IndicationX_Choice() {
}

func (*MedicinalProduct_SpecialDesignation_IndicationX_Reference) isMedicinalProduct_SpecialDesignation_IndicationX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDesc = []byte{
	0x0a, 0x41, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfa, 0x28, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x6f, 0x0a, 0x21, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x1d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x70,
	0x61, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x16, 0x70, 0x61, 0x65, 0x64, 0x69, 0x61, 0x74, 0x72, 0x69, 0x63, 0x55,
	0x73, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x70, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x15, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x7c, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x64, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0f,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xa4, 0x09, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x65, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0xb6, 0x02, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0xa7, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0xe1, 0x05, 0x0a, 0x1e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x1e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1c, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x61, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x80, 0x07,
	0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0a, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x1a, 0xd4, 0x01, 0x0a, 0x0b, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x60, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x81, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_goTypes = []interface{}{
	(*MedicinalProduct)(nil),                                // 0: google.fhir.r4.core.MedicinalProduct
	(*MedicinalProduct_Name)(nil),                           // 1: google.fhir.r4.core.MedicinalProduct.Name
	(*MedicinalProduct_ManufacturingBusinessOperation)(nil), // 2: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation
	(*MedicinalProduct_SpecialDesignation)(nil),             // 3: google.fhir.r4.core.MedicinalProduct.SpecialDesignation
	(*MedicinalProduct_Name_NamePart)(nil),                  // 4: google.fhir.r4.core.MedicinalProduct.Name.NamePart
	(*MedicinalProduct_Name_CountryLanguage)(nil),           // 5: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage
	(*MedicinalProduct_SpecialDesignation_IndicationX)(nil), // 6: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX
	(*datatypes_go_proto.Id)(nil),                           // 7: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                         // 8: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                          // 9: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                         // 10: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                    // 11: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                         // 12: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                    // 13: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                   // 14: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),              // 15: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Coding)(nil),                       // 16: google.fhir.r4.core.Coding
	(*datatypes_go_proto.String)(nil),                       // 17: google.fhir.r4.core.String
	(*datatypes_go_proto.MarketingStatus)(nil),              // 18: google.fhir.r4.core.MarketingStatus
	(*datatypes_go_proto.Reference)(nil),                    // 19: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                     // 20: google.fhir.r4.core.DateTime
}
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_depIdxs = []int32{
	7,  // 0: google.fhir.r4.core.MedicinalProduct.id:type_name -> google.fhir.r4.core.Id
	8,  // 1: google.fhir.r4.core.MedicinalProduct.meta:type_name -> google.fhir.r4.core.Meta
	9,  // 2: google.fhir.r4.core.MedicinalProduct.implicit_rules:type_name -> google.fhir.r4.core.Uri
	10, // 3: google.fhir.r4.core.MedicinalProduct.language:type_name -> google.fhir.r4.core.Code
	11, // 4: google.fhir.r4.core.MedicinalProduct.text:type_name -> google.fhir.r4.core.Narrative
	12, // 5: google.fhir.r4.core.MedicinalProduct.contained:type_name -> google.protobuf.Any
	13, // 6: google.fhir.r4.core.MedicinalProduct.extension:type_name -> google.fhir.r4.core.Extension
	13, // 7: google.fhir.r4.core.MedicinalProduct.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 8: google.fhir.r4.core.MedicinalProduct.identifier:type_name -> google.fhir.r4.core.Identifier
	15, // 9: google.fhir.r4.core.MedicinalProduct.type:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 10: google.fhir.r4.core.MedicinalProduct.domain:type_name -> google.fhir.r4.core.Coding
	15, // 11: google.fhir.r4.core.MedicinalProduct.combined_pharmaceutical_dose_form:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 12: google.fhir.r4.core.MedicinalProduct.legal_status_of_supply:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 13: google.fhir.r4.core.MedicinalProduct.additional_monitoring_indicator:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 14: google.fhir.r4.core.MedicinalProduct.special_measures:type_name -> google.fhir.r4.core.String
	15, // 15: google.fhir.r4.core.MedicinalProduct.paediatric_use_indicator:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 16: google.fhir.r4.core.MedicinalProduct.product_classification:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 17: google.fhir.r4.core.MedicinalProduct.marketing_status:type_name -> google.fhir.r4.core.MarketingStatus
	19, // 18: google.fhir.r4.core.MedicinalProduct.pharmaceutical_product:type_name -> google.fhir.r4.core.Reference
	19, // 19: google.fhir.r4.core.MedicinalProduct.packaged_medicinal_product:type_name -> google.fhir.r4.core.Reference
	19, // 20: google.fhir.r4.core.MedicinalProduct.attached_document:type_name -> google.fhir.r4.core.Reference
	19, // 21: google.fhir.r4.core.MedicinalProduct.master_file:type_name -> google.fhir.r4.core.Reference
	19, // 22: google.fhir.r4.core.MedicinalProduct.contact:type_name -> google.fhir.r4.core.Reference
	19, // 23: google.fhir.r4.core.MedicinalProduct.clinical_trial:type_name -> google.fhir.r4.core.Reference
	1,  // 24: google.fhir.r4.core.MedicinalProduct.name:type_name -> google.fhir.r4.core.MedicinalProduct.Name
	14, // 25: google.fhir.r4.core.MedicinalProduct.cross_reference:type_name -> google.fhir.r4.core.Identifier
	2,  // 26: google.fhir.r4.core.MedicinalProduct.manufacturing_business_operation:type_name -> google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation
	3,  // 27: google.fhir.r4.core.MedicinalProduct.special_designation:type_name -> google.fhir.r4.core.MedicinalProduct.SpecialDesignation
	17, // 28: google.fhir.r4.core.MedicinalProduct.Name.id:type_name -> google.fhir.r4.core.String
	13, // 29: google.fhir.r4.core.MedicinalProduct.Name.extension:type_name -> google.fhir.r4.core.Extension
	13, // 30: google.fhir.r4.core.MedicinalProduct.Name.modifier_extension:type_name -> google.fhir.r4.core.Extension
	17, // 31: google.fhir.r4.core.MedicinalProduct.Name.product_name:type_name -> google.fhir.r4.core.String
	4,  // 32: google.fhir.r4.core.MedicinalProduct.Name.name_part:type_name -> google.fhir.r4.core.MedicinalProduct.Name.NamePart
	5,  // 33: google.fhir.r4.core.MedicinalProduct.Name.country_language:type_name -> google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage
	17, // 34: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.id:type_name -> google.fhir.r4.core.String
	13, // 35: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.extension:type_name -> google.fhir.r4.core.Extension
	13, // 36: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	15, // 37: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.operation_type:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 38: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.authorisation_reference_number:type_name -> google.fhir.r4.core.Identifier
	20, // 39: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.effective_date:type_name -> google.fhir.r4.core.DateTime
	15, // 40: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.confidentiality_indicator:type_name -> google.fhir.r4.core.CodeableConcept
	19, // 41: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.manufacturer:type_name -> google.fhir.r4.core.Reference
	19, // 42: google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation.regulator:type_name -> google.fhir.r4.core.Reference
	17, // 43: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.id:type_name -> google.fhir.r4.core.String
	13, // 44: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.extension:type_name -> google.fhir.r4.core.Extension
	13, // 45: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 46: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.identifier:type_name -> google.fhir.r4.core.Identifier
	15, // 47: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.type:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 48: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.intended_use:type_name -> google.fhir.r4.core.CodeableConcept
	6,  // 49: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.indication:type_name -> google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX
	15, // 50: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.status:type_name -> google.fhir.r4.core.CodeableConcept
	20, // 51: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.date:type_name -> google.fhir.r4.core.DateTime
	15, // 52: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.species:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 53: google.fhir.r4.core.MedicinalProduct.Name.NamePart.id:type_name -> google.fhir.r4.core.String
	13, // 54: google.fhir.r4.core.MedicinalProduct.Name.NamePart.extension:type_name -> google.fhir.r4.core.Extension
	13, // 55: google.fhir.r4.core.MedicinalProduct.Name.NamePart.modifier_extension:type_name -> google.fhir.r4.core.Extension
	17, // 56: google.fhir.r4.core.MedicinalProduct.Name.NamePart.part:type_name -> google.fhir.r4.core.String
	16, // 57: google.fhir.r4.core.MedicinalProduct.Name.NamePart.type:type_name -> google.fhir.r4.core.Coding
	17, // 58: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage.id:type_name -> google.fhir.r4.core.String
	13, // 59: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage.extension:type_name -> google.fhir.r4.core.Extension
	13, // 60: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	15, // 61: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage.country:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 62: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage.jurisdiction:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 63: google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage.language:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 64: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	19, // 65: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX.reference:type_name -> google.fhir.r4.core.Reference
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct_ManufacturingBusinessOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct_SpecialDesignation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct_Name_NamePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct_Name_CountryLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProduct_SpecialDesignation_IndicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MedicinalProduct_SpecialDesignation_IndicationX_CodeableConcept)(nil),
		(*MedicinalProduct_SpecialDesignation_IndicationX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_proto_depIdxs = nil
}
