//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/stu3/codes.proto

package codes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AbstractTypeCode_Value int32

const (
	AbstractTypeCode_INVALID_UNINITIALIZED AbstractTypeCode_Value = 0
	AbstractTypeCode_TYPE                  AbstractTypeCode_Value = 1
	AbstractTypeCode_ANY                   AbstractTypeCode_Value = 2
)

// Enum value maps for AbstractTypeCode_Value.
var (
	AbstractTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TYPE",
		2: "ANY",
	}
	AbstractTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TYPE":                  1,
		"ANY":                   2,
	}
)

func (x AbstractTypeCode_Value) Enum() *AbstractTypeCode_Value {
	p := new(AbstractTypeCode_Value)
	*p = x
	return p
}

func (x AbstractTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbstractTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[0].Descriptor()
}

func (AbstractTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[0]
}

func (x AbstractTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbstractTypeCode_Value.Descriptor instead.
func (AbstractTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{0, 0}
}

type AggregationModeCode_Value int32

const (
	AggregationModeCode_INVALID_UNINITIALIZED AggregationModeCode_Value = 0
	AggregationModeCode_CONTAINED             AggregationModeCode_Value = 1
	AggregationModeCode_REFERENCED            AggregationModeCode_Value = 2
	AggregationModeCode_BUNDLED               AggregationModeCode_Value = 3
)

// Enum value maps for AggregationModeCode_Value.
var (
	AggregationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONTAINED",
		2: "REFERENCED",
		3: "BUNDLED",
	}
	AggregationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONTAINED":             1,
		"REFERENCED":            2,
		"BUNDLED":               3,
	}
)

func (x AggregationModeCode_Value) Enum() *AggregationModeCode_Value {
	p := new(AggregationModeCode_Value)
	*p = x
	return p
}

func (x AggregationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[1].Descriptor()
}

func (AggregationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[1]
}

func (x AggregationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationModeCode_Value.Descriptor instead.
func (AggregationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{1, 0}
}

type BindingStrengthCode_Value int32

const (
	BindingStrengthCode_INVALID_UNINITIALIZED BindingStrengthCode_Value = 0
	BindingStrengthCode_REQUIRED              BindingStrengthCode_Value = 1
	BindingStrengthCode_EXTENSIBLE            BindingStrengthCode_Value = 2
	BindingStrengthCode_PREFERRED             BindingStrengthCode_Value = 3
	BindingStrengthCode_EXAMPLE               BindingStrengthCode_Value = 4
)

// Enum value maps for BindingStrengthCode_Value.
var (
	BindingStrengthCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "EXTENSIBLE",
		3: "PREFERRED",
		4: "EXAMPLE",
	}
	BindingStrengthCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"EXTENSIBLE":            2,
		"PREFERRED":             3,
		"EXAMPLE":               4,
	}
)

func (x BindingStrengthCode_Value) Enum() *BindingStrengthCode_Value {
	p := new(BindingStrengthCode_Value)
	*p = x
	return p
}

func (x BindingStrengthCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BindingStrengthCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[2].Descriptor()
}

func (BindingStrengthCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[2]
}

func (x BindingStrengthCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BindingStrengthCode_Value.Descriptor instead.
func (BindingStrengthCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{2, 0}
}

type ConstraintSeverityCode_Value int32

const (
	ConstraintSeverityCode_INVALID_UNINITIALIZED ConstraintSeverityCode_Value = 0
	ConstraintSeverityCode_ERROR                 ConstraintSeverityCode_Value = 1
	ConstraintSeverityCode_WARNING               ConstraintSeverityCode_Value = 2
)

// Enum value maps for ConstraintSeverityCode_Value.
var (
	ConstraintSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ERROR",
		2: "WARNING",
	}
	ConstraintSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ERROR":                 1,
		"WARNING":               2,
	}
)

func (x ConstraintSeverityCode_Value) Enum() *ConstraintSeverityCode_Value {
	p := new(ConstraintSeverityCode_Value)
	*p = x
	return p
}

func (x ConstraintSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[3].Descriptor()
}

func (ConstraintSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[3]
}

func (x ConstraintSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintSeverityCode_Value.Descriptor instead.
func (ConstraintSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{3, 0}
}

type SlicingRulesCode_Value int32

const (
	SlicingRulesCode_INVALID_UNINITIALIZED SlicingRulesCode_Value = 0
	SlicingRulesCode_CLOSED                SlicingRulesCode_Value = 1
	SlicingRulesCode_OPEN                  SlicingRulesCode_Value = 2
	SlicingRulesCode_OPEN_AT_END           SlicingRulesCode_Value = 3
)

// Enum value maps for SlicingRulesCode_Value.
var (
	SlicingRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLOSED",
		2: "OPEN",
		3: "OPEN_AT_END",
	}
	SlicingRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLOSED":                1,
		"OPEN":                  2,
		"OPEN_AT_END":           3,
	}
)

func (x SlicingRulesCode_Value) Enum() *SlicingRulesCode_Value {
	p := new(SlicingRulesCode_Value)
	*p = x
	return p
}

func (x SlicingRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlicingRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[4].Descriptor()
}

func (SlicingRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[4]
}

func (x SlicingRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlicingRulesCode_Value.Descriptor instead.
func (SlicingRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{4, 0}
}

type DiscriminatorTypeCode_Value int32

const (
	DiscriminatorTypeCode_INVALID_UNINITIALIZED DiscriminatorTypeCode_Value = 0
	DiscriminatorTypeCode_VALUE                 DiscriminatorTypeCode_Value = 1
	DiscriminatorTypeCode_EXISTS                DiscriminatorTypeCode_Value = 2
	DiscriminatorTypeCode_PATTERN               DiscriminatorTypeCode_Value = 3
	DiscriminatorTypeCode_TYPE                  DiscriminatorTypeCode_Value = 4
	DiscriminatorTypeCode_PROFILE               DiscriminatorTypeCode_Value = 5
)

// Enum value maps for DiscriminatorTypeCode_Value.
var (
	DiscriminatorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VALUE",
		2: "EXISTS",
		3: "PATTERN",
		4: "TYPE",
		5: "PROFILE",
	}
	DiscriminatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VALUE":                 1,
		"EXISTS":                2,
		"PATTERN":               3,
		"TYPE":                  4,
		"PROFILE":               5,
	}
)

func (x DiscriminatorTypeCode_Value) Enum() *DiscriminatorTypeCode_Value {
	p := new(DiscriminatorTypeCode_Value)
	*p = x
	return p
}

func (x DiscriminatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscriminatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[5].Descriptor()
}

func (DiscriminatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[5]
}

func (x DiscriminatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscriminatorTypeCode_Value.Descriptor instead.
func (DiscriminatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{5, 0}
}

type PropertyRepresentationCode_Value int32

const (
	PropertyRepresentationCode_INVALID_UNINITIALIZED PropertyRepresentationCode_Value = 0
	PropertyRepresentationCode_XML_ATTR              PropertyRepresentationCode_Value = 1
	PropertyRepresentationCode_XML_TEXT              PropertyRepresentationCode_Value = 2
	PropertyRepresentationCode_TYPE_ATTR             PropertyRepresentationCode_Value = 3
	PropertyRepresentationCode_CDA_TEXT              PropertyRepresentationCode_Value = 4
	PropertyRepresentationCode_XHTML                 PropertyRepresentationCode_Value = 5
)

// Enum value maps for PropertyRepresentationCode_Value.
var (
	PropertyRepresentationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "XML_ATTR",
		2: "XML_TEXT",
		3: "TYPE_ATTR",
		4: "CDA_TEXT",
		5: "XHTML",
	}
	PropertyRepresentationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"XML_ATTR":              1,
		"XML_TEXT":              2,
		"TYPE_ATTR":             3,
		"CDA_TEXT":              4,
		"XHTML":                 5,
	}
)

func (x PropertyRepresentationCode_Value) Enum() *PropertyRepresentationCode_Value {
	p := new(PropertyRepresentationCode_Value)
	*p = x
	return p
}

func (x PropertyRepresentationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyRepresentationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[6].Descriptor()
}

func (PropertyRepresentationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[6]
}

func (x PropertyRepresentationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyRepresentationCode_Value.Descriptor instead.
func (PropertyRepresentationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{6, 0}
}

type ReferenceVersionRulesCode_Value int32

const (
	ReferenceVersionRulesCode_INVALID_UNINITIALIZED ReferenceVersionRulesCode_Value = 0
	ReferenceVersionRulesCode_EITHER                ReferenceVersionRulesCode_Value = 1
	ReferenceVersionRulesCode_INDEPENDENT           ReferenceVersionRulesCode_Value = 2
	ReferenceVersionRulesCode_SPECIFIC              ReferenceVersionRulesCode_Value = 3
)

// Enum value maps for ReferenceVersionRulesCode_Value.
var (
	ReferenceVersionRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EITHER",
		2: "INDEPENDENT",
		3: "SPECIFIC",
	}
	ReferenceVersionRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EITHER":                1,
		"INDEPENDENT":           2,
		"SPECIFIC":              3,
	}
)

func (x ReferenceVersionRulesCode_Value) Enum() *ReferenceVersionRulesCode_Value {
	p := new(ReferenceVersionRulesCode_Value)
	*p = x
	return p
}

func (x ReferenceVersionRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceVersionRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[7].Descriptor()
}

func (ReferenceVersionRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[7]
}

func (x ReferenceVersionRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceVersionRulesCode_Value.Descriptor instead.
func (ReferenceVersionRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{7, 0}
}

type AccountStatusCode_Value int32

const (
	AccountStatusCode_INVALID_UNINITIALIZED AccountStatusCode_Value = 0
	AccountStatusCode_ACTIVE                AccountStatusCode_Value = 1
	AccountStatusCode_INACTIVE              AccountStatusCode_Value = 2
	AccountStatusCode_ENTERED_IN_ERROR      AccountStatusCode_Value = 3
)

// Enum value maps for AccountStatusCode_Value.
var (
	AccountStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	AccountStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x AccountStatusCode_Value) Enum() *AccountStatusCode_Value {
	p := new(AccountStatusCode_Value)
	*p = x
	return p
}

func (x AccountStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[8].Descriptor()
}

func (AccountStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[8]
}

func (x AccountStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatusCode_Value.Descriptor instead.
func (AccountStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{8, 0}
}

type ActionCardinalityBehaviorCode_Value int32

const (
	ActionCardinalityBehaviorCode_INVALID_UNINITIALIZED ActionCardinalityBehaviorCode_Value = 0
	ActionCardinalityBehaviorCode_SINGLE                ActionCardinalityBehaviorCode_Value = 1
	ActionCardinalityBehaviorCode_MULTIPLE              ActionCardinalityBehaviorCode_Value = 2
)

// Enum value maps for ActionCardinalityBehaviorCode_Value.
var (
	ActionCardinalityBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SINGLE",
		2: "MULTIPLE",
	}
	ActionCardinalityBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SINGLE":                1,
		"MULTIPLE":              2,
	}
)

func (x ActionCardinalityBehaviorCode_Value) Enum() *ActionCardinalityBehaviorCode_Value {
	p := new(ActionCardinalityBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionCardinalityBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionCardinalityBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[9].Descriptor()
}

func (ActionCardinalityBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[9]
}

func (x ActionCardinalityBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionCardinalityBehaviorCode_Value.Descriptor instead.
func (ActionCardinalityBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{9, 0}
}

type ActionConditionKindCode_Value int32

const (
	ActionConditionKindCode_INVALID_UNINITIALIZED ActionConditionKindCode_Value = 0
	ActionConditionKindCode_APPLICABILITY         ActionConditionKindCode_Value = 1
	ActionConditionKindCode_START                 ActionConditionKindCode_Value = 2
	ActionConditionKindCode_STOP                  ActionConditionKindCode_Value = 3
)

// Enum value maps for ActionConditionKindCode_Value.
var (
	ActionConditionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "APPLICABILITY",
		2: "START",
		3: "STOP",
	}
	ActionConditionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"APPLICABILITY":         1,
		"START":                 2,
		"STOP":                  3,
	}
)

func (x ActionConditionKindCode_Value) Enum() *ActionConditionKindCode_Value {
	p := new(ActionConditionKindCode_Value)
	*p = x
	return p
}

func (x ActionConditionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionConditionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[10].Descriptor()
}

func (ActionConditionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[10]
}

func (x ActionConditionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionConditionKindCode_Value.Descriptor instead.
func (ActionConditionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{10, 0}
}

type ActionGroupingBehaviorCode_Value int32

const (
	ActionGroupingBehaviorCode_INVALID_UNINITIALIZED ActionGroupingBehaviorCode_Value = 0
	ActionGroupingBehaviorCode_VISUAL_GROUP          ActionGroupingBehaviorCode_Value = 1
	ActionGroupingBehaviorCode_LOGICAL_GROUP         ActionGroupingBehaviorCode_Value = 2
	ActionGroupingBehaviorCode_SENTENCE_GROUP        ActionGroupingBehaviorCode_Value = 3
)

// Enum value maps for ActionGroupingBehaviorCode_Value.
var (
	ActionGroupingBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VISUAL_GROUP",
		2: "LOGICAL_GROUP",
		3: "SENTENCE_GROUP",
	}
	ActionGroupingBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VISUAL_GROUP":          1,
		"LOGICAL_GROUP":         2,
		"SENTENCE_GROUP":        3,
	}
)

func (x ActionGroupingBehaviorCode_Value) Enum() *ActionGroupingBehaviorCode_Value {
	p := new(ActionGroupingBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionGroupingBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionGroupingBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[11].Descriptor()
}

func (ActionGroupingBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[11]
}

func (x ActionGroupingBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionGroupingBehaviorCode_Value.Descriptor instead.
func (ActionGroupingBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{11, 0}
}

type ActionListCode_Value int32

const (
	ActionListCode_INVALID_UNINITIALIZED ActionListCode_Value = 0
	ActionListCode_CANCEL                ActionListCode_Value = 1
	ActionListCode_POLL                  ActionListCode_Value = 2
	ActionListCode_REPROCESS             ActionListCode_Value = 3
	ActionListCode_STATUS                ActionListCode_Value = 4
)

// Enum value maps for ActionListCode_Value.
var (
	ActionListCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CANCEL",
		2: "POLL",
		3: "REPROCESS",
		4: "STATUS",
	}
	ActionListCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CANCEL":                1,
		"POLL":                  2,
		"REPROCESS":             3,
		"STATUS":                4,
	}
)

func (x ActionListCode_Value) Enum() *ActionListCode_Value {
	p := new(ActionListCode_Value)
	*p = x
	return p
}

func (x ActionListCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionListCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[12].Descriptor()
}

func (ActionListCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[12]
}

func (x ActionListCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionListCode_Value.Descriptor instead.
func (ActionListCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{12, 0}
}

type ActionParticipantTypeCode_Value int32

const (
	ActionParticipantTypeCode_INVALID_UNINITIALIZED ActionParticipantTypeCode_Value = 0
	ActionParticipantTypeCode_PATIENT               ActionParticipantTypeCode_Value = 1
	ActionParticipantTypeCode_PRACTITIONER          ActionParticipantTypeCode_Value = 2
	ActionParticipantTypeCode_RELATED_PERSON        ActionParticipantTypeCode_Value = 3
)

// Enum value maps for ActionParticipantTypeCode_Value.
var (
	ActionParticipantTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PATIENT",
		2: "PRACTITIONER",
		3: "RELATED_PERSON",
	}
	ActionParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PATIENT":               1,
		"PRACTITIONER":          2,
		"RELATED_PERSON":        3,
	}
)

func (x ActionParticipantTypeCode_Value) Enum() *ActionParticipantTypeCode_Value {
	p := new(ActionParticipantTypeCode_Value)
	*p = x
	return p
}

func (x ActionParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[13].Descriptor()
}

func (ActionParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[13]
}

func (x ActionParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionParticipantTypeCode_Value.Descriptor instead.
func (ActionParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{13, 0}
}

type ActionPrecheckBehaviorCode_Value int32

const (
	ActionPrecheckBehaviorCode_INVALID_UNINITIALIZED ActionPrecheckBehaviorCode_Value = 0
	ActionPrecheckBehaviorCode_YES                   ActionPrecheckBehaviorCode_Value = 1
	ActionPrecheckBehaviorCode_NO                    ActionPrecheckBehaviorCode_Value = 2
)

// Enum value maps for ActionPrecheckBehaviorCode_Value.
var (
	ActionPrecheckBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "YES",
		2: "NO",
	}
	ActionPrecheckBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"YES":                   1,
		"NO":                    2,
	}
)

func (x ActionPrecheckBehaviorCode_Value) Enum() *ActionPrecheckBehaviorCode_Value {
	p := new(ActionPrecheckBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionPrecheckBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionPrecheckBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[14].Descriptor()
}

func (ActionPrecheckBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[14]
}

func (x ActionPrecheckBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionPrecheckBehaviorCode_Value.Descriptor instead.
func (ActionPrecheckBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{14, 0}
}

type ActionRelationshipTypeCode_Value int32

const (
	ActionRelationshipTypeCode_INVALID_UNINITIALIZED ActionRelationshipTypeCode_Value = 0
	ActionRelationshipTypeCode_BEFORE_START          ActionRelationshipTypeCode_Value = 1
	ActionRelationshipTypeCode_BEFORE                ActionRelationshipTypeCode_Value = 2
	ActionRelationshipTypeCode_BEFORE_END            ActionRelationshipTypeCode_Value = 3
	ActionRelationshipTypeCode_CONCURRENT_WITH_START ActionRelationshipTypeCode_Value = 4
	ActionRelationshipTypeCode_CONCURRENT            ActionRelationshipTypeCode_Value = 5
	ActionRelationshipTypeCode_CONCURRENT_WITH_END   ActionRelationshipTypeCode_Value = 6
	ActionRelationshipTypeCode_AFTER_START           ActionRelationshipTypeCode_Value = 7
	ActionRelationshipTypeCode_AFTER                 ActionRelationshipTypeCode_Value = 8
	ActionRelationshipTypeCode_AFTER_END             ActionRelationshipTypeCode_Value = 9
)

// Enum value maps for ActionRelationshipTypeCode_Value.
var (
	ActionRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BEFORE_START",
		2: "BEFORE",
		3: "BEFORE_END",
		4: "CONCURRENT_WITH_START",
		5: "CONCURRENT",
		6: "CONCURRENT_WITH_END",
		7: "AFTER_START",
		8: "AFTER",
		9: "AFTER_END",
	}
	ActionRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BEFORE_START":          1,
		"BEFORE":                2,
		"BEFORE_END":            3,
		"CONCURRENT_WITH_START": 4,
		"CONCURRENT":            5,
		"CONCURRENT_WITH_END":   6,
		"AFTER_START":           7,
		"AFTER":                 8,
		"AFTER_END":             9,
	}
)

func (x ActionRelationshipTypeCode_Value) Enum() *ActionRelationshipTypeCode_Value {
	p := new(ActionRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x ActionRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[15].Descriptor()
}

func (ActionRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[15]
}

func (x ActionRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRelationshipTypeCode_Value.Descriptor instead.
func (ActionRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{15, 0}
}

type ActionRequiredBehaviorCode_Value int32

const (
	ActionRequiredBehaviorCode_INVALID_UNINITIALIZED  ActionRequiredBehaviorCode_Value = 0
	ActionRequiredBehaviorCode_MUST                   ActionRequiredBehaviorCode_Value = 1
	ActionRequiredBehaviorCode_COULD                  ActionRequiredBehaviorCode_Value = 2
	ActionRequiredBehaviorCode_MUST_UNLESS_DOCUMENTED ActionRequiredBehaviorCode_Value = 3
)

// Enum value maps for ActionRequiredBehaviorCode_Value.
var (
	ActionRequiredBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MUST",
		2: "COULD",
		3: "MUST_UNLESS_DOCUMENTED",
	}
	ActionRequiredBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"MUST":                   1,
		"COULD":                  2,
		"MUST_UNLESS_DOCUMENTED": 3,
	}
)

func (x ActionRequiredBehaviorCode_Value) Enum() *ActionRequiredBehaviorCode_Value {
	p := new(ActionRequiredBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionRequiredBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRequiredBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[16].Descriptor()
}

func (ActionRequiredBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[16]
}

func (x ActionRequiredBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRequiredBehaviorCode_Value.Descriptor instead.
func (ActionRequiredBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{16, 0}
}

type ActionSelectionBehaviorCode_Value int32

const (
	ActionSelectionBehaviorCode_INVALID_UNINITIALIZED ActionSelectionBehaviorCode_Value = 0
	ActionSelectionBehaviorCode_ANY                   ActionSelectionBehaviorCode_Value = 1
	ActionSelectionBehaviorCode_ALL                   ActionSelectionBehaviorCode_Value = 2
	ActionSelectionBehaviorCode_ALL_OR_NONE           ActionSelectionBehaviorCode_Value = 3
	ActionSelectionBehaviorCode_EXACTLY_ONE           ActionSelectionBehaviorCode_Value = 4
	ActionSelectionBehaviorCode_AT_MOST_ONE           ActionSelectionBehaviorCode_Value = 5
	ActionSelectionBehaviorCode_ONE_OR_MORE           ActionSelectionBehaviorCode_Value = 6
)

// Enum value maps for ActionSelectionBehaviorCode_Value.
var (
	ActionSelectionBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ANY",
		2: "ALL",
		3: "ALL_OR_NONE",
		4: "EXACTLY_ONE",
		5: "AT_MOST_ONE",
		6: "ONE_OR_MORE",
	}
	ActionSelectionBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ANY":                   1,
		"ALL":                   2,
		"ALL_OR_NONE":           3,
		"EXACTLY_ONE":           4,
		"AT_MOST_ONE":           5,
		"ONE_OR_MORE":           6,
	}
)

func (x ActionSelectionBehaviorCode_Value) Enum() *ActionSelectionBehaviorCode_Value {
	p := new(ActionSelectionBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionSelectionBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionSelectionBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[17].Descriptor()
}

func (ActionSelectionBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[17]
}

func (x ActionSelectionBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionSelectionBehaviorCode_Value.Descriptor instead.
func (ActionSelectionBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{17, 0}
}

type ActionTypeCode_Value int32

const (
	ActionTypeCode_INVALID_UNINITIALIZED ActionTypeCode_Value = 0
	ActionTypeCode_CREATE                ActionTypeCode_Value = 1
	ActionTypeCode_UPDATE                ActionTypeCode_Value = 2
	ActionTypeCode_REMOVE                ActionTypeCode_Value = 3
	ActionTypeCode_FIRE_EVENT            ActionTypeCode_Value = 4
)

// Enum value maps for ActionTypeCode_Value.
var (
	ActionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CREATE",
		2: "UPDATE",
		3: "REMOVE",
		4: "FIRE_EVENT",
	}
	ActionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CREATE":                1,
		"UPDATE":                2,
		"REMOVE":                3,
		"FIRE_EVENT":            4,
	}
)

func (x ActionTypeCode_Value) Enum() *ActionTypeCode_Value {
	p := new(ActionTypeCode_Value)
	*p = x
	return p
}

func (x ActionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[18].Descriptor()
}

func (ActionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[18]
}

func (x ActionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionTypeCode_Value.Descriptor instead.
func (ActionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{18, 0}
}

type ActivityDefinitionCategoryCode_Value int32

const (
	ActivityDefinitionCategoryCode_INVALID_UNINITIALIZED ActivityDefinitionCategoryCode_Value = 0
	ActivityDefinitionCategoryCode_TREATMENT             ActivityDefinitionCategoryCode_Value = 1
	ActivityDefinitionCategoryCode_EDUCATION             ActivityDefinitionCategoryCode_Value = 2
	ActivityDefinitionCategoryCode_ASSESSMENT            ActivityDefinitionCategoryCode_Value = 3
)

// Enum value maps for ActivityDefinitionCategoryCode_Value.
var (
	ActivityDefinitionCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TREATMENT",
		2: "EDUCATION",
		3: "ASSESSMENT",
	}
	ActivityDefinitionCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TREATMENT":             1,
		"EDUCATION":             2,
		"ASSESSMENT":            3,
	}
)

func (x ActivityDefinitionCategoryCode_Value) Enum() *ActivityDefinitionCategoryCode_Value {
	p := new(ActivityDefinitionCategoryCode_Value)
	*p = x
	return p
}

func (x ActivityDefinitionCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityDefinitionCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[19].Descriptor()
}

func (ActivityDefinitionCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[19]
}

func (x ActivityDefinitionCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityDefinitionCategoryCode_Value.Descriptor instead.
func (ActivityDefinitionCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{19, 0}
}

type AdministrativeGenderCode_Value int32

const (
	AdministrativeGenderCode_INVALID_UNINITIALIZED AdministrativeGenderCode_Value = 0
	AdministrativeGenderCode_MALE                  AdministrativeGenderCode_Value = 1
	AdministrativeGenderCode_FEMALE                AdministrativeGenderCode_Value = 2
	AdministrativeGenderCode_OTHER                 AdministrativeGenderCode_Value = 3
	AdministrativeGenderCode_UNKNOWN               AdministrativeGenderCode_Value = 4
)

// Enum value maps for AdministrativeGenderCode_Value.
var (
	AdministrativeGenderCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MALE",
		2: "FEMALE",
		3: "OTHER",
		4: "UNKNOWN",
	}
	AdministrativeGenderCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MALE":                  1,
		"FEMALE":                2,
		"OTHER":                 3,
		"UNKNOWN":               4,
	}
)

func (x AdministrativeGenderCode_Value) Enum() *AdministrativeGenderCode_Value {
	p := new(AdministrativeGenderCode_Value)
	*p = x
	return p
}

func (x AdministrativeGenderCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministrativeGenderCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[20].Descriptor()
}

func (AdministrativeGenderCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[20]
}

func (x AdministrativeGenderCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministrativeGenderCode_Value.Descriptor instead.
func (AdministrativeGenderCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{20, 0}
}

type AdverseEventCategoryCode_Value int32

const (
	AdverseEventCategoryCode_INVALID_UNINITIALIZED AdverseEventCategoryCode_Value = 0
	AdverseEventCategoryCode_AE                    AdverseEventCategoryCode_Value = 1
	AdverseEventCategoryCode_PAE                   AdverseEventCategoryCode_Value = 2
)

// Enum value maps for AdverseEventCategoryCode_Value.
var (
	AdverseEventCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AE",
		2: "PAE",
	}
	AdverseEventCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AE":                    1,
		"PAE":                   2,
	}
)

func (x AdverseEventCategoryCode_Value) Enum() *AdverseEventCategoryCode_Value {
	p := new(AdverseEventCategoryCode_Value)
	*p = x
	return p
}

func (x AdverseEventCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[21].Descriptor()
}

func (AdverseEventCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[21]
}

func (x AdverseEventCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventCategoryCode_Value.Descriptor instead.
func (AdverseEventCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{21, 0}
}

type AdverseEventCausalityAssessmentCode_Value int32

const (
	AdverseEventCausalityAssessmentCode_INVALID_UNINITIALIZED AdverseEventCausalityAssessmentCode_Value = 0
	AdverseEventCausalityAssessmentCode_ASSESS1               AdverseEventCausalityAssessmentCode_Value = 1
	AdverseEventCausalityAssessmentCode_ASSESS2               AdverseEventCausalityAssessmentCode_Value = 2
)

// Enum value maps for AdverseEventCausalityAssessmentCode_Value.
var (
	AdverseEventCausalityAssessmentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ASSESS1",
		2: "ASSESS2",
	}
	AdverseEventCausalityAssessmentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ASSESS1":               1,
		"ASSESS2":               2,
	}
)

func (x AdverseEventCausalityAssessmentCode_Value) Enum() *AdverseEventCausalityAssessmentCode_Value {
	p := new(AdverseEventCausalityAssessmentCode_Value)
	*p = x
	return p
}

func (x AdverseEventCausalityAssessmentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventCausalityAssessmentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[22].Descriptor()
}

func (AdverseEventCausalityAssessmentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[22]
}

func (x AdverseEventCausalityAssessmentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventCausalityAssessmentCode_Value.Descriptor instead.
func (AdverseEventCausalityAssessmentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{22, 0}
}

type AdverseEventCausalityCode_Value int32

const (
	AdverseEventCausalityCode_INVALID_UNINITIALIZED AdverseEventCausalityCode_Value = 0
	AdverseEventCausalityCode_CAUSALITY1            AdverseEventCausalityCode_Value = 1
	AdverseEventCausalityCode_CAUSALITY2            AdverseEventCausalityCode_Value = 2
)

// Enum value maps for AdverseEventCausalityCode_Value.
var (
	AdverseEventCausalityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CAUSALITY1",
		2: "CAUSALITY2",
	}
	AdverseEventCausalityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CAUSALITY1":            1,
		"CAUSALITY2":            2,
	}
)

func (x AdverseEventCausalityCode_Value) Enum() *AdverseEventCausalityCode_Value {
	p := new(AdverseEventCausalityCode_Value)
	*p = x
	return p
}

func (x AdverseEventCausalityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventCausalityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[23].Descriptor()
}

func (AdverseEventCausalityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[23]
}

func (x AdverseEventCausalityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventCausalityCode_Value.Descriptor instead.
func (AdverseEventCausalityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{23, 0}
}

type AdverseEventCausalityMethodCode_Value int32

const (
	AdverseEventCausalityMethodCode_INVALID_UNINITIALIZED AdverseEventCausalityMethodCode_Value = 0
	AdverseEventCausalityMethodCode_METHOD1               AdverseEventCausalityMethodCode_Value = 1
	AdverseEventCausalityMethodCode_METHOD2               AdverseEventCausalityMethodCode_Value = 2
)

// Enum value maps for AdverseEventCausalityMethodCode_Value.
var (
	AdverseEventCausalityMethodCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "METHOD1",
		2: "METHOD2",
	}
	AdverseEventCausalityMethodCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"METHOD1":               1,
		"METHOD2":               2,
	}
)

func (x AdverseEventCausalityMethodCode_Value) Enum() *AdverseEventCausalityMethodCode_Value {
	p := new(AdverseEventCausalityMethodCode_Value)
	*p = x
	return p
}

func (x AdverseEventCausalityMethodCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventCausalityMethodCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[24].Descriptor()
}

func (AdverseEventCausalityMethodCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[24]
}

func (x AdverseEventCausalityMethodCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventCausalityMethodCode_Value.Descriptor instead.
func (AdverseEventCausalityMethodCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{24, 0}
}

type AdverseEventCausalityResultCode_Value int32

const (
	AdverseEventCausalityResultCode_INVALID_UNINITIALIZED AdverseEventCausalityResultCode_Value = 0
	AdverseEventCausalityResultCode_RESULT1               AdverseEventCausalityResultCode_Value = 1
	AdverseEventCausalityResultCode_RESULT2               AdverseEventCausalityResultCode_Value = 2
)

// Enum value maps for AdverseEventCausalityResultCode_Value.
var (
	AdverseEventCausalityResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESULT1",
		2: "RESULT2",
	}
	AdverseEventCausalityResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESULT1":               1,
		"RESULT2":               2,
	}
)

func (x AdverseEventCausalityResultCode_Value) Enum() *AdverseEventCausalityResultCode_Value {
	p := new(AdverseEventCausalityResultCode_Value)
	*p = x
	return p
}

func (x AdverseEventCausalityResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventCausalityResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[25].Descriptor()
}

func (AdverseEventCausalityResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[25]
}

func (x AdverseEventCausalityResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventCausalityResultCode_Value.Descriptor instead.
func (AdverseEventCausalityResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{25, 0}
}

type AdverseEventOutcomeCode_Value int32

const (
	AdverseEventOutcomeCode_INVALID_UNINITIALIZED AdverseEventOutcomeCode_Value = 0
	AdverseEventOutcomeCode_RESOLVED              AdverseEventOutcomeCode_Value = 1
	AdverseEventOutcomeCode_RECOVERING            AdverseEventOutcomeCode_Value = 2
	AdverseEventOutcomeCode_ONGOING               AdverseEventOutcomeCode_Value = 3
	AdverseEventOutcomeCode_RESOLVEDWITHSEQUELAE  AdverseEventOutcomeCode_Value = 4
	AdverseEventOutcomeCode_FATAL                 AdverseEventOutcomeCode_Value = 5
	AdverseEventOutcomeCode_UNKNOWN               AdverseEventOutcomeCode_Value = 6
)

// Enum value maps for AdverseEventOutcomeCode_Value.
var (
	AdverseEventOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESOLVED",
		2: "RECOVERING",
		3: "ONGOING",
		4: "RESOLVEDWITHSEQUELAE",
		5: "FATAL",
		6: "UNKNOWN",
	}
	AdverseEventOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESOLVED":              1,
		"RECOVERING":            2,
		"ONGOING":               3,
		"RESOLVEDWITHSEQUELAE":  4,
		"FATAL":                 5,
		"UNKNOWN":               6,
	}
)

func (x AdverseEventOutcomeCode_Value) Enum() *AdverseEventOutcomeCode_Value {
	p := new(AdverseEventOutcomeCode_Value)
	*p = x
	return p
}

func (x AdverseEventOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[26].Descriptor()
}

func (AdverseEventOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[26]
}

func (x AdverseEventOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventOutcomeCode_Value.Descriptor instead.
func (AdverseEventOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{26, 0}
}

type AdverseEventSeriousnessCode_Value int32

const (
	AdverseEventSeriousnessCode_INVALID_UNINITIALIZED AdverseEventSeriousnessCode_Value = 0
	AdverseEventSeriousnessCode_MILD                  AdverseEventSeriousnessCode_Value = 1
	AdverseEventSeriousnessCode_MODERATE              AdverseEventSeriousnessCode_Value = 2
	AdverseEventSeriousnessCode_SEVERE                AdverseEventSeriousnessCode_Value = 3
)

// Enum value maps for AdverseEventSeriousnessCode_Value.
var (
	AdverseEventSeriousnessCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MILD",
		2: "MODERATE",
		3: "SEVERE",
	}
	AdverseEventSeriousnessCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MILD":                  1,
		"MODERATE":              2,
		"SEVERE":                3,
	}
)

func (x AdverseEventSeriousnessCode_Value) Enum() *AdverseEventSeriousnessCode_Value {
	p := new(AdverseEventSeriousnessCode_Value)
	*p = x
	return p
}

func (x AdverseEventSeriousnessCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventSeriousnessCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[27].Descriptor()
}

func (AdverseEventSeriousnessCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[27]
}

func (x AdverseEventSeriousnessCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventSeriousnessCode_Value.Descriptor instead.
func (AdverseEventSeriousnessCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{27, 0}
}

type AllergyIntoleranceSubstanceExposureRiskCode_Value int32

const (
	AllergyIntoleranceSubstanceExposureRiskCode_INVALID_UNINITIALIZED  AllergyIntoleranceSubstanceExposureRiskCode_Value = 0
	AllergyIntoleranceSubstanceExposureRiskCode_KNOWN_REACTION_RISK    AllergyIntoleranceSubstanceExposureRiskCode_Value = 1
	AllergyIntoleranceSubstanceExposureRiskCode_NO_KNOWN_REACTION_RISK AllergyIntoleranceSubstanceExposureRiskCode_Value = 2
)

// Enum value maps for AllergyIntoleranceSubstanceExposureRiskCode_Value.
var (
	AllergyIntoleranceSubstanceExposureRiskCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "KNOWN_REACTION_RISK",
		2: "NO_KNOWN_REACTION_RISK",
	}
	AllergyIntoleranceSubstanceExposureRiskCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"KNOWN_REACTION_RISK":    1,
		"NO_KNOWN_REACTION_RISK": 2,
	}
)

func (x AllergyIntoleranceSubstanceExposureRiskCode_Value) Enum() *AllergyIntoleranceSubstanceExposureRiskCode_Value {
	p := new(AllergyIntoleranceSubstanceExposureRiskCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceSubstanceExposureRiskCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceSubstanceExposureRiskCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[28].Descriptor()
}

func (AllergyIntoleranceSubstanceExposureRiskCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[28]
}

func (x AllergyIntoleranceSubstanceExposureRiskCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceSubstanceExposureRiskCode_Value.Descriptor instead.
func (AllergyIntoleranceSubstanceExposureRiskCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{28, 0}
}

type AllergyIntoleranceClinicalStatusCode_Value int32

const (
	AllergyIntoleranceClinicalStatusCode_INVALID_UNINITIALIZED AllergyIntoleranceClinicalStatusCode_Value = 0
	AllergyIntoleranceClinicalStatusCode_ACTIVE                AllergyIntoleranceClinicalStatusCode_Value = 1
	AllergyIntoleranceClinicalStatusCode_INACTIVE              AllergyIntoleranceClinicalStatusCode_Value = 2
	AllergyIntoleranceClinicalStatusCode_RESOLVED              AllergyIntoleranceClinicalStatusCode_Value = 3
)

// Enum value maps for AllergyIntoleranceClinicalStatusCode_Value.
var (
	AllergyIntoleranceClinicalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "RESOLVED",
	}
	AllergyIntoleranceClinicalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"RESOLVED":              3,
	}
)

func (x AllergyIntoleranceClinicalStatusCode_Value) Enum() *AllergyIntoleranceClinicalStatusCode_Value {
	p := new(AllergyIntoleranceClinicalStatusCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceClinicalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceClinicalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[29].Descriptor()
}

func (AllergyIntoleranceClinicalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[29]
}

func (x AllergyIntoleranceClinicalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceClinicalStatusCode_Value.Descriptor instead.
func (AllergyIntoleranceClinicalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{29, 0}
}

type AllergyIntoleranceCategoryCode_Value int32

const (
	AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED AllergyIntoleranceCategoryCode_Value = 0
	AllergyIntoleranceCategoryCode_FOOD                  AllergyIntoleranceCategoryCode_Value = 1
	AllergyIntoleranceCategoryCode_MEDICATION            AllergyIntoleranceCategoryCode_Value = 2
	AllergyIntoleranceCategoryCode_ENVIRONMENT           AllergyIntoleranceCategoryCode_Value = 3
	AllergyIntoleranceCategoryCode_BIOLOGIC              AllergyIntoleranceCategoryCode_Value = 4
)

// Enum value maps for AllergyIntoleranceCategoryCode_Value.
var (
	AllergyIntoleranceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FOOD",
		2: "MEDICATION",
		3: "ENVIRONMENT",
		4: "BIOLOGIC",
	}
	AllergyIntoleranceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FOOD":                  1,
		"MEDICATION":            2,
		"ENVIRONMENT":           3,
		"BIOLOGIC":              4,
	}
)

func (x AllergyIntoleranceCategoryCode_Value) Enum() *AllergyIntoleranceCategoryCode_Value {
	p := new(AllergyIntoleranceCategoryCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[30].Descriptor()
}

func (AllergyIntoleranceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[30]
}

func (x AllergyIntoleranceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode_Value.Descriptor instead.
func (AllergyIntoleranceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{30, 0}
}

type AllergyIntoleranceCriticalityCode_Value int32

const (
	AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED AllergyIntoleranceCriticalityCode_Value = 0
	AllergyIntoleranceCriticalityCode_LOW                   AllergyIntoleranceCriticalityCode_Value = 1
	AllergyIntoleranceCriticalityCode_HIGH                  AllergyIntoleranceCriticalityCode_Value = 2
	AllergyIntoleranceCriticalityCode_UNABLE_TO_ASSESS      AllergyIntoleranceCriticalityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceCriticalityCode_Value.
var (
	AllergyIntoleranceCriticalityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LOW",
		2: "HIGH",
		3: "UNABLE_TO_ASSESS",
	}
	AllergyIntoleranceCriticalityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LOW":                   1,
		"HIGH":                  2,
		"UNABLE_TO_ASSESS":      3,
	}
)

func (x AllergyIntoleranceCriticalityCode_Value) Enum() *AllergyIntoleranceCriticalityCode_Value {
	p := new(AllergyIntoleranceCriticalityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCriticalityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCriticalityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[31].Descriptor()
}

func (AllergyIntoleranceCriticalityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[31]
}

func (x AllergyIntoleranceCriticalityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode_Value.Descriptor instead.
func (AllergyIntoleranceCriticalityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{31, 0}
}

type AllergyIntoleranceTypeCode_Value int32

const (
	AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED AllergyIntoleranceTypeCode_Value = 0
	AllergyIntoleranceTypeCode_ALLERGY               AllergyIntoleranceTypeCode_Value = 1
	AllergyIntoleranceTypeCode_INTOLERANCE           AllergyIntoleranceTypeCode_Value = 2
)

// Enum value maps for AllergyIntoleranceTypeCode_Value.
var (
	AllergyIntoleranceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALLERGY",
		2: "INTOLERANCE",
	}
	AllergyIntoleranceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALLERGY":               1,
		"INTOLERANCE":           2,
	}
)

func (x AllergyIntoleranceTypeCode_Value) Enum() *AllergyIntoleranceTypeCode_Value {
	p := new(AllergyIntoleranceTypeCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[32].Descriptor()
}

func (AllergyIntoleranceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[32]
}

func (x AllergyIntoleranceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceTypeCode_Value.Descriptor instead.
func (AllergyIntoleranceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{32, 0}
}

type AllergyIntoleranceVerificationStatusCode_Value int32

const (
	AllergyIntoleranceVerificationStatusCode_INVALID_UNINITIALIZED AllergyIntoleranceVerificationStatusCode_Value = 0
	AllergyIntoleranceVerificationStatusCode_UNCONFIRMED           AllergyIntoleranceVerificationStatusCode_Value = 1
	AllergyIntoleranceVerificationStatusCode_CONFIRMED             AllergyIntoleranceVerificationStatusCode_Value = 2
	AllergyIntoleranceVerificationStatusCode_REFUTED               AllergyIntoleranceVerificationStatusCode_Value = 3
	AllergyIntoleranceVerificationStatusCode_ENTERED_IN_ERROR      AllergyIntoleranceVerificationStatusCode_Value = 4
)

// Enum value maps for AllergyIntoleranceVerificationStatusCode_Value.
var (
	AllergyIntoleranceVerificationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNCONFIRMED",
		2: "CONFIRMED",
		3: "REFUTED",
		4: "ENTERED_IN_ERROR",
	}
	AllergyIntoleranceVerificationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNCONFIRMED":           1,
		"CONFIRMED":             2,
		"REFUTED":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x AllergyIntoleranceVerificationStatusCode_Value) Enum() *AllergyIntoleranceVerificationStatusCode_Value {
	p := new(AllergyIntoleranceVerificationStatusCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceVerificationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceVerificationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[33].Descriptor()
}

func (AllergyIntoleranceVerificationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[33]
}

func (x AllergyIntoleranceVerificationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceVerificationStatusCode_Value.Descriptor instead.
func (AllergyIntoleranceVerificationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{33, 0}
}

type GenderStatusCode_Value int32

const (
	GenderStatusCode_INVALID_UNINITIALIZED GenderStatusCode_Value = 0
	GenderStatusCode_NEUTERED              GenderStatusCode_Value = 1
	GenderStatusCode_INTACT                GenderStatusCode_Value = 2
	GenderStatusCode_UNKNOWN               GenderStatusCode_Value = 3
)

// Enum value maps for GenderStatusCode_Value.
var (
	GenderStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NEUTERED",
		2: "INTACT",
		3: "UNKNOWN",
	}
	GenderStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NEUTERED":              1,
		"INTACT":                2,
		"UNKNOWN":               3,
	}
)

func (x GenderStatusCode_Value) Enum() *GenderStatusCode_Value {
	p := new(GenderStatusCode_Value)
	*p = x
	return p
}

func (x GenderStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenderStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[34].Descriptor()
}

func (GenderStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[34]
}

func (x GenderStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenderStatusCode_Value.Descriptor instead.
func (GenderStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{34, 0}
}

type AppointmentStatusCode_Value int32

const (
	AppointmentStatusCode_INVALID_UNINITIALIZED AppointmentStatusCode_Value = 0
	AppointmentStatusCode_PROPOSED              AppointmentStatusCode_Value = 1
	AppointmentStatusCode_PENDING               AppointmentStatusCode_Value = 2
	AppointmentStatusCode_BOOKED                AppointmentStatusCode_Value = 3
	AppointmentStatusCode_ARRIVED               AppointmentStatusCode_Value = 4
	AppointmentStatusCode_FULFILLED             AppointmentStatusCode_Value = 5
	AppointmentStatusCode_CANCELLED             AppointmentStatusCode_Value = 6
	AppointmentStatusCode_NOSHOW                AppointmentStatusCode_Value = 7
	AppointmentStatusCode_ENTERED_IN_ERROR      AppointmentStatusCode_Value = 8
)

// Enum value maps for AppointmentStatusCode_Value.
var (
	AppointmentStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "PENDING",
		3: "BOOKED",
		4: "ARRIVED",
		5: "FULFILLED",
		6: "CANCELLED",
		7: "NOSHOW",
		8: "ENTERED_IN_ERROR",
	}
	AppointmentStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PENDING":               2,
		"BOOKED":                3,
		"ARRIVED":               4,
		"FULFILLED":             5,
		"CANCELLED":             6,
		"NOSHOW":                7,
		"ENTERED_IN_ERROR":      8,
	}
)

func (x AppointmentStatusCode_Value) Enum() *AppointmentStatusCode_Value {
	p := new(AppointmentStatusCode_Value)
	*p = x
	return p
}

func (x AppointmentStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppointmentStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[35].Descriptor()
}

func (AppointmentStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[35]
}

func (x AppointmentStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppointmentStatusCode_Value.Descriptor instead.
func (AppointmentStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{35, 0}
}

type AssertionDirectionTypeCode_Value int32

const (
	AssertionDirectionTypeCode_INVALID_UNINITIALIZED AssertionDirectionTypeCode_Value = 0
	AssertionDirectionTypeCode_RESPONSE              AssertionDirectionTypeCode_Value = 1
	AssertionDirectionTypeCode_REQUEST               AssertionDirectionTypeCode_Value = 2
)

// Enum value maps for AssertionDirectionTypeCode_Value.
var (
	AssertionDirectionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESPONSE",
		2: "REQUEST",
	}
	AssertionDirectionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESPONSE":              1,
		"REQUEST":               2,
	}
)

func (x AssertionDirectionTypeCode_Value) Enum() *AssertionDirectionTypeCode_Value {
	p := new(AssertionDirectionTypeCode_Value)
	*p = x
	return p
}

func (x AssertionDirectionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionDirectionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[36].Descriptor()
}

func (AssertionDirectionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[36]
}

func (x AssertionDirectionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionDirectionTypeCode_Value.Descriptor instead.
func (AssertionDirectionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{36, 0}
}

type AssertionOperatorTypeCode_Value int32

const (
	AssertionOperatorTypeCode_INVALID_UNINITIALIZED AssertionOperatorTypeCode_Value = 0
	AssertionOperatorTypeCode_EQUALS                AssertionOperatorTypeCode_Value = 1
	AssertionOperatorTypeCode_NOTEQUALS             AssertionOperatorTypeCode_Value = 2
	AssertionOperatorTypeCode_IN                    AssertionOperatorTypeCode_Value = 3
	AssertionOperatorTypeCode_NOTIN                 AssertionOperatorTypeCode_Value = 4
	AssertionOperatorTypeCode_GREATERTHAN           AssertionOperatorTypeCode_Value = 5
	AssertionOperatorTypeCode_LESSTHAN              AssertionOperatorTypeCode_Value = 6
	AssertionOperatorTypeCode_EMPTY                 AssertionOperatorTypeCode_Value = 7
	AssertionOperatorTypeCode_NOTEMPTY              AssertionOperatorTypeCode_Value = 8
	AssertionOperatorTypeCode_CONTAINS              AssertionOperatorTypeCode_Value = 9
	AssertionOperatorTypeCode_NOTCONTAINS           AssertionOperatorTypeCode_Value = 10
	AssertionOperatorTypeCode_EVAL                  AssertionOperatorTypeCode_Value = 11
)

// Enum value maps for AssertionOperatorTypeCode_Value.
var (
	AssertionOperatorTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "EQUALS",
		2:  "NOTEQUALS",
		3:  "IN",
		4:  "NOTIN",
		5:  "GREATERTHAN",
		6:  "LESSTHAN",
		7:  "EMPTY",
		8:  "NOTEMPTY",
		9:  "CONTAINS",
		10: "NOTCONTAINS",
		11: "EVAL",
	}
	AssertionOperatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"NOTEQUALS":             2,
		"IN":                    3,
		"NOTIN":                 4,
		"GREATERTHAN":           5,
		"LESSTHAN":              6,
		"EMPTY":                 7,
		"NOTEMPTY":              8,
		"CONTAINS":              9,
		"NOTCONTAINS":           10,
		"EVAL":                  11,
	}
)

func (x AssertionOperatorTypeCode_Value) Enum() *AssertionOperatorTypeCode_Value {
	p := new(AssertionOperatorTypeCode_Value)
	*p = x
	return p
}

func (x AssertionOperatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionOperatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[37].Descriptor()
}

func (AssertionOperatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[37]
}

func (x AssertionOperatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionOperatorTypeCode_Value.Descriptor instead.
func (AssertionOperatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{37, 0}
}

type AssertionResponseTypesCode_Value int32

const (
	AssertionResponseTypesCode_INVALID_UNINITIALIZED AssertionResponseTypesCode_Value = 0
	AssertionResponseTypesCode_OKAY                  AssertionResponseTypesCode_Value = 1
	AssertionResponseTypesCode_CREATED               AssertionResponseTypesCode_Value = 2
	AssertionResponseTypesCode_NOCONTENT             AssertionResponseTypesCode_Value = 3
	AssertionResponseTypesCode_NOTMODIFIED           AssertionResponseTypesCode_Value = 4
	AssertionResponseTypesCode_BAD                   AssertionResponseTypesCode_Value = 5
	AssertionResponseTypesCode_FORBIDDEN             AssertionResponseTypesCode_Value = 6
	AssertionResponseTypesCode_NOTFOUND              AssertionResponseTypesCode_Value = 7
	AssertionResponseTypesCode_METHODNOTALLOWED      AssertionResponseTypesCode_Value = 8
	AssertionResponseTypesCode_CONFLICT              AssertionResponseTypesCode_Value = 9
	AssertionResponseTypesCode_GONE                  AssertionResponseTypesCode_Value = 10
	AssertionResponseTypesCode_PRECONDITIONFAILED    AssertionResponseTypesCode_Value = 11
	AssertionResponseTypesCode_UNPROCESSABLE         AssertionResponseTypesCode_Value = 12
)

// Enum value maps for AssertionResponseTypesCode_Value.
var (
	AssertionResponseTypesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "OKAY",
		2:  "CREATED",
		3:  "NOCONTENT",
		4:  "NOTMODIFIED",
		5:  "BAD",
		6:  "FORBIDDEN",
		7:  "NOTFOUND",
		8:  "METHODNOTALLOWED",
		9:  "CONFLICT",
		10: "GONE",
		11: "PRECONDITIONFAILED",
		12: "UNPROCESSABLE",
	}
	AssertionResponseTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OKAY":                  1,
		"CREATED":               2,
		"NOCONTENT":             3,
		"NOTMODIFIED":           4,
		"BAD":                   5,
		"FORBIDDEN":             6,
		"NOTFOUND":              7,
		"METHODNOTALLOWED":      8,
		"CONFLICT":              9,
		"GONE":                  10,
		"PRECONDITIONFAILED":    11,
		"UNPROCESSABLE":         12,
	}
)

func (x AssertionResponseTypesCode_Value) Enum() *AssertionResponseTypesCode_Value {
	p := new(AssertionResponseTypesCode_Value)
	*p = x
	return p
}

func (x AssertionResponseTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionResponseTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[38].Descriptor()
}

func (AssertionResponseTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[38]
}

func (x AssertionResponseTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionResponseTypesCode_Value.Descriptor instead.
func (AssertionResponseTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{38, 0}
}

type AuditEventActionCode_Value int32

const (
	AuditEventActionCode_INVALID_UNINITIALIZED AuditEventActionCode_Value = 0
	AuditEventActionCode_C                     AuditEventActionCode_Value = 1
	AuditEventActionCode_R                     AuditEventActionCode_Value = 2
	AuditEventActionCode_U                     AuditEventActionCode_Value = 3
	AuditEventActionCode_D                     AuditEventActionCode_Value = 4
	AuditEventActionCode_E                     AuditEventActionCode_Value = 5
)

// Enum value maps for AuditEventActionCode_Value.
var (
	AuditEventActionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "C",
		2: "R",
		3: "U",
		4: "D",
		5: "E",
	}
	AuditEventActionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"C":                     1,
		"R":                     2,
		"U":                     3,
		"D":                     4,
		"E":                     5,
	}
)

func (x AuditEventActionCode_Value) Enum() *AuditEventActionCode_Value {
	p := new(AuditEventActionCode_Value)
	*p = x
	return p
}

func (x AuditEventActionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventActionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[39].Descriptor()
}

func (AuditEventActionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[39]
}

func (x AuditEventActionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventActionCode_Value.Descriptor instead.
func (AuditEventActionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{39, 0}
}

type AuditEventOutcomeCode_Value int32

const (
	AuditEventOutcomeCode_INVALID_UNINITIALIZED AuditEventOutcomeCode_Value = 0
	AuditEventOutcomeCode_SUCCESS               AuditEventOutcomeCode_Value = 1
	AuditEventOutcomeCode_MINOR_FAILURE         AuditEventOutcomeCode_Value = 2
	AuditEventOutcomeCode_SERIOUS_FAILURE       AuditEventOutcomeCode_Value = 3
	AuditEventOutcomeCode_MAJOR_FAILURE         AuditEventOutcomeCode_Value = 4
)

// Enum value maps for AuditEventOutcomeCode_Value.
var (
	AuditEventOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUCCESS",
		2: "MINOR_FAILURE",
		3: "SERIOUS_FAILURE",
		4: "MAJOR_FAILURE",
	}
	AuditEventOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUCCESS":               1,
		"MINOR_FAILURE":         2,
		"SERIOUS_FAILURE":       3,
		"MAJOR_FAILURE":         4,
	}
)

func (x AuditEventOutcomeCode_Value) Enum() *AuditEventOutcomeCode_Value {
	p := new(AuditEventOutcomeCode_Value)
	*p = x
	return p
}

func (x AuditEventOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[40].Descriptor()
}

func (AuditEventOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[40]
}

func (x AuditEventOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventOutcomeCode_Value.Descriptor instead.
func (AuditEventOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{40, 0}
}

type BasicResourceTypesCode_Value int32

const (
	BasicResourceTypesCode_INVALID_UNINITIALIZED BasicResourceTypesCode_Value = 0
	BasicResourceTypesCode_CONSENT               BasicResourceTypesCode_Value = 1
	BasicResourceTypesCode_REFERRAL              BasicResourceTypesCode_Value = 2
	BasicResourceTypesCode_ADVEVENT              BasicResourceTypesCode_Value = 3
	BasicResourceTypesCode_APTMTREQ              BasicResourceTypesCode_Value = 4
	BasicResourceTypesCode_TRANSFER              BasicResourceTypesCode_Value = 5
	BasicResourceTypesCode_DIET                  BasicResourceTypesCode_Value = 6
	BasicResourceTypesCode_ADMINACT              BasicResourceTypesCode_Value = 7
	BasicResourceTypesCode_EXPOSURE              BasicResourceTypesCode_Value = 8
	BasicResourceTypesCode_INVESTIGATION         BasicResourceTypesCode_Value = 9
	BasicResourceTypesCode_ACCOUNT               BasicResourceTypesCode_Value = 10
	BasicResourceTypesCode_INVOICE               BasicResourceTypesCode_Value = 11
	BasicResourceTypesCode_ADJUDICAT             BasicResourceTypesCode_Value = 12
	BasicResourceTypesCode_PREDETREQ             BasicResourceTypesCode_Value = 13
	BasicResourceTypesCode_PREDETERMINE          BasicResourceTypesCode_Value = 14
	BasicResourceTypesCode_STUDY                 BasicResourceTypesCode_Value = 15
	BasicResourceTypesCode_PROTOCOL              BasicResourceTypesCode_Value = 16
)

// Enum value maps for BasicResourceTypesCode_Value.
var (
	BasicResourceTypesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CONSENT",
		2:  "REFERRAL",
		3:  "ADVEVENT",
		4:  "APTMTREQ",
		5:  "TRANSFER",
		6:  "DIET",
		7:  "ADMINACT",
		8:  "EXPOSURE",
		9:  "INVESTIGATION",
		10: "ACCOUNT",
		11: "INVOICE",
		12: "ADJUDICAT",
		13: "PREDETREQ",
		14: "PREDETERMINE",
		15: "STUDY",
		16: "PROTOCOL",
	}
	BasicResourceTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONSENT":               1,
		"REFERRAL":              2,
		"ADVEVENT":              3,
		"APTMTREQ":              4,
		"TRANSFER":              5,
		"DIET":                  6,
		"ADMINACT":              7,
		"EXPOSURE":              8,
		"INVESTIGATION":         9,
		"ACCOUNT":               10,
		"INVOICE":               11,
		"ADJUDICAT":             12,
		"PREDETREQ":             13,
		"PREDETERMINE":          14,
		"STUDY":                 15,
		"PROTOCOL":              16,
	}
)

func (x BasicResourceTypesCode_Value) Enum() *BasicResourceTypesCode_Value {
	p := new(BasicResourceTypesCode_Value)
	*p = x
	return p
}

func (x BasicResourceTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BasicResourceTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[41].Descriptor()
}

func (BasicResourceTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[41]
}

func (x BasicResourceTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BasicResourceTypesCode_Value.Descriptor instead.
func (BasicResourceTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{41, 0}
}

type BundleTypeCode_Value int32

const (
	BundleTypeCode_INVALID_UNINITIALIZED BundleTypeCode_Value = 0
	BundleTypeCode_DOCUMENT              BundleTypeCode_Value = 1
	BundleTypeCode_MESSAGE               BundleTypeCode_Value = 2
	BundleTypeCode_TRANSACTION           BundleTypeCode_Value = 3
	BundleTypeCode_TRANSACTION_RESPONSE  BundleTypeCode_Value = 4
	BundleTypeCode_BATCH                 BundleTypeCode_Value = 5
	BundleTypeCode_BATCH_RESPONSE        BundleTypeCode_Value = 6
	BundleTypeCode_HISTORY               BundleTypeCode_Value = 7
	BundleTypeCode_SEARCHSET             BundleTypeCode_Value = 8
	BundleTypeCode_COLLECTION            BundleTypeCode_Value = 9
)

// Enum value maps for BundleTypeCode_Value.
var (
	BundleTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DOCUMENT",
		2: "MESSAGE",
		3: "TRANSACTION",
		4: "TRANSACTION_RESPONSE",
		5: "BATCH",
		6: "BATCH_RESPONSE",
		7: "HISTORY",
		8: "SEARCHSET",
		9: "COLLECTION",
	}
	BundleTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCUMENT":              1,
		"MESSAGE":               2,
		"TRANSACTION":           3,
		"TRANSACTION_RESPONSE":  4,
		"BATCH":                 5,
		"BATCH_RESPONSE":        6,
		"HISTORY":               7,
		"SEARCHSET":             8,
		"COLLECTION":            9,
	}
)

func (x BundleTypeCode_Value) Enum() *BundleTypeCode_Value {
	p := new(BundleTypeCode_Value)
	*p = x
	return p
}

func (x BundleTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundleTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[42].Descriptor()
}

func (BundleTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[42]
}

func (x BundleTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundleTypeCode_Value.Descriptor instead.
func (BundleTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{42, 0}
}

type CapabilityStatementKindCode_Value int32

const (
	CapabilityStatementKindCode_INVALID_UNINITIALIZED CapabilityStatementKindCode_Value = 0
	CapabilityStatementKindCode_INSTANCE              CapabilityStatementKindCode_Value = 1
	CapabilityStatementKindCode_CAPABILITY            CapabilityStatementKindCode_Value = 2
	CapabilityStatementKindCode_REQUIREMENTS          CapabilityStatementKindCode_Value = 3
)

// Enum value maps for CapabilityStatementKindCode_Value.
var (
	CapabilityStatementKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "CAPABILITY",
		3: "REQUIREMENTS",
	}
	CapabilityStatementKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"CAPABILITY":            2,
		"REQUIREMENTS":          3,
	}
)

func (x CapabilityStatementKindCode_Value) Enum() *CapabilityStatementKindCode_Value {
	p := new(CapabilityStatementKindCode_Value)
	*p = x
	return p
}

func (x CapabilityStatementKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilityStatementKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[43].Descriptor()
}

func (CapabilityStatementKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[43]
}

func (x CapabilityStatementKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilityStatementKindCode_Value.Descriptor instead.
func (CapabilityStatementKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{43, 0}
}

type CarePlanActivityCategoryCode_Value int32

const (
	CarePlanActivityCategoryCode_INVALID_UNINITIALIZED CarePlanActivityCategoryCode_Value = 0
	CarePlanActivityCategoryCode_DIET                  CarePlanActivityCategoryCode_Value = 1
	CarePlanActivityCategoryCode_DRUG                  CarePlanActivityCategoryCode_Value = 2
	CarePlanActivityCategoryCode_ENCOUNTER             CarePlanActivityCategoryCode_Value = 3
	CarePlanActivityCategoryCode_OBSERVATION           CarePlanActivityCategoryCode_Value = 4
	CarePlanActivityCategoryCode_PROCEDURE             CarePlanActivityCategoryCode_Value = 5
	CarePlanActivityCategoryCode_SUPPLY                CarePlanActivityCategoryCode_Value = 6
	CarePlanActivityCategoryCode_OTHER                 CarePlanActivityCategoryCode_Value = 7
)

// Enum value maps for CarePlanActivityCategoryCode_Value.
var (
	CarePlanActivityCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DIET",
		2: "DRUG",
		3: "ENCOUNTER",
		4: "OBSERVATION",
		5: "PROCEDURE",
		6: "SUPPLY",
		7: "OTHER",
	}
	CarePlanActivityCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DIET":                  1,
		"DRUG":                  2,
		"ENCOUNTER":             3,
		"OBSERVATION":           4,
		"PROCEDURE":             5,
		"SUPPLY":                6,
		"OTHER":                 7,
	}
)

func (x CarePlanActivityCategoryCode_Value) Enum() *CarePlanActivityCategoryCode_Value {
	p := new(CarePlanActivityCategoryCode_Value)
	*p = x
	return p
}

func (x CarePlanActivityCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanActivityCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[44].Descriptor()
}

func (CarePlanActivityCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[44]
}

func (x CarePlanActivityCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanActivityCategoryCode_Value.Descriptor instead.
func (CarePlanActivityCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{44, 0}
}

type CarePlanActivityStatusCode_Value int32

const (
	CarePlanActivityStatusCode_INVALID_UNINITIALIZED CarePlanActivityStatusCode_Value = 0
	CarePlanActivityStatusCode_NOT_STARTED           CarePlanActivityStatusCode_Value = 1
	CarePlanActivityStatusCode_SCHEDULED             CarePlanActivityStatusCode_Value = 2
	CarePlanActivityStatusCode_IN_PROGRESS           CarePlanActivityStatusCode_Value = 3
	CarePlanActivityStatusCode_ON_HOLD               CarePlanActivityStatusCode_Value = 4
	CarePlanActivityStatusCode_COMPLETED             CarePlanActivityStatusCode_Value = 5
	CarePlanActivityStatusCode_CANCELLED             CarePlanActivityStatusCode_Value = 6
	CarePlanActivityStatusCode_UNKNOWN               CarePlanActivityStatusCode_Value = 7
)

// Enum value maps for CarePlanActivityStatusCode_Value.
var (
	CarePlanActivityStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_STARTED",
		2: "SCHEDULED",
		3: "IN_PROGRESS",
		4: "ON_HOLD",
		5: "COMPLETED",
		6: "CANCELLED",
		7: "UNKNOWN",
	}
	CarePlanActivityStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_STARTED":           1,
		"SCHEDULED":             2,
		"IN_PROGRESS":           3,
		"ON_HOLD":               4,
		"COMPLETED":             5,
		"CANCELLED":             6,
		"UNKNOWN":               7,
	}
)

func (x CarePlanActivityStatusCode_Value) Enum() *CarePlanActivityStatusCode_Value {
	p := new(CarePlanActivityStatusCode_Value)
	*p = x
	return p
}

func (x CarePlanActivityStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanActivityStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[45].Descriptor()
}

func (CarePlanActivityStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[45]
}

func (x CarePlanActivityStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanActivityStatusCode_Value.Descriptor instead.
func (CarePlanActivityStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{45, 0}
}

type CarePlanIntentCode_Value int32

const (
	CarePlanIntentCode_INVALID_UNINITIALIZED CarePlanIntentCode_Value = 0
	CarePlanIntentCode_PROPOSAL              CarePlanIntentCode_Value = 1
	CarePlanIntentCode_PLAN                  CarePlanIntentCode_Value = 2
	CarePlanIntentCode_ORDER                 CarePlanIntentCode_Value = 3
	CarePlanIntentCode_OPTION                CarePlanIntentCode_Value = 4
)

// Enum value maps for CarePlanIntentCode_Value.
var (
	CarePlanIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "ORDER",
		4: "OPTION",
	}
	CarePlanIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"ORDER":                 3,
		"OPTION":                4,
	}
)

func (x CarePlanIntentCode_Value) Enum() *CarePlanIntentCode_Value {
	p := new(CarePlanIntentCode_Value)
	*p = x
	return p
}

func (x CarePlanIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[46].Descriptor()
}

func (CarePlanIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[46]
}

func (x CarePlanIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanIntentCode_Value.Descriptor instead.
func (CarePlanIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{46, 0}
}

type CarePlanStatusCode_Value int32

const (
	CarePlanStatusCode_INVALID_UNINITIALIZED CarePlanStatusCode_Value = 0
	CarePlanStatusCode_DRAFT                 CarePlanStatusCode_Value = 1
	CarePlanStatusCode_ACTIVE                CarePlanStatusCode_Value = 2
	CarePlanStatusCode_SUSPENDED             CarePlanStatusCode_Value = 3
	CarePlanStatusCode_COMPLETED             CarePlanStatusCode_Value = 4
	CarePlanStatusCode_ENTERED_IN_ERROR      CarePlanStatusCode_Value = 5
	CarePlanStatusCode_CANCELLED             CarePlanStatusCode_Value = 6
	CarePlanStatusCode_UNKNOWN               CarePlanStatusCode_Value = 7
)

// Enum value maps for CarePlanStatusCode_Value.
var (
	CarePlanStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "COMPLETED",
		5: "ENTERED_IN_ERROR",
		6: "CANCELLED",
		7: "UNKNOWN",
	}
	CarePlanStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"COMPLETED":             4,
		"ENTERED_IN_ERROR":      5,
		"CANCELLED":             6,
		"UNKNOWN":               7,
	}
)

func (x CarePlanStatusCode_Value) Enum() *CarePlanStatusCode_Value {
	p := new(CarePlanStatusCode_Value)
	*p = x
	return p
}

func (x CarePlanStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[47].Descriptor()
}

func (CarePlanStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[47]
}

func (x CarePlanStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanStatusCode_Value.Descriptor instead.
func (CarePlanStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{47, 0}
}

type CareTeamCategoryCode_Value int32

const (
	CareTeamCategoryCode_INVALID_UNINITIALIZED CareTeamCategoryCode_Value = 0
	CareTeamCategoryCode_EVENT                 CareTeamCategoryCode_Value = 1
	CareTeamCategoryCode_ENCOUNTER             CareTeamCategoryCode_Value = 2
	CareTeamCategoryCode_EPISODE               CareTeamCategoryCode_Value = 3
	CareTeamCategoryCode_LONGITUDINAL          CareTeamCategoryCode_Value = 4
	CareTeamCategoryCode_CONDITION             CareTeamCategoryCode_Value = 5
	CareTeamCategoryCode_CLINICAL_RESEARCH     CareTeamCategoryCode_Value = 6
)

// Enum value maps for CareTeamCategoryCode_Value.
var (
	CareTeamCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EVENT",
		2: "ENCOUNTER",
		3: "EPISODE",
		4: "LONGITUDINAL",
		5: "CONDITION",
		6: "CLINICAL_RESEARCH",
	}
	CareTeamCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EVENT":                 1,
		"ENCOUNTER":             2,
		"EPISODE":               3,
		"LONGITUDINAL":          4,
		"CONDITION":             5,
		"CLINICAL_RESEARCH":     6,
	}
)

func (x CareTeamCategoryCode_Value) Enum() *CareTeamCategoryCode_Value {
	p := new(CareTeamCategoryCode_Value)
	*p = x
	return p
}

func (x CareTeamCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CareTeamCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[48].Descriptor()
}

func (CareTeamCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[48]
}

func (x CareTeamCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CareTeamCategoryCode_Value.Descriptor instead.
func (CareTeamCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{48, 0}
}

type CareTeamStatusCode_Value int32

const (
	CareTeamStatusCode_INVALID_UNINITIALIZED CareTeamStatusCode_Value = 0
	CareTeamStatusCode_PROPOSED              CareTeamStatusCode_Value = 1
	CareTeamStatusCode_ACTIVE                CareTeamStatusCode_Value = 2
	CareTeamStatusCode_SUSPENDED             CareTeamStatusCode_Value = 3
	CareTeamStatusCode_INACTIVE              CareTeamStatusCode_Value = 4
	CareTeamStatusCode_ENTERED_IN_ERROR      CareTeamStatusCode_Value = 5
)

// Enum value maps for CareTeamStatusCode_Value.
var (
	CareTeamStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "INACTIVE",
		5: "ENTERED_IN_ERROR",
	}
	CareTeamStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"INACTIVE":              4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x CareTeamStatusCode_Value) Enum() *CareTeamStatusCode_Value {
	p := new(CareTeamStatusCode_Value)
	*p = x
	return p
}

func (x CareTeamStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CareTeamStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[49].Descriptor()
}

func (CareTeamStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[49]
}

func (x CareTeamStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CareTeamStatusCode_Value.Descriptor instead.
func (CareTeamStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{49, 0}
}

type ChargeItemStatusCode_Value int32

const (
	ChargeItemStatusCode_INVALID_UNINITIALIZED ChargeItemStatusCode_Value = 0
	ChargeItemStatusCode_PLANNED               ChargeItemStatusCode_Value = 1
	ChargeItemStatusCode_BILLABLE              ChargeItemStatusCode_Value = 2
	ChargeItemStatusCode_NOT_BILLABLE          ChargeItemStatusCode_Value = 3
	ChargeItemStatusCode_ABORTED               ChargeItemStatusCode_Value = 4
	ChargeItemStatusCode_BILLED                ChargeItemStatusCode_Value = 5
	ChargeItemStatusCode_ENTERED_IN_ERROR      ChargeItemStatusCode_Value = 6
	ChargeItemStatusCode_UNKNOWN               ChargeItemStatusCode_Value = 7
)

// Enum value maps for ChargeItemStatusCode_Value.
var (
	ChargeItemStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "BILLABLE",
		3: "NOT_BILLABLE",
		4: "ABORTED",
		5: "BILLED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	ChargeItemStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"BILLABLE":              2,
		"NOT_BILLABLE":          3,
		"ABORTED":               4,
		"BILLED":                5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x ChargeItemStatusCode_Value) Enum() *ChargeItemStatusCode_Value {
	p := new(ChargeItemStatusCode_Value)
	*p = x
	return p
}

func (x ChargeItemStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeItemStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[50].Descriptor()
}

func (ChargeItemStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[50]
}

func (x ChargeItemStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeItemStatusCode_Value.Descriptor instead.
func (ChargeItemStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{50, 0}
}

type ChoiceListOrientationCode_Value int32

const (
	ChoiceListOrientationCode_INVALID_UNINITIALIZED ChoiceListOrientationCode_Value = 0
	ChoiceListOrientationCode_HORIZONTAL            ChoiceListOrientationCode_Value = 1
	ChoiceListOrientationCode_VERTICAL              ChoiceListOrientationCode_Value = 2
)

// Enum value maps for ChoiceListOrientationCode_Value.
var (
	ChoiceListOrientationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HORIZONTAL",
		2: "VERTICAL",
	}
	ChoiceListOrientationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HORIZONTAL":            1,
		"VERTICAL":              2,
	}
)

func (x ChoiceListOrientationCode_Value) Enum() *ChoiceListOrientationCode_Value {
	p := new(ChoiceListOrientationCode_Value)
	*p = x
	return p
}

func (x ChoiceListOrientationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoiceListOrientationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[51].Descriptor()
}

func (ChoiceListOrientationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[51]
}

func (x ChoiceListOrientationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoiceListOrientationCode_Value.Descriptor instead.
func (ChoiceListOrientationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{51, 0}
}

type UseCode_Value int32

const (
	UseCode_INVALID_UNINITIALIZED UseCode_Value = 0
	UseCode_COMPLETE              UseCode_Value = 1
	UseCode_PROPOSED              UseCode_Value = 2
	UseCode_EXPLORATORY           UseCode_Value = 3
	UseCode_OTHER                 UseCode_Value = 4
)

// Enum value maps for UseCode_Value.
var (
	UseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETE",
		2: "PROPOSED",
		3: "EXPLORATORY",
		4: "OTHER",
	}
	UseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETE":              1,
		"PROPOSED":              2,
		"EXPLORATORY":           3,
		"OTHER":                 4,
	}
)

func (x UseCode_Value) Enum() *UseCode_Value {
	p := new(UseCode_Value)
	*p = x
	return p
}

func (x UseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[52].Descriptor()
}

func (UseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[52]
}

func (x UseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseCode_Value.Descriptor instead.
func (UseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{52, 0}
}

type ClassificationOrContextCode_Value int32

const (
	ClassificationOrContextCode_INVALID_UNINITIALIZED ClassificationOrContextCode_Value = 0
	ClassificationOrContextCode_CLASSIFICATION        ClassificationOrContextCode_Value = 1
	ClassificationOrContextCode_CONTEXT               ClassificationOrContextCode_Value = 2
)

// Enum value maps for ClassificationOrContextCode_Value.
var (
	ClassificationOrContextCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLASSIFICATION",
		2: "CONTEXT",
	}
	ClassificationOrContextCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLASSIFICATION":        1,
		"CONTEXT":               2,
	}
)

func (x ClassificationOrContextCode_Value) Enum() *ClassificationOrContextCode_Value {
	p := new(ClassificationOrContextCode_Value)
	*p = x
	return p
}

func (x ClassificationOrContextCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassificationOrContextCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[53].Descriptor()
}

func (ClassificationOrContextCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[53]
}

func (x ClassificationOrContextCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassificationOrContextCode_Value.Descriptor instead.
func (ClassificationOrContextCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{53, 0}
}

type ClinicalImpressionStatusCode_Value int32

const (
	ClinicalImpressionStatusCode_INVALID_UNINITIALIZED ClinicalImpressionStatusCode_Value = 0
	ClinicalImpressionStatusCode_DRAFT                 ClinicalImpressionStatusCode_Value = 1
	ClinicalImpressionStatusCode_COMPLETED             ClinicalImpressionStatusCode_Value = 2
	ClinicalImpressionStatusCode_ENTERED_IN_ERROR      ClinicalImpressionStatusCode_Value = 3
)

// Enum value maps for ClinicalImpressionStatusCode_Value.
var (
	ClinicalImpressionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
	}
	ClinicalImpressionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ClinicalImpressionStatusCode_Value) Enum() *ClinicalImpressionStatusCode_Value {
	p := new(ClinicalImpressionStatusCode_Value)
	*p = x
	return p
}

func (x ClinicalImpressionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClinicalImpressionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[54].Descriptor()
}

func (ClinicalImpressionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[54]
}

func (x ClinicalImpressionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClinicalImpressionStatusCode_Value.Descriptor instead.
func (ClinicalImpressionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{54, 0}
}

type CodeSystemContentModeCode_Value int32

const (
	CodeSystemContentModeCode_INVALID_UNINITIALIZED CodeSystemContentModeCode_Value = 0
	CodeSystemContentModeCode_NOT_PRESENT           CodeSystemContentModeCode_Value = 1
	CodeSystemContentModeCode_EXAMPLE               CodeSystemContentModeCode_Value = 2
	CodeSystemContentModeCode_FRAGMENT              CodeSystemContentModeCode_Value = 3
	CodeSystemContentModeCode_COMPLETE              CodeSystemContentModeCode_Value = 4
)

// Enum value maps for CodeSystemContentModeCode_Value.
var (
	CodeSystemContentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_PRESENT",
		2: "EXAMPLE",
		3: "FRAGMENT",
		4: "COMPLETE",
	}
	CodeSystemContentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_PRESENT":           1,
		"EXAMPLE":               2,
		"FRAGMENT":              3,
		"COMPLETE":              4,
	}
)

func (x CodeSystemContentModeCode_Value) Enum() *CodeSystemContentModeCode_Value {
	p := new(CodeSystemContentModeCode_Value)
	*p = x
	return p
}

func (x CodeSystemContentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSystemContentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[55].Descriptor()
}

func (CodeSystemContentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[55]
}

func (x CodeSystemContentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSystemContentModeCode_Value.Descriptor instead.
func (CodeSystemContentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{55, 0}
}

type CodeSystemHierarchyMeaningCode_Value int32

const (
	CodeSystemHierarchyMeaningCode_INVALID_UNINITIALIZED CodeSystemHierarchyMeaningCode_Value = 0
	CodeSystemHierarchyMeaningCode_GROUPED_BY            CodeSystemHierarchyMeaningCode_Value = 1
	CodeSystemHierarchyMeaningCode_IS_A                  CodeSystemHierarchyMeaningCode_Value = 2
	CodeSystemHierarchyMeaningCode_PART_OF               CodeSystemHierarchyMeaningCode_Value = 3
	CodeSystemHierarchyMeaningCode_CLASSIFIED_WITH       CodeSystemHierarchyMeaningCode_Value = 4
)

// Enum value maps for CodeSystemHierarchyMeaningCode_Value.
var (
	CodeSystemHierarchyMeaningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GROUPED_BY",
		2: "IS_A",
		3: "PART_OF",
		4: "CLASSIFIED_WITH",
	}
	CodeSystemHierarchyMeaningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUPED_BY":            1,
		"IS_A":                  2,
		"PART_OF":               3,
		"CLASSIFIED_WITH":       4,
	}
)

func (x CodeSystemHierarchyMeaningCode_Value) Enum() *CodeSystemHierarchyMeaningCode_Value {
	p := new(CodeSystemHierarchyMeaningCode_Value)
	*p = x
	return p
}

func (x CodeSystemHierarchyMeaningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSystemHierarchyMeaningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[56].Descriptor()
}

func (CodeSystemHierarchyMeaningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[56]
}

func (x CodeSystemHierarchyMeaningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSystemHierarchyMeaningCode_Value.Descriptor instead.
func (CodeSystemHierarchyMeaningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{56, 0}
}

type CommonTagsCode_Value int32

const (
	CommonTagsCode_INVALID_UNINITIALIZED CommonTagsCode_Value = 0
	CommonTagsCode_ACTIONABLE            CommonTagsCode_Value = 1
)

// Enum value maps for CommonTagsCode_Value.
var (
	CommonTagsCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIONABLE",
	}
	CommonTagsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIONABLE":            1,
	}
)

func (x CommonTagsCode_Value) Enum() *CommonTagsCode_Value {
	p := new(CommonTagsCode_Value)
	*p = x
	return p
}

func (x CommonTagsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonTagsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[57].Descriptor()
}

func (CommonTagsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[57]
}

func (x CommonTagsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonTagsCode_Value.Descriptor instead.
func (CommonTagsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{57, 0}
}

type CommunicationCategoryCode_Value int32

const (
	CommunicationCategoryCode_INVALID_UNINITIALIZED CommunicationCategoryCode_Value = 0
	CommunicationCategoryCode_ALERT                 CommunicationCategoryCode_Value = 1
	CommunicationCategoryCode_NOTIFICATION          CommunicationCategoryCode_Value = 2
	CommunicationCategoryCode_REMINDER              CommunicationCategoryCode_Value = 3
	CommunicationCategoryCode_INSTRUCTION           CommunicationCategoryCode_Value = 4
)

// Enum value maps for CommunicationCategoryCode_Value.
var (
	CommunicationCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALERT",
		2: "NOTIFICATION",
		3: "REMINDER",
		4: "INSTRUCTION",
	}
	CommunicationCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALERT":                 1,
		"NOTIFICATION":          2,
		"REMINDER":              3,
		"INSTRUCTION":           4,
	}
)

func (x CommunicationCategoryCode_Value) Enum() *CommunicationCategoryCode_Value {
	p := new(CommunicationCategoryCode_Value)
	*p = x
	return p
}

func (x CommunicationCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[58].Descriptor()
}

func (CommunicationCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[58]
}

func (x CommunicationCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationCategoryCode_Value.Descriptor instead.
func (CommunicationCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{58, 0}
}

type CommunicationNotDoneReasonCode_Value int32

const (
	CommunicationNotDoneReasonCode_INVALID_UNINITIALIZED CommunicationNotDoneReasonCode_Value = 0
	CommunicationNotDoneReasonCode_UNKNOWN               CommunicationNotDoneReasonCode_Value = 1
	CommunicationNotDoneReasonCode_SYSTEM_ERROR          CommunicationNotDoneReasonCode_Value = 2
	CommunicationNotDoneReasonCode_INVALID_PHONE_NUMBER  CommunicationNotDoneReasonCode_Value = 3
	CommunicationNotDoneReasonCode_RECIPIENT_UNAVAILABLE CommunicationNotDoneReasonCode_Value = 4
	CommunicationNotDoneReasonCode_FAMILY_OBJECTION      CommunicationNotDoneReasonCode_Value = 5
	CommunicationNotDoneReasonCode_PATIENT_OBJECTION     CommunicationNotDoneReasonCode_Value = 6
)

// Enum value maps for CommunicationNotDoneReasonCode_Value.
var (
	CommunicationNotDoneReasonCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNKNOWN",
		2: "SYSTEM_ERROR",
		3: "INVALID_PHONE_NUMBER",
		4: "RECIPIENT_UNAVAILABLE",
		5: "FAMILY_OBJECTION",
		6: "PATIENT_OBJECTION",
	}
	CommunicationNotDoneReasonCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
		"SYSTEM_ERROR":          2,
		"INVALID_PHONE_NUMBER":  3,
		"RECIPIENT_UNAVAILABLE": 4,
		"FAMILY_OBJECTION":      5,
		"PATIENT_OBJECTION":     6,
	}
)

func (x CommunicationNotDoneReasonCode_Value) Enum() *CommunicationNotDoneReasonCode_Value {
	p := new(CommunicationNotDoneReasonCode_Value)
	*p = x
	return p
}

func (x CommunicationNotDoneReasonCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationNotDoneReasonCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[59].Descriptor()
}

func (CommunicationNotDoneReasonCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[59]
}

func (x CommunicationNotDoneReasonCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationNotDoneReasonCode_Value.Descriptor instead.
func (CommunicationNotDoneReasonCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{59, 0}
}

type CompartmentTypeCode_Value int32

const (
	CompartmentTypeCode_INVALID_UNINITIALIZED CompartmentTypeCode_Value = 0
	CompartmentTypeCode_PATIENT               CompartmentTypeCode_Value = 1
	CompartmentTypeCode_ENCOUNTER             CompartmentTypeCode_Value = 2
	CompartmentTypeCode_RELATEDPERSON         CompartmentTypeCode_Value = 3
	CompartmentTypeCode_PRACTITIONER          CompartmentTypeCode_Value = 4
	CompartmentTypeCode_DEVICE                CompartmentTypeCode_Value = 5
)

// Enum value maps for CompartmentTypeCode_Value.
var (
	CompartmentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PATIENT",
		2: "ENCOUNTER",
		3: "RELATEDPERSON",
		4: "PRACTITIONER",
		5: "DEVICE",
	}
	CompartmentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PATIENT":               1,
		"ENCOUNTER":             2,
		"RELATEDPERSON":         3,
		"PRACTITIONER":          4,
		"DEVICE":                5,
	}
)

func (x CompartmentTypeCode_Value) Enum() *CompartmentTypeCode_Value {
	p := new(CompartmentTypeCode_Value)
	*p = x
	return p
}

func (x CompartmentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompartmentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[60].Descriptor()
}

func (CompartmentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[60]
}

func (x CompartmentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompartmentTypeCode_Value.Descriptor instead.
func (CompartmentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{60, 0}
}

type CompositeMeasureScoringCode_Value int32

const (
	CompositeMeasureScoringCode_INVALID_UNINITIALIZED CompositeMeasureScoringCode_Value = 0
	CompositeMeasureScoringCode_OPPORTUNITY           CompositeMeasureScoringCode_Value = 1
	CompositeMeasureScoringCode_ALL_OR_NOTHING        CompositeMeasureScoringCode_Value = 2
	CompositeMeasureScoringCode_LINEAR                CompositeMeasureScoringCode_Value = 3
	CompositeMeasureScoringCode_WEIGHTED              CompositeMeasureScoringCode_Value = 4
)

// Enum value maps for CompositeMeasureScoringCode_Value.
var (
	CompositeMeasureScoringCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OPPORTUNITY",
		2: "ALL_OR_NOTHING",
		3: "LINEAR",
		4: "WEIGHTED",
	}
	CompositeMeasureScoringCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OPPORTUNITY":           1,
		"ALL_OR_NOTHING":        2,
		"LINEAR":                3,
		"WEIGHTED":              4,
	}
)

func (x CompositeMeasureScoringCode_Value) Enum() *CompositeMeasureScoringCode_Value {
	p := new(CompositeMeasureScoringCode_Value)
	*p = x
	return p
}

func (x CompositeMeasureScoringCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositeMeasureScoringCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[61].Descriptor()
}

func (CompositeMeasureScoringCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[61]
}

func (x CompositeMeasureScoringCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositeMeasureScoringCode_Value.Descriptor instead.
func (CompositeMeasureScoringCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{61, 0}
}

type CompositionAttestationModeCode_Value int32

const (
	CompositionAttestationModeCode_INVALID_UNINITIALIZED CompositionAttestationModeCode_Value = 0
	CompositionAttestationModeCode_PERSONAL              CompositionAttestationModeCode_Value = 1
	CompositionAttestationModeCode_PROFESSIONAL          CompositionAttestationModeCode_Value = 2
	CompositionAttestationModeCode_LEGAL                 CompositionAttestationModeCode_Value = 3
	CompositionAttestationModeCode_OFFICIAL              CompositionAttestationModeCode_Value = 4
)

// Enum value maps for CompositionAttestationModeCode_Value.
var (
	CompositionAttestationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSONAL",
		2: "PROFESSIONAL",
		3: "LEGAL",
		4: "OFFICIAL",
	}
	CompositionAttestationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSONAL":              1,
		"PROFESSIONAL":          2,
		"LEGAL":                 3,
		"OFFICIAL":              4,
	}
)

func (x CompositionAttestationModeCode_Value) Enum() *CompositionAttestationModeCode_Value {
	p := new(CompositionAttestationModeCode_Value)
	*p = x
	return p
}

func (x CompositionAttestationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionAttestationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[62].Descriptor()
}

func (CompositionAttestationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[62]
}

func (x CompositionAttestationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionAttestationModeCode_Value.Descriptor instead.
func (CompositionAttestationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{62, 0}
}

type CompositionStatusCode_Value int32

const (
	CompositionStatusCode_INVALID_UNINITIALIZED CompositionStatusCode_Value = 0
	CompositionStatusCode_PRELIMINARY           CompositionStatusCode_Value = 1
	CompositionStatusCode_FINAL                 CompositionStatusCode_Value = 2
	CompositionStatusCode_AMENDED               CompositionStatusCode_Value = 3
	CompositionStatusCode_ENTERED_IN_ERROR      CompositionStatusCode_Value = 4
)

// Enum value maps for CompositionStatusCode_Value.
var (
	CompositionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRELIMINARY",
		2: "FINAL",
		3: "AMENDED",
		4: "ENTERED_IN_ERROR",
	}
	CompositionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRELIMINARY":           1,
		"FINAL":                 2,
		"AMENDED":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x CompositionStatusCode_Value) Enum() *CompositionStatusCode_Value {
	p := new(CompositionStatusCode_Value)
	*p = x
	return p
}

func (x CompositionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[63].Descriptor()
}

func (CompositionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[63]
}

func (x CompositionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionStatusCode_Value.Descriptor instead.
func (CompositionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{63, 0}
}

type ConceptMapEquivalenceCode_Value int32

const (
	ConceptMapEquivalenceCode_INVALID_UNINITIALIZED ConceptMapEquivalenceCode_Value = 0
	ConceptMapEquivalenceCode_RELATEDTO             ConceptMapEquivalenceCode_Value = 1
	ConceptMapEquivalenceCode_EQUIVALENT            ConceptMapEquivalenceCode_Value = 2
	ConceptMapEquivalenceCode_EQUAL                 ConceptMapEquivalenceCode_Value = 3
	ConceptMapEquivalenceCode_WIDER                 ConceptMapEquivalenceCode_Value = 4
	ConceptMapEquivalenceCode_SUBSUMES              ConceptMapEquivalenceCode_Value = 5
	ConceptMapEquivalenceCode_NARROWER              ConceptMapEquivalenceCode_Value = 6
	ConceptMapEquivalenceCode_SPECIALIZES           ConceptMapEquivalenceCode_Value = 7
	ConceptMapEquivalenceCode_INEXACT               ConceptMapEquivalenceCode_Value = 8
	ConceptMapEquivalenceCode_UNMATCHED             ConceptMapEquivalenceCode_Value = 9
	ConceptMapEquivalenceCode_DISJOINT              ConceptMapEquivalenceCode_Value = 10
)

// Enum value maps for ConceptMapEquivalenceCode_Value.
var (
	ConceptMapEquivalenceCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "RELATEDTO",
		2:  "EQUIVALENT",
		3:  "EQUAL",
		4:  "WIDER",
		5:  "SUBSUMES",
		6:  "NARROWER",
		7:  "SPECIALIZES",
		8:  "INEXACT",
		9:  "UNMATCHED",
		10: "DISJOINT",
	}
	ConceptMapEquivalenceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RELATEDTO":             1,
		"EQUIVALENT":            2,
		"EQUAL":                 3,
		"WIDER":                 4,
		"SUBSUMES":              5,
		"NARROWER":              6,
		"SPECIALIZES":           7,
		"INEXACT":               8,
		"UNMATCHED":             9,
		"DISJOINT":              10,
	}
)

func (x ConceptMapEquivalenceCode_Value) Enum() *ConceptMapEquivalenceCode_Value {
	p := new(ConceptMapEquivalenceCode_Value)
	*p = x
	return p
}

func (x ConceptMapEquivalenceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapEquivalenceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[64].Descriptor()
}

func (ConceptMapEquivalenceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[64]
}

func (x ConceptMapEquivalenceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapEquivalenceCode_Value.Descriptor instead.
func (ConceptMapEquivalenceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{64, 0}
}

type ConceptMapGroupUnmappedModeCode_Value int32

const (
	ConceptMapGroupUnmappedModeCode_INVALID_UNINITIALIZED ConceptMapGroupUnmappedModeCode_Value = 0
	ConceptMapGroupUnmappedModeCode_PROVIDED              ConceptMapGroupUnmappedModeCode_Value = 1
	ConceptMapGroupUnmappedModeCode_FIXED                 ConceptMapGroupUnmappedModeCode_Value = 2
	ConceptMapGroupUnmappedModeCode_OTHER_MAP             ConceptMapGroupUnmappedModeCode_Value = 3
)

// Enum value maps for ConceptMapGroupUnmappedModeCode_Value.
var (
	ConceptMapGroupUnmappedModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROVIDED",
		2: "FIXED",
		3: "OTHER_MAP",
	}
	ConceptMapGroupUnmappedModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROVIDED":              1,
		"FIXED":                 2,
		"OTHER_MAP":             3,
	}
)

func (x ConceptMapGroupUnmappedModeCode_Value) Enum() *ConceptMapGroupUnmappedModeCode_Value {
	p := new(ConceptMapGroupUnmappedModeCode_Value)
	*p = x
	return p
}

func (x ConceptMapGroupUnmappedModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapGroupUnmappedModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[65].Descriptor()
}

func (ConceptMapGroupUnmappedModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[65]
}

func (x ConceptMapGroupUnmappedModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapGroupUnmappedModeCode_Value.Descriptor instead.
func (ConceptMapGroupUnmappedModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{65, 0}
}

type PropertyTypeCode_Value int32

const (
	PropertyTypeCode_INVALID_UNINITIALIZED PropertyTypeCode_Value = 0
	PropertyTypeCode_CODE                  PropertyTypeCode_Value = 1
	PropertyTypeCode_CODING                PropertyTypeCode_Value = 2
	PropertyTypeCode_STRING                PropertyTypeCode_Value = 3
	PropertyTypeCode_INTEGER               PropertyTypeCode_Value = 4
	PropertyTypeCode_BOOLEAN               PropertyTypeCode_Value = 5
	PropertyTypeCode_DATETIME              PropertyTypeCode_Value = 6
)

// Enum value maps for PropertyTypeCode_Value.
var (
	PropertyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODE",
		2: "CODING",
		3: "STRING",
		4: "INTEGER",
		5: "BOOLEAN",
		6: "DATETIME",
	}
	PropertyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODE":                  1,
		"CODING":                2,
		"STRING":                3,
		"INTEGER":               4,
		"BOOLEAN":               5,
		"DATETIME":              6,
	}
)

func (x PropertyTypeCode_Value) Enum() *PropertyTypeCode_Value {
	p := new(PropertyTypeCode_Value)
	*p = x
	return p
}

func (x PropertyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[66].Descriptor()
}

func (PropertyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[66]
}

func (x PropertyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyTypeCode_Value.Descriptor instead.
func (PropertyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{66, 0}
}

type ConditionalDeleteStatusCode_Value int32

const (
	ConditionalDeleteStatusCode_INVALID_UNINITIALIZED ConditionalDeleteStatusCode_Value = 0
	ConditionalDeleteStatusCode_NOT_SUPPORTED         ConditionalDeleteStatusCode_Value = 1
	ConditionalDeleteStatusCode_SINGLE                ConditionalDeleteStatusCode_Value = 2
	ConditionalDeleteStatusCode_MULTIPLE              ConditionalDeleteStatusCode_Value = 3
)

// Enum value maps for ConditionalDeleteStatusCode_Value.
var (
	ConditionalDeleteStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "SINGLE",
		3: "MULTIPLE",
	}
	ConditionalDeleteStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"SINGLE":                2,
		"MULTIPLE":              3,
	}
)

func (x ConditionalDeleteStatusCode_Value) Enum() *ConditionalDeleteStatusCode_Value {
	p := new(ConditionalDeleteStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalDeleteStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalDeleteStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[67].Descriptor()
}

func (ConditionalDeleteStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[67]
}

func (x ConditionalDeleteStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalDeleteStatusCode_Value.Descriptor instead.
func (ConditionalDeleteStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{67, 0}
}

type ConditionalReadStatusCode_Value int32

const (
	ConditionalReadStatusCode_INVALID_UNINITIALIZED ConditionalReadStatusCode_Value = 0
	ConditionalReadStatusCode_NOT_SUPPORTED         ConditionalReadStatusCode_Value = 1
	ConditionalReadStatusCode_MODIFIED_SINCE        ConditionalReadStatusCode_Value = 2
	ConditionalReadStatusCode_NOT_MATCH             ConditionalReadStatusCode_Value = 3
	ConditionalReadStatusCode_FULL_SUPPORT          ConditionalReadStatusCode_Value = 4
)

// Enum value maps for ConditionalReadStatusCode_Value.
var (
	ConditionalReadStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "MODIFIED_SINCE",
		3: "NOT_MATCH",
		4: "FULL_SUPPORT",
	}
	ConditionalReadStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"MODIFIED_SINCE":        2,
		"NOT_MATCH":             3,
		"FULL_SUPPORT":          4,
	}
)

func (x ConditionalReadStatusCode_Value) Enum() *ConditionalReadStatusCode_Value {
	p := new(ConditionalReadStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalReadStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalReadStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[68].Descriptor()
}

func (ConditionalReadStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[68]
}

func (x ConditionalReadStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalReadStatusCode_Value.Descriptor instead.
func (ConditionalReadStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{68, 0}
}

type ConditionCategoryCodesCode_Value int32

const (
	ConditionCategoryCodesCode_INVALID_UNINITIALIZED ConditionCategoryCodesCode_Value = 0
	ConditionCategoryCodesCode_PROBLEM_LIST_ITEM     ConditionCategoryCodesCode_Value = 1
	ConditionCategoryCodesCode_ENCOUNTER_DIAGNOSIS   ConditionCategoryCodesCode_Value = 2
)

// Enum value maps for ConditionCategoryCodesCode_Value.
var (
	ConditionCategoryCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROBLEM_LIST_ITEM",
		2: "ENCOUNTER_DIAGNOSIS",
	}
	ConditionCategoryCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROBLEM_LIST_ITEM":     1,
		"ENCOUNTER_DIAGNOSIS":   2,
	}
)

func (x ConditionCategoryCodesCode_Value) Enum() *ConditionCategoryCodesCode_Value {
	p := new(ConditionCategoryCodesCode_Value)
	*p = x
	return p
}

func (x ConditionCategoryCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionCategoryCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[69].Descriptor()
}

func (ConditionCategoryCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[69]
}

func (x ConditionCategoryCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionCategoryCodesCode_Value.Descriptor instead.
func (ConditionCategoryCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{69, 0}
}

type ConditionClinicalStatusCodesCode_Value int32

const (
	ConditionClinicalStatusCodesCode_INVALID_UNINITIALIZED ConditionClinicalStatusCodesCode_Value = 0
	ConditionClinicalStatusCodesCode_ACTIVE                ConditionClinicalStatusCodesCode_Value = 1
	ConditionClinicalStatusCodesCode_RECURRENCE            ConditionClinicalStatusCodesCode_Value = 2
	ConditionClinicalStatusCodesCode_INACTIVE              ConditionClinicalStatusCodesCode_Value = 3
	ConditionClinicalStatusCodesCode_REMISSION             ConditionClinicalStatusCodesCode_Value = 4
	ConditionClinicalStatusCodesCode_RESOLVED              ConditionClinicalStatusCodesCode_Value = 5
)

// Enum value maps for ConditionClinicalStatusCodesCode_Value.
var (
	ConditionClinicalStatusCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "RECURRENCE",
		3: "INACTIVE",
		4: "REMISSION",
		5: "RESOLVED",
	}
	ConditionClinicalStatusCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"RECURRENCE":            2,
		"INACTIVE":              3,
		"REMISSION":             4,
		"RESOLVED":              5,
	}
)

func (x ConditionClinicalStatusCodesCode_Value) Enum() *ConditionClinicalStatusCodesCode_Value {
	p := new(ConditionClinicalStatusCodesCode_Value)
	*p = x
	return p
}

func (x ConditionClinicalStatusCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionClinicalStatusCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[70].Descriptor()
}

func (ConditionClinicalStatusCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[70]
}

func (x ConditionClinicalStatusCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionClinicalStatusCodesCode_Value.Descriptor instead.
func (ConditionClinicalStatusCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{70, 0}
}

type ConditionStateCode_Value int32

const (
	ConditionStateCode_INVALID_UNINITIALIZED ConditionStateCode_Value = 0
	ConditionStateCode_ACTIVE                ConditionStateCode_Value = 1
	ConditionStateCode_INACTIVE              ConditionStateCode_Value = 2
	ConditionStateCode_RESOLVED              ConditionStateCode_Value = 3
)

// Enum value maps for ConditionStateCode_Value.
var (
	ConditionStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "RESOLVED",
	}
	ConditionStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"RESOLVED":              3,
	}
)

func (x ConditionStateCode_Value) Enum() *ConditionStateCode_Value {
	p := new(ConditionStateCode_Value)
	*p = x
	return p
}

func (x ConditionStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[71].Descriptor()
}

func (ConditionStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[71]
}

func (x ConditionStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionStateCode_Value.Descriptor instead.
func (ConditionStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{71, 0}
}

type ConditionVerificationStatusCode_Value int32

const (
	ConditionVerificationStatusCode_INVALID_UNINITIALIZED ConditionVerificationStatusCode_Value = 0
	ConditionVerificationStatusCode_PROVISIONAL           ConditionVerificationStatusCode_Value = 1
	ConditionVerificationStatusCode_DIFFERENTIAL          ConditionVerificationStatusCode_Value = 2
	ConditionVerificationStatusCode_CONFIRMED             ConditionVerificationStatusCode_Value = 3
	ConditionVerificationStatusCode_REFUTED               ConditionVerificationStatusCode_Value = 4
	ConditionVerificationStatusCode_ENTERED_IN_ERROR      ConditionVerificationStatusCode_Value = 5
	ConditionVerificationStatusCode_UNKNOWN               ConditionVerificationStatusCode_Value = 6
)

// Enum value maps for ConditionVerificationStatusCode_Value.
var (
	ConditionVerificationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROVISIONAL",
		2: "DIFFERENTIAL",
		3: "CONFIRMED",
		4: "REFUTED",
		5: "ENTERED_IN_ERROR",
		6: "UNKNOWN",
	}
	ConditionVerificationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROVISIONAL":           1,
		"DIFFERENTIAL":          2,
		"CONFIRMED":             3,
		"REFUTED":               4,
		"ENTERED_IN_ERROR":      5,
		"UNKNOWN":               6,
	}
)

func (x ConditionVerificationStatusCode_Value) Enum() *ConditionVerificationStatusCode_Value {
	p := new(ConditionVerificationStatusCode_Value)
	*p = x
	return p
}

func (x ConditionVerificationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionVerificationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[72].Descriptor()
}

func (ConditionVerificationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[72]
}

func (x ConditionVerificationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionVerificationStatusCode_Value.Descriptor instead.
func (ConditionVerificationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{72, 0}
}

type ConformanceExpectationCode_Value int32

const (
	ConformanceExpectationCode_INVALID_UNINITIALIZED ConformanceExpectationCode_Value = 0
	ConformanceExpectationCode_SHALL                 ConformanceExpectationCode_Value = 1
	ConformanceExpectationCode_SHOULD                ConformanceExpectationCode_Value = 2
	ConformanceExpectationCode_MAY                   ConformanceExpectationCode_Value = 3
	ConformanceExpectationCode_SHOULD_NOT            ConformanceExpectationCode_Value = 4
)

// Enum value maps for ConformanceExpectationCode_Value.
var (
	ConformanceExpectationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SHALL",
		2: "SHOULD",
		3: "MAY",
		4: "SHOULD_NOT",
	}
	ConformanceExpectationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SHALL":                 1,
		"SHOULD":                2,
		"MAY":                   3,
		"SHOULD_NOT":            4,
	}
)

func (x ConformanceExpectationCode_Value) Enum() *ConformanceExpectationCode_Value {
	p := new(ConformanceExpectationCode_Value)
	*p = x
	return p
}

func (x ConformanceExpectationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConformanceExpectationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[73].Descriptor()
}

func (ConformanceExpectationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[73]
}

func (x ConformanceExpectationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConformanceExpectationCode_Value.Descriptor instead.
func (ConformanceExpectationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{73, 0}
}

type ConsentDataMeaningCode_Value int32

const (
	ConsentDataMeaningCode_INVALID_UNINITIALIZED ConsentDataMeaningCode_Value = 0
	ConsentDataMeaningCode_INSTANCE              ConsentDataMeaningCode_Value = 1
	ConsentDataMeaningCode_RELATED               ConsentDataMeaningCode_Value = 2
	ConsentDataMeaningCode_DEPENDENTS            ConsentDataMeaningCode_Value = 3
	ConsentDataMeaningCode_AUTHOREDBY            ConsentDataMeaningCode_Value = 4
)

// Enum value maps for ConsentDataMeaningCode_Value.
var (
	ConsentDataMeaningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "RELATED",
		3: "DEPENDENTS",
		4: "AUTHOREDBY",
	}
	ConsentDataMeaningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"RELATED":               2,
		"DEPENDENTS":            3,
		"AUTHOREDBY":            4,
	}
)

func (x ConsentDataMeaningCode_Value) Enum() *ConsentDataMeaningCode_Value {
	p := new(ConsentDataMeaningCode_Value)
	*p = x
	return p
}

func (x ConsentDataMeaningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentDataMeaningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[74].Descriptor()
}

func (ConsentDataMeaningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[74]
}

func (x ConsentDataMeaningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentDataMeaningCode_Value.Descriptor instead.
func (ConsentDataMeaningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{74, 0}
}

type ConsentExceptTypeCode_Value int32

const (
	ConsentExceptTypeCode_INVALID_UNINITIALIZED ConsentExceptTypeCode_Value = 0
	ConsentExceptTypeCode_DENY                  ConsentExceptTypeCode_Value = 1
	ConsentExceptTypeCode_PERMIT                ConsentExceptTypeCode_Value = 2
)

// Enum value maps for ConsentExceptTypeCode_Value.
var (
	ConsentExceptTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DENY",
		2: "PERMIT",
	}
	ConsentExceptTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DENY":                  1,
		"PERMIT":                2,
	}
)

func (x ConsentExceptTypeCode_Value) Enum() *ConsentExceptTypeCode_Value {
	p := new(ConsentExceptTypeCode_Value)
	*p = x
	return p
}

func (x ConsentExceptTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentExceptTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[75].Descriptor()
}

func (ConsentExceptTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[75]
}

func (x ConsentExceptTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentExceptTypeCode_Value.Descriptor instead.
func (ConsentExceptTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{75, 0}
}

type ConsentStateCode_Value int32

const (
	ConsentStateCode_INVALID_UNINITIALIZED ConsentStateCode_Value = 0
	ConsentStateCode_DRAFT                 ConsentStateCode_Value = 1
	ConsentStateCode_PROPOSED              ConsentStateCode_Value = 2
	ConsentStateCode_ACTIVE                ConsentStateCode_Value = 3
	ConsentStateCode_REJECTED              ConsentStateCode_Value = 4
	ConsentStateCode_INACTIVE              ConsentStateCode_Value = 5
	ConsentStateCode_ENTERED_IN_ERROR      ConsentStateCode_Value = 6
)

// Enum value maps for ConsentStateCode_Value.
var (
	ConsentStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "PROPOSED",
		3: "ACTIVE",
		4: "REJECTED",
		5: "INACTIVE",
		6: "ENTERED_IN_ERROR",
	}
	ConsentStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"PROPOSED":              2,
		"ACTIVE":                3,
		"REJECTED":              4,
		"INACTIVE":              5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x ConsentStateCode_Value) Enum() *ConsentStateCode_Value {
	p := new(ConsentStateCode_Value)
	*p = x
	return p
}

func (x ConsentStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[76].Descriptor()
}

func (ConsentStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[76]
}

func (x ConsentStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentStateCode_Value.Descriptor instead.
func (ConsentStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{76, 0}
}

type ContactEntityTypeCode_Value int32

const (
	ContactEntityTypeCode_INVALID_UNINITIALIZED ContactEntityTypeCode_Value = 0
	ContactEntityTypeCode_BILL                  ContactEntityTypeCode_Value = 1
	ContactEntityTypeCode_ADMIN                 ContactEntityTypeCode_Value = 2
	ContactEntityTypeCode_HR                    ContactEntityTypeCode_Value = 3
	ContactEntityTypeCode_PAYOR                 ContactEntityTypeCode_Value = 4
	ContactEntityTypeCode_PATINF                ContactEntityTypeCode_Value = 5
	ContactEntityTypeCode_PRESS                 ContactEntityTypeCode_Value = 6
)

// Enum value maps for ContactEntityTypeCode_Value.
var (
	ContactEntityTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BILL",
		2: "ADMIN",
		3: "HR",
		4: "PAYOR",
		5: "PATINF",
		6: "PRESS",
	}
	ContactEntityTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BILL":                  1,
		"ADMIN":                 2,
		"HR":                    3,
		"PAYOR":                 4,
		"PATINF":                5,
		"PRESS":                 6,
	}
)

func (x ContactEntityTypeCode_Value) Enum() *ContactEntityTypeCode_Value {
	p := new(ContactEntityTypeCode_Value)
	*p = x
	return p
}

func (x ContactEntityTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactEntityTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[77].Descriptor()
}

func (ContactEntityTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[77]
}

func (x ContactEntityTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactEntityTypeCode_Value.Descriptor instead.
func (ContactEntityTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{77, 0}
}

type ContentTypeCode_Value int32

const (
	ContentTypeCode_INVALID_UNINITIALIZED ContentTypeCode_Value = 0
	ContentTypeCode_XML                   ContentTypeCode_Value = 1
	ContentTypeCode_JSON                  ContentTypeCode_Value = 2
	ContentTypeCode_TTL                   ContentTypeCode_Value = 3
	ContentTypeCode_NONE                  ContentTypeCode_Value = 4
)

// Enum value maps for ContentTypeCode_Value.
var (
	ContentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "XML",
		2: "JSON",
		3: "TTL",
		4: "NONE",
	}
	ContentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"XML":                   1,
		"JSON":                  2,
		"TTL":                   3,
		"NONE":                  4,
	}
)

func (x ContentTypeCode_Value) Enum() *ContentTypeCode_Value {
	p := new(ContentTypeCode_Value)
	*p = x
	return p
}

func (x ContentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[78].Descriptor()
}

func (ContentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[78]
}

func (x ContentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentTypeCode_Value.Descriptor instead.
func (ContentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{78, 0}
}

type ContractResourceStatusCode_Value int32

const (
	ContractResourceStatusCode_INVALID_UNINITIALIZED ContractResourceStatusCode_Value = 0
	ContractResourceStatusCode_AMENDED               ContractResourceStatusCode_Value = 1
	ContractResourceStatusCode_APPENDED              ContractResourceStatusCode_Value = 2
	ContractResourceStatusCode_CANCELLED             ContractResourceStatusCode_Value = 3
	ContractResourceStatusCode_DISPUTED              ContractResourceStatusCode_Value = 4
	ContractResourceStatusCode_ENTERED_IN_ERROR      ContractResourceStatusCode_Value = 5
	ContractResourceStatusCode_EXECUTABLE            ContractResourceStatusCode_Value = 6
	ContractResourceStatusCode_EXECUTED              ContractResourceStatusCode_Value = 7
	ContractResourceStatusCode_NEGOTIABLE            ContractResourceStatusCode_Value = 8
	ContractResourceStatusCode_OFFERED               ContractResourceStatusCode_Value = 9
	ContractResourceStatusCode_POLICY                ContractResourceStatusCode_Value = 10
	ContractResourceStatusCode_REJECTED              ContractResourceStatusCode_Value = 11
	ContractResourceStatusCode_RENEWED               ContractResourceStatusCode_Value = 12
	ContractResourceStatusCode_REVOKED               ContractResourceStatusCode_Value = 13
	ContractResourceStatusCode_RESOLVED              ContractResourceStatusCode_Value = 14
	ContractResourceStatusCode_TERMINATED            ContractResourceStatusCode_Value = 15
)

// Enum value maps for ContractResourceStatusCode_Value.
var (
	ContractResourceStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AMENDED",
		2:  "APPENDED",
		3:  "CANCELLED",
		4:  "DISPUTED",
		5:  "ENTERED_IN_ERROR",
		6:  "EXECUTABLE",
		7:  "EXECUTED",
		8:  "NEGOTIABLE",
		9:  "OFFERED",
		10: "POLICY",
		11: "REJECTED",
		12: "RENEWED",
		13: "REVOKED",
		14: "RESOLVED",
		15: "TERMINATED",
	}
	ContractResourceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMENDED":               1,
		"APPENDED":              2,
		"CANCELLED":             3,
		"DISPUTED":              4,
		"ENTERED_IN_ERROR":      5,
		"EXECUTABLE":            6,
		"EXECUTED":              7,
		"NEGOTIABLE":            8,
		"OFFERED":               9,
		"POLICY":                10,
		"REJECTED":              11,
		"RENEWED":               12,
		"REVOKED":               13,
		"RESOLVED":              14,
		"TERMINATED":            15,
	}
)

func (x ContractResourceStatusCode_Value) Enum() *ContractResourceStatusCode_Value {
	p := new(ContractResourceStatusCode_Value)
	*p = x
	return p
}

func (x ContractResourceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractResourceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[79].Descriptor()
}

func (ContractResourceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[79]
}

func (x ContractResourceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractResourceStatusCode_Value.Descriptor instead.
func (ContractResourceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{79, 0}
}

type ContributorTypeCode_Value int32

const (
	ContributorTypeCode_INVALID_UNINITIALIZED ContributorTypeCode_Value = 0
	ContributorTypeCode_AUTHOR                ContributorTypeCode_Value = 1
	ContributorTypeCode_EDITOR                ContributorTypeCode_Value = 2
	ContributorTypeCode_REVIEWER              ContributorTypeCode_Value = 3
	ContributorTypeCode_ENDORSER              ContributorTypeCode_Value = 4
)

// Enum value maps for ContributorTypeCode_Value.
var (
	ContributorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTHOR",
		2: "EDITOR",
		3: "REVIEWER",
		4: "ENDORSER",
	}
	ContributorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTHOR":                1,
		"EDITOR":                2,
		"REVIEWER":              3,
		"ENDORSER":              4,
	}
)

func (x ContributorTypeCode_Value) Enum() *ContributorTypeCode_Value {
	p := new(ContributorTypeCode_Value)
	*p = x
	return p
}

func (x ContributorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[80].Descriptor()
}

func (ContributorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[80]
}

func (x ContributorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorTypeCode_Value.Descriptor instead.
func (ContributorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{80, 0}
}

type CopyNumberEventCode_Value int32

const (
	CopyNumberEventCode_INVALID_UNINITIALIZED CopyNumberEventCode_Value = 0
	CopyNumberEventCode_AMP                   CopyNumberEventCode_Value = 1
	CopyNumberEventCode_DEL                   CopyNumberEventCode_Value = 2
	CopyNumberEventCode_LOF                   CopyNumberEventCode_Value = 3
)

// Enum value maps for CopyNumberEventCode_Value.
var (
	CopyNumberEventCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AMP",
		2: "DEL",
		3: "LOF",
	}
	CopyNumberEventCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMP":                   1,
		"DEL":                   2,
		"LOF":                   3,
	}
)

func (x CopyNumberEventCode_Value) Enum() *CopyNumberEventCode_Value {
	p := new(CopyNumberEventCode_Value)
	*p = x
	return p
}

func (x CopyNumberEventCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyNumberEventCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[81].Descriptor()
}

func (CopyNumberEventCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[81]
}

func (x CopyNumberEventCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyNumberEventCode_Value.Descriptor instead.
func (CopyNumberEventCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{81, 0}
}

type DataAbsentReasonCode_Value int32

const (
	DataAbsentReasonCode_INVALID_UNINITIALIZED DataAbsentReasonCode_Value = 0
	DataAbsentReasonCode_UNKNOWN               DataAbsentReasonCode_Value = 1
	DataAbsentReasonCode_ASKED                 DataAbsentReasonCode_Value = 2
	DataAbsentReasonCode_TEMP                  DataAbsentReasonCode_Value = 3
	DataAbsentReasonCode_NOT_ASKED             DataAbsentReasonCode_Value = 4
	DataAbsentReasonCode_MASKED                DataAbsentReasonCode_Value = 5
	DataAbsentReasonCode_UNSUPPORTED           DataAbsentReasonCode_Value = 6
	DataAbsentReasonCode_ASTEXT                DataAbsentReasonCode_Value = 7
	DataAbsentReasonCode_ERROR                 DataAbsentReasonCode_Value = 8
	DataAbsentReasonCode_NOT_A_NUMBER          DataAbsentReasonCode_Value = 9
	DataAbsentReasonCode_NOT_PERFORMED         DataAbsentReasonCode_Value = 10
)

// Enum value maps for DataAbsentReasonCode_Value.
var (
	DataAbsentReasonCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "UNKNOWN",
		2:  "ASKED",
		3:  "TEMP",
		4:  "NOT_ASKED",
		5:  "MASKED",
		6:  "UNSUPPORTED",
		7:  "ASTEXT",
		8:  "ERROR",
		9:  "NOT_A_NUMBER",
		10: "NOT_PERFORMED",
	}
	DataAbsentReasonCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
		"ASKED":                 2,
		"TEMP":                  3,
		"NOT_ASKED":             4,
		"MASKED":                5,
		"UNSUPPORTED":           6,
		"ASTEXT":                7,
		"ERROR":                 8,
		"NOT_A_NUMBER":          9,
		"NOT_PERFORMED":         10,
	}
)

func (x DataAbsentReasonCode_Value) Enum() *DataAbsentReasonCode_Value {
	p := new(DataAbsentReasonCode_Value)
	*p = x
	return p
}

func (x DataAbsentReasonCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataAbsentReasonCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[82].Descriptor()
}

func (DataAbsentReasonCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[82]
}

func (x DataAbsentReasonCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataAbsentReasonCode_Value.Descriptor instead.
func (DataAbsentReasonCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{82, 0}
}

type DataElementStringencyCode_Value int32

const (
	DataElementStringencyCode_INVALID_UNINITIALIZED DataElementStringencyCode_Value = 0
	DataElementStringencyCode_COMPARABLE            DataElementStringencyCode_Value = 1
	DataElementStringencyCode_FULLY_SPECIFIED       DataElementStringencyCode_Value = 2
	DataElementStringencyCode_EQUIVALENT            DataElementStringencyCode_Value = 3
	DataElementStringencyCode_CONVERTABLE           DataElementStringencyCode_Value = 4
	DataElementStringencyCode_SCALEABLE             DataElementStringencyCode_Value = 5
	DataElementStringencyCode_FLEXIBLE              DataElementStringencyCode_Value = 6
)

// Enum value maps for DataElementStringencyCode_Value.
var (
	DataElementStringencyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPARABLE",
		2: "FULLY_SPECIFIED",
		3: "EQUIVALENT",
		4: "CONVERTABLE",
		5: "SCALEABLE",
		6: "FLEXIBLE",
	}
	DataElementStringencyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPARABLE":            1,
		"FULLY_SPECIFIED":       2,
		"EQUIVALENT":            3,
		"CONVERTABLE":           4,
		"SCALEABLE":             5,
		"FLEXIBLE":              6,
	}
)

func (x DataElementStringencyCode_Value) Enum() *DataElementStringencyCode_Value {
	p := new(DataElementStringencyCode_Value)
	*p = x
	return p
}

func (x DataElementStringencyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataElementStringencyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[83].Descriptor()
}

func (DataElementStringencyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[83]
}

func (x DataElementStringencyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataElementStringencyCode_Value.Descriptor instead.
func (DataElementStringencyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{83, 0}
}

type TriggerTypeCode_Value int32

const (
	TriggerTypeCode_INVALID_UNINITIALIZED TriggerTypeCode_Value = 0
	TriggerTypeCode_NAMED_EVENT           TriggerTypeCode_Value = 1
	TriggerTypeCode_PERIODIC              TriggerTypeCode_Value = 2
	TriggerTypeCode_DATA_ADDED            TriggerTypeCode_Value = 3
	TriggerTypeCode_DATA_MODIFIED         TriggerTypeCode_Value = 4
	TriggerTypeCode_DATA_REMOVED          TriggerTypeCode_Value = 5
	TriggerTypeCode_DATA_ACCESSED         TriggerTypeCode_Value = 6
	TriggerTypeCode_DATA_ACCESS_ENDED     TriggerTypeCode_Value = 7
)

// Enum value maps for TriggerTypeCode_Value.
var (
	TriggerTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NAMED_EVENT",
		2: "PERIODIC",
		3: "DATA_ADDED",
		4: "DATA_MODIFIED",
		5: "DATA_REMOVED",
		6: "DATA_ACCESSED",
		7: "DATA_ACCESS_ENDED",
	}
	TriggerTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NAMED_EVENT":           1,
		"PERIODIC":              2,
		"DATA_ADDED":            3,
		"DATA_MODIFIED":         4,
		"DATA_REMOVED":          5,
		"DATA_ACCESSED":         6,
		"DATA_ACCESS_ENDED":     7,
	}
)

func (x TriggerTypeCode_Value) Enum() *TriggerTypeCode_Value {
	p := new(TriggerTypeCode_Value)
	*p = x
	return p
}

func (x TriggerTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[84].Descriptor()
}

func (TriggerTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[84]
}

func (x TriggerTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerTypeCode_Value.Descriptor instead.
func (TriggerTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{84, 0}
}

type DataTypeCode_Value int32

const (
	DataTypeCode_INVALID_UNINITIALIZED DataTypeCode_Value = 0
	DataTypeCode_ADDRESS               DataTypeCode_Value = 1
	DataTypeCode_AGE                   DataTypeCode_Value = 2
	DataTypeCode_ANNOTATION            DataTypeCode_Value = 3
	DataTypeCode_ATTACHMENT            DataTypeCode_Value = 4
	DataTypeCode_BACKBONE_ELEMENT      DataTypeCode_Value = 5
	DataTypeCode_CODEABLE_CONCEPT      DataTypeCode_Value = 6
	DataTypeCode_CODING                DataTypeCode_Value = 7
	DataTypeCode_CONTACT_DETAIL        DataTypeCode_Value = 8
	DataTypeCode_CONTACT_POINT         DataTypeCode_Value = 9
	DataTypeCode_CONTRIBUTOR           DataTypeCode_Value = 10
	DataTypeCode_COUNT                 DataTypeCode_Value = 11
	DataTypeCode_DATA_REQUIREMENT      DataTypeCode_Value = 12
	DataTypeCode_DISTANCE              DataTypeCode_Value = 13
	DataTypeCode_DOSAGE                DataTypeCode_Value = 14
	DataTypeCode_DURATION              DataTypeCode_Value = 15
	DataTypeCode_ELEMENT               DataTypeCode_Value = 16
	DataTypeCode_ELEMENT_DEFINITION    DataTypeCode_Value = 17
	DataTypeCode_EXTENSION             DataTypeCode_Value = 18
	DataTypeCode_HUMAN_NAME            DataTypeCode_Value = 19
	DataTypeCode_IDENTIFIER            DataTypeCode_Value = 20
	DataTypeCode_META                  DataTypeCode_Value = 21
	DataTypeCode_MONEY                 DataTypeCode_Value = 22
	DataTypeCode_NARRATIVE             DataTypeCode_Value = 23
	DataTypeCode_PARAMETER_DEFINITION  DataTypeCode_Value = 24
	DataTypeCode_PERIOD                DataTypeCode_Value = 25
	DataTypeCode_QUANTITY              DataTypeCode_Value = 26
	DataTypeCode_RANGE                 DataTypeCode_Value = 27
	DataTypeCode_RATIO                 DataTypeCode_Value = 28
	DataTypeCode_REFERENCE             DataTypeCode_Value = 29
	DataTypeCode_RELATED_ARTIFACT      DataTypeCode_Value = 30
	DataTypeCode_SAMPLED_DATA          DataTypeCode_Value = 31
	DataTypeCode_SIGNATURE             DataTypeCode_Value = 32
	DataTypeCode_SIMPLE_QUANTITY       DataTypeCode_Value = 33
	DataTypeCode_TIMING                DataTypeCode_Value = 34
	DataTypeCode_TRIGGER_DEFINITION    DataTypeCode_Value = 35
	DataTypeCode_USAGE_CONTEXT         DataTypeCode_Value = 36
	DataTypeCode_BASE64_BINARY         DataTypeCode_Value = 37
	DataTypeCode_BOOLEAN               DataTypeCode_Value = 38
	DataTypeCode_CODE                  DataTypeCode_Value = 39
	DataTypeCode_DATE                  DataTypeCode_Value = 40
	DataTypeCode_DATE_TIME             DataTypeCode_Value = 41
	DataTypeCode_DECIMAL               DataTypeCode_Value = 42
	DataTypeCode_ID                    DataTypeCode_Value = 43
	DataTypeCode_INSTANT               DataTypeCode_Value = 44
	DataTypeCode_INTEGER               DataTypeCode_Value = 45
	DataTypeCode_MARKDOWN              DataTypeCode_Value = 46
	DataTypeCode_OID                   DataTypeCode_Value = 47
	DataTypeCode_POSITIVE_INT          DataTypeCode_Value = 48
	DataTypeCode_STRING                DataTypeCode_Value = 49
	DataTypeCode_TIME                  DataTypeCode_Value = 50
	DataTypeCode_UNSIGNED_INT          DataTypeCode_Value = 51
	DataTypeCode_URI                   DataTypeCode_Value = 52
	DataTypeCode_UUID                  DataTypeCode_Value = 53
	DataTypeCode_XHTML                 DataTypeCode_Value = 54
)

// Enum value maps for DataTypeCode_Value.
var (
	DataTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ADDRESS",
		2:  "AGE",
		3:  "ANNOTATION",
		4:  "ATTACHMENT",
		5:  "BACKBONE_ELEMENT",
		6:  "CODEABLE_CONCEPT",
		7:  "CODING",
		8:  "CONTACT_DETAIL",
		9:  "CONTACT_POINT",
		10: "CONTRIBUTOR",
		11: "COUNT",
		12: "DATA_REQUIREMENT",
		13: "DISTANCE",
		14: "DOSAGE",
		15: "DURATION",
		16: "ELEMENT",
		17: "ELEMENT_DEFINITION",
		18: "EXTENSION",
		19: "HUMAN_NAME",
		20: "IDENTIFIER",
		21: "META",
		22: "MONEY",
		23: "NARRATIVE",
		24: "PARAMETER_DEFINITION",
		25: "PERIOD",
		26: "QUANTITY",
		27: "RANGE",
		28: "RATIO",
		29: "REFERENCE",
		30: "RELATED_ARTIFACT",
		31: "SAMPLED_DATA",
		32: "SIGNATURE",
		33: "SIMPLE_QUANTITY",
		34: "TIMING",
		35: "TRIGGER_DEFINITION",
		36: "USAGE_CONTEXT",
		37: "BASE64_BINARY",
		38: "BOOLEAN",
		39: "CODE",
		40: "DATE",
		41: "DATE_TIME",
		42: "DECIMAL",
		43: "ID",
		44: "INSTANT",
		45: "INTEGER",
		46: "MARKDOWN",
		47: "OID",
		48: "POSITIVE_INT",
		49: "STRING",
		50: "TIME",
		51: "UNSIGNED_INT",
		52: "URI",
		53: "UUID",
		54: "XHTML",
	}
	DataTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ADDRESS":               1,
		"AGE":                   2,
		"ANNOTATION":            3,
		"ATTACHMENT":            4,
		"BACKBONE_ELEMENT":      5,
		"CODEABLE_CONCEPT":      6,
		"CODING":                7,
		"CONTACT_DETAIL":        8,
		"CONTACT_POINT":         9,
		"CONTRIBUTOR":           10,
		"COUNT":                 11,
		"DATA_REQUIREMENT":      12,
		"DISTANCE":              13,
		"DOSAGE":                14,
		"DURATION":              15,
		"ELEMENT":               16,
		"ELEMENT_DEFINITION":    17,
		"EXTENSION":             18,
		"HUMAN_NAME":            19,
		"IDENTIFIER":            20,
		"META":                  21,
		"MONEY":                 22,
		"NARRATIVE":             23,
		"PARAMETER_DEFINITION":  24,
		"PERIOD":                25,
		"QUANTITY":              26,
		"RANGE":                 27,
		"RATIO":                 28,
		"REFERENCE":             29,
		"RELATED_ARTIFACT":      30,
		"SAMPLED_DATA":          31,
		"SIGNATURE":             32,
		"SIMPLE_QUANTITY":       33,
		"TIMING":                34,
		"TRIGGER_DEFINITION":    35,
		"USAGE_CONTEXT":         36,
		"BASE64_BINARY":         37,
		"BOOLEAN":               38,
		"CODE":                  39,
		"DATE":                  40,
		"DATE_TIME":             41,
		"DECIMAL":               42,
		"ID":                    43,
		"INSTANT":               44,
		"INTEGER":               45,
		"MARKDOWN":              46,
		"OID":                   47,
		"POSITIVE_INT":          48,
		"STRING":                49,
		"TIME":                  50,
		"UNSIGNED_INT":          51,
		"URI":                   52,
		"UUID":                  53,
		"XHTML":                 54,
	}
)

func (x DataTypeCode_Value) Enum() *DataTypeCode_Value {
	p := new(DataTypeCode_Value)
	*p = x
	return p
}

func (x DataTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[85].Descriptor()
}

func (DataTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[85]
}

func (x DataTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypeCode_Value.Descriptor instead.
func (DataTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{85, 0}
}

type FHIRAllTypesCode_Value int32

const (
	FHIRAllTypesCode_INVALID_UNINITIALIZED       FHIRAllTypesCode_Value = 0
	FHIRAllTypesCode_ADDRESS                     FHIRAllTypesCode_Value = 1
	FHIRAllTypesCode_AGE                         FHIRAllTypesCode_Value = 2
	FHIRAllTypesCode_ANNOTATION                  FHIRAllTypesCode_Value = 3
	FHIRAllTypesCode_ATTACHMENT                  FHIRAllTypesCode_Value = 4
	FHIRAllTypesCode_BACKBONE_ELEMENT            FHIRAllTypesCode_Value = 5
	FHIRAllTypesCode_CODEABLE_CONCEPT            FHIRAllTypesCode_Value = 6
	FHIRAllTypesCode_CODING                      FHIRAllTypesCode_Value = 7
	FHIRAllTypesCode_CONTACT_DETAIL              FHIRAllTypesCode_Value = 8
	FHIRAllTypesCode_CONTACT_POINT               FHIRAllTypesCode_Value = 9
	FHIRAllTypesCode_CONTRIBUTOR                 FHIRAllTypesCode_Value = 10
	FHIRAllTypesCode_COUNT                       FHIRAllTypesCode_Value = 11
	FHIRAllTypesCode_DATA_REQUIREMENT            FHIRAllTypesCode_Value = 12
	FHIRAllTypesCode_DISTANCE                    FHIRAllTypesCode_Value = 13
	FHIRAllTypesCode_DOSAGE                      FHIRAllTypesCode_Value = 14
	FHIRAllTypesCode_DURATION                    FHIRAllTypesCode_Value = 15
	FHIRAllTypesCode_ELEMENT                     FHIRAllTypesCode_Value = 16
	FHIRAllTypesCode_ELEMENT_DEFINITION          FHIRAllTypesCode_Value = 17
	FHIRAllTypesCode_EXTENSION                   FHIRAllTypesCode_Value = 18
	FHIRAllTypesCode_HUMAN_NAME                  FHIRAllTypesCode_Value = 19
	FHIRAllTypesCode_IDENTIFIER                  FHIRAllTypesCode_Value = 20
	FHIRAllTypesCode_META                        FHIRAllTypesCode_Value = 21
	FHIRAllTypesCode_MONEY                       FHIRAllTypesCode_Value = 22
	FHIRAllTypesCode_NARRATIVE                   FHIRAllTypesCode_Value = 23
	FHIRAllTypesCode_PARAMETER_DEFINITION        FHIRAllTypesCode_Value = 24
	FHIRAllTypesCode_PERIOD                      FHIRAllTypesCode_Value = 25
	FHIRAllTypesCode_QUANTITY                    FHIRAllTypesCode_Value = 26
	FHIRAllTypesCode_RANGE                       FHIRAllTypesCode_Value = 27
	FHIRAllTypesCode_RATIO                       FHIRAllTypesCode_Value = 28
	FHIRAllTypesCode_REFERENCE                   FHIRAllTypesCode_Value = 29
	FHIRAllTypesCode_RELATED_ARTIFACT            FHIRAllTypesCode_Value = 30
	FHIRAllTypesCode_SAMPLED_DATA                FHIRAllTypesCode_Value = 31
	FHIRAllTypesCode_SIGNATURE                   FHIRAllTypesCode_Value = 32
	FHIRAllTypesCode_SIMPLE_QUANTITY             FHIRAllTypesCode_Value = 33
	FHIRAllTypesCode_TIMING                      FHIRAllTypesCode_Value = 34
	FHIRAllTypesCode_TRIGGER_DEFINITION          FHIRAllTypesCode_Value = 35
	FHIRAllTypesCode_USAGE_CONTEXT               FHIRAllTypesCode_Value = 36
	FHIRAllTypesCode_BASE64_BINARY               FHIRAllTypesCode_Value = 37
	FHIRAllTypesCode_BOOLEAN                     FHIRAllTypesCode_Value = 38
	FHIRAllTypesCode_CODE                        FHIRAllTypesCode_Value = 39
	FHIRAllTypesCode_DATE                        FHIRAllTypesCode_Value = 40
	FHIRAllTypesCode_DATE_TIME                   FHIRAllTypesCode_Value = 41
	FHIRAllTypesCode_DECIMAL                     FHIRAllTypesCode_Value = 42
	FHIRAllTypesCode_ID                          FHIRAllTypesCode_Value = 43
	FHIRAllTypesCode_INSTANT                     FHIRAllTypesCode_Value = 44
	FHIRAllTypesCode_INTEGER                     FHIRAllTypesCode_Value = 45
	FHIRAllTypesCode_MARKDOWN                    FHIRAllTypesCode_Value = 46
	FHIRAllTypesCode_OID                         FHIRAllTypesCode_Value = 47
	FHIRAllTypesCode_POSITIVE_INT                FHIRAllTypesCode_Value = 48
	FHIRAllTypesCode_STRING                      FHIRAllTypesCode_Value = 49
	FHIRAllTypesCode_TIME                        FHIRAllTypesCode_Value = 50
	FHIRAllTypesCode_UNSIGNED_INT                FHIRAllTypesCode_Value = 51
	FHIRAllTypesCode_URI                         FHIRAllTypesCode_Value = 52
	FHIRAllTypesCode_UUID                        FHIRAllTypesCode_Value = 53
	FHIRAllTypesCode_XHTML                       FHIRAllTypesCode_Value = 54
	FHIRAllTypesCode_ACCOUNT                     FHIRAllTypesCode_Value = 55
	FHIRAllTypesCode_ACTIVITY_DEFINITION         FHIRAllTypesCode_Value = 56
	FHIRAllTypesCode_ADVERSE_EVENT               FHIRAllTypesCode_Value = 57
	FHIRAllTypesCode_ALLERGY_INTOLERANCE         FHIRAllTypesCode_Value = 58
	FHIRAllTypesCode_APPOINTMENT                 FHIRAllTypesCode_Value = 59
	FHIRAllTypesCode_APPOINTMENT_RESPONSE        FHIRAllTypesCode_Value = 60
	FHIRAllTypesCode_AUDIT_EVENT                 FHIRAllTypesCode_Value = 61
	FHIRAllTypesCode_BASIC                       FHIRAllTypesCode_Value = 62
	FHIRAllTypesCode_BINARY                      FHIRAllTypesCode_Value = 63
	FHIRAllTypesCode_BODY_SITE                   FHIRAllTypesCode_Value = 64
	FHIRAllTypesCode_BUNDLE                      FHIRAllTypesCode_Value = 65
	FHIRAllTypesCode_CAPABILITY_STATEMENT        FHIRAllTypesCode_Value = 66
	FHIRAllTypesCode_CARE_PLAN                   FHIRAllTypesCode_Value = 67
	FHIRAllTypesCode_CARE_TEAM                   FHIRAllTypesCode_Value = 68
	FHIRAllTypesCode_CHARGE_ITEM                 FHIRAllTypesCode_Value = 69
	FHIRAllTypesCode_CLAIM                       FHIRAllTypesCode_Value = 70
	FHIRAllTypesCode_CLAIM_RESPONSE              FHIRAllTypesCode_Value = 71
	FHIRAllTypesCode_CLINICAL_IMPRESSION         FHIRAllTypesCode_Value = 72
	FHIRAllTypesCode_CODE_SYSTEM                 FHIRAllTypesCode_Value = 73
	FHIRAllTypesCode_COMMUNICATION               FHIRAllTypesCode_Value = 74
	FHIRAllTypesCode_COMMUNICATION_REQUEST       FHIRAllTypesCode_Value = 75
	FHIRAllTypesCode_COMPARTMENT_DEFINITION      FHIRAllTypesCode_Value = 76
	FHIRAllTypesCode_COMPOSITION                 FHIRAllTypesCode_Value = 77
	FHIRAllTypesCode_CONCEPT_MAP                 FHIRAllTypesCode_Value = 78
	FHIRAllTypesCode_CONDITION                   FHIRAllTypesCode_Value = 79
	FHIRAllTypesCode_CONSENT                     FHIRAllTypesCode_Value = 80
	FHIRAllTypesCode_CONTRACT                    FHIRAllTypesCode_Value = 81
	FHIRAllTypesCode_COVERAGE                    FHIRAllTypesCode_Value = 82
	FHIRAllTypesCode_DATA_ELEMENT                FHIRAllTypesCode_Value = 83
	FHIRAllTypesCode_DETECTED_ISSUE              FHIRAllTypesCode_Value = 84
	FHIRAllTypesCode_DEVICE                      FHIRAllTypesCode_Value = 85
	FHIRAllTypesCode_DEVICE_COMPONENT            FHIRAllTypesCode_Value = 86
	FHIRAllTypesCode_DEVICE_METRIC               FHIRAllTypesCode_Value = 87
	FHIRAllTypesCode_DEVICE_REQUEST              FHIRAllTypesCode_Value = 88
	FHIRAllTypesCode_DEVICE_USE_STATEMENT        FHIRAllTypesCode_Value = 89
	FHIRAllTypesCode_DIAGNOSTIC_REPORT           FHIRAllTypesCode_Value = 90
	FHIRAllTypesCode_DOCUMENT_MANIFEST           FHIRAllTypesCode_Value = 91
	FHIRAllTypesCode_DOCUMENT_REFERENCE          FHIRAllTypesCode_Value = 92
	FHIRAllTypesCode_DOMAIN_RESOURCE             FHIRAllTypesCode_Value = 93
	FHIRAllTypesCode_ELIGIBILITY_REQUEST         FHIRAllTypesCode_Value = 94
	FHIRAllTypesCode_ELIGIBILITY_RESPONSE        FHIRAllTypesCode_Value = 95
	FHIRAllTypesCode_ENCOUNTER                   FHIRAllTypesCode_Value = 96
	FHIRAllTypesCode_ENDPOINT                    FHIRAllTypesCode_Value = 97
	FHIRAllTypesCode_ENROLLMENT_REQUEST          FHIRAllTypesCode_Value = 98
	FHIRAllTypesCode_ENROLLMENT_RESPONSE         FHIRAllTypesCode_Value = 99
	FHIRAllTypesCode_EPISODE_OF_CARE             FHIRAllTypesCode_Value = 100
	FHIRAllTypesCode_EXPANSION_PROFILE           FHIRAllTypesCode_Value = 101
	FHIRAllTypesCode_EXPLANATION_OF_BENEFIT      FHIRAllTypesCode_Value = 102
	FHIRAllTypesCode_FAMILY_MEMBER_HISTORY       FHIRAllTypesCode_Value = 103
	FHIRAllTypesCode_FLAG                        FHIRAllTypesCode_Value = 104
	FHIRAllTypesCode_GOAL                        FHIRAllTypesCode_Value = 105
	FHIRAllTypesCode_GRAPH_DEFINITION            FHIRAllTypesCode_Value = 106
	FHIRAllTypesCode_GROUP                       FHIRAllTypesCode_Value = 107
	FHIRAllTypesCode_GUIDANCE_RESPONSE           FHIRAllTypesCode_Value = 108
	FHIRAllTypesCode_HEALTHCARE_SERVICE          FHIRAllTypesCode_Value = 109
	FHIRAllTypesCode_IMAGING_MANIFEST            FHIRAllTypesCode_Value = 110
	FHIRAllTypesCode_IMAGING_STUDY               FHIRAllTypesCode_Value = 111
	FHIRAllTypesCode_IMMUNIZATION                FHIRAllTypesCode_Value = 112
	FHIRAllTypesCode_IMMUNIZATION_RECOMMENDATION FHIRAllTypesCode_Value = 113
	FHIRAllTypesCode_IMPLEMENTATION_GUIDE        FHIRAllTypesCode_Value = 114
	FHIRAllTypesCode_LIBRARY                     FHIRAllTypesCode_Value = 115
	FHIRAllTypesCode_LINKAGE                     FHIRAllTypesCode_Value = 116
	FHIRAllTypesCode_LIST                        FHIRAllTypesCode_Value = 117
	FHIRAllTypesCode_LOCATION                    FHIRAllTypesCode_Value = 118
	FHIRAllTypesCode_MEASURE                     FHIRAllTypesCode_Value = 119
	FHIRAllTypesCode_MEASURE_REPORT              FHIRAllTypesCode_Value = 120
	FHIRAllTypesCode_MEDIA                       FHIRAllTypesCode_Value = 121
	FHIRAllTypesCode_MEDICATION                  FHIRAllTypesCode_Value = 122
	FHIRAllTypesCode_MEDICATION_ADMINISTRATION   FHIRAllTypesCode_Value = 123
	FHIRAllTypesCode_MEDICATION_DISPENSE         FHIRAllTypesCode_Value = 124
	FHIRAllTypesCode_MEDICATION_REQUEST          FHIRAllTypesCode_Value = 125
	FHIRAllTypesCode_MEDICATION_STATEMENT        FHIRAllTypesCode_Value = 126
	FHIRAllTypesCode_MESSAGE_DEFINITION          FHIRAllTypesCode_Value = 127
	FHIRAllTypesCode_MESSAGE_HEADER              FHIRAllTypesCode_Value = 128
	FHIRAllTypesCode_NAMING_SYSTEM               FHIRAllTypesCode_Value = 129
	FHIRAllTypesCode_NUTRITION_ORDER             FHIRAllTypesCode_Value = 130
	FHIRAllTypesCode_OBSERVATION                 FHIRAllTypesCode_Value = 131
	FHIRAllTypesCode_OPERATION_DEFINITION        FHIRAllTypesCode_Value = 132
	FHIRAllTypesCode_OPERATION_OUTCOME           FHIRAllTypesCode_Value = 133
	FHIRAllTypesCode_ORGANIZATION                FHIRAllTypesCode_Value = 134
	FHIRAllTypesCode_PARAMETERS                  FHIRAllTypesCode_Value = 135
	FHIRAllTypesCode_PATIENT                     FHIRAllTypesCode_Value = 136
	FHIRAllTypesCode_PAYMENT_NOTICE              FHIRAllTypesCode_Value = 137
	FHIRAllTypesCode_PAYMENT_RECONCILIATION      FHIRAllTypesCode_Value = 138
	FHIRAllTypesCode_PERSON                      FHIRAllTypesCode_Value = 139
	FHIRAllTypesCode_PLAN_DEFINITION             FHIRAllTypesCode_Value = 140
	FHIRAllTypesCode_PRACTITIONER                FHIRAllTypesCode_Value = 141
	FHIRAllTypesCode_PRACTITIONER_ROLE           FHIRAllTypesCode_Value = 142
	FHIRAllTypesCode_PROCEDURE                   FHIRAllTypesCode_Value = 143
	FHIRAllTypesCode_PROCEDURE_REQUEST           FHIRAllTypesCode_Value = 144
	FHIRAllTypesCode_PROCESS_REQUEST             FHIRAllTypesCode_Value = 145
	FHIRAllTypesCode_PROCESS_RESPONSE            FHIRAllTypesCode_Value = 146
	FHIRAllTypesCode_PROVENANCE                  FHIRAllTypesCode_Value = 147
	FHIRAllTypesCode_QUESTIONNAIRE               FHIRAllTypesCode_Value = 148
	FHIRAllTypesCode_QUESTIONNAIRE_RESPONSE      FHIRAllTypesCode_Value = 149
	FHIRAllTypesCode_REFERRAL_REQUEST            FHIRAllTypesCode_Value = 150
	FHIRAllTypesCode_RELATED_PERSON              FHIRAllTypesCode_Value = 151
	FHIRAllTypesCode_REQUEST_GROUP               FHIRAllTypesCode_Value = 152
	FHIRAllTypesCode_RESEARCH_STUDY              FHIRAllTypesCode_Value = 153
	FHIRAllTypesCode_RESEARCH_SUBJECT            FHIRAllTypesCode_Value = 154
	FHIRAllTypesCode_RESOURCE                    FHIRAllTypesCode_Value = 155
	FHIRAllTypesCode_RISK_ASSESSMENT             FHIRAllTypesCode_Value = 156
	FHIRAllTypesCode_SCHEDULE                    FHIRAllTypesCode_Value = 157
	FHIRAllTypesCode_SEARCH_PARAMETER            FHIRAllTypesCode_Value = 158
	FHIRAllTypesCode_SEQUENCE                    FHIRAllTypesCode_Value = 159
	FHIRAllTypesCode_SERVICE_DEFINITION          FHIRAllTypesCode_Value = 160
	FHIRAllTypesCode_SLOT                        FHIRAllTypesCode_Value = 161
	FHIRAllTypesCode_SPECIMEN                    FHIRAllTypesCode_Value = 162
	FHIRAllTypesCode_STRUCTURE_DEFINITION        FHIRAllTypesCode_Value = 163
	FHIRAllTypesCode_STRUCTURE_MAP               FHIRAllTypesCode_Value = 164
	FHIRAllTypesCode_SUBSCRIPTION                FHIRAllTypesCode_Value = 165
	FHIRAllTypesCode_SUBSTANCE                   FHIRAllTypesCode_Value = 166
	FHIRAllTypesCode_SUPPLY_DELIVERY             FHIRAllTypesCode_Value = 167
	FHIRAllTypesCode_SUPPLY_REQUEST              FHIRAllTypesCode_Value = 168
	FHIRAllTypesCode_TASK                        FHIRAllTypesCode_Value = 169
	FHIRAllTypesCode_TEST_REPORT                 FHIRAllTypesCode_Value = 170
	FHIRAllTypesCode_TEST_SCRIPT                 FHIRAllTypesCode_Value = 171
	FHIRAllTypesCode_VALUE_SET                   FHIRAllTypesCode_Value = 172
	FHIRAllTypesCode_VISION_PRESCRIPTION         FHIRAllTypesCode_Value = 173
	FHIRAllTypesCode_TYPE                        FHIRAllTypesCode_Value = 174
	FHIRAllTypesCode_ANY                         FHIRAllTypesCode_Value = 175
)

// Enum value maps for FHIRAllTypesCode_Value.
var (
	FHIRAllTypesCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ADDRESS",
		2:   "AGE",
		3:   "ANNOTATION",
		4:   "ATTACHMENT",
		5:   "BACKBONE_ELEMENT",
		6:   "CODEABLE_CONCEPT",
		7:   "CODING",
		8:   "CONTACT_DETAIL",
		9:   "CONTACT_POINT",
		10:  "CONTRIBUTOR",
		11:  "COUNT",
		12:  "DATA_REQUIREMENT",
		13:  "DISTANCE",
		14:  "DOSAGE",
		15:  "DURATION",
		16:  "ELEMENT",
		17:  "ELEMENT_DEFINITION",
		18:  "EXTENSION",
		19:  "HUMAN_NAME",
		20:  "IDENTIFIER",
		21:  "META",
		22:  "MONEY",
		23:  "NARRATIVE",
		24:  "PARAMETER_DEFINITION",
		25:  "PERIOD",
		26:  "QUANTITY",
		27:  "RANGE",
		28:  "RATIO",
		29:  "REFERENCE",
		30:  "RELATED_ARTIFACT",
		31:  "SAMPLED_DATA",
		32:  "SIGNATURE",
		33:  "SIMPLE_QUANTITY",
		34:  "TIMING",
		35:  "TRIGGER_DEFINITION",
		36:  "USAGE_CONTEXT",
		37:  "BASE64_BINARY",
		38:  "BOOLEAN",
		39:  "CODE",
		40:  "DATE",
		41:  "DATE_TIME",
		42:  "DECIMAL",
		43:  "ID",
		44:  "INSTANT",
		45:  "INTEGER",
		46:  "MARKDOWN",
		47:  "OID",
		48:  "POSITIVE_INT",
		49:  "STRING",
		50:  "TIME",
		51:  "UNSIGNED_INT",
		52:  "URI",
		53:  "UUID",
		54:  "XHTML",
		55:  "ACCOUNT",
		56:  "ACTIVITY_DEFINITION",
		57:  "ADVERSE_EVENT",
		58:  "ALLERGY_INTOLERANCE",
		59:  "APPOINTMENT",
		60:  "APPOINTMENT_RESPONSE",
		61:  "AUDIT_EVENT",
		62:  "BASIC",
		63:  "BINARY",
		64:  "BODY_SITE",
		65:  "BUNDLE",
		66:  "CAPABILITY_STATEMENT",
		67:  "CARE_PLAN",
		68:  "CARE_TEAM",
		69:  "CHARGE_ITEM",
		70:  "CLAIM",
		71:  "CLAIM_RESPONSE",
		72:  "CLINICAL_IMPRESSION",
		73:  "CODE_SYSTEM",
		74:  "COMMUNICATION",
		75:  "COMMUNICATION_REQUEST",
		76:  "COMPARTMENT_DEFINITION",
		77:  "COMPOSITION",
		78:  "CONCEPT_MAP",
		79:  "CONDITION",
		80:  "CONSENT",
		81:  "CONTRACT",
		82:  "COVERAGE",
		83:  "DATA_ELEMENT",
		84:  "DETECTED_ISSUE",
		85:  "DEVICE",
		86:  "DEVICE_COMPONENT",
		87:  "DEVICE_METRIC",
		88:  "DEVICE_REQUEST",
		89:  "DEVICE_USE_STATEMENT",
		90:  "DIAGNOSTIC_REPORT",
		91:  "DOCUMENT_MANIFEST",
		92:  "DOCUMENT_REFERENCE",
		93:  "DOMAIN_RESOURCE",
		94:  "ELIGIBILITY_REQUEST",
		95:  "ELIGIBILITY_RESPONSE",
		96:  "ENCOUNTER",
		97:  "ENDPOINT",
		98:  "ENROLLMENT_REQUEST",
		99:  "ENROLLMENT_RESPONSE",
		100: "EPISODE_OF_CARE",
		101: "EXPANSION_PROFILE",
		102: "EXPLANATION_OF_BENEFIT",
		103: "FAMILY_MEMBER_HISTORY",
		104: "FLAG",
		105: "GOAL",
		106: "GRAPH_DEFINITION",
		107: "GROUP",
		108: "GUIDANCE_RESPONSE",
		109: "HEALTHCARE_SERVICE",
		110: "IMAGING_MANIFEST",
		111: "IMAGING_STUDY",
		112: "IMMUNIZATION",
		113: "IMMUNIZATION_RECOMMENDATION",
		114: "IMPLEMENTATION_GUIDE",
		115: "LIBRARY",
		116: "LINKAGE",
		117: "LIST",
		118: "LOCATION",
		119: "MEASURE",
		120: "MEASURE_REPORT",
		121: "MEDIA",
		122: "MEDICATION",
		123: "MEDICATION_ADMINISTRATION",
		124: "MEDICATION_DISPENSE",
		125: "MEDICATION_REQUEST",
		126: "MEDICATION_STATEMENT",
		127: "MESSAGE_DEFINITION",
		128: "MESSAGE_HEADER",
		129: "NAMING_SYSTEM",
		130: "NUTRITION_ORDER",
		131: "OBSERVATION",
		132: "OPERATION_DEFINITION",
		133: "OPERATION_OUTCOME",
		134: "ORGANIZATION",
		135: "PARAMETERS",
		136: "PATIENT",
		137: "PAYMENT_NOTICE",
		138: "PAYMENT_RECONCILIATION",
		139: "PERSON",
		140: "PLAN_DEFINITION",
		141: "PRACTITIONER",
		142: "PRACTITIONER_ROLE",
		143: "PROCEDURE",
		144: "PROCEDURE_REQUEST",
		145: "PROCESS_REQUEST",
		146: "PROCESS_RESPONSE",
		147: "PROVENANCE",
		148: "QUESTIONNAIRE",
		149: "QUESTIONNAIRE_RESPONSE",
		150: "REFERRAL_REQUEST",
		151: "RELATED_PERSON",
		152: "REQUEST_GROUP",
		153: "RESEARCH_STUDY",
		154: "RESEARCH_SUBJECT",
		155: "RESOURCE",
		156: "RISK_ASSESSMENT",
		157: "SCHEDULE",
		158: "SEARCH_PARAMETER",
		159: "SEQUENCE",
		160: "SERVICE_DEFINITION",
		161: "SLOT",
		162: "SPECIMEN",
		163: "STRUCTURE_DEFINITION",
		164: "STRUCTURE_MAP",
		165: "SUBSCRIPTION",
		166: "SUBSTANCE",
		167: "SUPPLY_DELIVERY",
		168: "SUPPLY_REQUEST",
		169: "TASK",
		170: "TEST_REPORT",
		171: "TEST_SCRIPT",
		172: "VALUE_SET",
		173: "VISION_PRESCRIPTION",
		174: "TYPE",
		175: "ANY",
	}
	FHIRAllTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":       0,
		"ADDRESS":                     1,
		"AGE":                         2,
		"ANNOTATION":                  3,
		"ATTACHMENT":                  4,
		"BACKBONE_ELEMENT":            5,
		"CODEABLE_CONCEPT":            6,
		"CODING":                      7,
		"CONTACT_DETAIL":              8,
		"CONTACT_POINT":               9,
		"CONTRIBUTOR":                 10,
		"COUNT":                       11,
		"DATA_REQUIREMENT":            12,
		"DISTANCE":                    13,
		"DOSAGE":                      14,
		"DURATION":                    15,
		"ELEMENT":                     16,
		"ELEMENT_DEFINITION":          17,
		"EXTENSION":                   18,
		"HUMAN_NAME":                  19,
		"IDENTIFIER":                  20,
		"META":                        21,
		"MONEY":                       22,
		"NARRATIVE":                   23,
		"PARAMETER_DEFINITION":        24,
		"PERIOD":                      25,
		"QUANTITY":                    26,
		"RANGE":                       27,
		"RATIO":                       28,
		"REFERENCE":                   29,
		"RELATED_ARTIFACT":            30,
		"SAMPLED_DATA":                31,
		"SIGNATURE":                   32,
		"SIMPLE_QUANTITY":             33,
		"TIMING":                      34,
		"TRIGGER_DEFINITION":          35,
		"USAGE_CONTEXT":               36,
		"BASE64_BINARY":               37,
		"BOOLEAN":                     38,
		"CODE":                        39,
		"DATE":                        40,
		"DATE_TIME":                   41,
		"DECIMAL":                     42,
		"ID":                          43,
		"INSTANT":                     44,
		"INTEGER":                     45,
		"MARKDOWN":                    46,
		"OID":                         47,
		"POSITIVE_INT":                48,
		"STRING":                      49,
		"TIME":                        50,
		"UNSIGNED_INT":                51,
		"URI":                         52,
		"UUID":                        53,
		"XHTML":                       54,
		"ACCOUNT":                     55,
		"ACTIVITY_DEFINITION":         56,
		"ADVERSE_EVENT":               57,
		"ALLERGY_INTOLERANCE":         58,
		"APPOINTMENT":                 59,
		"APPOINTMENT_RESPONSE":        60,
		"AUDIT_EVENT":                 61,
		"BASIC":                       62,
		"BINARY":                      63,
		"BODY_SITE":                   64,
		"BUNDLE":                      65,
		"CAPABILITY_STATEMENT":        66,
		"CARE_PLAN":                   67,
		"CARE_TEAM":                   68,
		"CHARGE_ITEM":                 69,
		"CLAIM":                       70,
		"CLAIM_RESPONSE":              71,
		"CLINICAL_IMPRESSION":         72,
		"CODE_SYSTEM":                 73,
		"COMMUNICATION":               74,
		"COMMUNICATION_REQUEST":       75,
		"COMPARTMENT_DEFINITION":      76,
		"COMPOSITION":                 77,
		"CONCEPT_MAP":                 78,
		"CONDITION":                   79,
		"CONSENT":                     80,
		"CONTRACT":                    81,
		"COVERAGE":                    82,
		"DATA_ELEMENT":                83,
		"DETECTED_ISSUE":              84,
		"DEVICE":                      85,
		"DEVICE_COMPONENT":            86,
		"DEVICE_METRIC":               87,
		"DEVICE_REQUEST":              88,
		"DEVICE_USE_STATEMENT":        89,
		"DIAGNOSTIC_REPORT":           90,
		"DOCUMENT_MANIFEST":           91,
		"DOCUMENT_REFERENCE":          92,
		"DOMAIN_RESOURCE":             93,
		"ELIGIBILITY_REQUEST":         94,
		"ELIGIBILITY_RESPONSE":        95,
		"ENCOUNTER":                   96,
		"ENDPOINT":                    97,
		"ENROLLMENT_REQUEST":          98,
		"ENROLLMENT_RESPONSE":         99,
		"EPISODE_OF_CARE":             100,
		"EXPANSION_PROFILE":           101,
		"EXPLANATION_OF_BENEFIT":      102,
		"FAMILY_MEMBER_HISTORY":       103,
		"FLAG":                        104,
		"GOAL":                        105,
		"GRAPH_DEFINITION":            106,
		"GROUP":                       107,
		"GUIDANCE_RESPONSE":           108,
		"HEALTHCARE_SERVICE":          109,
		"IMAGING_MANIFEST":            110,
		"IMAGING_STUDY":               111,
		"IMMUNIZATION":                112,
		"IMMUNIZATION_RECOMMENDATION": 113,
		"IMPLEMENTATION_GUIDE":        114,
		"LIBRARY":                     115,
		"LINKAGE":                     116,
		"LIST":                        117,
		"LOCATION":                    118,
		"MEASURE":                     119,
		"MEASURE_REPORT":              120,
		"MEDIA":                       121,
		"MEDICATION":                  122,
		"MEDICATION_ADMINISTRATION":   123,
		"MEDICATION_DISPENSE":         124,
		"MEDICATION_REQUEST":          125,
		"MEDICATION_STATEMENT":        126,
		"MESSAGE_DEFINITION":          127,
		"MESSAGE_HEADER":              128,
		"NAMING_SYSTEM":               129,
		"NUTRITION_ORDER":             130,
		"OBSERVATION":                 131,
		"OPERATION_DEFINITION":        132,
		"OPERATION_OUTCOME":           133,
		"ORGANIZATION":                134,
		"PARAMETERS":                  135,
		"PATIENT":                     136,
		"PAYMENT_NOTICE":              137,
		"PAYMENT_RECONCILIATION":      138,
		"PERSON":                      139,
		"PLAN_DEFINITION":             140,
		"PRACTITIONER":                141,
		"PRACTITIONER_ROLE":           142,
		"PROCEDURE":                   143,
		"PROCEDURE_REQUEST":           144,
		"PROCESS_REQUEST":             145,
		"PROCESS_RESPONSE":            146,
		"PROVENANCE":                  147,
		"QUESTIONNAIRE":               148,
		"QUESTIONNAIRE_RESPONSE":      149,
		"REFERRAL_REQUEST":            150,
		"RELATED_PERSON":              151,
		"REQUEST_GROUP":               152,
		"RESEARCH_STUDY":              153,
		"RESEARCH_SUBJECT":            154,
		"RESOURCE":                    155,
		"RISK_ASSESSMENT":             156,
		"SCHEDULE":                    157,
		"SEARCH_PARAMETER":            158,
		"SEQUENCE":                    159,
		"SERVICE_DEFINITION":          160,
		"SLOT":                        161,
		"SPECIMEN":                    162,
		"STRUCTURE_DEFINITION":        163,
		"STRUCTURE_MAP":               164,
		"SUBSCRIPTION":                165,
		"SUBSTANCE":                   166,
		"SUPPLY_DELIVERY":             167,
		"SUPPLY_REQUEST":              168,
		"TASK":                        169,
		"TEST_REPORT":                 170,
		"TEST_SCRIPT":                 171,
		"VALUE_SET":                   172,
		"VISION_PRESCRIPTION":         173,
		"TYPE":                        174,
		"ANY":                         175,
	}
)

func (x FHIRAllTypesCode_Value) Enum() *FHIRAllTypesCode_Value {
	p := new(FHIRAllTypesCode_Value)
	*p = x
	return p
}

func (x FHIRAllTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRAllTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[86].Descriptor()
}

func (FHIRAllTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[86]
}

func (x FHIRAllTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRAllTypesCode_Value.Descriptor instead.
func (FHIRAllTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{86, 0}
}

type FHIRDefinedTypeCode_Value int32

const (
	FHIRDefinedTypeCode_INVALID_UNINITIALIZED       FHIRDefinedTypeCode_Value = 0
	FHIRDefinedTypeCode_ADDRESS                     FHIRDefinedTypeCode_Value = 1
	FHIRDefinedTypeCode_AGE                         FHIRDefinedTypeCode_Value = 2
	FHIRDefinedTypeCode_ANNOTATION                  FHIRDefinedTypeCode_Value = 3
	FHIRDefinedTypeCode_ATTACHMENT                  FHIRDefinedTypeCode_Value = 4
	FHIRDefinedTypeCode_BACKBONE_ELEMENT            FHIRDefinedTypeCode_Value = 5
	FHIRDefinedTypeCode_CODEABLE_CONCEPT            FHIRDefinedTypeCode_Value = 6
	FHIRDefinedTypeCode_CODING                      FHIRDefinedTypeCode_Value = 7
	FHIRDefinedTypeCode_CONTACT_DETAIL              FHIRDefinedTypeCode_Value = 8
	FHIRDefinedTypeCode_CONTACT_POINT               FHIRDefinedTypeCode_Value = 9
	FHIRDefinedTypeCode_CONTRIBUTOR                 FHIRDefinedTypeCode_Value = 10
	FHIRDefinedTypeCode_COUNT                       FHIRDefinedTypeCode_Value = 11
	FHIRDefinedTypeCode_DATA_REQUIREMENT            FHIRDefinedTypeCode_Value = 12
	FHIRDefinedTypeCode_DISTANCE                    FHIRDefinedTypeCode_Value = 13
	FHIRDefinedTypeCode_DOSAGE                      FHIRDefinedTypeCode_Value = 14
	FHIRDefinedTypeCode_DURATION                    FHIRDefinedTypeCode_Value = 15
	FHIRDefinedTypeCode_ELEMENT                     FHIRDefinedTypeCode_Value = 16
	FHIRDefinedTypeCode_ELEMENT_DEFINITION          FHIRDefinedTypeCode_Value = 17
	FHIRDefinedTypeCode_EXTENSION                   FHIRDefinedTypeCode_Value = 18
	FHIRDefinedTypeCode_HUMAN_NAME                  FHIRDefinedTypeCode_Value = 19
	FHIRDefinedTypeCode_IDENTIFIER                  FHIRDefinedTypeCode_Value = 20
	FHIRDefinedTypeCode_META                        FHIRDefinedTypeCode_Value = 21
	FHIRDefinedTypeCode_MONEY                       FHIRDefinedTypeCode_Value = 22
	FHIRDefinedTypeCode_NARRATIVE                   FHIRDefinedTypeCode_Value = 23
	FHIRDefinedTypeCode_PARAMETER_DEFINITION        FHIRDefinedTypeCode_Value = 24
	FHIRDefinedTypeCode_PERIOD                      FHIRDefinedTypeCode_Value = 25
	FHIRDefinedTypeCode_QUANTITY                    FHIRDefinedTypeCode_Value = 26
	FHIRDefinedTypeCode_RANGE                       FHIRDefinedTypeCode_Value = 27
	FHIRDefinedTypeCode_RATIO                       FHIRDefinedTypeCode_Value = 28
	FHIRDefinedTypeCode_REFERENCE                   FHIRDefinedTypeCode_Value = 29
	FHIRDefinedTypeCode_RELATED_ARTIFACT            FHIRDefinedTypeCode_Value = 30
	FHIRDefinedTypeCode_SAMPLED_DATA                FHIRDefinedTypeCode_Value = 31
	FHIRDefinedTypeCode_SIGNATURE                   FHIRDefinedTypeCode_Value = 32
	FHIRDefinedTypeCode_SIMPLE_QUANTITY             FHIRDefinedTypeCode_Value = 33
	FHIRDefinedTypeCode_TIMING                      FHIRDefinedTypeCode_Value = 34
	FHIRDefinedTypeCode_TRIGGER_DEFINITION          FHIRDefinedTypeCode_Value = 35
	FHIRDefinedTypeCode_USAGE_CONTEXT               FHIRDefinedTypeCode_Value = 36
	FHIRDefinedTypeCode_BASE64_BINARY               FHIRDefinedTypeCode_Value = 37
	FHIRDefinedTypeCode_BOOLEAN                     FHIRDefinedTypeCode_Value = 38
	FHIRDefinedTypeCode_CODE                        FHIRDefinedTypeCode_Value = 39
	FHIRDefinedTypeCode_DATE                        FHIRDefinedTypeCode_Value = 40
	FHIRDefinedTypeCode_DATE_TIME                   FHIRDefinedTypeCode_Value = 41
	FHIRDefinedTypeCode_DECIMAL                     FHIRDefinedTypeCode_Value = 42
	FHIRDefinedTypeCode_ID                          FHIRDefinedTypeCode_Value = 43
	FHIRDefinedTypeCode_INSTANT                     FHIRDefinedTypeCode_Value = 44
	FHIRDefinedTypeCode_INTEGER                     FHIRDefinedTypeCode_Value = 45
	FHIRDefinedTypeCode_MARKDOWN                    FHIRDefinedTypeCode_Value = 46
	FHIRDefinedTypeCode_OID                         FHIRDefinedTypeCode_Value = 47
	FHIRDefinedTypeCode_POSITIVE_INT                FHIRDefinedTypeCode_Value = 48
	FHIRDefinedTypeCode_STRING                      FHIRDefinedTypeCode_Value = 49
	FHIRDefinedTypeCode_TIME                        FHIRDefinedTypeCode_Value = 50
	FHIRDefinedTypeCode_UNSIGNED_INT                FHIRDefinedTypeCode_Value = 51
	FHIRDefinedTypeCode_URI                         FHIRDefinedTypeCode_Value = 52
	FHIRDefinedTypeCode_UUID                        FHIRDefinedTypeCode_Value = 53
	FHIRDefinedTypeCode_XHTML                       FHIRDefinedTypeCode_Value = 54
	FHIRDefinedTypeCode_ACCOUNT                     FHIRDefinedTypeCode_Value = 55
	FHIRDefinedTypeCode_ACTIVITY_DEFINITION         FHIRDefinedTypeCode_Value = 56
	FHIRDefinedTypeCode_ADVERSE_EVENT               FHIRDefinedTypeCode_Value = 57
	FHIRDefinedTypeCode_ALLERGY_INTOLERANCE         FHIRDefinedTypeCode_Value = 58
	FHIRDefinedTypeCode_APPOINTMENT                 FHIRDefinedTypeCode_Value = 59
	FHIRDefinedTypeCode_APPOINTMENT_RESPONSE        FHIRDefinedTypeCode_Value = 60
	FHIRDefinedTypeCode_AUDIT_EVENT                 FHIRDefinedTypeCode_Value = 61
	FHIRDefinedTypeCode_BASIC                       FHIRDefinedTypeCode_Value = 62
	FHIRDefinedTypeCode_BINARY                      FHIRDefinedTypeCode_Value = 63
	FHIRDefinedTypeCode_BODY_SITE                   FHIRDefinedTypeCode_Value = 64
	FHIRDefinedTypeCode_BUNDLE                      FHIRDefinedTypeCode_Value = 65
	FHIRDefinedTypeCode_CAPABILITY_STATEMENT        FHIRDefinedTypeCode_Value = 66
	FHIRDefinedTypeCode_CARE_PLAN                   FHIRDefinedTypeCode_Value = 67
	FHIRDefinedTypeCode_CARE_TEAM                   FHIRDefinedTypeCode_Value = 68
	FHIRDefinedTypeCode_CHARGE_ITEM                 FHIRDefinedTypeCode_Value = 69
	FHIRDefinedTypeCode_CLAIM                       FHIRDefinedTypeCode_Value = 70
	FHIRDefinedTypeCode_CLAIM_RESPONSE              FHIRDefinedTypeCode_Value = 71
	FHIRDefinedTypeCode_CLINICAL_IMPRESSION         FHIRDefinedTypeCode_Value = 72
	FHIRDefinedTypeCode_CODE_SYSTEM                 FHIRDefinedTypeCode_Value = 73
	FHIRDefinedTypeCode_COMMUNICATION               FHIRDefinedTypeCode_Value = 74
	FHIRDefinedTypeCode_COMMUNICATION_REQUEST       FHIRDefinedTypeCode_Value = 75
	FHIRDefinedTypeCode_COMPARTMENT_DEFINITION      FHIRDefinedTypeCode_Value = 76
	FHIRDefinedTypeCode_COMPOSITION                 FHIRDefinedTypeCode_Value = 77
	FHIRDefinedTypeCode_CONCEPT_MAP                 FHIRDefinedTypeCode_Value = 78
	FHIRDefinedTypeCode_CONDITION                   FHIRDefinedTypeCode_Value = 79
	FHIRDefinedTypeCode_CONSENT                     FHIRDefinedTypeCode_Value = 80
	FHIRDefinedTypeCode_CONTRACT                    FHIRDefinedTypeCode_Value = 81
	FHIRDefinedTypeCode_COVERAGE                    FHIRDefinedTypeCode_Value = 82
	FHIRDefinedTypeCode_DATA_ELEMENT                FHIRDefinedTypeCode_Value = 83
	FHIRDefinedTypeCode_DETECTED_ISSUE              FHIRDefinedTypeCode_Value = 84
	FHIRDefinedTypeCode_DEVICE                      FHIRDefinedTypeCode_Value = 85
	FHIRDefinedTypeCode_DEVICE_COMPONENT            FHIRDefinedTypeCode_Value = 86
	FHIRDefinedTypeCode_DEVICE_METRIC               FHIRDefinedTypeCode_Value = 87
	FHIRDefinedTypeCode_DEVICE_REQUEST              FHIRDefinedTypeCode_Value = 88
	FHIRDefinedTypeCode_DEVICE_USE_STATEMENT        FHIRDefinedTypeCode_Value = 89
	FHIRDefinedTypeCode_DIAGNOSTIC_REPORT           FHIRDefinedTypeCode_Value = 90
	FHIRDefinedTypeCode_DOCUMENT_MANIFEST           FHIRDefinedTypeCode_Value = 91
	FHIRDefinedTypeCode_DOCUMENT_REFERENCE          FHIRDefinedTypeCode_Value = 92
	FHIRDefinedTypeCode_DOMAIN_RESOURCE             FHIRDefinedTypeCode_Value = 93
	FHIRDefinedTypeCode_ELIGIBILITY_REQUEST         FHIRDefinedTypeCode_Value = 94
	FHIRDefinedTypeCode_ELIGIBILITY_RESPONSE        FHIRDefinedTypeCode_Value = 95
	FHIRDefinedTypeCode_ENCOUNTER                   FHIRDefinedTypeCode_Value = 96
	FHIRDefinedTypeCode_ENDPOINT                    FHIRDefinedTypeCode_Value = 97
	FHIRDefinedTypeCode_ENROLLMENT_REQUEST          FHIRDefinedTypeCode_Value = 98
	FHIRDefinedTypeCode_ENROLLMENT_RESPONSE         FHIRDefinedTypeCode_Value = 99
	FHIRDefinedTypeCode_EPISODE_OF_CARE             FHIRDefinedTypeCode_Value = 100
	FHIRDefinedTypeCode_EXPANSION_PROFILE           FHIRDefinedTypeCode_Value = 101
	FHIRDefinedTypeCode_EXPLANATION_OF_BENEFIT      FHIRDefinedTypeCode_Value = 102
	FHIRDefinedTypeCode_FAMILY_MEMBER_HISTORY       FHIRDefinedTypeCode_Value = 103
	FHIRDefinedTypeCode_FLAG                        FHIRDefinedTypeCode_Value = 104
	FHIRDefinedTypeCode_GOAL                        FHIRDefinedTypeCode_Value = 105
	FHIRDefinedTypeCode_GRAPH_DEFINITION            FHIRDefinedTypeCode_Value = 106
	FHIRDefinedTypeCode_GROUP                       FHIRDefinedTypeCode_Value = 107
	FHIRDefinedTypeCode_GUIDANCE_RESPONSE           FHIRDefinedTypeCode_Value = 108
	FHIRDefinedTypeCode_HEALTHCARE_SERVICE          FHIRDefinedTypeCode_Value = 109
	FHIRDefinedTypeCode_IMAGING_MANIFEST            FHIRDefinedTypeCode_Value = 110
	FHIRDefinedTypeCode_IMAGING_STUDY               FHIRDefinedTypeCode_Value = 111
	FHIRDefinedTypeCode_IMMUNIZATION                FHIRDefinedTypeCode_Value = 112
	FHIRDefinedTypeCode_IMMUNIZATION_RECOMMENDATION FHIRDefinedTypeCode_Value = 113
	FHIRDefinedTypeCode_IMPLEMENTATION_GUIDE        FHIRDefinedTypeCode_Value = 114
	FHIRDefinedTypeCode_LIBRARY                     FHIRDefinedTypeCode_Value = 115
	FHIRDefinedTypeCode_LINKAGE                     FHIRDefinedTypeCode_Value = 116
	FHIRDefinedTypeCode_LIST                        FHIRDefinedTypeCode_Value = 117
	FHIRDefinedTypeCode_LOCATION                    FHIRDefinedTypeCode_Value = 118
	FHIRDefinedTypeCode_MEASURE                     FHIRDefinedTypeCode_Value = 119
	FHIRDefinedTypeCode_MEASURE_REPORT              FHIRDefinedTypeCode_Value = 120
	FHIRDefinedTypeCode_MEDIA                       FHIRDefinedTypeCode_Value = 121
	FHIRDefinedTypeCode_MEDICATION                  FHIRDefinedTypeCode_Value = 122
	FHIRDefinedTypeCode_MEDICATION_ADMINISTRATION   FHIRDefinedTypeCode_Value = 123
	FHIRDefinedTypeCode_MEDICATION_DISPENSE         FHIRDefinedTypeCode_Value = 124
	FHIRDefinedTypeCode_MEDICATION_REQUEST          FHIRDefinedTypeCode_Value = 125
	FHIRDefinedTypeCode_MEDICATION_STATEMENT        FHIRDefinedTypeCode_Value = 126
	FHIRDefinedTypeCode_MESSAGE_DEFINITION          FHIRDefinedTypeCode_Value = 127
	FHIRDefinedTypeCode_MESSAGE_HEADER              FHIRDefinedTypeCode_Value = 128
	FHIRDefinedTypeCode_NAMING_SYSTEM               FHIRDefinedTypeCode_Value = 129
	FHIRDefinedTypeCode_NUTRITION_ORDER             FHIRDefinedTypeCode_Value = 130
	FHIRDefinedTypeCode_OBSERVATION                 FHIRDefinedTypeCode_Value = 131
	FHIRDefinedTypeCode_OPERATION_DEFINITION        FHIRDefinedTypeCode_Value = 132
	FHIRDefinedTypeCode_OPERATION_OUTCOME           FHIRDefinedTypeCode_Value = 133
	FHIRDefinedTypeCode_ORGANIZATION                FHIRDefinedTypeCode_Value = 134
	FHIRDefinedTypeCode_PARAMETERS                  FHIRDefinedTypeCode_Value = 135
	FHIRDefinedTypeCode_PATIENT                     FHIRDefinedTypeCode_Value = 136
	FHIRDefinedTypeCode_PAYMENT_NOTICE              FHIRDefinedTypeCode_Value = 137
	FHIRDefinedTypeCode_PAYMENT_RECONCILIATION      FHIRDefinedTypeCode_Value = 138
	FHIRDefinedTypeCode_PERSON                      FHIRDefinedTypeCode_Value = 139
	FHIRDefinedTypeCode_PLAN_DEFINITION             FHIRDefinedTypeCode_Value = 140
	FHIRDefinedTypeCode_PRACTITIONER                FHIRDefinedTypeCode_Value = 141
	FHIRDefinedTypeCode_PRACTITIONER_ROLE           FHIRDefinedTypeCode_Value = 142
	FHIRDefinedTypeCode_PROCEDURE                   FHIRDefinedTypeCode_Value = 143
	FHIRDefinedTypeCode_PROCEDURE_REQUEST           FHIRDefinedTypeCode_Value = 144
	FHIRDefinedTypeCode_PROCESS_REQUEST             FHIRDefinedTypeCode_Value = 145
	FHIRDefinedTypeCode_PROCESS_RESPONSE            FHIRDefinedTypeCode_Value = 146
	FHIRDefinedTypeCode_PROVENANCE                  FHIRDefinedTypeCode_Value = 147
	FHIRDefinedTypeCode_QUESTIONNAIRE               FHIRDefinedTypeCode_Value = 148
	FHIRDefinedTypeCode_QUESTIONNAIRE_RESPONSE      FHIRDefinedTypeCode_Value = 149
	FHIRDefinedTypeCode_REFERRAL_REQUEST            FHIRDefinedTypeCode_Value = 150
	FHIRDefinedTypeCode_RELATED_PERSON              FHIRDefinedTypeCode_Value = 151
	FHIRDefinedTypeCode_REQUEST_GROUP               FHIRDefinedTypeCode_Value = 152
	FHIRDefinedTypeCode_RESEARCH_STUDY              FHIRDefinedTypeCode_Value = 153
	FHIRDefinedTypeCode_RESEARCH_SUBJECT            FHIRDefinedTypeCode_Value = 154
	FHIRDefinedTypeCode_RESOURCE                    FHIRDefinedTypeCode_Value = 155
	FHIRDefinedTypeCode_RISK_ASSESSMENT             FHIRDefinedTypeCode_Value = 156
	FHIRDefinedTypeCode_SCHEDULE                    FHIRDefinedTypeCode_Value = 157
	FHIRDefinedTypeCode_SEARCH_PARAMETER            FHIRDefinedTypeCode_Value = 158
	FHIRDefinedTypeCode_SEQUENCE                    FHIRDefinedTypeCode_Value = 159
	FHIRDefinedTypeCode_SERVICE_DEFINITION          FHIRDefinedTypeCode_Value = 160
	FHIRDefinedTypeCode_SLOT                        FHIRDefinedTypeCode_Value = 161
	FHIRDefinedTypeCode_SPECIMEN                    FHIRDefinedTypeCode_Value = 162
	FHIRDefinedTypeCode_STRUCTURE_DEFINITION        FHIRDefinedTypeCode_Value = 163
	FHIRDefinedTypeCode_STRUCTURE_MAP               FHIRDefinedTypeCode_Value = 164
	FHIRDefinedTypeCode_SUBSCRIPTION                FHIRDefinedTypeCode_Value = 165
	FHIRDefinedTypeCode_SUBSTANCE                   FHIRDefinedTypeCode_Value = 166
	FHIRDefinedTypeCode_SUPPLY_DELIVERY             FHIRDefinedTypeCode_Value = 167
	FHIRDefinedTypeCode_SUPPLY_REQUEST              FHIRDefinedTypeCode_Value = 168
	FHIRDefinedTypeCode_TASK                        FHIRDefinedTypeCode_Value = 169
	FHIRDefinedTypeCode_TEST_REPORT                 FHIRDefinedTypeCode_Value = 170
	FHIRDefinedTypeCode_TEST_SCRIPT                 FHIRDefinedTypeCode_Value = 171
	FHIRDefinedTypeCode_VALUE_SET                   FHIRDefinedTypeCode_Value = 172
	FHIRDefinedTypeCode_VISION_PRESCRIPTION         FHIRDefinedTypeCode_Value = 173
)

// Enum value maps for FHIRDefinedTypeCode_Value.
var (
	FHIRDefinedTypeCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ADDRESS",
		2:   "AGE",
		3:   "ANNOTATION",
		4:   "ATTACHMENT",
		5:   "BACKBONE_ELEMENT",
		6:   "CODEABLE_CONCEPT",
		7:   "CODING",
		8:   "CONTACT_DETAIL",
		9:   "CONTACT_POINT",
		10:  "CONTRIBUTOR",
		11:  "COUNT",
		12:  "DATA_REQUIREMENT",
		13:  "DISTANCE",
		14:  "DOSAGE",
		15:  "DURATION",
		16:  "ELEMENT",
		17:  "ELEMENT_DEFINITION",
		18:  "EXTENSION",
		19:  "HUMAN_NAME",
		20:  "IDENTIFIER",
		21:  "META",
		22:  "MONEY",
		23:  "NARRATIVE",
		24:  "PARAMETER_DEFINITION",
		25:  "PERIOD",
		26:  "QUANTITY",
		27:  "RANGE",
		28:  "RATIO",
		29:  "REFERENCE",
		30:  "RELATED_ARTIFACT",
		31:  "SAMPLED_DATA",
		32:  "SIGNATURE",
		33:  "SIMPLE_QUANTITY",
		34:  "TIMING",
		35:  "TRIGGER_DEFINITION",
		36:  "USAGE_CONTEXT",
		37:  "BASE64_BINARY",
		38:  "BOOLEAN",
		39:  "CODE",
		40:  "DATE",
		41:  "DATE_TIME",
		42:  "DECIMAL",
		43:  "ID",
		44:  "INSTANT",
		45:  "INTEGER",
		46:  "MARKDOWN",
		47:  "OID",
		48:  "POSITIVE_INT",
		49:  "STRING",
		50:  "TIME",
		51:  "UNSIGNED_INT",
		52:  "URI",
		53:  "UUID",
		54:  "XHTML",
		55:  "ACCOUNT",
		56:  "ACTIVITY_DEFINITION",
		57:  "ADVERSE_EVENT",
		58:  "ALLERGY_INTOLERANCE",
		59:  "APPOINTMENT",
		60:  "APPOINTMENT_RESPONSE",
		61:  "AUDIT_EVENT",
		62:  "BASIC",
		63:  "BINARY",
		64:  "BODY_SITE",
		65:  "BUNDLE",
		66:  "CAPABILITY_STATEMENT",
		67:  "CARE_PLAN",
		68:  "CARE_TEAM",
		69:  "CHARGE_ITEM",
		70:  "CLAIM",
		71:  "CLAIM_RESPONSE",
		72:  "CLINICAL_IMPRESSION",
		73:  "CODE_SYSTEM",
		74:  "COMMUNICATION",
		75:  "COMMUNICATION_REQUEST",
		76:  "COMPARTMENT_DEFINITION",
		77:  "COMPOSITION",
		78:  "CONCEPT_MAP",
		79:  "CONDITION",
		80:  "CONSENT",
		81:  "CONTRACT",
		82:  "COVERAGE",
		83:  "DATA_ELEMENT",
		84:  "DETECTED_ISSUE",
		85:  "DEVICE",
		86:  "DEVICE_COMPONENT",
		87:  "DEVICE_METRIC",
		88:  "DEVICE_REQUEST",
		89:  "DEVICE_USE_STATEMENT",
		90:  "DIAGNOSTIC_REPORT",
		91:  "DOCUMENT_MANIFEST",
		92:  "DOCUMENT_REFERENCE",
		93:  "DOMAIN_RESOURCE",
		94:  "ELIGIBILITY_REQUEST",
		95:  "ELIGIBILITY_RESPONSE",
		96:  "ENCOUNTER",
		97:  "ENDPOINT",
		98:  "ENROLLMENT_REQUEST",
		99:  "ENROLLMENT_RESPONSE",
		100: "EPISODE_OF_CARE",
		101: "EXPANSION_PROFILE",
		102: "EXPLANATION_OF_BENEFIT",
		103: "FAMILY_MEMBER_HISTORY",
		104: "FLAG",
		105: "GOAL",
		106: "GRAPH_DEFINITION",
		107: "GROUP",
		108: "GUIDANCE_RESPONSE",
		109: "HEALTHCARE_SERVICE",
		110: "IMAGING_MANIFEST",
		111: "IMAGING_STUDY",
		112: "IMMUNIZATION",
		113: "IMMUNIZATION_RECOMMENDATION",
		114: "IMPLEMENTATION_GUIDE",
		115: "LIBRARY",
		116: "LINKAGE",
		117: "LIST",
		118: "LOCATION",
		119: "MEASURE",
		120: "MEASURE_REPORT",
		121: "MEDIA",
		122: "MEDICATION",
		123: "MEDICATION_ADMINISTRATION",
		124: "MEDICATION_DISPENSE",
		125: "MEDICATION_REQUEST",
		126: "MEDICATION_STATEMENT",
		127: "MESSAGE_DEFINITION",
		128: "MESSAGE_HEADER",
		129: "NAMING_SYSTEM",
		130: "NUTRITION_ORDER",
		131: "OBSERVATION",
		132: "OPERATION_DEFINITION",
		133: "OPERATION_OUTCOME",
		134: "ORGANIZATION",
		135: "PARAMETERS",
		136: "PATIENT",
		137: "PAYMENT_NOTICE",
		138: "PAYMENT_RECONCILIATION",
		139: "PERSON",
		140: "PLAN_DEFINITION",
		141: "PRACTITIONER",
		142: "PRACTITIONER_ROLE",
		143: "PROCEDURE",
		144: "PROCEDURE_REQUEST",
		145: "PROCESS_REQUEST",
		146: "PROCESS_RESPONSE",
		147: "PROVENANCE",
		148: "QUESTIONNAIRE",
		149: "QUESTIONNAIRE_RESPONSE",
		150: "REFERRAL_REQUEST",
		151: "RELATED_PERSON",
		152: "REQUEST_GROUP",
		153: "RESEARCH_STUDY",
		154: "RESEARCH_SUBJECT",
		155: "RESOURCE",
		156: "RISK_ASSESSMENT",
		157: "SCHEDULE",
		158: "SEARCH_PARAMETER",
		159: "SEQUENCE",
		160: "SERVICE_DEFINITION",
		161: "SLOT",
		162: "SPECIMEN",
		163: "STRUCTURE_DEFINITION",
		164: "STRUCTURE_MAP",
		165: "SUBSCRIPTION",
		166: "SUBSTANCE",
		167: "SUPPLY_DELIVERY",
		168: "SUPPLY_REQUEST",
		169: "TASK",
		170: "TEST_REPORT",
		171: "TEST_SCRIPT",
		172: "VALUE_SET",
		173: "VISION_PRESCRIPTION",
	}
	FHIRDefinedTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":       0,
		"ADDRESS":                     1,
		"AGE":                         2,
		"ANNOTATION":                  3,
		"ATTACHMENT":                  4,
		"BACKBONE_ELEMENT":            5,
		"CODEABLE_CONCEPT":            6,
		"CODING":                      7,
		"CONTACT_DETAIL":              8,
		"CONTACT_POINT":               9,
		"CONTRIBUTOR":                 10,
		"COUNT":                       11,
		"DATA_REQUIREMENT":            12,
		"DISTANCE":                    13,
		"DOSAGE":                      14,
		"DURATION":                    15,
		"ELEMENT":                     16,
		"ELEMENT_DEFINITION":          17,
		"EXTENSION":                   18,
		"HUMAN_NAME":                  19,
		"IDENTIFIER":                  20,
		"META":                        21,
		"MONEY":                       22,
		"NARRATIVE":                   23,
		"PARAMETER_DEFINITION":        24,
		"PERIOD":                      25,
		"QUANTITY":                    26,
		"RANGE":                       27,
		"RATIO":                       28,
		"REFERENCE":                   29,
		"RELATED_ARTIFACT":            30,
		"SAMPLED_DATA":                31,
		"SIGNATURE":                   32,
		"SIMPLE_QUANTITY":             33,
		"TIMING":                      34,
		"TRIGGER_DEFINITION":          35,
		"USAGE_CONTEXT":               36,
		"BASE64_BINARY":               37,
		"BOOLEAN":                     38,
		"CODE":                        39,
		"DATE":                        40,
		"DATE_TIME":                   41,
		"DECIMAL":                     42,
		"ID":                          43,
		"INSTANT":                     44,
		"INTEGER":                     45,
		"MARKDOWN":                    46,
		"OID":                         47,
		"POSITIVE_INT":                48,
		"STRING":                      49,
		"TIME":                        50,
		"UNSIGNED_INT":                51,
		"URI":                         52,
		"UUID":                        53,
		"XHTML":                       54,
		"ACCOUNT":                     55,
		"ACTIVITY_DEFINITION":         56,
		"ADVERSE_EVENT":               57,
		"ALLERGY_INTOLERANCE":         58,
		"APPOINTMENT":                 59,
		"APPOINTMENT_RESPONSE":        60,
		"AUDIT_EVENT":                 61,
		"BASIC":                       62,
		"BINARY":                      63,
		"BODY_SITE":                   64,
		"BUNDLE":                      65,
		"CAPABILITY_STATEMENT":        66,
		"CARE_PLAN":                   67,
		"CARE_TEAM":                   68,
		"CHARGE_ITEM":                 69,
		"CLAIM":                       70,
		"CLAIM_RESPONSE":              71,
		"CLINICAL_IMPRESSION":         72,
		"CODE_SYSTEM":                 73,
		"COMMUNICATION":               74,
		"COMMUNICATION_REQUEST":       75,
		"COMPARTMENT_DEFINITION":      76,
		"COMPOSITION":                 77,
		"CONCEPT_MAP":                 78,
		"CONDITION":                   79,
		"CONSENT":                     80,
		"CONTRACT":                    81,
		"COVERAGE":                    82,
		"DATA_ELEMENT":                83,
		"DETECTED_ISSUE":              84,
		"DEVICE":                      85,
		"DEVICE_COMPONENT":            86,
		"DEVICE_METRIC":               87,
		"DEVICE_REQUEST":              88,
		"DEVICE_USE_STATEMENT":        89,
		"DIAGNOSTIC_REPORT":           90,
		"DOCUMENT_MANIFEST":           91,
		"DOCUMENT_REFERENCE":          92,
		"DOMAIN_RESOURCE":             93,
		"ELIGIBILITY_REQUEST":         94,
		"ELIGIBILITY_RESPONSE":        95,
		"ENCOUNTER":                   96,
		"ENDPOINT":                    97,
		"ENROLLMENT_REQUEST":          98,
		"ENROLLMENT_RESPONSE":         99,
		"EPISODE_OF_CARE":             100,
		"EXPANSION_PROFILE":           101,
		"EXPLANATION_OF_BENEFIT":      102,
		"FAMILY_MEMBER_HISTORY":       103,
		"FLAG":                        104,
		"GOAL":                        105,
		"GRAPH_DEFINITION":            106,
		"GROUP":                       107,
		"GUIDANCE_RESPONSE":           108,
		"HEALTHCARE_SERVICE":          109,
		"IMAGING_MANIFEST":            110,
		"IMAGING_STUDY":               111,
		"IMMUNIZATION":                112,
		"IMMUNIZATION_RECOMMENDATION": 113,
		"IMPLEMENTATION_GUIDE":        114,
		"LIBRARY":                     115,
		"LINKAGE":                     116,
		"LIST":                        117,
		"LOCATION":                    118,
		"MEASURE":                     119,
		"MEASURE_REPORT":              120,
		"MEDIA":                       121,
		"MEDICATION":                  122,
		"MEDICATION_ADMINISTRATION":   123,
		"MEDICATION_DISPENSE":         124,
		"MEDICATION_REQUEST":          125,
		"MEDICATION_STATEMENT":        126,
		"MESSAGE_DEFINITION":          127,
		"MESSAGE_HEADER":              128,
		"NAMING_SYSTEM":               129,
		"NUTRITION_ORDER":             130,
		"OBSERVATION":                 131,
		"OPERATION_DEFINITION":        132,
		"OPERATION_OUTCOME":           133,
		"ORGANIZATION":                134,
		"PARAMETERS":                  135,
		"PATIENT":                     136,
		"PAYMENT_NOTICE":              137,
		"PAYMENT_RECONCILIATION":      138,
		"PERSON":                      139,
		"PLAN_DEFINITION":             140,
		"PRACTITIONER":                141,
		"PRACTITIONER_ROLE":           142,
		"PROCEDURE":                   143,
		"PROCEDURE_REQUEST":           144,
		"PROCESS_REQUEST":             145,
		"PROCESS_RESPONSE":            146,
		"PROVENANCE":                  147,
		"QUESTIONNAIRE":               148,
		"QUESTIONNAIRE_RESPONSE":      149,
		"REFERRAL_REQUEST":            150,
		"RELATED_PERSON":              151,
		"REQUEST_GROUP":               152,
		"RESEARCH_STUDY":              153,
		"RESEARCH_SUBJECT":            154,
		"RESOURCE":                    155,
		"RISK_ASSESSMENT":             156,
		"SCHEDULE":                    157,
		"SEARCH_PARAMETER":            158,
		"SEQUENCE":                    159,
		"SERVICE_DEFINITION":          160,
		"SLOT":                        161,
		"SPECIMEN":                    162,
		"STRUCTURE_DEFINITION":        163,
		"STRUCTURE_MAP":               164,
		"SUBSCRIPTION":                165,
		"SUBSTANCE":                   166,
		"SUPPLY_DELIVERY":             167,
		"SUPPLY_REQUEST":              168,
		"TASK":                        169,
		"TEST_REPORT":                 170,
		"TEST_SCRIPT":                 171,
		"VALUE_SET":                   172,
		"VISION_PRESCRIPTION":         173,
	}
)

func (x FHIRDefinedTypeCode_Value) Enum() *FHIRDefinedTypeCode_Value {
	p := new(FHIRDefinedTypeCode_Value)
	*p = x
	return p
}

func (x FHIRDefinedTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRDefinedTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[87].Descriptor()
}

func (FHIRDefinedTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[87]
}

func (x FHIRDefinedTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRDefinedTypeCode_Value.Descriptor instead.
func (FHIRDefinedTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{87, 0}
}

type DefinitionStatusCode_Value int32

const (
	DefinitionStatusCode_INVALID_UNINITIALIZED DefinitionStatusCode_Value = 0
	DefinitionStatusCode_DRAFT                 DefinitionStatusCode_Value = 1
	DefinitionStatusCode_ACTIVE                DefinitionStatusCode_Value = 2
	DefinitionStatusCode_WITHDRAWN             DefinitionStatusCode_Value = 3
	DefinitionStatusCode_UNKNOWN               DefinitionStatusCode_Value = 4
)

// Enum value maps for DefinitionStatusCode_Value.
var (
	DefinitionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "WITHDRAWN",
		4: "UNKNOWN",
	}
	DefinitionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"WITHDRAWN":             3,
		"UNKNOWN":               4,
	}
)

func (x DefinitionStatusCode_Value) Enum() *DefinitionStatusCode_Value {
	p := new(DefinitionStatusCode_Value)
	*p = x
	return p
}

func (x DefinitionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefinitionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[88].Descriptor()
}

func (DefinitionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[88]
}

func (x DefinitionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefinitionStatusCode_Value.Descriptor instead.
func (DefinitionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{89, 0}
}

type DefinitionTopicCode_Value int32

const (
	DefinitionTopicCode_INVALID_UNINITIALIZED DefinitionTopicCode_Value = 0
	DefinitionTopicCode_TREATMENT             DefinitionTopicCode_Value = 1
	DefinitionTopicCode_EDUCATION             DefinitionTopicCode_Value = 2
	DefinitionTopicCode_ASSESSMENT            DefinitionTopicCode_Value = 3
)

// Enum value maps for DefinitionTopicCode_Value.
var (
	DefinitionTopicCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TREATMENT",
		2: "EDUCATION",
		3: "ASSESSMENT",
	}
	DefinitionTopicCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TREATMENT":             1,
		"EDUCATION":             2,
		"ASSESSMENT":            3,
	}
)

func (x DefinitionTopicCode_Value) Enum() *DefinitionTopicCode_Value {
	p := new(DefinitionTopicCode_Value)
	*p = x
	return p
}

func (x DefinitionTopicCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefinitionTopicCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[89].Descriptor()
}

func (DefinitionTopicCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[89]
}

func (x DefinitionTopicCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefinitionTopicCode_Value.Descriptor instead.
func (DefinitionTopicCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{90, 0}
}

type DetectedIssueSeverityCode_Value int32

const (
	DetectedIssueSeverityCode_INVALID_UNINITIALIZED DetectedIssueSeverityCode_Value = 0
	DetectedIssueSeverityCode_HIGH                  DetectedIssueSeverityCode_Value = 1
	DetectedIssueSeverityCode_MODERATE              DetectedIssueSeverityCode_Value = 2
	DetectedIssueSeverityCode_LOW                   DetectedIssueSeverityCode_Value = 3
)

// Enum value maps for DetectedIssueSeverityCode_Value.
var (
	DetectedIssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HIGH",
		2: "MODERATE",
		3: "LOW",
	}
	DetectedIssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HIGH":                  1,
		"MODERATE":              2,
		"LOW":                   3,
	}
)

func (x DetectedIssueSeverityCode_Value) Enum() *DetectedIssueSeverityCode_Value {
	p := new(DetectedIssueSeverityCode_Value)
	*p = x
	return p
}

func (x DetectedIssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectedIssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[90].Descriptor()
}

func (DetectedIssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[90]
}

func (x DetectedIssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectedIssueSeverityCode_Value.Descriptor instead.
func (DetectedIssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{91, 0}
}

type DeviceUseStatementStatusCode_Value int32

const (
	DeviceUseStatementStatusCode_INVALID_UNINITIALIZED DeviceUseStatementStatusCode_Value = 0
	DeviceUseStatementStatusCode_ACTIVE                DeviceUseStatementStatusCode_Value = 1
	DeviceUseStatementStatusCode_COMPLETED             DeviceUseStatementStatusCode_Value = 2
	DeviceUseStatementStatusCode_ENTERED_IN_ERROR      DeviceUseStatementStatusCode_Value = 3
	DeviceUseStatementStatusCode_INTENDED              DeviceUseStatementStatusCode_Value = 4
	DeviceUseStatementStatusCode_STOPPED               DeviceUseStatementStatusCode_Value = 5
	DeviceUseStatementStatusCode_ON_HOLD               DeviceUseStatementStatusCode_Value = 6
)

// Enum value maps for DeviceUseStatementStatusCode_Value.
var (
	DeviceUseStatementStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "INTENDED",
		5: "STOPPED",
		6: "ON_HOLD",
	}
	DeviceUseStatementStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"INTENDED":              4,
		"STOPPED":               5,
		"ON_HOLD":               6,
	}
)

func (x DeviceUseStatementStatusCode_Value) Enum() *DeviceUseStatementStatusCode_Value {
	p := new(DeviceUseStatementStatusCode_Value)
	*p = x
	return p
}

func (x DeviceUseStatementStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceUseStatementStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[91].Descriptor()
}

func (DeviceUseStatementStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[91]
}

func (x DeviceUseStatementStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceUseStatementStatusCode_Value.Descriptor instead.
func (DeviceUseStatementStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{92, 0}
}

type FHIRDeviceStatusCode_Value int32

const (
	FHIRDeviceStatusCode_INVALID_UNINITIALIZED FHIRDeviceStatusCode_Value = 0
	FHIRDeviceStatusCode_ACTIVE                FHIRDeviceStatusCode_Value = 1
	FHIRDeviceStatusCode_INACTIVE              FHIRDeviceStatusCode_Value = 2
	FHIRDeviceStatusCode_ENTERED_IN_ERROR      FHIRDeviceStatusCode_Value = 3
	FHIRDeviceStatusCode_UNKNOWN               FHIRDeviceStatusCode_Value = 4
)

// Enum value maps for FHIRDeviceStatusCode_Value.
var (
	FHIRDeviceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
		4: "UNKNOWN",
	}
	FHIRDeviceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
		"UNKNOWN":               4,
	}
)

func (x FHIRDeviceStatusCode_Value) Enum() *FHIRDeviceStatusCode_Value {
	p := new(FHIRDeviceStatusCode_Value)
	*p = x
	return p
}

func (x FHIRDeviceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRDeviceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[92].Descriptor()
}

func (FHIRDeviceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[92]
}

func (x FHIRDeviceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRDeviceStatusCode_Value.Descriptor instead.
func (FHIRDeviceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{93, 0}
}

type DiagnosisRoleCode_Value int32

const (
	DiagnosisRoleCode_INVALID_UNINITIALIZED DiagnosisRoleCode_Value = 0
	DiagnosisRoleCode_AD                    DiagnosisRoleCode_Value = 1
	DiagnosisRoleCode_DD                    DiagnosisRoleCode_Value = 2
	DiagnosisRoleCode_CC                    DiagnosisRoleCode_Value = 3
	DiagnosisRoleCode_CM                    DiagnosisRoleCode_Value = 4
	DiagnosisRoleCode_PRE_OP                DiagnosisRoleCode_Value = 5
	DiagnosisRoleCode_POST_OP               DiagnosisRoleCode_Value = 6
	DiagnosisRoleCode_BILLING               DiagnosisRoleCode_Value = 7
)

// Enum value maps for DiagnosisRoleCode_Value.
var (
	DiagnosisRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AD",
		2: "DD",
		3: "CC",
		4: "CM",
		5: "PRE_OP",
		6: "POST_OP",
		7: "BILLING",
	}
	DiagnosisRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AD":                    1,
		"DD":                    2,
		"CC":                    3,
		"CM":                    4,
		"PRE_OP":                5,
		"POST_OP":               6,
		"BILLING":               7,
	}
)

func (x DiagnosisRoleCode_Value) Enum() *DiagnosisRoleCode_Value {
	p := new(DiagnosisRoleCode_Value)
	*p = x
	return p
}

func (x DiagnosisRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosisRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[93].Descriptor()
}

func (DiagnosisRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[93]
}

func (x DiagnosisRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosisRoleCode_Value.Descriptor instead.
func (DiagnosisRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{94, 0}
}

type DiagnosticReportStatusCode_Value int32

const (
	DiagnosticReportStatusCode_INVALID_UNINITIALIZED DiagnosticReportStatusCode_Value = 0
	DiagnosticReportStatusCode_REGISTERED            DiagnosticReportStatusCode_Value = 1
	DiagnosticReportStatusCode_PARTIAL               DiagnosticReportStatusCode_Value = 2
	DiagnosticReportStatusCode_PRELIMINARY           DiagnosticReportStatusCode_Value = 3
	DiagnosticReportStatusCode_FINAL                 DiagnosticReportStatusCode_Value = 4
	DiagnosticReportStatusCode_AMENDED               DiagnosticReportStatusCode_Value = 5
	DiagnosticReportStatusCode_CORRECTED             DiagnosticReportStatusCode_Value = 6
	DiagnosticReportStatusCode_APPENDED              DiagnosticReportStatusCode_Value = 7
	DiagnosticReportStatusCode_CANCELLED             DiagnosticReportStatusCode_Value = 8
	DiagnosticReportStatusCode_ENTERED_IN_ERROR      DiagnosticReportStatusCode_Value = 9
	DiagnosticReportStatusCode_UNKNOWN               DiagnosticReportStatusCode_Value = 10
)

// Enum value maps for DiagnosticReportStatusCode_Value.
var (
	DiagnosticReportStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "REGISTERED",
		2:  "PARTIAL",
		3:  "PRELIMINARY",
		4:  "FINAL",
		5:  "AMENDED",
		6:  "CORRECTED",
		7:  "APPENDED",
		8:  "CANCELLED",
		9:  "ENTERED_IN_ERROR",
		10: "UNKNOWN",
	}
	DiagnosticReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PARTIAL":               2,
		"PRELIMINARY":           3,
		"FINAL":                 4,
		"AMENDED":               5,
		"CORRECTED":             6,
		"APPENDED":              7,
		"CANCELLED":             8,
		"ENTERED_IN_ERROR":      9,
		"UNKNOWN":               10,
	}
)

func (x DiagnosticReportStatusCode_Value) Enum() *DiagnosticReportStatusCode_Value {
	p := new(DiagnosticReportStatusCode_Value)
	*p = x
	return p
}

func (x DiagnosticReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[94].Descriptor()
}

func (DiagnosticReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[94]
}

func (x DiagnosticReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticReportStatusCode_Value.Descriptor instead.
func (DiagnosticReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{95, 0}
}

type DigitalMediaTypeCode_Value int32

const (
	DigitalMediaTypeCode_INVALID_UNINITIALIZED DigitalMediaTypeCode_Value = 0
	DigitalMediaTypeCode_PHOTO                 DigitalMediaTypeCode_Value = 1
	DigitalMediaTypeCode_VIDEO                 DigitalMediaTypeCode_Value = 2
	DigitalMediaTypeCode_AUDIO                 DigitalMediaTypeCode_Value = 3
)

// Enum value maps for DigitalMediaTypeCode_Value.
var (
	DigitalMediaTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PHOTO",
		2: "VIDEO",
		3: "AUDIO",
	}
	DigitalMediaTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PHOTO":                 1,
		"VIDEO":                 2,
		"AUDIO":                 3,
	}
)

func (x DigitalMediaTypeCode_Value) Enum() *DigitalMediaTypeCode_Value {
	p := new(DigitalMediaTypeCode_Value)
	*p = x
	return p
}

func (x DigitalMediaTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalMediaTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[95].Descriptor()
}

func (DigitalMediaTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[95]
}

func (x DigitalMediaTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalMediaTypeCode_Value.Descriptor instead.
func (DigitalMediaTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{96, 0}
}

type DocumentModeCode_Value int32

const (
	DocumentModeCode_INVALID_UNINITIALIZED DocumentModeCode_Value = 0
	DocumentModeCode_PRODUCER              DocumentModeCode_Value = 1
	DocumentModeCode_CONSUMER              DocumentModeCode_Value = 2
)

// Enum value maps for DocumentModeCode_Value.
var (
	DocumentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRODUCER",
		2: "CONSUMER",
	}
	DocumentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRODUCER":              1,
		"CONSUMER":              2,
	}
)

func (x DocumentModeCode_Value) Enum() *DocumentModeCode_Value {
	p := new(DocumentModeCode_Value)
	*p = x
	return p
}

func (x DocumentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[96].Descriptor()
}

func (DocumentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[96]
}

func (x DocumentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentModeCode_Value.Descriptor instead.
func (DocumentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{97, 0}
}

type DocumentReferenceStatusCode_Value int32

const (
	DocumentReferenceStatusCode_INVALID_UNINITIALIZED DocumentReferenceStatusCode_Value = 0
	DocumentReferenceStatusCode_CURRENT               DocumentReferenceStatusCode_Value = 1
	DocumentReferenceStatusCode_SUPERSEDED            DocumentReferenceStatusCode_Value = 2
	DocumentReferenceStatusCode_ENTERED_IN_ERROR      DocumentReferenceStatusCode_Value = 3
)

// Enum value maps for DocumentReferenceStatusCode_Value.
var (
	DocumentReferenceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "SUPERSEDED",
		3: "ENTERED_IN_ERROR",
	}
	DocumentReferenceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"SUPERSEDED":            2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x DocumentReferenceStatusCode_Value) Enum() *DocumentReferenceStatusCode_Value {
	p := new(DocumentReferenceStatusCode_Value)
	*p = x
	return p
}

func (x DocumentReferenceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentReferenceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[97].Descriptor()
}

func (DocumentReferenceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[97]
}

func (x DocumentReferenceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentReferenceStatusCode_Value.Descriptor instead.
func (DocumentReferenceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{98, 0}
}

type DocumentRelationshipTypeCode_Value int32

const (
	DocumentRelationshipTypeCode_INVALID_UNINITIALIZED DocumentRelationshipTypeCode_Value = 0
	DocumentRelationshipTypeCode_REPLACES              DocumentRelationshipTypeCode_Value = 1
	DocumentRelationshipTypeCode_TRANSFORMS            DocumentRelationshipTypeCode_Value = 2
	DocumentRelationshipTypeCode_SIGNS                 DocumentRelationshipTypeCode_Value = 3
	DocumentRelationshipTypeCode_APPENDS               DocumentRelationshipTypeCode_Value = 4
)

// Enum value maps for DocumentRelationshipTypeCode_Value.
var (
	DocumentRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACES",
		2: "TRANSFORMS",
		3: "SIGNS",
		4: "APPENDS",
	}
	DocumentRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACES":              1,
		"TRANSFORMS":            2,
		"SIGNS":                 3,
		"APPENDS":               4,
	}
)

func (x DocumentRelationshipTypeCode_Value) Enum() *DocumentRelationshipTypeCode_Value {
	p := new(DocumentRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x DocumentRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[98].Descriptor()
}

func (DocumentRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[98]
}

func (x DocumentRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentRelationshipTypeCode_Value.Descriptor instead.
func (DocumentRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{99, 0}
}

type AdmitSourceCode_Value int32

const (
	AdmitSourceCode_INVALID_UNINITIALIZED AdmitSourceCode_Value = 0
	AdmitSourceCode_HOSP_TRANS            AdmitSourceCode_Value = 1
	AdmitSourceCode_EMD                   AdmitSourceCode_Value = 2
	AdmitSourceCode_OUTP                  AdmitSourceCode_Value = 3
	AdmitSourceCode_BORN                  AdmitSourceCode_Value = 4
	AdmitSourceCode_GP                    AdmitSourceCode_Value = 5
	AdmitSourceCode_MP                    AdmitSourceCode_Value = 6
	AdmitSourceCode_NURSING               AdmitSourceCode_Value = 7
	AdmitSourceCode_PSYCH                 AdmitSourceCode_Value = 8
	AdmitSourceCode_REHAB                 AdmitSourceCode_Value = 9
	AdmitSourceCode_OTHER                 AdmitSourceCode_Value = 10
)

// Enum value maps for AdmitSourceCode_Value.
var (
	AdmitSourceCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "HOSP_TRANS",
		2:  "EMD",
		3:  "OUTP",
		4:  "BORN",
		5:  "GP",
		6:  "MP",
		7:  "NURSING",
		8:  "PSYCH",
		9:  "REHAB",
		10: "OTHER",
	}
	AdmitSourceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOSP_TRANS":            1,
		"EMD":                   2,
		"OUTP":                  3,
		"BORN":                  4,
		"GP":                    5,
		"MP":                    6,
		"NURSING":               7,
		"PSYCH":                 8,
		"REHAB":                 9,
		"OTHER":                 10,
	}
)

func (x AdmitSourceCode_Value) Enum() *AdmitSourceCode_Value {
	p := new(AdmitSourceCode_Value)
	*p = x
	return p
}

func (x AdmitSourceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdmitSourceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[99].Descriptor()
}

func (AdmitSourceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[99]
}

func (x AdmitSourceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdmitSourceCode_Value.Descriptor instead.
func (AdmitSourceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{100, 0}
}

type DietCode_Value int32

const (
	DietCode_INVALID_UNINITIALIZED DietCode_Value = 0
	DietCode_VEGETARIAN            DietCode_Value = 1
	DietCode_DAIRY_FREE            DietCode_Value = 2
	DietCode_NUT_FREE              DietCode_Value = 3
	DietCode_GLUTEN_FREE           DietCode_Value = 4
	DietCode_VEGAN                 DietCode_Value = 5
	DietCode_HALAL                 DietCode_Value = 6
	DietCode_KOSHER                DietCode_Value = 7
)

// Enum value maps for DietCode_Value.
var (
	DietCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VEGETARIAN",
		2: "DAIRY_FREE",
		3: "NUT_FREE",
		4: "GLUTEN_FREE",
		5: "VEGAN",
		6: "HALAL",
		7: "KOSHER",
	}
	DietCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VEGETARIAN":            1,
		"DAIRY_FREE":            2,
		"NUT_FREE":              3,
		"GLUTEN_FREE":           4,
		"VEGAN":                 5,
		"HALAL":                 6,
		"KOSHER":                7,
	}
)

func (x DietCode_Value) Enum() *DietCode_Value {
	p := new(DietCode_Value)
	*p = x
	return p
}

func (x DietCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DietCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[100].Descriptor()
}

func (DietCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[100]
}

func (x DietCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DietCode_Value.Descriptor instead.
func (DietCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{101, 0}
}

type DischargeDispositionCode_Value int32

const (
	DischargeDispositionCode_INVALID_UNINITIALIZED DischargeDispositionCode_Value = 0
	DischargeDispositionCode_HOME                  DischargeDispositionCode_Value = 1
	DischargeDispositionCode_OTHER_HCF             DischargeDispositionCode_Value = 2
	DischargeDispositionCode_HOSP                  DischargeDispositionCode_Value = 3
	DischargeDispositionCode_LONG                  DischargeDispositionCode_Value = 4
	DischargeDispositionCode_AADVICE               DischargeDispositionCode_Value = 5
	DischargeDispositionCode_EXP                   DischargeDispositionCode_Value = 6
	DischargeDispositionCode_PSY                   DischargeDispositionCode_Value = 7
	DischargeDispositionCode_REHAB                 DischargeDispositionCode_Value = 8
	DischargeDispositionCode_SNF                   DischargeDispositionCode_Value = 9
	DischargeDispositionCode_OTH                   DischargeDispositionCode_Value = 10
)

// Enum value maps for DischargeDispositionCode_Value.
var (
	DischargeDispositionCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "HOME",
		2:  "OTHER_HCF",
		3:  "HOSP",
		4:  "LONG",
		5:  "AADVICE",
		6:  "EXP",
		7:  "PSY",
		8:  "REHAB",
		9:  "SNF",
		10: "OTH",
	}
	DischargeDispositionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"OTHER_HCF":             2,
		"HOSP":                  3,
		"LONG":                  4,
		"AADVICE":               5,
		"EXP":                   6,
		"PSY":                   7,
		"REHAB":                 8,
		"SNF":                   9,
		"OTH":                   10,
	}
)

func (x DischargeDispositionCode_Value) Enum() *DischargeDispositionCode_Value {
	p := new(DischargeDispositionCode_Value)
	*p = x
	return p
}

func (x DischargeDispositionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DischargeDispositionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[101].Descriptor()
}

func (DischargeDispositionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[101]
}

func (x DischargeDispositionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DischargeDispositionCode_Value.Descriptor instead.
func (DischargeDispositionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{102, 0}
}

type EncounterLocationStatusCode_Value int32

const (
	EncounterLocationStatusCode_INVALID_UNINITIALIZED EncounterLocationStatusCode_Value = 0
	EncounterLocationStatusCode_PLANNED               EncounterLocationStatusCode_Value = 1
	EncounterLocationStatusCode_ACTIVE                EncounterLocationStatusCode_Value = 2
	EncounterLocationStatusCode_RESERVED              EncounterLocationStatusCode_Value = 3
	EncounterLocationStatusCode_COMPLETED             EncounterLocationStatusCode_Value = 4
)

// Enum value maps for EncounterLocationStatusCode_Value.
var (
	EncounterLocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ACTIVE",
		3: "RESERVED",
		4: "COMPLETED",
	}
	EncounterLocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ACTIVE":                2,
		"RESERVED":              3,
		"COMPLETED":             4,
	}
)

func (x EncounterLocationStatusCode_Value) Enum() *EncounterLocationStatusCode_Value {
	p := new(EncounterLocationStatusCode_Value)
	*p = x
	return p
}

func (x EncounterLocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterLocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[102].Descriptor()
}

func (EncounterLocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[102]
}

func (x EncounterLocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterLocationStatusCode_Value.Descriptor instead.
func (EncounterLocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{103, 0}
}

type SpecialArrangementsCode_Value int32

const (
	SpecialArrangementsCode_INVALID_UNINITIALIZED SpecialArrangementsCode_Value = 0
	SpecialArrangementsCode_WHEEL                 SpecialArrangementsCode_Value = 1
	SpecialArrangementsCode_ADD_BED               SpecialArrangementsCode_Value = 2
	SpecialArrangementsCode_INT                   SpecialArrangementsCode_Value = 3
	SpecialArrangementsCode_ATT                   SpecialArrangementsCode_Value = 4
	SpecialArrangementsCode_DOG                   SpecialArrangementsCode_Value = 5
)

// Enum value maps for SpecialArrangementsCode_Value.
var (
	SpecialArrangementsCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WHEEL",
		2: "ADD_BED",
		3: "INT",
		4: "ATT",
		5: "DOG",
	}
	SpecialArrangementsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WHEEL":                 1,
		"ADD_BED":               2,
		"INT":                   3,
		"ATT":                   4,
		"DOG":                   5,
	}
)

func (x SpecialArrangementsCode_Value) Enum() *SpecialArrangementsCode_Value {
	p := new(SpecialArrangementsCode_Value)
	*p = x
	return p
}

func (x SpecialArrangementsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialArrangementsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[103].Descriptor()
}

func (SpecialArrangementsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[103]
}

func (x SpecialArrangementsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialArrangementsCode_Value.Descriptor instead.
func (SpecialArrangementsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{104, 0}
}

type EncounterStatusCode_Value int32

const (
	EncounterStatusCode_INVALID_UNINITIALIZED EncounterStatusCode_Value = 0
	EncounterStatusCode_PLANNED               EncounterStatusCode_Value = 1
	EncounterStatusCode_ARRIVED               EncounterStatusCode_Value = 2
	EncounterStatusCode_TRIAGED               EncounterStatusCode_Value = 3
	EncounterStatusCode_IN_PROGRESS           EncounterStatusCode_Value = 4
	EncounterStatusCode_ONLEAVE               EncounterStatusCode_Value = 5
	EncounterStatusCode_FINISHED              EncounterStatusCode_Value = 6
	EncounterStatusCode_CANCELLED             EncounterStatusCode_Value = 7
	EncounterStatusCode_ENTERED_IN_ERROR      EncounterStatusCode_Value = 8
	EncounterStatusCode_UNKNOWN               EncounterStatusCode_Value = 9
)

// Enum value maps for EncounterStatusCode_Value.
var (
	EncounterStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ARRIVED",
		3: "TRIAGED",
		4: "IN_PROGRESS",
		5: "ONLEAVE",
		6: "FINISHED",
		7: "CANCELLED",
		8: "ENTERED_IN_ERROR",
		9: "UNKNOWN",
	}
	EncounterStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ARRIVED":               2,
		"TRIAGED":               3,
		"IN_PROGRESS":           4,
		"ONLEAVE":               5,
		"FINISHED":              6,
		"CANCELLED":             7,
		"ENTERED_IN_ERROR":      8,
		"UNKNOWN":               9,
	}
)

func (x EncounterStatusCode_Value) Enum() *EncounterStatusCode_Value {
	p := new(EncounterStatusCode_Value)
	*p = x
	return p
}

func (x EncounterStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[104].Descriptor()
}

func (EncounterStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[104]
}

func (x EncounterStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterStatusCode_Value.Descriptor instead.
func (EncounterStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{105, 0}
}

type EncounterTypeCode_Value int32

const (
	EncounterTypeCode_INVALID_UNINITIALIZED EncounterTypeCode_Value = 0
	EncounterTypeCode_ADMS                  EncounterTypeCode_Value = 1
	EncounterTypeCode_BD_BM_CLIN            EncounterTypeCode_Value = 2
	EncounterTypeCode_CCS60                 EncounterTypeCode_Value = 3
	EncounterTypeCode_OKI                   EncounterTypeCode_Value = 4
)

// Enum value maps for EncounterTypeCode_Value.
var (
	EncounterTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ADMS",
		2: "BD_BM_CLIN",
		3: "CCS60",
		4: "OKI",
	}
	EncounterTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ADMS":                  1,
		"BD_BM_CLIN":            2,
		"CCS60":                 3,
		"OKI":                   4,
	}
)

func (x EncounterTypeCode_Value) Enum() *EncounterTypeCode_Value {
	p := new(EncounterTypeCode_Value)
	*p = x
	return p
}

func (x EncounterTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[105].Descriptor()
}

func (EncounterTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[105]
}

func (x EncounterTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterTypeCode_Value.Descriptor instead.
func (EncounterTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{106, 0}
}

type EndpointStatusCode_Value int32

const (
	EndpointStatusCode_INVALID_UNINITIALIZED EndpointStatusCode_Value = 0
	EndpointStatusCode_ACTIVE                EndpointStatusCode_Value = 1
	EndpointStatusCode_SUSPENDED             EndpointStatusCode_Value = 2
	EndpointStatusCode_ERROR                 EndpointStatusCode_Value = 3
	EndpointStatusCode_OFF                   EndpointStatusCode_Value = 4
	EndpointStatusCode_ENTERED_IN_ERROR      EndpointStatusCode_Value = 5
	EndpointStatusCode_TEST                  EndpointStatusCode_Value = 6
)

// Enum value maps for EndpointStatusCode_Value.
var (
	EndpointStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "ERROR",
		4: "OFF",
		5: "ENTERED_IN_ERROR",
		6: "TEST",
	}
	EndpointStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"ERROR":                 3,
		"OFF":                   4,
		"ENTERED_IN_ERROR":      5,
		"TEST":                  6,
	}
)

func (x EndpointStatusCode_Value) Enum() *EndpointStatusCode_Value {
	p := new(EndpointStatusCode_Value)
	*p = x
	return p
}

func (x EndpointStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[106].Descriptor()
}

func (EndpointStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[106]
}

func (x EndpointStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointStatusCode_Value.Descriptor instead.
func (EndpointStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{107, 0}
}

type EntityNamePartQualifierCode_Value int32

const (
	EntityNamePartQualifierCode_INVALID_UNINITIALIZED EntityNamePartQualifierCode_Value = 0
	EntityNamePartQualifierCode_LS                    EntityNamePartQualifierCode_Value = 1
	EntityNamePartQualifierCode_AC                    EntityNamePartQualifierCode_Value = 2
	EntityNamePartQualifierCode_NB                    EntityNamePartQualifierCode_Value = 3
	EntityNamePartQualifierCode_PR                    EntityNamePartQualifierCode_Value = 4
	EntityNamePartQualifierCode_HON                   EntityNamePartQualifierCode_Value = 5
	EntityNamePartQualifierCode_BR                    EntityNamePartQualifierCode_Value = 6
	EntityNamePartQualifierCode_AD                    EntityNamePartQualifierCode_Value = 7
	EntityNamePartQualifierCode_SP                    EntityNamePartQualifierCode_Value = 8
	EntityNamePartQualifierCode_MID                   EntityNamePartQualifierCode_Value = 9
	EntityNamePartQualifierCode_CL                    EntityNamePartQualifierCode_Value = 10
	EntityNamePartQualifierCode_IN                    EntityNamePartQualifierCode_Value = 11
)

// Enum value maps for EntityNamePartQualifierCode_Value.
var (
	EntityNamePartQualifierCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "LS",
		2:  "AC",
		3:  "NB",
		4:  "PR",
		5:  "HON",
		6:  "BR",
		7:  "AD",
		8:  "SP",
		9:  "MID",
		10: "CL",
		11: "IN",
	}
	EntityNamePartQualifierCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LS":                    1,
		"AC":                    2,
		"NB":                    3,
		"PR":                    4,
		"HON":                   5,
		"BR":                    6,
		"AD":                    7,
		"SP":                    8,
		"MID":                   9,
		"CL":                    10,
		"IN":                    11,
	}
)

func (x EntityNamePartQualifierCode_Value) Enum() *EntityNamePartQualifierCode_Value {
	p := new(EntityNamePartQualifierCode_Value)
	*p = x
	return p
}

func (x EntityNamePartQualifierCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityNamePartQualifierCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[107].Descriptor()
}

func (EntityNamePartQualifierCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[107]
}

func (x EntityNamePartQualifierCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityNamePartQualifierCode_Value.Descriptor instead.
func (EntityNamePartQualifierCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{108, 0}
}

type EnteralFormulaAdditiveTypeCodeCode_Value int32

const (
	EnteralFormulaAdditiveTypeCodeCode_INVALID_UNINITIALIZED EnteralFormulaAdditiveTypeCodeCode_Value = 0
	EnteralFormulaAdditiveTypeCodeCode_LIPID                 EnteralFormulaAdditiveTypeCodeCode_Value = 1
	EnteralFormulaAdditiveTypeCodeCode_PROTEIN               EnteralFormulaAdditiveTypeCodeCode_Value = 2
	EnteralFormulaAdditiveTypeCodeCode_CARBOHYDRATE          EnteralFormulaAdditiveTypeCodeCode_Value = 3
	EnteralFormulaAdditiveTypeCodeCode_FIBER                 EnteralFormulaAdditiveTypeCodeCode_Value = 4
	EnteralFormulaAdditiveTypeCodeCode_WATER                 EnteralFormulaAdditiveTypeCodeCode_Value = 5
)

// Enum value maps for EnteralFormulaAdditiveTypeCodeCode_Value.
var (
	EnteralFormulaAdditiveTypeCodeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LIPID",
		2: "PROTEIN",
		3: "CARBOHYDRATE",
		4: "FIBER",
		5: "WATER",
	}
	EnteralFormulaAdditiveTypeCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LIPID":                 1,
		"PROTEIN":               2,
		"CARBOHYDRATE":          3,
		"FIBER":                 4,
		"WATER":                 5,
	}
)

func (x EnteralFormulaAdditiveTypeCodeCode_Value) Enum() *EnteralFormulaAdditiveTypeCodeCode_Value {
	p := new(EnteralFormulaAdditiveTypeCodeCode_Value)
	*p = x
	return p
}

func (x EnteralFormulaAdditiveTypeCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnteralFormulaAdditiveTypeCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[108].Descriptor()
}

func (EnteralFormulaAdditiveTypeCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[108]
}

func (x EnteralFormulaAdditiveTypeCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnteralFormulaAdditiveTypeCodeCode_Value.Descriptor instead.
func (EnteralFormulaAdditiveTypeCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{109, 0}
}

type EpisodeOfCareStatusCode_Value int32

const (
	EpisodeOfCareStatusCode_INVALID_UNINITIALIZED EpisodeOfCareStatusCode_Value = 0
	EpisodeOfCareStatusCode_PLANNED               EpisodeOfCareStatusCode_Value = 1
	EpisodeOfCareStatusCode_WAITLIST              EpisodeOfCareStatusCode_Value = 2
	EpisodeOfCareStatusCode_ACTIVE                EpisodeOfCareStatusCode_Value = 3
	EpisodeOfCareStatusCode_ONHOLD                EpisodeOfCareStatusCode_Value = 4
	EpisodeOfCareStatusCode_FINISHED              EpisodeOfCareStatusCode_Value = 5
	EpisodeOfCareStatusCode_CANCELLED             EpisodeOfCareStatusCode_Value = 6
	EpisodeOfCareStatusCode_ENTERED_IN_ERROR      EpisodeOfCareStatusCode_Value = 7
)

// Enum value maps for EpisodeOfCareStatusCode_Value.
var (
	EpisodeOfCareStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "WAITLIST",
		3: "ACTIVE",
		4: "ONHOLD",
		5: "FINISHED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
	}
	EpisodeOfCareStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"WAITLIST":              2,
		"ACTIVE":                3,
		"ONHOLD":                4,
		"FINISHED":              5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x EpisodeOfCareStatusCode_Value) Enum() *EpisodeOfCareStatusCode_Value {
	p := new(EpisodeOfCareStatusCode_Value)
	*p = x
	return p
}

func (x EpisodeOfCareStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpisodeOfCareStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[109].Descriptor()
}

func (EpisodeOfCareStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[109]
}

func (x EpisodeOfCareStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpisodeOfCareStatusCode_Value.Descriptor instead.
func (EpisodeOfCareStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{110, 0}
}

type EpisodeOfCareTypeCode_Value int32

const (
	EpisodeOfCareTypeCode_INVALID_UNINITIALIZED EpisodeOfCareTypeCode_Value = 0
	EpisodeOfCareTypeCode_HACC                  EpisodeOfCareTypeCode_Value = 1
	EpisodeOfCareTypeCode_PAC                   EpisodeOfCareTypeCode_Value = 2
	EpisodeOfCareTypeCode_DIAB                  EpisodeOfCareTypeCode_Value = 3
	EpisodeOfCareTypeCode_DA                    EpisodeOfCareTypeCode_Value = 4
	EpisodeOfCareTypeCode_CACP                  EpisodeOfCareTypeCode_Value = 5
)

// Enum value maps for EpisodeOfCareTypeCode_Value.
var (
	EpisodeOfCareTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HACC",
		2: "PAC",
		3: "DIAB",
		4: "DA",
		5: "CACP",
	}
	EpisodeOfCareTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HACC":                  1,
		"PAC":                   2,
		"DIAB":                  3,
		"DA":                    4,
		"CACP":                  5,
	}
)

func (x EpisodeOfCareTypeCode_Value) Enum() *EpisodeOfCareTypeCode_Value {
	p := new(EpisodeOfCareTypeCode_Value)
	*p = x
	return p
}

func (x EpisodeOfCareTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpisodeOfCareTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[110].Descriptor()
}

func (EpisodeOfCareTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[110]
}

func (x EpisodeOfCareTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpisodeOfCareTypeCode_Value.Descriptor instead.
func (EpisodeOfCareTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{111, 0}
}

type EventCapabilityModeCode_Value int32

const (
	EventCapabilityModeCode_INVALID_UNINITIALIZED EventCapabilityModeCode_Value = 0
	EventCapabilityModeCode_SENDER                EventCapabilityModeCode_Value = 1
	EventCapabilityModeCode_RECEIVER              EventCapabilityModeCode_Value = 2
)

// Enum value maps for EventCapabilityModeCode_Value.
var (
	EventCapabilityModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENDER",
		2: "RECEIVER",
	}
	EventCapabilityModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENDER":                1,
		"RECEIVER":              2,
	}
)

func (x EventCapabilityModeCode_Value) Enum() *EventCapabilityModeCode_Value {
	p := new(EventCapabilityModeCode_Value)
	*p = x
	return p
}

func (x EventCapabilityModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCapabilityModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[111].Descriptor()
}

func (EventCapabilityModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[111]
}

func (x EventCapabilityModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCapabilityModeCode_Value.Descriptor instead.
func (EventCapabilityModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{112, 0}
}

type EventStatusCode_Value int32

const (
	EventStatusCode_INVALID_UNINITIALIZED EventStatusCode_Value = 0
	EventStatusCode_PREPARATION           EventStatusCode_Value = 1
	EventStatusCode_IN_PROGRESS           EventStatusCode_Value = 2
	EventStatusCode_SUSPENDED             EventStatusCode_Value = 3
	EventStatusCode_ABORTED               EventStatusCode_Value = 4
	EventStatusCode_COMPLETED             EventStatusCode_Value = 5
	EventStatusCode_ENTERED_IN_ERROR      EventStatusCode_Value = 6
	EventStatusCode_UNKNOWN               EventStatusCode_Value = 7
)

// Enum value maps for EventStatusCode_Value.
var (
	EventStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "SUSPENDED",
		4: "ABORTED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	EventStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"SUSPENDED":             3,
		"ABORTED":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x EventStatusCode_Value) Enum() *EventStatusCode_Value {
	p := new(EventStatusCode_Value)
	*p = x
	return p
}

func (x EventStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[112].Descriptor()
}

func (EventStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[112]
}

func (x EventStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatusCode_Value.Descriptor instead.
func (EventStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{113, 0}
}

type ClaimPayeeResourceTypeCode_Value int32

const (
	ClaimPayeeResourceTypeCode_INVALID_UNINITIALIZED ClaimPayeeResourceTypeCode_Value = 0
	ClaimPayeeResourceTypeCode_ORGANIZATION          ClaimPayeeResourceTypeCode_Value = 1
	ClaimPayeeResourceTypeCode_PATIENT               ClaimPayeeResourceTypeCode_Value = 2
	ClaimPayeeResourceTypeCode_PRACTITIONER          ClaimPayeeResourceTypeCode_Value = 3
	ClaimPayeeResourceTypeCode_RELATEDPERSON         ClaimPayeeResourceTypeCode_Value = 4
)

// Enum value maps for ClaimPayeeResourceTypeCode_Value.
var (
	ClaimPayeeResourceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ORGANIZATION",
		2: "PATIENT",
		3: "PRACTITIONER",
		4: "RELATEDPERSON",
	}
	ClaimPayeeResourceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ORGANIZATION":          1,
		"PATIENT":               2,
		"PRACTITIONER":          3,
		"RELATEDPERSON":         4,
	}
)

func (x ClaimPayeeResourceTypeCode_Value) Enum() *ClaimPayeeResourceTypeCode_Value {
	p := new(ClaimPayeeResourceTypeCode_Value)
	*p = x
	return p
}

func (x ClaimPayeeResourceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimPayeeResourceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[113].Descriptor()
}

func (ClaimPayeeResourceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[113]
}

func (x ClaimPayeeResourceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimPayeeResourceTypeCode_Value.Descriptor instead.
func (ClaimPayeeResourceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{114, 0}
}

type ExplanationOfBenefitStatusCode_Value int32

const (
	ExplanationOfBenefitStatusCode_INVALID_UNINITIALIZED ExplanationOfBenefitStatusCode_Value = 0
	ExplanationOfBenefitStatusCode_ACTIVE                ExplanationOfBenefitStatusCode_Value = 1
	ExplanationOfBenefitStatusCode_CANCELLED             ExplanationOfBenefitStatusCode_Value = 2
	ExplanationOfBenefitStatusCode_DRAFT                 ExplanationOfBenefitStatusCode_Value = 3
	ExplanationOfBenefitStatusCode_ENTERED_IN_ERROR      ExplanationOfBenefitStatusCode_Value = 4
)

// Enum value maps for ExplanationOfBenefitStatusCode_Value.
var (
	ExplanationOfBenefitStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "CANCELLED",
		3: "DRAFT",
		4: "ENTERED_IN_ERROR",
	}
	ExplanationOfBenefitStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"CANCELLED":             2,
		"DRAFT":                 3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x ExplanationOfBenefitStatusCode_Value) Enum() *ExplanationOfBenefitStatusCode_Value {
	p := new(ExplanationOfBenefitStatusCode_Value)
	*p = x
	return p
}

func (x ExplanationOfBenefitStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExplanationOfBenefitStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[114].Descriptor()
}

func (ExplanationOfBenefitStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[114]
}

func (x ExplanationOfBenefitStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExplanationOfBenefitStatusCode_Value.Descriptor instead.
func (ExplanationOfBenefitStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{115, 0}
}

type ExtensionContextCode_Value int32

const (
	ExtensionContextCode_INVALID_UNINITIALIZED ExtensionContextCode_Value = 0
	ExtensionContextCode_RESOURCE              ExtensionContextCode_Value = 1
	ExtensionContextCode_DATATYPE              ExtensionContextCode_Value = 2
	ExtensionContextCode_EXTENSION             ExtensionContextCode_Value = 3
)

// Enum value maps for ExtensionContextCode_Value.
var (
	ExtensionContextCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESOURCE",
		2: "DATATYPE",
		3: "EXTENSION",
	}
	ExtensionContextCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESOURCE":              1,
		"DATATYPE":              2,
		"EXTENSION":             3,
	}
)

func (x ExtensionContextCode_Value) Enum() *ExtensionContextCode_Value {
	p := new(ExtensionContextCode_Value)
	*p = x
	return p
}

func (x ExtensionContextCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionContextCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[115].Descriptor()
}

func (ExtensionContextCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[115]
}

func (x ExtensionContextCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionContextCode_Value.Descriptor instead.
func (ExtensionContextCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{116, 0}
}

type FilterOperatorCode_Value int32

const (
	FilterOperatorCode_INVALID_UNINITIALIZED FilterOperatorCode_Value = 0
	FilterOperatorCode_EQUALS                FilterOperatorCode_Value = 1
	FilterOperatorCode_IS_A                  FilterOperatorCode_Value = 2
	FilterOperatorCode_DESCENDENT_OF         FilterOperatorCode_Value = 3
	FilterOperatorCode_IS_NOT_A              FilterOperatorCode_Value = 4
	FilterOperatorCode_REGEX                 FilterOperatorCode_Value = 5
	FilterOperatorCode_IN                    FilterOperatorCode_Value = 6
	FilterOperatorCode_NOT_IN                FilterOperatorCode_Value = 7
	FilterOperatorCode_GENERALIZES           FilterOperatorCode_Value = 8
	FilterOperatorCode_EXISTS                FilterOperatorCode_Value = 9
)

// Enum value maps for FilterOperatorCode_Value.
var (
	FilterOperatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EQUALS",
		2: "IS_A",
		3: "DESCENDENT_OF",
		4: "IS_NOT_A",
		5: "REGEX",
		6: "IN",
		7: "NOT_IN",
		8: "GENERALIZES",
		9: "EXISTS",
	}
	FilterOperatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"IS_A":                  2,
		"DESCENDENT_OF":         3,
		"IS_NOT_A":              4,
		"REGEX":                 5,
		"IN":                    6,
		"NOT_IN":                7,
		"GENERALIZES":           8,
		"EXISTS":                9,
	}
)

func (x FilterOperatorCode_Value) Enum() *FilterOperatorCode_Value {
	p := new(FilterOperatorCode_Value)
	*p = x
	return p
}

func (x FilterOperatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[116].Descriptor()
}

func (FilterOperatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[116]
}

func (x FilterOperatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperatorCode_Value.Descriptor instead.
func (FilterOperatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{117, 0}
}

type FlagCategoryCode_Value int32

const (
	FlagCategoryCode_INVALID_UNINITIALIZED FlagCategoryCode_Value = 0
	FlagCategoryCode_DIET                  FlagCategoryCode_Value = 1
	FlagCategoryCode_DRUG                  FlagCategoryCode_Value = 2
	FlagCategoryCode_LAB                   FlagCategoryCode_Value = 3
	FlagCategoryCode_ADMIN                 FlagCategoryCode_Value = 4
	FlagCategoryCode_CONTACT               FlagCategoryCode_Value = 5
)

// Enum value maps for FlagCategoryCode_Value.
var (
	FlagCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DIET",
		2: "DRUG",
		3: "LAB",
		4: "ADMIN",
		5: "CONTACT",
	}
	FlagCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DIET":                  1,
		"DRUG":                  2,
		"LAB":                   3,
		"ADMIN":                 4,
		"CONTACT":               5,
	}
)

func (x FlagCategoryCode_Value) Enum() *FlagCategoryCode_Value {
	p := new(FlagCategoryCode_Value)
	*p = x
	return p
}

func (x FlagCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[117].Descriptor()
}

func (FlagCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[117]
}

func (x FlagCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagCategoryCode_Value.Descriptor instead.
func (FlagCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{118, 0}
}

type FlagPriorityCodesCode_Value int32

const (
	FlagPriorityCodesCode_INVALID_UNINITIALIZED FlagPriorityCodesCode_Value = 0
	FlagPriorityCodesCode_PN                    FlagPriorityCodesCode_Value = 1
	FlagPriorityCodesCode_PL                    FlagPriorityCodesCode_Value = 2
	FlagPriorityCodesCode_PM                    FlagPriorityCodesCode_Value = 3
	FlagPriorityCodesCode_PH                    FlagPriorityCodesCode_Value = 4
)

// Enum value maps for FlagPriorityCodesCode_Value.
var (
	FlagPriorityCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PN",
		2: "PL",
		3: "PM",
		4: "PH",
	}
	FlagPriorityCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PN":                    1,
		"PL":                    2,
		"PM":                    3,
		"PH":                    4,
	}
)

func (x FlagPriorityCodesCode_Value) Enum() *FlagPriorityCodesCode_Value {
	p := new(FlagPriorityCodesCode_Value)
	*p = x
	return p
}

func (x FlagPriorityCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagPriorityCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[118].Descriptor()
}

func (FlagPriorityCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[118]
}

func (x FlagPriorityCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagPriorityCodesCode_Value.Descriptor instead.
func (FlagPriorityCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{119, 0}
}

type FlagStatusCode_Value int32

const (
	FlagStatusCode_INVALID_UNINITIALIZED FlagStatusCode_Value = 0
	FlagStatusCode_ACTIVE                FlagStatusCode_Value = 1
	FlagStatusCode_INACTIVE              FlagStatusCode_Value = 2
	FlagStatusCode_ENTERED_IN_ERROR      FlagStatusCode_Value = 3
)

// Enum value maps for FlagStatusCode_Value.
var (
	FlagStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FlagStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FlagStatusCode_Value) Enum() *FlagStatusCode_Value {
	p := new(FlagStatusCode_Value)
	*p = x
	return p
}

func (x FlagStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[119].Descriptor()
}

func (FlagStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[119]
}

func (x FlagStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagStatusCode_Value.Descriptor instead.
func (FlagStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{120, 0}
}

type FinancialResourceStatusCode_Value int32

const (
	FinancialResourceStatusCode_INVALID_UNINITIALIZED FinancialResourceStatusCode_Value = 0
	FinancialResourceStatusCode_ACTIVE                FinancialResourceStatusCode_Value = 1
	FinancialResourceStatusCode_CANCELLED             FinancialResourceStatusCode_Value = 2
	FinancialResourceStatusCode_DRAFT                 FinancialResourceStatusCode_Value = 3
	FinancialResourceStatusCode_ENTERED_IN_ERROR      FinancialResourceStatusCode_Value = 4
)

// Enum value maps for FinancialResourceStatusCode_Value.
var (
	FinancialResourceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "CANCELLED",
		3: "DRAFT",
		4: "ENTERED_IN_ERROR",
	}
	FinancialResourceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"CANCELLED":             2,
		"DRAFT":                 3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x FinancialResourceStatusCode_Value) Enum() *FinancialResourceStatusCode_Value {
	p := new(FinancialResourceStatusCode_Value)
	*p = x
	return p
}

func (x FinancialResourceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialResourceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[120].Descriptor()
}

func (FinancialResourceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[120]
}

func (x FinancialResourceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialResourceStatusCode_Value.Descriptor instead.
func (FinancialResourceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{121, 0}
}

type GoalAcceptanceStatusCode_Value int32

const (
	GoalAcceptanceStatusCode_INVALID_UNINITIALIZED GoalAcceptanceStatusCode_Value = 0
	GoalAcceptanceStatusCode_AGREE                 GoalAcceptanceStatusCode_Value = 1
	GoalAcceptanceStatusCode_DISAGREE              GoalAcceptanceStatusCode_Value = 2
	GoalAcceptanceStatusCode_PENDING               GoalAcceptanceStatusCode_Value = 3
)

// Enum value maps for GoalAcceptanceStatusCode_Value.
var (
	GoalAcceptanceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AGREE",
		2: "DISAGREE",
		3: "PENDING",
	}
	GoalAcceptanceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AGREE":                 1,
		"DISAGREE":              2,
		"PENDING":               3,
	}
)

func (x GoalAcceptanceStatusCode_Value) Enum() *GoalAcceptanceStatusCode_Value {
	p := new(GoalAcceptanceStatusCode_Value)
	*p = x
	return p
}

func (x GoalAcceptanceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalAcceptanceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[121].Descriptor()
}

func (GoalAcceptanceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[121]
}

func (x GoalAcceptanceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalAcceptanceStatusCode_Value.Descriptor instead.
func (GoalAcceptanceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{122, 0}
}

type GoalCategoryCode_Value int32

const (
	GoalCategoryCode_INVALID_UNINITIALIZED GoalCategoryCode_Value = 0
	GoalCategoryCode_DIETARY               GoalCategoryCode_Value = 1
	GoalCategoryCode_SAFETY                GoalCategoryCode_Value = 2
	GoalCategoryCode_BEHAVIORAL            GoalCategoryCode_Value = 3
	GoalCategoryCode_NURSING               GoalCategoryCode_Value = 4
	GoalCategoryCode_PHYSIOTHERAPY         GoalCategoryCode_Value = 5
)

// Enum value maps for GoalCategoryCode_Value.
var (
	GoalCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DIETARY",
		2: "SAFETY",
		3: "BEHAVIORAL",
		4: "NURSING",
		5: "PHYSIOTHERAPY",
	}
	GoalCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DIETARY":               1,
		"SAFETY":                2,
		"BEHAVIORAL":            3,
		"NURSING":               4,
		"PHYSIOTHERAPY":         5,
	}
)

func (x GoalCategoryCode_Value) Enum() *GoalCategoryCode_Value {
	p := new(GoalCategoryCode_Value)
	*p = x
	return p
}

func (x GoalCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[122].Descriptor()
}

func (GoalCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[122]
}

func (x GoalCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalCategoryCode_Value.Descriptor instead.
func (GoalCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{123, 0}
}

type GoalPriorityCode_Value int32

const (
	GoalPriorityCode_INVALID_UNINITIALIZED GoalPriorityCode_Value = 0
	GoalPriorityCode_HIGH_PRIORITY         GoalPriorityCode_Value = 1
	GoalPriorityCode_MEDIUM_PRIORITY       GoalPriorityCode_Value = 2
	GoalPriorityCode_LOW_PRIORITY          GoalPriorityCode_Value = 3
)

// Enum value maps for GoalPriorityCode_Value.
var (
	GoalPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HIGH_PRIORITY",
		2: "MEDIUM_PRIORITY",
		3: "LOW_PRIORITY",
	}
	GoalPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HIGH_PRIORITY":         1,
		"MEDIUM_PRIORITY":       2,
		"LOW_PRIORITY":          3,
	}
)

func (x GoalPriorityCode_Value) Enum() *GoalPriorityCode_Value {
	p := new(GoalPriorityCode_Value)
	*p = x
	return p
}

func (x GoalPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[123].Descriptor()
}

func (GoalPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[123]
}

func (x GoalPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalPriorityCode_Value.Descriptor instead.
func (GoalPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{124, 0}
}

type GoalRelationshipTypeCode_Value int32

const (
	GoalRelationshipTypeCode_INVALID_UNINITIALIZED GoalRelationshipTypeCode_Value = 0
	GoalRelationshipTypeCode_PREDECESSOR           GoalRelationshipTypeCode_Value = 1
	GoalRelationshipTypeCode_SUCCESSOR             GoalRelationshipTypeCode_Value = 2
	GoalRelationshipTypeCode_REPLACEMENT           GoalRelationshipTypeCode_Value = 3
	GoalRelationshipTypeCode_MILESTONE             GoalRelationshipTypeCode_Value = 4
	GoalRelationshipTypeCode_OTHER                 GoalRelationshipTypeCode_Value = 5
)

// Enum value maps for GoalRelationshipTypeCode_Value.
var (
	GoalRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREDECESSOR",
		2: "SUCCESSOR",
		3: "REPLACEMENT",
		4: "MILESTONE",
		5: "OTHER",
	}
	GoalRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREDECESSOR":           1,
		"SUCCESSOR":             2,
		"REPLACEMENT":           3,
		"MILESTONE":             4,
		"OTHER":                 5,
	}
)

func (x GoalRelationshipTypeCode_Value) Enum() *GoalRelationshipTypeCode_Value {
	p := new(GoalRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x GoalRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[124].Descriptor()
}

func (GoalRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[124]
}

func (x GoalRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalRelationshipTypeCode_Value.Descriptor instead.
func (GoalRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{125, 0}
}

type GoalStatusCode_Value int32

const (
	GoalStatusCode_INVALID_UNINITIALIZED GoalStatusCode_Value = 0
	GoalStatusCode_PROPOSED              GoalStatusCode_Value = 1
	GoalStatusCode_ACCEPTED              GoalStatusCode_Value = 2
	GoalStatusCode_PLANNED               GoalStatusCode_Value = 3
	GoalStatusCode_IN_PROGRESS           GoalStatusCode_Value = 4
	GoalStatusCode_ON_TARGET             GoalStatusCode_Value = 5
	GoalStatusCode_AHEAD_OF_TARGET       GoalStatusCode_Value = 6
	GoalStatusCode_BEHIND_TARGET         GoalStatusCode_Value = 7
	GoalStatusCode_SUSTAINING            GoalStatusCode_Value = 8
	GoalStatusCode_ACHIEVED              GoalStatusCode_Value = 9
	GoalStatusCode_ON_HOLD               GoalStatusCode_Value = 10
	GoalStatusCode_CANCELLED             GoalStatusCode_Value = 11
	GoalStatusCode_ENTERED_IN_ERROR      GoalStatusCode_Value = 12
	GoalStatusCode_REJECTED              GoalStatusCode_Value = 13
)

// Enum value maps for GoalStatusCode_Value.
var (
	GoalStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "ACCEPTED",
		3:  "PLANNED",
		4:  "IN_PROGRESS",
		5:  "ON_TARGET",
		6:  "AHEAD_OF_TARGET",
		7:  "BEHIND_TARGET",
		8:  "SUSTAINING",
		9:  "ACHIEVED",
		10: "ON_HOLD",
		11: "CANCELLED",
		12: "ENTERED_IN_ERROR",
		13: "REJECTED",
	}
	GoalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"ACCEPTED":              2,
		"PLANNED":               3,
		"IN_PROGRESS":           4,
		"ON_TARGET":             5,
		"AHEAD_OF_TARGET":       6,
		"BEHIND_TARGET":         7,
		"SUSTAINING":            8,
		"ACHIEVED":              9,
		"ON_HOLD":               10,
		"CANCELLED":             11,
		"ENTERED_IN_ERROR":      12,
		"REJECTED":              13,
	}
)

func (x GoalStatusCode_Value) Enum() *GoalStatusCode_Value {
	p := new(GoalStatusCode_Value)
	*p = x
	return p
}

func (x GoalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[125].Descriptor()
}

func (GoalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[125]
}

func (x GoalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalStatusCode_Value.Descriptor instead.
func (GoalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{126, 0}
}

type GoalStatusReasonCode_Value int32

const (
	GoalStatusReasonCode_INVALID_UNINITIALIZED    GoalStatusReasonCode_Value = 0
	GoalStatusReasonCode_SURGERY                  GoalStatusReasonCode_Value = 1
	GoalStatusReasonCode_LIFE_EVENT               GoalStatusReasonCode_Value = 2
	GoalStatusReasonCode_REPLACED                 GoalStatusReasonCode_Value = 3
	GoalStatusReasonCode_PATIENT_REQUEST          GoalStatusReasonCode_Value = 4
	GoalStatusReasonCode_TEMP_NOT_ATTAINABLE      GoalStatusReasonCode_Value = 5
	GoalStatusReasonCode_PERMANENT_NOT_ATTAINABLE GoalStatusReasonCode_Value = 6
	GoalStatusReasonCode_FINANCIAL_BARRIER        GoalStatusReasonCode_Value = 7
	GoalStatusReasonCode_LACK_OF_TRANSPORTATION   GoalStatusReasonCode_Value = 8
	GoalStatusReasonCode_LACK_OF_SOCIAL_SUPPORT   GoalStatusReasonCode_Value = 9
)

// Enum value maps for GoalStatusReasonCode_Value.
var (
	GoalStatusReasonCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SURGERY",
		2: "LIFE_EVENT",
		3: "REPLACED",
		4: "PATIENT_REQUEST",
		5: "TEMP_NOT_ATTAINABLE",
		6: "PERMANENT_NOT_ATTAINABLE",
		7: "FINANCIAL_BARRIER",
		8: "LACK_OF_TRANSPORTATION",
		9: "LACK_OF_SOCIAL_SUPPORT",
	}
	GoalStatusReasonCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"SURGERY":                  1,
		"LIFE_EVENT":               2,
		"REPLACED":                 3,
		"PATIENT_REQUEST":          4,
		"TEMP_NOT_ATTAINABLE":      5,
		"PERMANENT_NOT_ATTAINABLE": 6,
		"FINANCIAL_BARRIER":        7,
		"LACK_OF_TRANSPORTATION":   8,
		"LACK_OF_SOCIAL_SUPPORT":   9,
	}
)

func (x GoalStatusReasonCode_Value) Enum() *GoalStatusReasonCode_Value {
	p := new(GoalStatusReasonCode_Value)
	*p = x
	return p
}

func (x GoalStatusReasonCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalStatusReasonCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[126].Descriptor()
}

func (GoalStatusReasonCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[126]
}

func (x GoalStatusReasonCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalStatusReasonCode_Value.Descriptor instead.
func (GoalStatusReasonCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{127, 0}
}

type GraphCompartmentRuleCode_Value int32

const (
	GraphCompartmentRuleCode_INVALID_UNINITIALIZED GraphCompartmentRuleCode_Value = 0
	GraphCompartmentRuleCode_IDENTICAL             GraphCompartmentRuleCode_Value = 1
	GraphCompartmentRuleCode_MATCHING              GraphCompartmentRuleCode_Value = 2
	GraphCompartmentRuleCode_DIFFERENT             GraphCompartmentRuleCode_Value = 3
	GraphCompartmentRuleCode_CUSTOM                GraphCompartmentRuleCode_Value = 4
)

// Enum value maps for GraphCompartmentRuleCode_Value.
var (
	GraphCompartmentRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IDENTICAL",
		2: "MATCHING",
		3: "DIFFERENT",
		4: "CUSTOM",
	}
	GraphCompartmentRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IDENTICAL":             1,
		"MATCHING":              2,
		"DIFFERENT":             3,
		"CUSTOM":                4,
	}
)

func (x GraphCompartmentRuleCode_Value) Enum() *GraphCompartmentRuleCode_Value {
	p := new(GraphCompartmentRuleCode_Value)
	*p = x
	return p
}

func (x GraphCompartmentRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphCompartmentRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[127].Descriptor()
}

func (GraphCompartmentRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[127]
}

func (x GraphCompartmentRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphCompartmentRuleCode_Value.Descriptor instead.
func (GraphCompartmentRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{128, 0}
}

type GroupTypeCode_Value int32

const (
	GroupTypeCode_INVALID_UNINITIALIZED GroupTypeCode_Value = 0
	GroupTypeCode_PERSON                GroupTypeCode_Value = 1
	GroupTypeCode_ANIMAL                GroupTypeCode_Value = 2
	GroupTypeCode_PRACTITIONER          GroupTypeCode_Value = 3
	GroupTypeCode_DEVICE                GroupTypeCode_Value = 4
	GroupTypeCode_MEDICATION            GroupTypeCode_Value = 5
	GroupTypeCode_SUBSTANCE             GroupTypeCode_Value = 6
)

// Enum value maps for GroupTypeCode_Value.
var (
	GroupTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSON",
		2: "ANIMAL",
		3: "PRACTITIONER",
		4: "DEVICE",
		5: "MEDICATION",
		6: "SUBSTANCE",
	}
	GroupTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSON":                1,
		"ANIMAL":                2,
		"PRACTITIONER":          3,
		"DEVICE":                4,
		"MEDICATION":            5,
		"SUBSTANCE":             6,
	}
)

func (x GroupTypeCode_Value) Enum() *GroupTypeCode_Value {
	p := new(GroupTypeCode_Value)
	*p = x
	return p
}

func (x GroupTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[128].Descriptor()
}

func (GroupTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[128]
}

func (x GroupTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupTypeCode_Value.Descriptor instead.
func (GroupTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{129, 0}
}

type GuidanceResponseStatusCode_Value int32

const (
	GuidanceResponseStatusCode_INVALID_UNINITIALIZED GuidanceResponseStatusCode_Value = 0
	GuidanceResponseStatusCode_SUCCESS               GuidanceResponseStatusCode_Value = 1
	GuidanceResponseStatusCode_DATA_REQUESTED        GuidanceResponseStatusCode_Value = 2
	GuidanceResponseStatusCode_DATA_REQUIRED         GuidanceResponseStatusCode_Value = 3
	GuidanceResponseStatusCode_IN_PROGRESS           GuidanceResponseStatusCode_Value = 4
	GuidanceResponseStatusCode_FAILURE               GuidanceResponseStatusCode_Value = 5
	GuidanceResponseStatusCode_ENTERED_IN_ERROR      GuidanceResponseStatusCode_Value = 6
)

// Enum value maps for GuidanceResponseStatusCode_Value.
var (
	GuidanceResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUCCESS",
		2: "DATA_REQUESTED",
		3: "DATA_REQUIRED",
		4: "IN_PROGRESS",
		5: "FAILURE",
		6: "ENTERED_IN_ERROR",
	}
	GuidanceResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUCCESS":               1,
		"DATA_REQUESTED":        2,
		"DATA_REQUIRED":         3,
		"IN_PROGRESS":           4,
		"FAILURE":               5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x GuidanceResponseStatusCode_Value) Enum() *GuidanceResponseStatusCode_Value {
	p := new(GuidanceResponseStatusCode_Value)
	*p = x
	return p
}

func (x GuidanceResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidanceResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[129].Descriptor()
}

func (GuidanceResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[129]
}

func (x GuidanceResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidanceResponseStatusCode_Value.Descriptor instead.
func (GuidanceResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{130, 0}
}

type GuideDependencyTypeCode_Value int32

const (
	GuideDependencyTypeCode_INVALID_UNINITIALIZED GuideDependencyTypeCode_Value = 0
	GuideDependencyTypeCode_REFERENCE             GuideDependencyTypeCode_Value = 1
	GuideDependencyTypeCode_INCLUSION             GuideDependencyTypeCode_Value = 2
)

// Enum value maps for GuideDependencyTypeCode_Value.
var (
	GuideDependencyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REFERENCE",
		2: "INCLUSION",
	}
	GuideDependencyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REFERENCE":             1,
		"INCLUSION":             2,
	}
)

func (x GuideDependencyTypeCode_Value) Enum() *GuideDependencyTypeCode_Value {
	p := new(GuideDependencyTypeCode_Value)
	*p = x
	return p
}

func (x GuideDependencyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuideDependencyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[130].Descriptor()
}

func (GuideDependencyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[130]
}

func (x GuideDependencyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuideDependencyTypeCode_Value.Descriptor instead.
func (GuideDependencyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{131, 0}
}

type GuidePageKindCode_Value int32

const (
	GuidePageKindCode_INVALID_UNINITIALIZED GuidePageKindCode_Value = 0
	GuidePageKindCode_PAGE                  GuidePageKindCode_Value = 1
	GuidePageKindCode_EXAMPLE               GuidePageKindCode_Value = 2
	GuidePageKindCode_LIST                  GuidePageKindCode_Value = 3
	GuidePageKindCode_INCLUDE               GuidePageKindCode_Value = 4
	GuidePageKindCode_DIRECTORY             GuidePageKindCode_Value = 5
	GuidePageKindCode_DICTIONARY            GuidePageKindCode_Value = 6
	GuidePageKindCode_TOC                   GuidePageKindCode_Value = 7
	GuidePageKindCode_RESOURCE              GuidePageKindCode_Value = 8
)

// Enum value maps for GuidePageKindCode_Value.
var (
	GuidePageKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PAGE",
		2: "EXAMPLE",
		3: "LIST",
		4: "INCLUDE",
		5: "DIRECTORY",
		6: "DICTIONARY",
		7: "TOC",
		8: "RESOURCE",
	}
	GuidePageKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PAGE":                  1,
		"EXAMPLE":               2,
		"LIST":                  3,
		"INCLUDE":               4,
		"DIRECTORY":             5,
		"DICTIONARY":            6,
		"TOC":                   7,
		"RESOURCE":              8,
	}
)

func (x GuidePageKindCode_Value) Enum() *GuidePageKindCode_Value {
	p := new(GuidePageKindCode_Value)
	*p = x
	return p
}

func (x GuidePageKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidePageKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[131].Descriptor()
}

func (GuidePageKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[131]
}

func (x GuidePageKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidePageKindCode_Value.Descriptor instead.
func (GuidePageKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{132, 0}
}

type FamilyHistoryNotDoneReasonCode_Value int32

const (
	FamilyHistoryNotDoneReasonCode_INVALID_UNINITIALIZED FamilyHistoryNotDoneReasonCode_Value = 0
	FamilyHistoryNotDoneReasonCode_SUBJECT_UNKNOWN       FamilyHistoryNotDoneReasonCode_Value = 1
	FamilyHistoryNotDoneReasonCode_WITHHELD              FamilyHistoryNotDoneReasonCode_Value = 2
	FamilyHistoryNotDoneReasonCode_UNABLE_TO_OBTAIN      FamilyHistoryNotDoneReasonCode_Value = 3
	FamilyHistoryNotDoneReasonCode_DEFERRED              FamilyHistoryNotDoneReasonCode_Value = 4
)

// Enum value maps for FamilyHistoryNotDoneReasonCode_Value.
var (
	FamilyHistoryNotDoneReasonCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUBJECT_UNKNOWN",
		2: "WITHHELD",
		3: "UNABLE_TO_OBTAIN",
		4: "DEFERRED",
	}
	FamilyHistoryNotDoneReasonCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUBJECT_UNKNOWN":       1,
		"WITHHELD":              2,
		"UNABLE_TO_OBTAIN":      3,
		"DEFERRED":              4,
	}
)

func (x FamilyHistoryNotDoneReasonCode_Value) Enum() *FamilyHistoryNotDoneReasonCode_Value {
	p := new(FamilyHistoryNotDoneReasonCode_Value)
	*p = x
	return p
}

func (x FamilyHistoryNotDoneReasonCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FamilyHistoryNotDoneReasonCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[132].Descriptor()
}

func (FamilyHistoryNotDoneReasonCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[132]
}

func (x FamilyHistoryNotDoneReasonCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FamilyHistoryNotDoneReasonCode_Value.Descriptor instead.
func (FamilyHistoryNotDoneReasonCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{133, 0}
}

type FamilyHistoryStatusCode_Value int32

const (
	FamilyHistoryStatusCode_INVALID_UNINITIALIZED FamilyHistoryStatusCode_Value = 0
	FamilyHistoryStatusCode_PARTIAL               FamilyHistoryStatusCode_Value = 1
	FamilyHistoryStatusCode_COMPLETED             FamilyHistoryStatusCode_Value = 2
	FamilyHistoryStatusCode_ENTERED_IN_ERROR      FamilyHistoryStatusCode_Value = 3
	FamilyHistoryStatusCode_HEALTH_UNKNOWN        FamilyHistoryStatusCode_Value = 4
)

// Enum value maps for FamilyHistoryStatusCode_Value.
var (
	FamilyHistoryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PARTIAL",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "HEALTH_UNKNOWN",
	}
	FamilyHistoryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PARTIAL":               1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"HEALTH_UNKNOWN":        4,
	}
)

func (x FamilyHistoryStatusCode_Value) Enum() *FamilyHistoryStatusCode_Value {
	p := new(FamilyHistoryStatusCode_Value)
	*p = x
	return p
}

func (x FamilyHistoryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FamilyHistoryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[133].Descriptor()
}

func (FamilyHistoryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[133]
}

func (x FamilyHistoryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FamilyHistoryStatusCode_Value.Descriptor instead.
func (FamilyHistoryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{134, 0}
}

type HL7WorkgroupCode_Value int32

const (
	HL7WorkgroupCode_INVALID_UNINITIALIZED HL7WorkgroupCode_Value = 0
	HL7WorkgroupCode_CBCC                  HL7WorkgroupCode_Value = 1
	HL7WorkgroupCode_CDS                   HL7WorkgroupCode_Value = 2
	HL7WorkgroupCode_CQI                   HL7WorkgroupCode_Value = 3
	HL7WorkgroupCode_CG                    HL7WorkgroupCode_Value = 4
	HL7WorkgroupCode_DEV                   HL7WorkgroupCode_Value = 5
	HL7WorkgroupCode_EHR                   HL7WorkgroupCode_Value = 6
	HL7WorkgroupCode_FHIR                  HL7WorkgroupCode_Value = 7
	HL7WorkgroupCode_FM                    HL7WorkgroupCode_Value = 8
	HL7WorkgroupCode_HSI                   HL7WorkgroupCode_Value = 9
	HL7WorkgroupCode_II                    HL7WorkgroupCode_Value = 10
	HL7WorkgroupCode_INM                   HL7WorkgroupCode_Value = 11
	HL7WorkgroupCode_ITS                   HL7WorkgroupCode_Value = 12
	HL7WorkgroupCode_OO                    HL7WorkgroupCode_Value = 13
	HL7WorkgroupCode_PA                    HL7WorkgroupCode_Value = 14
	HL7WorkgroupCode_PC                    HL7WorkgroupCode_Value = 15
	HL7WorkgroupCode_PHER                  HL7WorkgroupCode_Value = 16
	HL7WorkgroupCode_PHX                   HL7WorkgroupCode_Value = 17
	HL7WorkgroupCode_RCRIM                 HL7WorkgroupCode_Value = 18
	HL7WorkgroupCode_SD                    HL7WorkgroupCode_Value = 19
	HL7WorkgroupCode_SEC                   HL7WorkgroupCode_Value = 20
	HL7WorkgroupCode_US                    HL7WorkgroupCode_Value = 21
	HL7WorkgroupCode_VOCAB                 HL7WorkgroupCode_Value = 22
	HL7WorkgroupCode_AID                   HL7WorkgroupCode_Value = 23
)

// Enum value maps for HL7WorkgroupCode_Value.
var (
	HL7WorkgroupCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CBCC",
		2:  "CDS",
		3:  "CQI",
		4:  "CG",
		5:  "DEV",
		6:  "EHR",
		7:  "FHIR",
		8:  "FM",
		9:  "HSI",
		10: "II",
		11: "INM",
		12: "ITS",
		13: "OO",
		14: "PA",
		15: "PC",
		16: "PHER",
		17: "PHX",
		18: "RCRIM",
		19: "SD",
		20: "SEC",
		21: "US",
		22: "VOCAB",
		23: "AID",
	}
	HL7WorkgroupCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CBCC":                  1,
		"CDS":                   2,
		"CQI":                   3,
		"CG":                    4,
		"DEV":                   5,
		"EHR":                   6,
		"FHIR":                  7,
		"FM":                    8,
		"HSI":                   9,
		"II":                    10,
		"INM":                   11,
		"ITS":                   12,
		"OO":                    13,
		"PA":                    14,
		"PC":                    15,
		"PHER":                  16,
		"PHX":                   17,
		"RCRIM":                 18,
		"SD":                    19,
		"SEC":                   20,
		"US":                    21,
		"VOCAB":                 22,
		"AID":                   23,
	}
)

func (x HL7WorkgroupCode_Value) Enum() *HL7WorkgroupCode_Value {
	p := new(HL7WorkgroupCode_Value)
	*p = x
	return p
}

func (x HL7WorkgroupCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HL7WorkgroupCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[134].Descriptor()
}

func (HL7WorkgroupCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[134]
}

func (x HL7WorkgroupCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HL7WorkgroupCode_Value.Descriptor instead.
func (HL7WorkgroupCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{135, 0}
}

type TestScriptRequestMethodCodeCode_Value int32

const (
	TestScriptRequestMethodCodeCode_INVALID_UNINITIALIZED TestScriptRequestMethodCodeCode_Value = 0
	TestScriptRequestMethodCodeCode_DELETE                TestScriptRequestMethodCodeCode_Value = 1
	TestScriptRequestMethodCodeCode_GET                   TestScriptRequestMethodCodeCode_Value = 2
	TestScriptRequestMethodCodeCode_OPTIONS               TestScriptRequestMethodCodeCode_Value = 3
	TestScriptRequestMethodCodeCode_PATCH                 TestScriptRequestMethodCodeCode_Value = 4
	TestScriptRequestMethodCodeCode_POST                  TestScriptRequestMethodCodeCode_Value = 5
	TestScriptRequestMethodCodeCode_PUT                   TestScriptRequestMethodCodeCode_Value = 6
)

// Enum value maps for TestScriptRequestMethodCodeCode_Value.
var (
	TestScriptRequestMethodCodeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DELETE",
		2: "GET",
		3: "OPTIONS",
		4: "PATCH",
		5: "POST",
		6: "PUT",
	}
	TestScriptRequestMethodCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DELETE":                1,
		"GET":                   2,
		"OPTIONS":               3,
		"PATCH":                 4,
		"POST":                  5,
		"PUT":                   6,
	}
)

func (x TestScriptRequestMethodCodeCode_Value) Enum() *TestScriptRequestMethodCodeCode_Value {
	p := new(TestScriptRequestMethodCodeCode_Value)
	*p = x
	return p
}

func (x TestScriptRequestMethodCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestScriptRequestMethodCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[135].Descriptor()
}

func (TestScriptRequestMethodCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[135]
}

func (x TestScriptRequestMethodCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestScriptRequestMethodCodeCode_Value.Descriptor instead.
func (TestScriptRequestMethodCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{136, 0}
}

type HTTPVerbCode_Value int32

const (
	HTTPVerbCode_INVALID_UNINITIALIZED HTTPVerbCode_Value = 0
	HTTPVerbCode_GET                   HTTPVerbCode_Value = 1
	HTTPVerbCode_POST                  HTTPVerbCode_Value = 2
	HTTPVerbCode_PUT                   HTTPVerbCode_Value = 3
	HTTPVerbCode_DELETE                HTTPVerbCode_Value = 4
)

// Enum value maps for HTTPVerbCode_Value.
var (
	HTTPVerbCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GET",
		2: "POST",
		3: "PUT",
		4: "DELETE",
	}
	HTTPVerbCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GET":                   1,
		"POST":                  2,
		"PUT":                   3,
		"DELETE":                4,
	}
)

func (x HTTPVerbCode_Value) Enum() *HTTPVerbCode_Value {
	p := new(HTTPVerbCode_Value)
	*p = x
	return p
}

func (x HTTPVerbCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPVerbCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[136].Descriptor()
}

func (HTTPVerbCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[136]
}

func (x HTTPVerbCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPVerbCode_Value.Descriptor instead.
func (HTTPVerbCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{137, 0}
}

type IdentityAssuranceLevelCode_Value int32

const (
	IdentityAssuranceLevelCode_INVALID_UNINITIALIZED IdentityAssuranceLevelCode_Value = 0
	IdentityAssuranceLevelCode_LEVEL1                IdentityAssuranceLevelCode_Value = 1
	IdentityAssuranceLevelCode_LEVEL2                IdentityAssuranceLevelCode_Value = 2
	IdentityAssuranceLevelCode_LEVEL3                IdentityAssuranceLevelCode_Value = 3
	IdentityAssuranceLevelCode_LEVEL4                IdentityAssuranceLevelCode_Value = 4
)

// Enum value maps for IdentityAssuranceLevelCode_Value.
var (
	IdentityAssuranceLevelCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LEVEL1",
		2: "LEVEL2",
		3: "LEVEL3",
		4: "LEVEL4",
	}
	IdentityAssuranceLevelCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LEVEL1":                1,
		"LEVEL2":                2,
		"LEVEL3":                3,
		"LEVEL4":                4,
	}
)

func (x IdentityAssuranceLevelCode_Value) Enum() *IdentityAssuranceLevelCode_Value {
	p := new(IdentityAssuranceLevelCode_Value)
	*p = x
	return p
}

func (x IdentityAssuranceLevelCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityAssuranceLevelCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[137].Descriptor()
}

func (IdentityAssuranceLevelCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[137]
}

func (x IdentityAssuranceLevelCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityAssuranceLevelCode_Value.Descriptor instead.
func (IdentityAssuranceLevelCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{138, 0}
}

type ImmunizationOriginCodesCode_Value int32

const (
	ImmunizationOriginCodesCode_INVALID_UNINITIALIZED ImmunizationOriginCodesCode_Value = 0
	ImmunizationOriginCodesCode_PROVIDER              ImmunizationOriginCodesCode_Value = 1
	ImmunizationOriginCodesCode_RECORD                ImmunizationOriginCodesCode_Value = 2
	ImmunizationOriginCodesCode_RECALL                ImmunizationOriginCodesCode_Value = 3
	ImmunizationOriginCodesCode_SCHOOL                ImmunizationOriginCodesCode_Value = 4
)

// Enum value maps for ImmunizationOriginCodesCode_Value.
var (
	ImmunizationOriginCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROVIDER",
		2: "RECORD",
		3: "RECALL",
		4: "SCHOOL",
	}
	ImmunizationOriginCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROVIDER":              1,
		"RECORD":                2,
		"RECALL":                3,
		"SCHOOL":                4,
	}
)

func (x ImmunizationOriginCodesCode_Value) Enum() *ImmunizationOriginCodesCode_Value {
	p := new(ImmunizationOriginCodesCode_Value)
	*p = x
	return p
}

func (x ImmunizationOriginCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmunizationOriginCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[138].Descriptor()
}

func (ImmunizationOriginCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[138]
}

func (x ImmunizationOriginCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmunizationOriginCodesCode_Value.Descriptor instead.
func (ImmunizationOriginCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{139, 0}
}

type ImmunizationRecommendationDateCriterionCodesCode_Value int32

const (
	ImmunizationRecommendationDateCriterionCodesCode_INVALID_UNINITIALIZED ImmunizationRecommendationDateCriterionCodesCode_Value = 0
	ImmunizationRecommendationDateCriterionCodesCode_DUE                   ImmunizationRecommendationDateCriterionCodesCode_Value = 1
	ImmunizationRecommendationDateCriterionCodesCode_RECOMMENDED           ImmunizationRecommendationDateCriterionCodesCode_Value = 2
	ImmunizationRecommendationDateCriterionCodesCode_EARLIEST              ImmunizationRecommendationDateCriterionCodesCode_Value = 3
	ImmunizationRecommendationDateCriterionCodesCode_OVERDUE               ImmunizationRecommendationDateCriterionCodesCode_Value = 4
	ImmunizationRecommendationDateCriterionCodesCode_LATEST                ImmunizationRecommendationDateCriterionCodesCode_Value = 5
)

// Enum value maps for ImmunizationRecommendationDateCriterionCodesCode_Value.
var (
	ImmunizationRecommendationDateCriterionCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DUE",
		2: "RECOMMENDED",
		3: "EARLIEST",
		4: "OVERDUE",
		5: "LATEST",
	}
	ImmunizationRecommendationDateCriterionCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DUE":                   1,
		"RECOMMENDED":           2,
		"EARLIEST":              3,
		"OVERDUE":               4,
		"LATEST":                5,
	}
)

func (x ImmunizationRecommendationDateCriterionCodesCode_Value) Enum() *ImmunizationRecommendationDateCriterionCodesCode_Value {
	p := new(ImmunizationRecommendationDateCriterionCodesCode_Value)
	*p = x
	return p
}

func (x ImmunizationRecommendationDateCriterionCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmunizationRecommendationDateCriterionCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[139].Descriptor()
}

func (ImmunizationRecommendationDateCriterionCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[139]
}

func (x ImmunizationRecommendationDateCriterionCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmunizationRecommendationDateCriterionCodesCode_Value.Descriptor instead.
func (ImmunizationRecommendationDateCriterionCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{140, 0}
}

type ImmunizationRecommendationStatusCodesCode_Value int32

const (
	ImmunizationRecommendationStatusCodesCode_INVALID_UNINITIALIZED ImmunizationRecommendationStatusCodesCode_Value = 0
	ImmunizationRecommendationStatusCodesCode_DUE                   ImmunizationRecommendationStatusCodesCode_Value = 1
	ImmunizationRecommendationStatusCodesCode_OVERDUE               ImmunizationRecommendationStatusCodesCode_Value = 2
)

// Enum value maps for ImmunizationRecommendationStatusCodesCode_Value.
var (
	ImmunizationRecommendationStatusCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DUE",
		2: "OVERDUE",
	}
	ImmunizationRecommendationStatusCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DUE":                   1,
		"OVERDUE":               2,
	}
)

func (x ImmunizationRecommendationStatusCodesCode_Value) Enum() *ImmunizationRecommendationStatusCodesCode_Value {
	p := new(ImmunizationRecommendationStatusCodesCode_Value)
	*p = x
	return p
}

func (x ImmunizationRecommendationStatusCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmunizationRecommendationStatusCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[140].Descriptor()
}

func (ImmunizationRecommendationStatusCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[140]
}

func (x ImmunizationRecommendationStatusCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmunizationRecommendationStatusCodesCode_Value.Descriptor instead.
func (ImmunizationRecommendationStatusCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{141, 0}
}

type ImmunizationStatusCodesCode_Value int32

const (
	ImmunizationStatusCodesCode_INVALID_UNINITIALIZED ImmunizationStatusCodesCode_Value = 0
	ImmunizationStatusCodesCode_COMPLETED             ImmunizationStatusCodesCode_Value = 1
	ImmunizationStatusCodesCode_ENTERED_IN_ERROR      ImmunizationStatusCodesCode_Value = 2
)

// Enum value maps for ImmunizationStatusCodesCode_Value.
var (
	ImmunizationStatusCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETED",
		2: "ENTERED_IN_ERROR",
	}
	ImmunizationStatusCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETED":             1,
		"ENTERED_IN_ERROR":      2,
	}
)

func (x ImmunizationStatusCodesCode_Value) Enum() *ImmunizationStatusCodesCode_Value {
	p := new(ImmunizationStatusCodesCode_Value)
	*p = x
	return p
}

func (x ImmunizationStatusCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmunizationStatusCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[141].Descriptor()
}

func (ImmunizationStatusCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[141]
}

func (x ImmunizationStatusCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmunizationStatusCodesCode_Value.Descriptor instead.
func (ImmunizationStatusCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{142, 0}
}

type ImplantStatusCode_Value int32

const (
	ImplantStatusCode_INVALID_UNINITIALIZED ImplantStatusCode_Value = 0
	ImplantStatusCode_FUNCTIONAL            ImplantStatusCode_Value = 1
	ImplantStatusCode_NON_FUNCTIONAL        ImplantStatusCode_Value = 2
	ImplantStatusCode_DISABLED              ImplantStatusCode_Value = 3
	ImplantStatusCode_UNKNOWN               ImplantStatusCode_Value = 4
)

// Enum value maps for ImplantStatusCode_Value.
var (
	ImplantStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FUNCTIONAL",
		2: "NON_FUNCTIONAL",
		3: "DISABLED",
		4: "UNKNOWN",
	}
	ImplantStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FUNCTIONAL":            1,
		"NON_FUNCTIONAL":        2,
		"DISABLED":              3,
		"UNKNOWN":               4,
	}
)

func (x ImplantStatusCode_Value) Enum() *ImplantStatusCode_Value {
	p := new(ImplantStatusCode_Value)
	*p = x
	return p
}

func (x ImplantStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplantStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[142].Descriptor()
}

func (ImplantStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[142]
}

func (x ImplantStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplantStatusCode_Value.Descriptor instead.
func (ImplantStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{143, 0}
}

type InstanceAvailabilityCode_Value int32

const (
	InstanceAvailabilityCode_INVALID_UNINITIALIZED InstanceAvailabilityCode_Value = 0
	InstanceAvailabilityCode_ONLINE                InstanceAvailabilityCode_Value = 1
	InstanceAvailabilityCode_OFFLINE               InstanceAvailabilityCode_Value = 2
	InstanceAvailabilityCode_NEARLINE              InstanceAvailabilityCode_Value = 3
	InstanceAvailabilityCode_UNAVAILABLE           InstanceAvailabilityCode_Value = 4
)

// Enum value maps for InstanceAvailabilityCode_Value.
var (
	InstanceAvailabilityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ONLINE",
		2: "OFFLINE",
		3: "NEARLINE",
		4: "UNAVAILABLE",
	}
	InstanceAvailabilityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ONLINE":                1,
		"OFFLINE":               2,
		"NEARLINE":              3,
		"UNAVAILABLE":           4,
	}
)

func (x InstanceAvailabilityCode_Value) Enum() *InstanceAvailabilityCode_Value {
	p := new(InstanceAvailabilityCode_Value)
	*p = x
	return p
}

func (x InstanceAvailabilityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceAvailabilityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[143].Descriptor()
}

func (InstanceAvailabilityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[143]
}

func (x InstanceAvailabilityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceAvailabilityCode_Value.Descriptor instead.
func (InstanceAvailabilityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{144, 0}
}

type IssueSeverityCode_Value int32

const (
	IssueSeverityCode_INVALID_UNINITIALIZED IssueSeverityCode_Value = 0
	IssueSeverityCode_FATAL                 IssueSeverityCode_Value = 1
	IssueSeverityCode_ERROR                 IssueSeverityCode_Value = 2
	IssueSeverityCode_WARNING               IssueSeverityCode_Value = 3
	IssueSeverityCode_INFORMATION           IssueSeverityCode_Value = 4
)

// Enum value maps for IssueSeverityCode_Value.
var (
	IssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FATAL",
		2: "ERROR",
		3: "WARNING",
		4: "INFORMATION",
	}
	IssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FATAL":                 1,
		"ERROR":                 2,
		"WARNING":               3,
		"INFORMATION":           4,
	}
)

func (x IssueSeverityCode_Value) Enum() *IssueSeverityCode_Value {
	p := new(IssueSeverityCode_Value)
	*p = x
	return p
}

func (x IssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[144].Descriptor()
}

func (IssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[144]
}

func (x IssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverityCode_Value.Descriptor instead.
func (IssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{145, 0}
}

type IssueTypeCode_Value int32

const (
	IssueTypeCode_INVALID_UNINITIALIZED IssueTypeCode_Value = 0
	IssueTypeCode_INVALID               IssueTypeCode_Value = 1
	IssueTypeCode_STRUCTURE             IssueTypeCode_Value = 2
	IssueTypeCode_REQUIRED              IssueTypeCode_Value = 3
	IssueTypeCode_VALUE                 IssueTypeCode_Value = 4
	IssueTypeCode_INVARIANT             IssueTypeCode_Value = 5
	IssueTypeCode_SECURITY              IssueTypeCode_Value = 6
	IssueTypeCode_LOGIN                 IssueTypeCode_Value = 7
	IssueTypeCode_UNKNOWN               IssueTypeCode_Value = 8
	IssueTypeCode_EXPIRED               IssueTypeCode_Value = 9
	IssueTypeCode_FORBIDDEN             IssueTypeCode_Value = 10
	IssueTypeCode_SUPPRESSED            IssueTypeCode_Value = 11
	IssueTypeCode_PROCESSING            IssueTypeCode_Value = 12
	IssueTypeCode_NOT_SUPPORTED         IssueTypeCode_Value = 13
	IssueTypeCode_DUPLICATE             IssueTypeCode_Value = 14
	IssueTypeCode_NOT_FOUND             IssueTypeCode_Value = 15
	IssueTypeCode_TOO_LONG              IssueTypeCode_Value = 16
	IssueTypeCode_CODE_INVALID          IssueTypeCode_Value = 17
	IssueTypeCode_EXTENSION             IssueTypeCode_Value = 18
	IssueTypeCode_TOO_COSTLY            IssueTypeCode_Value = 19
	IssueTypeCode_BUSINESS_RULE         IssueTypeCode_Value = 20
	IssueTypeCode_CONFLICT              IssueTypeCode_Value = 21
	IssueTypeCode_INCOMPLETE            IssueTypeCode_Value = 22
	IssueTypeCode_TRANSIENT             IssueTypeCode_Value = 23
	IssueTypeCode_LOCK_ERROR            IssueTypeCode_Value = 24
	IssueTypeCode_NO_STORE              IssueTypeCode_Value = 25
	IssueTypeCode_EXCEPTION             IssueTypeCode_Value = 26
	IssueTypeCode_TIMEOUT               IssueTypeCode_Value = 27
	IssueTypeCode_THROTTLED             IssueTypeCode_Value = 28
	IssueTypeCode_INFORMATIONAL         IssueTypeCode_Value = 29
)

// Enum value maps for IssueTypeCode_Value.
var (
	IssueTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "INVALID",
		2:  "STRUCTURE",
		3:  "REQUIRED",
		4:  "VALUE",
		5:  "INVARIANT",
		6:  "SECURITY",
		7:  "LOGIN",
		8:  "UNKNOWN",
		9:  "EXPIRED",
		10: "FORBIDDEN",
		11: "SUPPRESSED",
		12: "PROCESSING",
		13: "NOT_SUPPORTED",
		14: "DUPLICATE",
		15: "NOT_FOUND",
		16: "TOO_LONG",
		17: "CODE_INVALID",
		18: "EXTENSION",
		19: "TOO_COSTLY",
		20: "BUSINESS_RULE",
		21: "CONFLICT",
		22: "INCOMPLETE",
		23: "TRANSIENT",
		24: "LOCK_ERROR",
		25: "NO_STORE",
		26: "EXCEPTION",
		27: "TIMEOUT",
		28: "THROTTLED",
		29: "INFORMATIONAL",
	}
	IssueTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INVALID":               1,
		"STRUCTURE":             2,
		"REQUIRED":              3,
		"VALUE":                 4,
		"INVARIANT":             5,
		"SECURITY":              6,
		"LOGIN":                 7,
		"UNKNOWN":               8,
		"EXPIRED":               9,
		"FORBIDDEN":             10,
		"SUPPRESSED":            11,
		"PROCESSING":            12,
		"NOT_SUPPORTED":         13,
		"DUPLICATE":             14,
		"NOT_FOUND":             15,
		"TOO_LONG":              16,
		"CODE_INVALID":          17,
		"EXTENSION":             18,
		"TOO_COSTLY":            19,
		"BUSINESS_RULE":         20,
		"CONFLICT":              21,
		"INCOMPLETE":            22,
		"TRANSIENT":             23,
		"LOCK_ERROR":            24,
		"NO_STORE":              25,
		"EXCEPTION":             26,
		"TIMEOUT":               27,
		"THROTTLED":             28,
		"INFORMATIONAL":         29,
	}
)

func (x IssueTypeCode_Value) Enum() *IssueTypeCode_Value {
	p := new(IssueTypeCode_Value)
	*p = x
	return p
}

func (x IssueTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[145].Descriptor()
}

func (IssueTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[145]
}

func (x IssueTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueTypeCode_Value.Descriptor instead.
func (IssueTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{146, 0}
}

type QuestionnaireItemTypeCode_Value int32

const (
	QuestionnaireItemTypeCode_INVALID_UNINITIALIZED QuestionnaireItemTypeCode_Value = 0
	QuestionnaireItemTypeCode_GROUP                 QuestionnaireItemTypeCode_Value = 1
	QuestionnaireItemTypeCode_DISPLAY               QuestionnaireItemTypeCode_Value = 2
	QuestionnaireItemTypeCode_QUESTION              QuestionnaireItemTypeCode_Value = 3
	QuestionnaireItemTypeCode_BOOLEAN               QuestionnaireItemTypeCode_Value = 4
	QuestionnaireItemTypeCode_DECIMAL               QuestionnaireItemTypeCode_Value = 5
	QuestionnaireItemTypeCode_INTEGER               QuestionnaireItemTypeCode_Value = 6
	QuestionnaireItemTypeCode_DATE                  QuestionnaireItemTypeCode_Value = 7
	QuestionnaireItemTypeCode_DATE_TIME             QuestionnaireItemTypeCode_Value = 8
	QuestionnaireItemTypeCode_TIME                  QuestionnaireItemTypeCode_Value = 9
	QuestionnaireItemTypeCode_STRING                QuestionnaireItemTypeCode_Value = 10
	QuestionnaireItemTypeCode_TEXT                  QuestionnaireItemTypeCode_Value = 11
	QuestionnaireItemTypeCode_URL                   QuestionnaireItemTypeCode_Value = 12
	QuestionnaireItemTypeCode_CHOICE                QuestionnaireItemTypeCode_Value = 13
	QuestionnaireItemTypeCode_OPEN_CHOICE           QuestionnaireItemTypeCode_Value = 14
	QuestionnaireItemTypeCode_ATTACHMENT            QuestionnaireItemTypeCode_Value = 15
	QuestionnaireItemTypeCode_REFERENCE             QuestionnaireItemTypeCode_Value = 16
	QuestionnaireItemTypeCode_QUANTITY              QuestionnaireItemTypeCode_Value = 17
)

// Enum value maps for QuestionnaireItemTypeCode_Value.
var (
	QuestionnaireItemTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "GROUP",
		2:  "DISPLAY",
		3:  "QUESTION",
		4:  "BOOLEAN",
		5:  "DECIMAL",
		6:  "INTEGER",
		7:  "DATE",
		8:  "DATE_TIME",
		9:  "TIME",
		10: "STRING",
		11: "TEXT",
		12: "URL",
		13: "CHOICE",
		14: "OPEN_CHOICE",
		15: "ATTACHMENT",
		16: "REFERENCE",
		17: "QUANTITY",
	}
	QuestionnaireItemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUP":                 1,
		"DISPLAY":               2,
		"QUESTION":              3,
		"BOOLEAN":               4,
		"DECIMAL":               5,
		"INTEGER":               6,
		"DATE":                  7,
		"DATE_TIME":             8,
		"TIME":                  9,
		"STRING":                10,
		"TEXT":                  11,
		"URL":                   12,
		"CHOICE":                13,
		"OPEN_CHOICE":           14,
		"ATTACHMENT":            15,
		"REFERENCE":             16,
		"QUANTITY":              17,
	}
)

func (x QuestionnaireItemTypeCode_Value) Enum() *QuestionnaireItemTypeCode_Value {
	p := new(QuestionnaireItemTypeCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[146].Descriptor()
}

func (QuestionnaireItemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[146]
}

func (x QuestionnaireItemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemTypeCode_Value.Descriptor instead.
func (QuestionnaireItemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{147, 0}
}

type LibraryTypeCode_Value int32

const (
	LibraryTypeCode_INVALID_UNINITIALIZED LibraryTypeCode_Value = 0
	LibraryTypeCode_LOGIC_LIBRARY         LibraryTypeCode_Value = 1
	LibraryTypeCode_MODEL_DEFINITION      LibraryTypeCode_Value = 2
	LibraryTypeCode_ASSET_COLLECTION      LibraryTypeCode_Value = 3
	LibraryTypeCode_MODULE_DEFINITION     LibraryTypeCode_Value = 4
)

// Enum value maps for LibraryTypeCode_Value.
var (
	LibraryTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LOGIC_LIBRARY",
		2: "MODEL_DEFINITION",
		3: "ASSET_COLLECTION",
		4: "MODULE_DEFINITION",
	}
	LibraryTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LOGIC_LIBRARY":         1,
		"MODEL_DEFINITION":      2,
		"ASSET_COLLECTION":      3,
		"MODULE_DEFINITION":     4,
	}
)

func (x LibraryTypeCode_Value) Enum() *LibraryTypeCode_Value {
	p := new(LibraryTypeCode_Value)
	*p = x
	return p
}

func (x LibraryTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LibraryTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[147].Descriptor()
}

func (LibraryTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[147]
}

func (x LibraryTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LibraryTypeCode_Value.Descriptor instead.
func (LibraryTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{148, 0}
}

type LinkageTypeCode_Value int32

const (
	LinkageTypeCode_INVALID_UNINITIALIZED LinkageTypeCode_Value = 0
	LinkageTypeCode_SOURCE                LinkageTypeCode_Value = 1
	LinkageTypeCode_ALTERNATE             LinkageTypeCode_Value = 2
	LinkageTypeCode_HISTORICAL            LinkageTypeCode_Value = 3
)

// Enum value maps for LinkageTypeCode_Value.
var (
	LinkageTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "ALTERNATE",
		3: "HISTORICAL",
	}
	LinkageTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"ALTERNATE":             2,
		"HISTORICAL":            3,
	}
)

func (x LinkageTypeCode_Value) Enum() *LinkageTypeCode_Value {
	p := new(LinkageTypeCode_Value)
	*p = x
	return p
}

func (x LinkageTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkageTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[148].Descriptor()
}

func (LinkageTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[148]
}

func (x LinkageTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkageTypeCode_Value.Descriptor instead.
func (LinkageTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{149, 0}
}

type LinkTypeCode_Value int32

const (
	LinkTypeCode_INVALID_UNINITIALIZED LinkTypeCode_Value = 0
	LinkTypeCode_REPLACED_BY           LinkTypeCode_Value = 1
	LinkTypeCode_REPLACES              LinkTypeCode_Value = 2
	LinkTypeCode_REFER                 LinkTypeCode_Value = 3
	LinkTypeCode_SEEALSO               LinkTypeCode_Value = 4
)

// Enum value maps for LinkTypeCode_Value.
var (
	LinkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACED_BY",
		2: "REPLACES",
		3: "REFER",
		4: "SEEALSO",
	}
	LinkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACED_BY":           1,
		"REPLACES":              2,
		"REFER":                 3,
		"SEEALSO":               4,
	}
)

func (x LinkTypeCode_Value) Enum() *LinkTypeCode_Value {
	p := new(LinkTypeCode_Value)
	*p = x
	return p
}

func (x LinkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[149].Descriptor()
}

func (LinkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[149]
}

func (x LinkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkTypeCode_Value.Descriptor instead.
func (LinkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{150, 0}
}

type ListEmptyReasonsCode_Value int32

const (
	ListEmptyReasonsCode_INVALID_UNINITIALIZED ListEmptyReasonsCode_Value = 0
	ListEmptyReasonsCode_NILKNOWN              ListEmptyReasonsCode_Value = 1
	ListEmptyReasonsCode_NOTASKED              ListEmptyReasonsCode_Value = 2
	ListEmptyReasonsCode_WITHHELD              ListEmptyReasonsCode_Value = 3
	ListEmptyReasonsCode_UNAVAILABLE           ListEmptyReasonsCode_Value = 4
	ListEmptyReasonsCode_NOTSTARTED            ListEmptyReasonsCode_Value = 5
	ListEmptyReasonsCode_CLOSED                ListEmptyReasonsCode_Value = 6
)

// Enum value maps for ListEmptyReasonsCode_Value.
var (
	ListEmptyReasonsCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NILKNOWN",
		2: "NOTASKED",
		3: "WITHHELD",
		4: "UNAVAILABLE",
		5: "NOTSTARTED",
		6: "CLOSED",
	}
	ListEmptyReasonsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NILKNOWN":              1,
		"NOTASKED":              2,
		"WITHHELD":              3,
		"UNAVAILABLE":           4,
		"NOTSTARTED":            5,
		"CLOSED":                6,
	}
)

func (x ListEmptyReasonsCode_Value) Enum() *ListEmptyReasonsCode_Value {
	p := new(ListEmptyReasonsCode_Value)
	*p = x
	return p
}

func (x ListEmptyReasonsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListEmptyReasonsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[150].Descriptor()
}

func (ListEmptyReasonsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[150]
}

func (x ListEmptyReasonsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListEmptyReasonsCode_Value.Descriptor instead.
func (ListEmptyReasonsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{151, 0}
}

type ExampleUseCodesforListCode_Value int32

const (
	ExampleUseCodesforListCode_INVALID_UNINITIALIZED ExampleUseCodesforListCode_Value = 0
	ExampleUseCodesforListCode_ALERTS                ExampleUseCodesforListCode_Value = 1
	ExampleUseCodesforListCode_ADVERSERXNS           ExampleUseCodesforListCode_Value = 2
	ExampleUseCodesforListCode_ALLERGIES             ExampleUseCodesforListCode_Value = 3
	ExampleUseCodesforListCode_MEDICATIONS           ExampleUseCodesforListCode_Value = 4
	ExampleUseCodesforListCode_PROBLEMS              ExampleUseCodesforListCode_Value = 5
	ExampleUseCodesforListCode_WORKLIST              ExampleUseCodesforListCode_Value = 6
	ExampleUseCodesforListCode_WAITING               ExampleUseCodesforListCode_Value = 7
	ExampleUseCodesforListCode_PROTOCOLS             ExampleUseCodesforListCode_Value = 8
	ExampleUseCodesforListCode_PLANS                 ExampleUseCodesforListCode_Value = 9
)

// Enum value maps for ExampleUseCodesforListCode_Value.
var (
	ExampleUseCodesforListCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALERTS",
		2: "ADVERSERXNS",
		3: "ALLERGIES",
		4: "MEDICATIONS",
		5: "PROBLEMS",
		6: "WORKLIST",
		7: "WAITING",
		8: "PROTOCOLS",
		9: "PLANS",
	}
	ExampleUseCodesforListCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALERTS":                1,
		"ADVERSERXNS":           2,
		"ALLERGIES":             3,
		"MEDICATIONS":           4,
		"PROBLEMS":              5,
		"WORKLIST":              6,
		"WAITING":               7,
		"PROTOCOLS":             8,
		"PLANS":                 9,
	}
)

func (x ExampleUseCodesforListCode_Value) Enum() *ExampleUseCodesforListCode_Value {
	p := new(ExampleUseCodesforListCode_Value)
	*p = x
	return p
}

func (x ExampleUseCodesforListCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleUseCodesforListCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[151].Descriptor()
}

func (ExampleUseCodesforListCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[151]
}

func (x ExampleUseCodesforListCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleUseCodesforListCode_Value.Descriptor instead.
func (ExampleUseCodesforListCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{152, 0}
}

type ListModeCode_Value int32

const (
	ListModeCode_INVALID_UNINITIALIZED ListModeCode_Value = 0
	ListModeCode_WORKING               ListModeCode_Value = 1
	ListModeCode_SNAPSHOT              ListModeCode_Value = 2
	ListModeCode_CHANGES               ListModeCode_Value = 3
)

// Enum value maps for ListModeCode_Value.
var (
	ListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WORKING",
		2: "SNAPSHOT",
		3: "CHANGES",
	}
	ListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WORKING":               1,
		"SNAPSHOT":              2,
		"CHANGES":               3,
	}
)

func (x ListModeCode_Value) Enum() *ListModeCode_Value {
	p := new(ListModeCode_Value)
	*p = x
	return p
}

func (x ListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[152].Descriptor()
}

func (ListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[152]
}

func (x ListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListModeCode_Value.Descriptor instead.
func (ListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{153, 0}
}

type ListOrderCodesCode_Value int32

const (
	ListOrderCodesCode_INVALID_UNINITIALIZED ListOrderCodesCode_Value = 0
	ListOrderCodesCode_USER                  ListOrderCodesCode_Value = 1
	ListOrderCodesCode_SYSTEM                ListOrderCodesCode_Value = 2
	ListOrderCodesCode_EVENT_DATE            ListOrderCodesCode_Value = 3
	ListOrderCodesCode_ENTRY_DATE            ListOrderCodesCode_Value = 4
	ListOrderCodesCode_PRIORITY              ListOrderCodesCode_Value = 5
	ListOrderCodesCode_ALPHABETIC            ListOrderCodesCode_Value = 6
	ListOrderCodesCode_CATEGORY              ListOrderCodesCode_Value = 7
	ListOrderCodesCode_PATIENT               ListOrderCodesCode_Value = 8
)

// Enum value maps for ListOrderCodesCode_Value.
var (
	ListOrderCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USER",
		2: "SYSTEM",
		3: "EVENT_DATE",
		4: "ENTRY_DATE",
		5: "PRIORITY",
		6: "ALPHABETIC",
		7: "CATEGORY",
		8: "PATIENT",
	}
	ListOrderCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USER":                  1,
		"SYSTEM":                2,
		"EVENT_DATE":            3,
		"ENTRY_DATE":            4,
		"PRIORITY":              5,
		"ALPHABETIC":            6,
		"CATEGORY":              7,
		"PATIENT":               8,
	}
)

func (x ListOrderCodesCode_Value) Enum() *ListOrderCodesCode_Value {
	p := new(ListOrderCodesCode_Value)
	*p = x
	return p
}

func (x ListOrderCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListOrderCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[153].Descriptor()
}

func (ListOrderCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[153]
}

func (x ListOrderCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListOrderCodesCode_Value.Descriptor instead.
func (ListOrderCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{154, 0}
}

type ListStatusCode_Value int32

const (
	ListStatusCode_INVALID_UNINITIALIZED ListStatusCode_Value = 0
	ListStatusCode_CURRENT               ListStatusCode_Value = 1
	ListStatusCode_RETIRED               ListStatusCode_Value = 2
	ListStatusCode_ENTERED_IN_ERROR      ListStatusCode_Value = 3
)

// Enum value maps for ListStatusCode_Value.
var (
	ListStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "RETIRED",
		3: "ENTERED_IN_ERROR",
	}
	ListStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"RETIRED":               2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ListStatusCode_Value) Enum() *ListStatusCode_Value {
	p := new(ListStatusCode_Value)
	*p = x
	return p
}

func (x ListStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[154].Descriptor()
}

func (ListStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[154]
}

func (x ListStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListStatusCode_Value.Descriptor instead.
func (ListStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{155, 0}
}

type LocationModeCode_Value int32

const (
	LocationModeCode_INVALID_UNINITIALIZED LocationModeCode_Value = 0
	LocationModeCode_INSTANCE              LocationModeCode_Value = 1
	LocationModeCode_KIND                  LocationModeCode_Value = 2
)

// Enum value maps for LocationModeCode_Value.
var (
	LocationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "KIND",
	}
	LocationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"KIND":                  2,
	}
)

func (x LocationModeCode_Value) Enum() *LocationModeCode_Value {
	p := new(LocationModeCode_Value)
	*p = x
	return p
}

func (x LocationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[155].Descriptor()
}

func (LocationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[155]
}

func (x LocationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationModeCode_Value.Descriptor instead.
func (LocationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{156, 0}
}

type LocationTypeCode_Value int32

const (
	LocationTypeCode_INVALID_UNINITIALIZED LocationTypeCode_Value = 0
	LocationTypeCode_SI                    LocationTypeCode_Value = 1
	LocationTypeCode_BU                    LocationTypeCode_Value = 2
	LocationTypeCode_WI                    LocationTypeCode_Value = 3
	LocationTypeCode_WA                    LocationTypeCode_Value = 4
	LocationTypeCode_LVL                   LocationTypeCode_Value = 5
	LocationTypeCode_CO                    LocationTypeCode_Value = 6
	LocationTypeCode_RO                    LocationTypeCode_Value = 7
	LocationTypeCode_BD                    LocationTypeCode_Value = 8
	LocationTypeCode_VE                    LocationTypeCode_Value = 9
	LocationTypeCode_HO                    LocationTypeCode_Value = 10
	LocationTypeCode_CA                    LocationTypeCode_Value = 11
	LocationTypeCode_RD                    LocationTypeCode_Value = 12
	LocationTypeCode_AREA                  LocationTypeCode_Value = 13
	LocationTypeCode_JDN                   LocationTypeCode_Value = 14
)

// Enum value maps for LocationTypeCode_Value.
var (
	LocationTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "SI",
		2:  "BU",
		3:  "WI",
		4:  "WA",
		5:  "LVL",
		6:  "CO",
		7:  "RO",
		8:  "BD",
		9:  "VE",
		10: "HO",
		11: "CA",
		12: "RD",
		13: "AREA",
		14: "JDN",
	}
	LocationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SI":                    1,
		"BU":                    2,
		"WI":                    3,
		"WA":                    4,
		"LVL":                   5,
		"CO":                    6,
		"RO":                    7,
		"BD":                    8,
		"VE":                    9,
		"HO":                    10,
		"CA":                    11,
		"RD":                    12,
		"AREA":                  13,
		"JDN":                   14,
	}
)

func (x LocationTypeCode_Value) Enum() *LocationTypeCode_Value {
	p := new(LocationTypeCode_Value)
	*p = x
	return p
}

func (x LocationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[156].Descriptor()
}

func (LocationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[156]
}

func (x LocationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationTypeCode_Value.Descriptor instead.
func (LocationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{157, 0}
}

type LocationStatusCode_Value int32

const (
	LocationStatusCode_INVALID_UNINITIALIZED LocationStatusCode_Value = 0
	LocationStatusCode_ACTIVE                LocationStatusCode_Value = 1
	LocationStatusCode_SUSPENDED             LocationStatusCode_Value = 2
	LocationStatusCode_INACTIVE              LocationStatusCode_Value = 3
)

// Enum value maps for LocationStatusCode_Value.
var (
	LocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "INACTIVE",
	}
	LocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"INACTIVE":              3,
	}
)

func (x LocationStatusCode_Value) Enum() *LocationStatusCode_Value {
	p := new(LocationStatusCode_Value)
	*p = x
	return p
}

func (x LocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[157].Descriptor()
}

func (LocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[157]
}

func (x LocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationStatusCode_Value.Descriptor instead.
func (LocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{158, 0}
}

type ProbabilityDistributionTypeCode_Value int32

const (
	ProbabilityDistributionTypeCode_INVALID_UNINITIALIZED ProbabilityDistributionTypeCode_Value = 0
	ProbabilityDistributionTypeCode_B                     ProbabilityDistributionTypeCode_Value = 1
	ProbabilityDistributionTypeCode_E                     ProbabilityDistributionTypeCode_Value = 2
	ProbabilityDistributionTypeCode_F                     ProbabilityDistributionTypeCode_Value = 3
	ProbabilityDistributionTypeCode_G                     ProbabilityDistributionTypeCode_Value = 4
	ProbabilityDistributionTypeCode_LN                    ProbabilityDistributionTypeCode_Value = 5
	ProbabilityDistributionTypeCode_N                     ProbabilityDistributionTypeCode_Value = 6
	ProbabilityDistributionTypeCode_T                     ProbabilityDistributionTypeCode_Value = 7
	ProbabilityDistributionTypeCode_U                     ProbabilityDistributionTypeCode_Value = 8
	ProbabilityDistributionTypeCode_X2                    ProbabilityDistributionTypeCode_Value = 9
)

// Enum value maps for ProbabilityDistributionTypeCode_Value.
var (
	ProbabilityDistributionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "B",
		2: "E",
		3: "F",
		4: "G",
		5: "LN",
		6: "N",
		7: "T",
		8: "U",
		9: "X2",
	}
	ProbabilityDistributionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"B":                     1,
		"E":                     2,
		"F":                     3,
		"G":                     4,
		"LN":                    5,
		"N":                     6,
		"T":                     7,
		"U":                     8,
		"X2":                    9,
	}
)

func (x ProbabilityDistributionTypeCode_Value) Enum() *ProbabilityDistributionTypeCode_Value {
	p := new(ProbabilityDistributionTypeCode_Value)
	*p = x
	return p
}

func (x ProbabilityDistributionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbabilityDistributionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[158].Descriptor()
}

func (ProbabilityDistributionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[158]
}

func (x ProbabilityDistributionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProbabilityDistributionTypeCode_Value.Descriptor instead.
func (ProbabilityDistributionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{159, 0}
}

type StructureMapContextTypeCode_Value int32

const (
	StructureMapContextTypeCode_INVALID_UNINITIALIZED StructureMapContextTypeCode_Value = 0
	StructureMapContextTypeCode_TYPE                  StructureMapContextTypeCode_Value = 1
	StructureMapContextTypeCode_VARIABLE              StructureMapContextTypeCode_Value = 2
)

// Enum value maps for StructureMapContextTypeCode_Value.
var (
	StructureMapContextTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TYPE",
		2: "VARIABLE",
	}
	StructureMapContextTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TYPE":                  1,
		"VARIABLE":              2,
	}
)

func (x StructureMapContextTypeCode_Value) Enum() *StructureMapContextTypeCode_Value {
	p := new(StructureMapContextTypeCode_Value)
	*p = x
	return p
}

func (x StructureMapContextTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapContextTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[159].Descriptor()
}

func (StructureMapContextTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[159]
}

func (x StructureMapContextTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapContextTypeCode_Value.Descriptor instead.
func (StructureMapContextTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{160, 0}
}

type StructureMapGroupTypeModeCode_Value int32

const (
	StructureMapGroupTypeModeCode_INVALID_UNINITIALIZED StructureMapGroupTypeModeCode_Value = 0
	StructureMapGroupTypeModeCode_NONE                  StructureMapGroupTypeModeCode_Value = 1
	StructureMapGroupTypeModeCode_TYPES                 StructureMapGroupTypeModeCode_Value = 2
	StructureMapGroupTypeModeCode_TYPE_AND_TYPES        StructureMapGroupTypeModeCode_Value = 3
)

// Enum value maps for StructureMapGroupTypeModeCode_Value.
var (
	StructureMapGroupTypeModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NONE",
		2: "TYPES",
		3: "TYPE_AND_TYPES",
	}
	StructureMapGroupTypeModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NONE":                  1,
		"TYPES":                 2,
		"TYPE_AND_TYPES":        3,
	}
)

func (x StructureMapGroupTypeModeCode_Value) Enum() *StructureMapGroupTypeModeCode_Value {
	p := new(StructureMapGroupTypeModeCode_Value)
	*p = x
	return p
}

func (x StructureMapGroupTypeModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapGroupTypeModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[160].Descriptor()
}

func (StructureMapGroupTypeModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[160]
}

func (x StructureMapGroupTypeModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapGroupTypeModeCode_Value.Descriptor instead.
func (StructureMapGroupTypeModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{161, 0}
}

type StructureMapInputModeCode_Value int32

const (
	StructureMapInputModeCode_INVALID_UNINITIALIZED StructureMapInputModeCode_Value = 0
	StructureMapInputModeCode_SOURCE                StructureMapInputModeCode_Value = 1
	StructureMapInputModeCode_TARGET                StructureMapInputModeCode_Value = 2
)

// Enum value maps for StructureMapInputModeCode_Value.
var (
	StructureMapInputModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "TARGET",
	}
	StructureMapInputModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"TARGET":                2,
	}
)

func (x StructureMapInputModeCode_Value) Enum() *StructureMapInputModeCode_Value {
	p := new(StructureMapInputModeCode_Value)
	*p = x
	return p
}

func (x StructureMapInputModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapInputModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[161].Descriptor()
}

func (StructureMapInputModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[161]
}

func (x StructureMapInputModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapInputModeCode_Value.Descriptor instead.
func (StructureMapInputModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{162, 0}
}

type StructureMapModelModeCode_Value int32

const (
	StructureMapModelModeCode_INVALID_UNINITIALIZED StructureMapModelModeCode_Value = 0
	StructureMapModelModeCode_SOURCE                StructureMapModelModeCode_Value = 1
	StructureMapModelModeCode_QUERIED               StructureMapModelModeCode_Value = 2
	StructureMapModelModeCode_TARGET                StructureMapModelModeCode_Value = 3
	StructureMapModelModeCode_PRODUCED              StructureMapModelModeCode_Value = 4
)

// Enum value maps for StructureMapModelModeCode_Value.
var (
	StructureMapModelModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "QUERIED",
		3: "TARGET",
		4: "PRODUCED",
	}
	StructureMapModelModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"QUERIED":               2,
		"TARGET":                3,
		"PRODUCED":              4,
	}
)

func (x StructureMapModelModeCode_Value) Enum() *StructureMapModelModeCode_Value {
	p := new(StructureMapModelModeCode_Value)
	*p = x
	return p
}

func (x StructureMapModelModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapModelModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[162].Descriptor()
}

func (StructureMapModelModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[162]
}

func (x StructureMapModelModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapModelModeCode_Value.Descriptor instead.
func (StructureMapModelModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{163, 0}
}

type StructureMapSourceListModeCode_Value int32

const (
	StructureMapSourceListModeCode_INVALID_UNINITIALIZED StructureMapSourceListModeCode_Value = 0
	StructureMapSourceListModeCode_FIRST                 StructureMapSourceListModeCode_Value = 1
	StructureMapSourceListModeCode_NOT_FIRST             StructureMapSourceListModeCode_Value = 2
	StructureMapSourceListModeCode_LAST                  StructureMapSourceListModeCode_Value = 3
	StructureMapSourceListModeCode_NOT_LAST              StructureMapSourceListModeCode_Value = 4
	StructureMapSourceListModeCode_ONLY_ONE              StructureMapSourceListModeCode_Value = 5
)

// Enum value maps for StructureMapSourceListModeCode_Value.
var (
	StructureMapSourceListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "NOT_FIRST",
		3: "LAST",
		4: "NOT_LAST",
		5: "ONLY_ONE",
	}
	StructureMapSourceListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"NOT_FIRST":             2,
		"LAST":                  3,
		"NOT_LAST":              4,
		"ONLY_ONE":              5,
	}
)

func (x StructureMapSourceListModeCode_Value) Enum() *StructureMapSourceListModeCode_Value {
	p := new(StructureMapSourceListModeCode_Value)
	*p = x
	return p
}

func (x StructureMapSourceListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapSourceListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[163].Descriptor()
}

func (StructureMapSourceListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[163]
}

func (x StructureMapSourceListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapSourceListModeCode_Value.Descriptor instead.
func (StructureMapSourceListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{164, 0}
}

type StructureMapTargetListModeCode_Value int32

const (
	StructureMapTargetListModeCode_INVALID_UNINITIALIZED StructureMapTargetListModeCode_Value = 0
	StructureMapTargetListModeCode_FIRST                 StructureMapTargetListModeCode_Value = 1
	StructureMapTargetListModeCode_SHARE                 StructureMapTargetListModeCode_Value = 2
	StructureMapTargetListModeCode_LAST                  StructureMapTargetListModeCode_Value = 3
	StructureMapTargetListModeCode_COLLATE               StructureMapTargetListModeCode_Value = 4
)

// Enum value maps for StructureMapTargetListModeCode_Value.
var (
	StructureMapTargetListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "SHARE",
		3: "LAST",
		4: "COLLATE",
	}
	StructureMapTargetListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"SHARE":                 2,
		"LAST":                  3,
		"COLLATE":               4,
	}
)

func (x StructureMapTargetListModeCode_Value) Enum() *StructureMapTargetListModeCode_Value {
	p := new(StructureMapTargetListModeCode_Value)
	*p = x
	return p
}

func (x StructureMapTargetListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapTargetListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[164].Descriptor()
}

func (StructureMapTargetListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[164]
}

func (x StructureMapTargetListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapTargetListModeCode_Value.Descriptor instead.
func (StructureMapTargetListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{165, 0}
}

type StructureMapTransformCode_Value int32

const (
	StructureMapTransformCode_INVALID_UNINITIALIZED StructureMapTransformCode_Value = 0
	StructureMapTransformCode_CREATE                StructureMapTransformCode_Value = 1
	StructureMapTransformCode_COPY                  StructureMapTransformCode_Value = 2
	StructureMapTransformCode_TRUNCATE              StructureMapTransformCode_Value = 3
	StructureMapTransformCode_ESCAPE                StructureMapTransformCode_Value = 4
	StructureMapTransformCode_CAST                  StructureMapTransformCode_Value = 5
	StructureMapTransformCode_APPEND                StructureMapTransformCode_Value = 6
	StructureMapTransformCode_TRANSLATE             StructureMapTransformCode_Value = 7
	StructureMapTransformCode_REFERENCE             StructureMapTransformCode_Value = 8
	StructureMapTransformCode_DATE_OP               StructureMapTransformCode_Value = 9
	StructureMapTransformCode_UUID                  StructureMapTransformCode_Value = 10
	StructureMapTransformCode_POINTER               StructureMapTransformCode_Value = 11
	StructureMapTransformCode_EVALUATE              StructureMapTransformCode_Value = 12
	StructureMapTransformCode_CC                    StructureMapTransformCode_Value = 13
	StructureMapTransformCode_C                     StructureMapTransformCode_Value = 14
	StructureMapTransformCode_QTY                   StructureMapTransformCode_Value = 15
	StructureMapTransformCode_ID                    StructureMapTransformCode_Value = 16
	StructureMapTransformCode_CP                    StructureMapTransformCode_Value = 17
)

// Enum value maps for StructureMapTransformCode_Value.
var (
	StructureMapTransformCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CREATE",
		2:  "COPY",
		3:  "TRUNCATE",
		4:  "ESCAPE",
		5:  "CAST",
		6:  "APPEND",
		7:  "TRANSLATE",
		8:  "REFERENCE",
		9:  "DATE_OP",
		10: "UUID",
		11: "POINTER",
		12: "EVALUATE",
		13: "CC",
		14: "C",
		15: "QTY",
		16: "ID",
		17: "CP",
	}
	StructureMapTransformCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CREATE":                1,
		"COPY":                  2,
		"TRUNCATE":              3,
		"ESCAPE":                4,
		"CAST":                  5,
		"APPEND":                6,
		"TRANSLATE":             7,
		"REFERENCE":             8,
		"DATE_OP":               9,
		"UUID":                  10,
		"POINTER":               11,
		"EVALUATE":              12,
		"CC":                    13,
		"C":                     14,
		"QTY":                   15,
		"ID":                    16,
		"CP":                    17,
	}
)

func (x StructureMapTransformCode_Value) Enum() *StructureMapTransformCode_Value {
	p := new(StructureMapTransformCode_Value)
	*p = x
	return p
}

func (x StructureMapTransformCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapTransformCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[165].Descriptor()
}

func (StructureMapTransformCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[165]
}

func (x StructureMapTransformCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapTransformCode_Value.Descriptor instead.
func (StructureMapTransformCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{166, 0}
}

type MatchGradeCode_Value int32

const (
	MatchGradeCode_INVALID_UNINITIALIZED MatchGradeCode_Value = 0
	MatchGradeCode_CERTAIN               MatchGradeCode_Value = 1
	MatchGradeCode_PROBABLE              MatchGradeCode_Value = 2
	MatchGradeCode_POSSIBLE              MatchGradeCode_Value = 3
	MatchGradeCode_CERTAINLY_NOT         MatchGradeCode_Value = 4
)

// Enum value maps for MatchGradeCode_Value.
var (
	MatchGradeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CERTAIN",
		2: "PROBABLE",
		3: "POSSIBLE",
		4: "CERTAINLY_NOT",
	}
	MatchGradeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CERTAIN":               1,
		"PROBABLE":              2,
		"POSSIBLE":              3,
		"CERTAINLY_NOT":         4,
	}
)

func (x MatchGradeCode_Value) Enum() *MatchGradeCode_Value {
	p := new(MatchGradeCode_Value)
	*p = x
	return p
}

func (x MatchGradeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchGradeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[166].Descriptor()
}

func (MatchGradeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[166]
}

func (x MatchGradeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchGradeCode_Value.Descriptor instead.
func (MatchGradeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{167, 0}
}

type MeasureDataUsageCode_Value int32

const (
	MeasureDataUsageCode_INVALID_UNINITIALIZED  MeasureDataUsageCode_Value = 0
	MeasureDataUsageCode_SUPPLEMENTAL_DATA      MeasureDataUsageCode_Value = 1
	MeasureDataUsageCode_RISK_ADJUSTMENT_FACTOR MeasureDataUsageCode_Value = 2
)

// Enum value maps for MeasureDataUsageCode_Value.
var (
	MeasureDataUsageCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUPPLEMENTAL_DATA",
		2: "RISK_ADJUSTMENT_FACTOR",
	}
	MeasureDataUsageCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"SUPPLEMENTAL_DATA":      1,
		"RISK_ADJUSTMENT_FACTOR": 2,
	}
)

func (x MeasureDataUsageCode_Value) Enum() *MeasureDataUsageCode_Value {
	p := new(MeasureDataUsageCode_Value)
	*p = x
	return p
}

func (x MeasureDataUsageCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureDataUsageCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[167].Descriptor()
}

func (MeasureDataUsageCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[167]
}

func (x MeasureDataUsageCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureDataUsageCode_Value.Descriptor instead.
func (MeasureDataUsageCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{168, 0}
}

type MeasmntPrincipleCode_Value int32

const (
	MeasmntPrincipleCode_INVALID_UNINITIALIZED MeasmntPrincipleCode_Value = 0
	MeasmntPrincipleCode_OTHER                 MeasmntPrincipleCode_Value = 1
	MeasmntPrincipleCode_CHEMICAL              MeasmntPrincipleCode_Value = 2
	MeasmntPrincipleCode_ELECTRICAL            MeasmntPrincipleCode_Value = 3
	MeasmntPrincipleCode_IMPEDANCE             MeasmntPrincipleCode_Value = 4
	MeasmntPrincipleCode_NUCLEAR               MeasmntPrincipleCode_Value = 5
	MeasmntPrincipleCode_OPTICAL               MeasmntPrincipleCode_Value = 6
	MeasmntPrincipleCode_THERMAL               MeasmntPrincipleCode_Value = 7
	MeasmntPrincipleCode_BIOLOGICAL            MeasmntPrincipleCode_Value = 8
	MeasmntPrincipleCode_MECHANICAL            MeasmntPrincipleCode_Value = 9
	MeasmntPrincipleCode_ACOUSTICAL            MeasmntPrincipleCode_Value = 10
	MeasmntPrincipleCode_MANUAL                MeasmntPrincipleCode_Value = 11
)

// Enum value maps for MeasmntPrincipleCode_Value.
var (
	MeasmntPrincipleCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "OTHER",
		2:  "CHEMICAL",
		3:  "ELECTRICAL",
		4:  "IMPEDANCE",
		5:  "NUCLEAR",
		6:  "OPTICAL",
		7:  "THERMAL",
		8:  "BIOLOGICAL",
		9:  "MECHANICAL",
		10: "ACOUSTICAL",
		11: "MANUAL",
	}
	MeasmntPrincipleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OTHER":                 1,
		"CHEMICAL":              2,
		"ELECTRICAL":            3,
		"IMPEDANCE":             4,
		"NUCLEAR":               5,
		"OPTICAL":               6,
		"THERMAL":               7,
		"BIOLOGICAL":            8,
		"MECHANICAL":            9,
		"ACOUSTICAL":            10,
		"MANUAL":                11,
	}
)

func (x MeasmntPrincipleCode_Value) Enum() *MeasmntPrincipleCode_Value {
	p := new(MeasmntPrincipleCode_Value)
	*p = x
	return p
}

func (x MeasmntPrincipleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasmntPrincipleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[168].Descriptor()
}

func (MeasmntPrincipleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[168]
}

func (x MeasmntPrincipleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasmntPrincipleCode_Value.Descriptor instead.
func (MeasmntPrincipleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{169, 0}
}

type MeasurePopulationTypeCode_Value int32

const (
	MeasurePopulationTypeCode_INVALID_UNINITIALIZED        MeasurePopulationTypeCode_Value = 0
	MeasurePopulationTypeCode_INITIAL_POPULATION           MeasurePopulationTypeCode_Value = 1
	MeasurePopulationTypeCode_NUMERATOR                    MeasurePopulationTypeCode_Value = 2
	MeasurePopulationTypeCode_NUMERATOR_EXCLUSION          MeasurePopulationTypeCode_Value = 3
	MeasurePopulationTypeCode_DENOMINATOR                  MeasurePopulationTypeCode_Value = 4
	MeasurePopulationTypeCode_DENOMINATOR_EXCLUSION        MeasurePopulationTypeCode_Value = 5
	MeasurePopulationTypeCode_DENOMINATOR_EXCEPTION        MeasurePopulationTypeCode_Value = 6
	MeasurePopulationTypeCode_MEASURE_POPULATION           MeasurePopulationTypeCode_Value = 7
	MeasurePopulationTypeCode_MEASURE_POPULATION_EXCLUSION MeasurePopulationTypeCode_Value = 8
	MeasurePopulationTypeCode_MEASURE_OBSERVATION          MeasurePopulationTypeCode_Value = 9
)

// Enum value maps for MeasurePopulationTypeCode_Value.
var (
	MeasurePopulationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INITIAL_POPULATION",
		2: "NUMERATOR",
		3: "NUMERATOR_EXCLUSION",
		4: "DENOMINATOR",
		5: "DENOMINATOR_EXCLUSION",
		6: "DENOMINATOR_EXCEPTION",
		7: "MEASURE_POPULATION",
		8: "MEASURE_POPULATION_EXCLUSION",
		9: "MEASURE_OBSERVATION",
	}
	MeasurePopulationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":        0,
		"INITIAL_POPULATION":           1,
		"NUMERATOR":                    2,
		"NUMERATOR_EXCLUSION":          3,
		"DENOMINATOR":                  4,
		"DENOMINATOR_EXCLUSION":        5,
		"DENOMINATOR_EXCEPTION":        6,
		"MEASURE_POPULATION":           7,
		"MEASURE_POPULATION_EXCLUSION": 8,
		"MEASURE_OBSERVATION":          9,
	}
)

func (x MeasurePopulationTypeCode_Value) Enum() *MeasurePopulationTypeCode_Value {
	p := new(MeasurePopulationTypeCode_Value)
	*p = x
	return p
}

func (x MeasurePopulationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurePopulationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[169].Descriptor()
}

func (MeasurePopulationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[169]
}

func (x MeasurePopulationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurePopulationTypeCode_Value.Descriptor instead.
func (MeasurePopulationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{170, 0}
}

type MeasureReportStatusCode_Value int32

const (
	MeasureReportStatusCode_INVALID_UNINITIALIZED MeasureReportStatusCode_Value = 0
	MeasureReportStatusCode_COMPLETE              MeasureReportStatusCode_Value = 1
	MeasureReportStatusCode_PENDING               MeasureReportStatusCode_Value = 2
	MeasureReportStatusCode_ERROR                 MeasureReportStatusCode_Value = 3
)

// Enum value maps for MeasureReportStatusCode_Value.
var (
	MeasureReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETE",
		2: "PENDING",
		3: "ERROR",
	}
	MeasureReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETE":              1,
		"PENDING":               2,
		"ERROR":                 3,
	}
)

func (x MeasureReportStatusCode_Value) Enum() *MeasureReportStatusCode_Value {
	p := new(MeasureReportStatusCode_Value)
	*p = x
	return p
}

func (x MeasureReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[170].Descriptor()
}

func (MeasureReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[170]
}

func (x MeasureReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureReportStatusCode_Value.Descriptor instead.
func (MeasureReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{171, 0}
}

type MeasureReportTypeCode_Value int32

const (
	MeasureReportTypeCode_INVALID_UNINITIALIZED MeasureReportTypeCode_Value = 0
	MeasureReportTypeCode_INDIVIDUAL            MeasureReportTypeCode_Value = 1
	MeasureReportTypeCode_PATIENT_LIST          MeasureReportTypeCode_Value = 2
	MeasureReportTypeCode_SUMMARY               MeasureReportTypeCode_Value = 3
)

// Enum value maps for MeasureReportTypeCode_Value.
var (
	MeasureReportTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INDIVIDUAL",
		2: "PATIENT_LIST",
		3: "SUMMARY",
	}
	MeasureReportTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INDIVIDUAL":            1,
		"PATIENT_LIST":          2,
		"SUMMARY":               3,
	}
)

func (x MeasureReportTypeCode_Value) Enum() *MeasureReportTypeCode_Value {
	p := new(MeasureReportTypeCode_Value)
	*p = x
	return p
}

func (x MeasureReportTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureReportTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[171].Descriptor()
}

func (MeasureReportTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[171]
}

func (x MeasureReportTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureReportTypeCode_Value.Descriptor instead.
func (MeasureReportTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{172, 0}
}

type MeasureScoringCode_Value int32

const (
	MeasureScoringCode_INVALID_UNINITIALIZED MeasureScoringCode_Value = 0
	MeasureScoringCode_PROPORTION            MeasureScoringCode_Value = 1
	MeasureScoringCode_RATIO                 MeasureScoringCode_Value = 2
	MeasureScoringCode_CONTINUOUS_VARIABLE   MeasureScoringCode_Value = 3
	MeasureScoringCode_COHORT                MeasureScoringCode_Value = 4
)

// Enum value maps for MeasureScoringCode_Value.
var (
	MeasureScoringCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPORTION",
		2: "RATIO",
		3: "CONTINUOUS_VARIABLE",
		4: "COHORT",
	}
	MeasureScoringCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPORTION":            1,
		"RATIO":                 2,
		"CONTINUOUS_VARIABLE":   3,
		"COHORT":                4,
	}
)

func (x MeasureScoringCode_Value) Enum() *MeasureScoringCode_Value {
	p := new(MeasureScoringCode_Value)
	*p = x
	return p
}

func (x MeasureScoringCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureScoringCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[172].Descriptor()
}

func (MeasureScoringCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[172]
}

func (x MeasureScoringCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureScoringCode_Value.Descriptor instead.
func (MeasureScoringCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{173, 0}
}

type MeasureTypeCode_Value int32

const (
	MeasureTypeCode_INVALID_UNINITIALIZED    MeasureTypeCode_Value = 0
	MeasureTypeCode_PROCESS                  MeasureTypeCode_Value = 1
	MeasureTypeCode_OUTCOME                  MeasureTypeCode_Value = 2
	MeasureTypeCode_STRUCTURE                MeasureTypeCode_Value = 3
	MeasureTypeCode_PATIENT_REPORTED_OUTCOME MeasureTypeCode_Value = 4
	MeasureTypeCode_COMPOSITE                MeasureTypeCode_Value = 5
)

// Enum value maps for MeasureTypeCode_Value.
var (
	MeasureTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROCESS",
		2: "OUTCOME",
		3: "STRUCTURE",
		4: "PATIENT_REPORTED_OUTCOME",
		5: "COMPOSITE",
	}
	MeasureTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"PROCESS":                  1,
		"OUTCOME":                  2,
		"STRUCTURE":                3,
		"PATIENT_REPORTED_OUTCOME": 4,
		"COMPOSITE":                5,
	}
)

func (x MeasureTypeCode_Value) Enum() *MeasureTypeCode_Value {
	p := new(MeasureTypeCode_Value)
	*p = x
	return p
}

func (x MeasureTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[173].Descriptor()
}

func (MeasureTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[173]
}

func (x MeasureTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureTypeCode_Value.Descriptor instead.
func (MeasureTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{174, 0}
}

type MedicationAdministrationCategoryCode_Value int32

const (
	MedicationAdministrationCategoryCode_INVALID_UNINITIALIZED MedicationAdministrationCategoryCode_Value = 0
	MedicationAdministrationCategoryCode_INPATIENT             MedicationAdministrationCategoryCode_Value = 1
	MedicationAdministrationCategoryCode_OUTPATIENT            MedicationAdministrationCategoryCode_Value = 2
	MedicationAdministrationCategoryCode_COMMUNITY             MedicationAdministrationCategoryCode_Value = 3
)

// Enum value maps for MedicationAdministrationCategoryCode_Value.
var (
	MedicationAdministrationCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INPATIENT",
		2: "OUTPATIENT",
		3: "COMMUNITY",
	}
	MedicationAdministrationCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INPATIENT":             1,
		"OUTPATIENT":            2,
		"COMMUNITY":             3,
	}
)

func (x MedicationAdministrationCategoryCode_Value) Enum() *MedicationAdministrationCategoryCode_Value {
	p := new(MedicationAdministrationCategoryCode_Value)
	*p = x
	return p
}

func (x MedicationAdministrationCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationAdministrationCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[174].Descriptor()
}

func (MedicationAdministrationCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[174]
}

func (x MedicationAdministrationCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationAdministrationCategoryCode_Value.Descriptor instead.
func (MedicationAdministrationCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{175, 0}
}

type MedicationAdministrationStatusCode_Value int32

const (
	MedicationAdministrationStatusCode_INVALID_UNINITIALIZED MedicationAdministrationStatusCode_Value = 0
	MedicationAdministrationStatusCode_IN_PROGRESS           MedicationAdministrationStatusCode_Value = 1
	MedicationAdministrationStatusCode_ON_HOLD               MedicationAdministrationStatusCode_Value = 2
	MedicationAdministrationStatusCode_COMPLETED             MedicationAdministrationStatusCode_Value = 3
	MedicationAdministrationStatusCode_ENTERED_IN_ERROR      MedicationAdministrationStatusCode_Value = 4
	MedicationAdministrationStatusCode_STOPPED               MedicationAdministrationStatusCode_Value = 5
	MedicationAdministrationStatusCode_UNKNOWN               MedicationAdministrationStatusCode_Value = 6
)

// Enum value maps for MedicationAdministrationStatusCode_Value.
var (
	MedicationAdministrationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "ON_HOLD",
		3: "COMPLETED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
		6: "UNKNOWN",
	}
	MedicationAdministrationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"ON_HOLD":               2,
		"COMPLETED":             3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
		"UNKNOWN":               6,
	}
)

func (x MedicationAdministrationStatusCode_Value) Enum() *MedicationAdministrationStatusCode_Value {
	p := new(MedicationAdministrationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationAdministrationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationAdministrationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[175].Descriptor()
}

func (MedicationAdministrationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[175]
}

func (x MedicationAdministrationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationAdministrationStatusCode_Value.Descriptor instead.
func (MedicationAdministrationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{176, 0}
}

type MedicationDispenseCategoryCode_Value int32

const (
	MedicationDispenseCategoryCode_INVALID_UNINITIALIZED MedicationDispenseCategoryCode_Value = 0
	MedicationDispenseCategoryCode_INPATIENT             MedicationDispenseCategoryCode_Value = 1
	MedicationDispenseCategoryCode_OUTPATIENT            MedicationDispenseCategoryCode_Value = 2
	MedicationDispenseCategoryCode_COMMUNITY             MedicationDispenseCategoryCode_Value = 3
)

// Enum value maps for MedicationDispenseCategoryCode_Value.
var (
	MedicationDispenseCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INPATIENT",
		2: "OUTPATIENT",
		3: "COMMUNITY",
	}
	MedicationDispenseCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INPATIENT":             1,
		"OUTPATIENT":            2,
		"COMMUNITY":             3,
	}
)

func (x MedicationDispenseCategoryCode_Value) Enum() *MedicationDispenseCategoryCode_Value {
	p := new(MedicationDispenseCategoryCode_Value)
	*p = x
	return p
}

func (x MedicationDispenseCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationDispenseCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[176].Descriptor()
}

func (MedicationDispenseCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[176]
}

func (x MedicationDispenseCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationDispenseCategoryCode_Value.Descriptor instead.
func (MedicationDispenseCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{177, 0}
}

type MedicationDispenseStatusCode_Value int32

const (
	MedicationDispenseStatusCode_INVALID_UNINITIALIZED MedicationDispenseStatusCode_Value = 0
	MedicationDispenseStatusCode_PREPARATION           MedicationDispenseStatusCode_Value = 1
	MedicationDispenseStatusCode_IN_PROGRESS           MedicationDispenseStatusCode_Value = 2
	MedicationDispenseStatusCode_ON_HOLD               MedicationDispenseStatusCode_Value = 3
	MedicationDispenseStatusCode_COMPLETED             MedicationDispenseStatusCode_Value = 4
	MedicationDispenseStatusCode_ENTERED_IN_ERROR      MedicationDispenseStatusCode_Value = 5
	MedicationDispenseStatusCode_STOPPED               MedicationDispenseStatusCode_Value = 6
)

// Enum value maps for MedicationDispenseStatusCode_Value.
var (
	MedicationDispenseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "ON_HOLD",
		4: "COMPLETED",
		5: "ENTERED_IN_ERROR",
		6: "STOPPED",
	}
	MedicationDispenseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"ON_HOLD":               3,
		"COMPLETED":             4,
		"ENTERED_IN_ERROR":      5,
		"STOPPED":               6,
	}
)

func (x MedicationDispenseStatusCode_Value) Enum() *MedicationDispenseStatusCode_Value {
	p := new(MedicationDispenseStatusCode_Value)
	*p = x
	return p
}

func (x MedicationDispenseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationDispenseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[177].Descriptor()
}

func (MedicationDispenseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[177]
}

func (x MedicationDispenseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationDispenseStatusCode_Value.Descriptor instead.
func (MedicationDispenseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{178, 0}
}

type MedicationContainerCode_Value int32

const (
	MedicationContainerCode_INVALID_UNINITIALIZED MedicationContainerCode_Value = 0
	MedicationContainerCode_AMPOULE               MedicationContainerCode_Value = 1
	MedicationContainerCode_BOTTLE                MedicationContainerCode_Value = 2
	MedicationContainerCode_BOX                   MedicationContainerCode_Value = 3
	MedicationContainerCode_CARTRIDGE             MedicationContainerCode_Value = 4
	MedicationContainerCode_CONTAINER             MedicationContainerCode_Value = 5
	MedicationContainerCode_TUBE                  MedicationContainerCode_Value = 6
	MedicationContainerCode_UNITDOSE              MedicationContainerCode_Value = 7
	MedicationContainerCode_VIAL                  MedicationContainerCode_Value = 8
)

// Enum value maps for MedicationContainerCode_Value.
var (
	MedicationContainerCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AMPOULE",
		2: "BOTTLE",
		3: "BOX",
		4: "CARTRIDGE",
		5: "CONTAINER",
		6: "TUBE",
		7: "UNITDOSE",
		8: "VIAL",
	}
	MedicationContainerCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMPOULE":               1,
		"BOTTLE":                2,
		"BOX":                   3,
		"CARTRIDGE":             4,
		"CONTAINER":             5,
		"TUBE":                  6,
		"UNITDOSE":              7,
		"VIAL":                  8,
	}
)

func (x MedicationContainerCode_Value) Enum() *MedicationContainerCode_Value {
	p := new(MedicationContainerCode_Value)
	*p = x
	return p
}

func (x MedicationContainerCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationContainerCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[178].Descriptor()
}

func (MedicationContainerCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[178]
}

func (x MedicationContainerCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationContainerCode_Value.Descriptor instead.
func (MedicationContainerCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{179, 0}
}

type MedicationRequestCategoryCode_Value int32

const (
	MedicationRequestCategoryCode_INVALID_UNINITIALIZED MedicationRequestCategoryCode_Value = 0
	MedicationRequestCategoryCode_INPATIENT             MedicationRequestCategoryCode_Value = 1
	MedicationRequestCategoryCode_OUTPATIENT            MedicationRequestCategoryCode_Value = 2
	MedicationRequestCategoryCode_COMMUNITY             MedicationRequestCategoryCode_Value = 3
)

// Enum value maps for MedicationRequestCategoryCode_Value.
var (
	MedicationRequestCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INPATIENT",
		2: "OUTPATIENT",
		3: "COMMUNITY",
	}
	MedicationRequestCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INPATIENT":             1,
		"OUTPATIENT":            2,
		"COMMUNITY":             3,
	}
)

func (x MedicationRequestCategoryCode_Value) Enum() *MedicationRequestCategoryCode_Value {
	p := new(MedicationRequestCategoryCode_Value)
	*p = x
	return p
}

func (x MedicationRequestCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[179].Descriptor()
}

func (MedicationRequestCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[179]
}

func (x MedicationRequestCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestCategoryCode_Value.Descriptor instead.
func (MedicationRequestCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{180, 0}
}

type MedicationRequestIntentCode_Value int32

const (
	MedicationRequestIntentCode_INVALID_UNINITIALIZED MedicationRequestIntentCode_Value = 0
	MedicationRequestIntentCode_PROPOSAL              MedicationRequestIntentCode_Value = 1
	MedicationRequestIntentCode_PLAN                  MedicationRequestIntentCode_Value = 2
	MedicationRequestIntentCode_ORDER                 MedicationRequestIntentCode_Value = 3
	MedicationRequestIntentCode_INSTANCE_ORDER        MedicationRequestIntentCode_Value = 4
)

// Enum value maps for MedicationRequestIntentCode_Value.
var (
	MedicationRequestIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "ORDER",
		4: "INSTANCE_ORDER",
	}
	MedicationRequestIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"ORDER":                 3,
		"INSTANCE_ORDER":        4,
	}
)

func (x MedicationRequestIntentCode_Value) Enum() *MedicationRequestIntentCode_Value {
	p := new(MedicationRequestIntentCode_Value)
	*p = x
	return p
}

func (x MedicationRequestIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[180].Descriptor()
}

func (MedicationRequestIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[180]
}

func (x MedicationRequestIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestIntentCode_Value.Descriptor instead.
func (MedicationRequestIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{181, 0}
}

type MedicationRequestPriorityCode_Value int32

const (
	MedicationRequestPriorityCode_INVALID_UNINITIALIZED MedicationRequestPriorityCode_Value = 0
	MedicationRequestPriorityCode_ROUTINE               MedicationRequestPriorityCode_Value = 1
	MedicationRequestPriorityCode_URGENT                MedicationRequestPriorityCode_Value = 2
	MedicationRequestPriorityCode_STAT                  MedicationRequestPriorityCode_Value = 3
	MedicationRequestPriorityCode_ASAP                  MedicationRequestPriorityCode_Value = 4
)

// Enum value maps for MedicationRequestPriorityCode_Value.
var (
	MedicationRequestPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "STAT",
		4: "ASAP",
	}
	MedicationRequestPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"STAT":                  3,
		"ASAP":                  4,
	}
)

func (x MedicationRequestPriorityCode_Value) Enum() *MedicationRequestPriorityCode_Value {
	p := new(MedicationRequestPriorityCode_Value)
	*p = x
	return p
}

func (x MedicationRequestPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[181].Descriptor()
}

func (MedicationRequestPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[181]
}

func (x MedicationRequestPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestPriorityCode_Value.Descriptor instead.
func (MedicationRequestPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{182, 0}
}

type MedicationRequestStatusCode_Value int32

const (
	MedicationRequestStatusCode_INVALID_UNINITIALIZED MedicationRequestStatusCode_Value = 0
	MedicationRequestStatusCode_ACTIVE                MedicationRequestStatusCode_Value = 1
	MedicationRequestStatusCode_ON_HOLD               MedicationRequestStatusCode_Value = 2
	MedicationRequestStatusCode_CANCELLED             MedicationRequestStatusCode_Value = 3
	MedicationRequestStatusCode_COMPLETED             MedicationRequestStatusCode_Value = 4
	MedicationRequestStatusCode_ENTERED_IN_ERROR      MedicationRequestStatusCode_Value = 5
	MedicationRequestStatusCode_STOPPED               MedicationRequestStatusCode_Value = 6
	MedicationRequestStatusCode_DRAFT                 MedicationRequestStatusCode_Value = 7
	MedicationRequestStatusCode_UNKNOWN               MedicationRequestStatusCode_Value = 8
)

// Enum value maps for MedicationRequestStatusCode_Value.
var (
	MedicationRequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "ON_HOLD",
		3: "CANCELLED",
		4: "COMPLETED",
		5: "ENTERED_IN_ERROR",
		6: "STOPPED",
		7: "DRAFT",
		8: "UNKNOWN",
	}
	MedicationRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ON_HOLD":               2,
		"CANCELLED":             3,
		"COMPLETED":             4,
		"ENTERED_IN_ERROR":      5,
		"STOPPED":               6,
		"DRAFT":                 7,
		"UNKNOWN":               8,
	}
)

func (x MedicationRequestStatusCode_Value) Enum() *MedicationRequestStatusCode_Value {
	p := new(MedicationRequestStatusCode_Value)
	*p = x
	return p
}

func (x MedicationRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[182].Descriptor()
}

func (MedicationRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[182]
}

func (x MedicationRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestStatusCode_Value.Descriptor instead.
func (MedicationRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{183, 0}
}

type MedicationStatementCategoryCode_Value int32

const (
	MedicationStatementCategoryCode_INVALID_UNINITIALIZED MedicationStatementCategoryCode_Value = 0
	MedicationStatementCategoryCode_INPATIENT             MedicationStatementCategoryCode_Value = 1
	MedicationStatementCategoryCode_OUTPATIENT            MedicationStatementCategoryCode_Value = 2
	MedicationStatementCategoryCode_COMMUNITY             MedicationStatementCategoryCode_Value = 3
	MedicationStatementCategoryCode_PATIENTSPECIFIED      MedicationStatementCategoryCode_Value = 4
)

// Enum value maps for MedicationStatementCategoryCode_Value.
var (
	MedicationStatementCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INPATIENT",
		2: "OUTPATIENT",
		3: "COMMUNITY",
		4: "PATIENTSPECIFIED",
	}
	MedicationStatementCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INPATIENT":             1,
		"OUTPATIENT":            2,
		"COMMUNITY":             3,
		"PATIENTSPECIFIED":      4,
	}
)

func (x MedicationStatementCategoryCode_Value) Enum() *MedicationStatementCategoryCode_Value {
	p := new(MedicationStatementCategoryCode_Value)
	*p = x
	return p
}

func (x MedicationStatementCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatementCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[183].Descriptor()
}

func (MedicationStatementCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[183]
}

func (x MedicationStatementCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatementCategoryCode_Value.Descriptor instead.
func (MedicationStatementCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{184, 0}
}

type MedicationStatementStatusCode_Value int32

const (
	MedicationStatementStatusCode_INVALID_UNINITIALIZED MedicationStatementStatusCode_Value = 0
	MedicationStatementStatusCode_ACTIVE                MedicationStatementStatusCode_Value = 1
	MedicationStatementStatusCode_COMPLETED             MedicationStatementStatusCode_Value = 2
	MedicationStatementStatusCode_ENTERED_IN_ERROR      MedicationStatementStatusCode_Value = 3
	MedicationStatementStatusCode_INTENDED              MedicationStatementStatusCode_Value = 4
	MedicationStatementStatusCode_STOPPED               MedicationStatementStatusCode_Value = 5
	MedicationStatementStatusCode_ON_HOLD               MedicationStatementStatusCode_Value = 6
)

// Enum value maps for MedicationStatementStatusCode_Value.
var (
	MedicationStatementStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "INTENDED",
		5: "STOPPED",
		6: "ON_HOLD",
	}
	MedicationStatementStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"INTENDED":              4,
		"STOPPED":               5,
		"ON_HOLD":               6,
	}
)

func (x MedicationStatementStatusCode_Value) Enum() *MedicationStatementStatusCode_Value {
	p := new(MedicationStatementStatusCode_Value)
	*p = x
	return p
}

func (x MedicationStatementStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatementStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[184].Descriptor()
}

func (MedicationStatementStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[184]
}

func (x MedicationStatementStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatementStatusCode_Value.Descriptor instead.
func (MedicationStatementStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{185, 0}
}

type MedicationStatementTakenCode_Value int32

const (
	MedicationStatementTakenCode_INVALID_UNINITIALIZED MedicationStatementTakenCode_Value = 0
	MedicationStatementTakenCode_Y                     MedicationStatementTakenCode_Value = 1
	MedicationStatementTakenCode_N                     MedicationStatementTakenCode_Value = 2
	MedicationStatementTakenCode_UNK                   MedicationStatementTakenCode_Value = 3
	MedicationStatementTakenCode_NA                    MedicationStatementTakenCode_Value = 4
)

// Enum value maps for MedicationStatementTakenCode_Value.
var (
	MedicationStatementTakenCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "Y",
		2: "N",
		3: "UNK",
		4: "NA",
	}
	MedicationStatementTakenCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"Y":                     1,
		"N":                     2,
		"UNK":                   3,
		"NA":                    4,
	}
)

func (x MedicationStatementTakenCode_Value) Enum() *MedicationStatementTakenCode_Value {
	p := new(MedicationStatementTakenCode_Value)
	*p = x
	return p
}

func (x MedicationStatementTakenCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatementTakenCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[185].Descriptor()
}

func (MedicationStatementTakenCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[185]
}

func (x MedicationStatementTakenCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatementTakenCode_Value.Descriptor instead.
func (MedicationStatementTakenCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{186, 0}
}

type MedicationStatusCode_Value int32

const (
	MedicationStatusCode_INVALID_UNINITIALIZED MedicationStatusCode_Value = 0
	MedicationStatusCode_ACTIVE                MedicationStatusCode_Value = 1
	MedicationStatusCode_INACTIVE              MedicationStatusCode_Value = 2
	MedicationStatusCode_ENTERED_IN_ERROR      MedicationStatusCode_Value = 3
)

// Enum value maps for MedicationStatusCode_Value.
var (
	MedicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	MedicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x MedicationStatusCode_Value) Enum() *MedicationStatusCode_Value {
	p := new(MedicationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[186].Descriptor()
}

func (MedicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[186]
}

func (x MedicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatusCode_Value.Descriptor instead.
func (MedicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{187, 0}
}

type MessageEventCode_Value int32

const (
	MessageEventCode_INVALID_UNINITIALIZED                   MessageEventCode_Value = 0
	MessageEventCode_CODE_SYSTEM_EXPAND                      MessageEventCode_Value = 1
	MessageEventCode_MEDICATION_ADMINISTRATION_COMPLETE      MessageEventCode_Value = 2
	MessageEventCode_MEDICATION_ADMINISTRATION_NULLIFICATION MessageEventCode_Value = 3
	MessageEventCode_MEDICATION_ADMINISTRATION_RECORDING     MessageEventCode_Value = 4
	MessageEventCode_MEDICATION_ADMINISTRATION_UPDATE        MessageEventCode_Value = 5
	MessageEventCode_ADMIN_NOTIFY                            MessageEventCode_Value = 6
	MessageEventCode_COMMUNICATION_REQUEST                   MessageEventCode_Value = 7
	MessageEventCode_DIAGNOSTICREPORT_PROVIDE                MessageEventCode_Value = 8
	MessageEventCode_OBSERVATION_PROVIDE                     MessageEventCode_Value = 9
	MessageEventCode_PATIENT_LINK                            MessageEventCode_Value = 10
	MessageEventCode_PATIENT_UNLINK                          MessageEventCode_Value = 11
	MessageEventCode_VALUESET_EXPAND                         MessageEventCode_Value = 12
)

// Enum value maps for MessageEventCode_Value.
var (
	MessageEventCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CODE_SYSTEM_EXPAND",
		2:  "MEDICATION_ADMINISTRATION_COMPLETE",
		3:  "MEDICATION_ADMINISTRATION_NULLIFICATION",
		4:  "MEDICATION_ADMINISTRATION_RECORDING",
		5:  "MEDICATION_ADMINISTRATION_UPDATE",
		6:  "ADMIN_NOTIFY",
		7:  "COMMUNICATION_REQUEST",
		8:  "DIAGNOSTICREPORT_PROVIDE",
		9:  "OBSERVATION_PROVIDE",
		10: "PATIENT_LINK",
		11: "PATIENT_UNLINK",
		12: "VALUESET_EXPAND",
	}
	MessageEventCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                   0,
		"CODE_SYSTEM_EXPAND":                      1,
		"MEDICATION_ADMINISTRATION_COMPLETE":      2,
		"MEDICATION_ADMINISTRATION_NULLIFICATION": 3,
		"MEDICATION_ADMINISTRATION_RECORDING":     4,
		"MEDICATION_ADMINISTRATION_UPDATE":        5,
		"ADMIN_NOTIFY":                            6,
		"COMMUNICATION_REQUEST":                   7,
		"DIAGNOSTICREPORT_PROVIDE":                8,
		"OBSERVATION_PROVIDE":                     9,
		"PATIENT_LINK":                            10,
		"PATIENT_UNLINK":                          11,
		"VALUESET_EXPAND":                         12,
	}
)

func (x MessageEventCode_Value) Enum() *MessageEventCode_Value {
	p := new(MessageEventCode_Value)
	*p = x
	return p
}

func (x MessageEventCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageEventCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[187].Descriptor()
}

func (MessageEventCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[187]
}

func (x MessageEventCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageEventCode_Value.Descriptor instead.
func (MessageEventCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{188, 0}
}

type MessageHeaderResponseRequestCode_Value int32

const (
	MessageHeaderResponseRequestCode_INVALID_UNINITIALIZED MessageHeaderResponseRequestCode_Value = 0
	MessageHeaderResponseRequestCode_ALWAYS                MessageHeaderResponseRequestCode_Value = 1
	MessageHeaderResponseRequestCode_ON_ERROR              MessageHeaderResponseRequestCode_Value = 2
	MessageHeaderResponseRequestCode_NEVER                 MessageHeaderResponseRequestCode_Value = 3
	MessageHeaderResponseRequestCode_ON_SUCCESS            MessageHeaderResponseRequestCode_Value = 4
)

// Enum value maps for MessageHeaderResponseRequestCode_Value.
var (
	MessageHeaderResponseRequestCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALWAYS",
		2: "ON_ERROR",
		3: "NEVER",
		4: "ON_SUCCESS",
	}
	MessageHeaderResponseRequestCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALWAYS":                1,
		"ON_ERROR":              2,
		"NEVER":                 3,
		"ON_SUCCESS":            4,
	}
)

func (x MessageHeaderResponseRequestCode_Value) Enum() *MessageHeaderResponseRequestCode_Value {
	p := new(MessageHeaderResponseRequestCode_Value)
	*p = x
	return p
}

func (x MessageHeaderResponseRequestCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageHeaderResponseRequestCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[188].Descriptor()
}

func (MessageHeaderResponseRequestCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[188]
}

func (x MessageHeaderResponseRequestCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageHeaderResponseRequestCode_Value.Descriptor instead.
func (MessageHeaderResponseRequestCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{189, 0}
}

type ExampleMessageReasonCodesCode_Value int32

const (
	ExampleMessageReasonCodesCode_INVALID_UNINITIALIZED ExampleMessageReasonCodesCode_Value = 0
	ExampleMessageReasonCodesCode_ADMIT                 ExampleMessageReasonCodesCode_Value = 1
	ExampleMessageReasonCodesCode_DISCHARGE             ExampleMessageReasonCodesCode_Value = 2
	ExampleMessageReasonCodesCode_ABSENT                ExampleMessageReasonCodesCode_Value = 3
	ExampleMessageReasonCodesCode_RETURN                ExampleMessageReasonCodesCode_Value = 4
	ExampleMessageReasonCodesCode_MOVED                 ExampleMessageReasonCodesCode_Value = 5
	ExampleMessageReasonCodesCode_EDIT                  ExampleMessageReasonCodesCode_Value = 6
)

// Enum value maps for ExampleMessageReasonCodesCode_Value.
var (
	ExampleMessageReasonCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ADMIT",
		2: "DISCHARGE",
		3: "ABSENT",
		4: "RETURN",
		5: "MOVED",
		6: "EDIT",
	}
	ExampleMessageReasonCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ADMIT":                 1,
		"DISCHARGE":             2,
		"ABSENT":                3,
		"RETURN":                4,
		"MOVED":                 5,
		"EDIT":                  6,
	}
)

func (x ExampleMessageReasonCodesCode_Value) Enum() *ExampleMessageReasonCodesCode_Value {
	p := new(ExampleMessageReasonCodesCode_Value)
	*p = x
	return p
}

func (x ExampleMessageReasonCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleMessageReasonCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[189].Descriptor()
}

func (ExampleMessageReasonCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[189]
}

func (x ExampleMessageReasonCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleMessageReasonCodesCode_Value.Descriptor instead.
func (ExampleMessageReasonCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{190, 0}
}

type MessageSignificanceCategoryCode_Value int32

const (
	MessageSignificanceCategoryCode_INVALID_UNINITIALIZED MessageSignificanceCategoryCode_Value = 0
	MessageSignificanceCategoryCode_CONSEQUENCE           MessageSignificanceCategoryCode_Value = 1
	MessageSignificanceCategoryCode_CURRENCY              MessageSignificanceCategoryCode_Value = 2
	MessageSignificanceCategoryCode_NOTIFICATION          MessageSignificanceCategoryCode_Value = 3
)

// Enum value maps for MessageSignificanceCategoryCode_Value.
var (
	MessageSignificanceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONSEQUENCE",
		2: "CURRENCY",
		3: "NOTIFICATION",
	}
	MessageSignificanceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONSEQUENCE":           1,
		"CURRENCY":              2,
		"NOTIFICATION":          3,
	}
)

func (x MessageSignificanceCategoryCode_Value) Enum() *MessageSignificanceCategoryCode_Value {
	p := new(MessageSignificanceCategoryCode_Value)
	*p = x
	return p
}

func (x MessageSignificanceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSignificanceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[190].Descriptor()
}

func (MessageSignificanceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[190]
}

func (x MessageSignificanceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSignificanceCategoryCode_Value.Descriptor instead.
func (MessageSignificanceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{191, 0}
}

type MessageTransportCode_Value int32

const (
	MessageTransportCode_INVALID_UNINITIALIZED MessageTransportCode_Value = 0
	MessageTransportCode_HTTP                  MessageTransportCode_Value = 1
	MessageTransportCode_FTP                   MessageTransportCode_Value = 2
	MessageTransportCode_MLLP                  MessageTransportCode_Value = 3
)

// Enum value maps for MessageTransportCode_Value.
var (
	MessageTransportCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HTTP",
		2: "FTP",
		3: "MLLP",
	}
	MessageTransportCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HTTP":                  1,
		"FTP":                   2,
		"MLLP":                  3,
	}
)

func (x MessageTransportCode_Value) Enum() *MessageTransportCode_Value {
	p := new(MessageTransportCode_Value)
	*p = x
	return p
}

func (x MessageTransportCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageTransportCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[191].Descriptor()
}

func (MessageTransportCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[191]
}

func (x MessageTransportCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageTransportCode_Value.Descriptor instead.
func (MessageTransportCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{192, 0}
}

type DeviceMetricCalibrationStateCode_Value int32

const (
	DeviceMetricCalibrationStateCode_INVALID_UNINITIALIZED DeviceMetricCalibrationStateCode_Value = 0
	DeviceMetricCalibrationStateCode_NOT_CALIBRATED        DeviceMetricCalibrationStateCode_Value = 1
	DeviceMetricCalibrationStateCode_CALIBRATION_REQUIRED  DeviceMetricCalibrationStateCode_Value = 2
	DeviceMetricCalibrationStateCode_CALIBRATED            DeviceMetricCalibrationStateCode_Value = 3
	DeviceMetricCalibrationStateCode_UNSPECIFIED           DeviceMetricCalibrationStateCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationStateCode_Value.
var (
	DeviceMetricCalibrationStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_CALIBRATED",
		2: "CALIBRATION_REQUIRED",
		3: "CALIBRATED",
		4: "UNSPECIFIED",
	}
	DeviceMetricCalibrationStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_CALIBRATED":        1,
		"CALIBRATION_REQUIRED":  2,
		"CALIBRATED":            3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCalibrationStateCode_Value) Enum() *DeviceMetricCalibrationStateCode_Value {
	p := new(DeviceMetricCalibrationStateCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[192].Descriptor()
}

func (DeviceMetricCalibrationStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[192]
}

func (x DeviceMetricCalibrationStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode_Value.Descriptor instead.
func (DeviceMetricCalibrationStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{193, 0}
}

type DeviceMetricCalibrationTypeCode_Value int32

const (
	DeviceMetricCalibrationTypeCode_INVALID_UNINITIALIZED DeviceMetricCalibrationTypeCode_Value = 0
	DeviceMetricCalibrationTypeCode_UNSPECIFIED           DeviceMetricCalibrationTypeCode_Value = 1
	DeviceMetricCalibrationTypeCode_OFFSET                DeviceMetricCalibrationTypeCode_Value = 2
	DeviceMetricCalibrationTypeCode_GAIN                  DeviceMetricCalibrationTypeCode_Value = 3
	DeviceMetricCalibrationTypeCode_TWO_POINT             DeviceMetricCalibrationTypeCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationTypeCode_Value.
var (
	DeviceMetricCalibrationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNSPECIFIED",
		2: "OFFSET",
		3: "GAIN",
		4: "TWO_POINT",
	}
	DeviceMetricCalibrationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNSPECIFIED":           1,
		"OFFSET":                2,
		"GAIN":                  3,
		"TWO_POINT":             4,
	}
)

func (x DeviceMetricCalibrationTypeCode_Value) Enum() *DeviceMetricCalibrationTypeCode_Value {
	p := new(DeviceMetricCalibrationTypeCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[193].Descriptor()
}

func (DeviceMetricCalibrationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[193]
}

func (x DeviceMetricCalibrationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode_Value.Descriptor instead.
func (DeviceMetricCalibrationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{194, 0}
}

type DeviceMetricCategoryCode_Value int32

const (
	DeviceMetricCategoryCode_INVALID_UNINITIALIZED DeviceMetricCategoryCode_Value = 0
	DeviceMetricCategoryCode_MEASUREMENT           DeviceMetricCategoryCode_Value = 1
	DeviceMetricCategoryCode_SETTING               DeviceMetricCategoryCode_Value = 2
	DeviceMetricCategoryCode_CALCULATION           DeviceMetricCategoryCode_Value = 3
	DeviceMetricCategoryCode_UNSPECIFIED           DeviceMetricCategoryCode_Value = 4
)

// Enum value maps for DeviceMetricCategoryCode_Value.
var (
	DeviceMetricCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEASUREMENT",
		2: "SETTING",
		3: "CALCULATION",
		4: "UNSPECIFIED",
	}
	DeviceMetricCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEASUREMENT":           1,
		"SETTING":               2,
		"CALCULATION":           3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCategoryCode_Value) Enum() *DeviceMetricCategoryCode_Value {
	p := new(DeviceMetricCategoryCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[194].Descriptor()
}

func (DeviceMetricCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[194]
}

func (x DeviceMetricCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCategoryCode_Value.Descriptor instead.
func (DeviceMetricCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{195, 0}
}

type DeviceMetricColorCode_Value int32

const (
	DeviceMetricColorCode_INVALID_UNINITIALIZED DeviceMetricColorCode_Value = 0
	DeviceMetricColorCode_BLACK                 DeviceMetricColorCode_Value = 1
	DeviceMetricColorCode_RED                   DeviceMetricColorCode_Value = 2
	DeviceMetricColorCode_GREEN                 DeviceMetricColorCode_Value = 3
	DeviceMetricColorCode_YELLOW                DeviceMetricColorCode_Value = 4
	DeviceMetricColorCode_BLUE                  DeviceMetricColorCode_Value = 5
	DeviceMetricColorCode_MAGENTA               DeviceMetricColorCode_Value = 6
	DeviceMetricColorCode_CYAN                  DeviceMetricColorCode_Value = 7
	DeviceMetricColorCode_WHITE                 DeviceMetricColorCode_Value = 8
)

// Enum value maps for DeviceMetricColorCode_Value.
var (
	DeviceMetricColorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BLACK",
		2: "RED",
		3: "GREEN",
		4: "YELLOW",
		5: "BLUE",
		6: "MAGENTA",
		7: "CYAN",
		8: "WHITE",
	}
	DeviceMetricColorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BLACK":                 1,
		"RED":                   2,
		"GREEN":                 3,
		"YELLOW":                4,
		"BLUE":                  5,
		"MAGENTA":               6,
		"CYAN":                  7,
		"WHITE":                 8,
	}
)

func (x DeviceMetricColorCode_Value) Enum() *DeviceMetricColorCode_Value {
	p := new(DeviceMetricColorCode_Value)
	*p = x
	return p
}

func (x DeviceMetricColorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricColorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[195].Descriptor()
}

func (DeviceMetricColorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[195]
}

func (x DeviceMetricColorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricColorCode_Value.Descriptor instead.
func (DeviceMetricColorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{196, 0}
}

type DeviceMetricOperationalStatusCode_Value int32

const (
	DeviceMetricOperationalStatusCode_INVALID_UNINITIALIZED DeviceMetricOperationalStatusCode_Value = 0
	DeviceMetricOperationalStatusCode_ON                    DeviceMetricOperationalStatusCode_Value = 1
	DeviceMetricOperationalStatusCode_OFF                   DeviceMetricOperationalStatusCode_Value = 2
	DeviceMetricOperationalStatusCode_STANDBY               DeviceMetricOperationalStatusCode_Value = 3
	DeviceMetricOperationalStatusCode_ENTERED_IN_ERROR      DeviceMetricOperationalStatusCode_Value = 4
)

// Enum value maps for DeviceMetricOperationalStatusCode_Value.
var (
	DeviceMetricOperationalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ON",
		2: "OFF",
		3: "STANDBY",
		4: "ENTERED_IN_ERROR",
	}
	DeviceMetricOperationalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ON":                    1,
		"OFF":                   2,
		"STANDBY":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x DeviceMetricOperationalStatusCode_Value) Enum() *DeviceMetricOperationalStatusCode_Value {
	p := new(DeviceMetricOperationalStatusCode_Value)
	*p = x
	return p
}

func (x DeviceMetricOperationalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricOperationalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[196].Descriptor()
}

func (DeviceMetricOperationalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[196]
}

func (x DeviceMetricOperationalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode_Value.Descriptor instead.
func (DeviceMetricOperationalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{197, 0}
}

type HumanNameAssemblyOrderCode_Value int32

const (
	HumanNameAssemblyOrderCode_INVALID_UNINITIALIZED HumanNameAssemblyOrderCode_Value = 0
	HumanNameAssemblyOrderCode_NL1                   HumanNameAssemblyOrderCode_Value = 1
	HumanNameAssemblyOrderCode_NL2                   HumanNameAssemblyOrderCode_Value = 2
	HumanNameAssemblyOrderCode_NL3                   HumanNameAssemblyOrderCode_Value = 3
	HumanNameAssemblyOrderCode_NL4                   HumanNameAssemblyOrderCode_Value = 4
)

// Enum value maps for HumanNameAssemblyOrderCode_Value.
var (
	HumanNameAssemblyOrderCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NL1",
		2: "NL2",
		3: "NL3",
		4: "NL4",
	}
	HumanNameAssemblyOrderCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NL1":                   1,
		"NL2":                   2,
		"NL3":                   3,
		"NL4":                   4,
	}
)

func (x HumanNameAssemblyOrderCode_Value) Enum() *HumanNameAssemblyOrderCode_Value {
	p := new(HumanNameAssemblyOrderCode_Value)
	*p = x
	return p
}

func (x HumanNameAssemblyOrderCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanNameAssemblyOrderCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[197].Descriptor()
}

func (HumanNameAssemblyOrderCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[197]
}

func (x HumanNameAssemblyOrderCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanNameAssemblyOrderCode_Value.Descriptor instead.
func (HumanNameAssemblyOrderCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{198, 0}
}

type NameRepresentationUseCode_Value int32

const (
	NameRepresentationUseCode_INVALID_UNINITIALIZED NameRepresentationUseCode_Value = 0
	NameRepresentationUseCode_ABC                   NameRepresentationUseCode_Value = 1
	NameRepresentationUseCode_IDE                   NameRepresentationUseCode_Value = 2
	NameRepresentationUseCode_SYL                   NameRepresentationUseCode_Value = 3
)

// Enum value maps for NameRepresentationUseCode_Value.
var (
	NameRepresentationUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ABC",
		2: "IDE",
		3: "SYL",
	}
	NameRepresentationUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ABC":                   1,
		"IDE":                   2,
		"SYL":                   3,
	}
)

func (x NameRepresentationUseCode_Value) Enum() *NameRepresentationUseCode_Value {
	p := new(NameRepresentationUseCode_Value)
	*p = x
	return p
}

func (x NameRepresentationUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameRepresentationUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[198].Descriptor()
}

func (NameRepresentationUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[198]
}

func (x NameRepresentationUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameRepresentationUseCode_Value.Descriptor instead.
func (NameRepresentationUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{199, 0}
}

type NamingSystemIdentifierTypeCode_Value int32

const (
	NamingSystemIdentifierTypeCode_INVALID_UNINITIALIZED NamingSystemIdentifierTypeCode_Value = 0
	NamingSystemIdentifierTypeCode_OID                   NamingSystemIdentifierTypeCode_Value = 1
	NamingSystemIdentifierTypeCode_UUID                  NamingSystemIdentifierTypeCode_Value = 2
	NamingSystemIdentifierTypeCode_URI                   NamingSystemIdentifierTypeCode_Value = 3
	NamingSystemIdentifierTypeCode_OTHER                 NamingSystemIdentifierTypeCode_Value = 4
)

// Enum value maps for NamingSystemIdentifierTypeCode_Value.
var (
	NamingSystemIdentifierTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OID",
		2: "UUID",
		3: "URI",
		4: "OTHER",
	}
	NamingSystemIdentifierTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OID":                   1,
		"UUID":                  2,
		"URI":                   3,
		"OTHER":                 4,
	}
)

func (x NamingSystemIdentifierTypeCode_Value) Enum() *NamingSystemIdentifierTypeCode_Value {
	p := new(NamingSystemIdentifierTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemIdentifierTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemIdentifierTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[199].Descriptor()
}

func (NamingSystemIdentifierTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[199]
}

func (x NamingSystemIdentifierTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode_Value.Descriptor instead.
func (NamingSystemIdentifierTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{200, 0}
}

type NamingSystemTypeCode_Value int32

const (
	NamingSystemTypeCode_INVALID_UNINITIALIZED NamingSystemTypeCode_Value = 0
	NamingSystemTypeCode_CODESYSTEM            NamingSystemTypeCode_Value = 1
	NamingSystemTypeCode_IDENTIFIER            NamingSystemTypeCode_Value = 2
	NamingSystemTypeCode_ROOT                  NamingSystemTypeCode_Value = 3
)

// Enum value maps for NamingSystemTypeCode_Value.
var (
	NamingSystemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODESYSTEM",
		2: "IDENTIFIER",
		3: "ROOT",
	}
	NamingSystemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODESYSTEM":            1,
		"IDENTIFIER":            2,
		"ROOT":                  3,
	}
)

func (x NamingSystemTypeCode_Value) Enum() *NamingSystemTypeCode_Value {
	p := new(NamingSystemTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[200].Descriptor()
}

func (NamingSystemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[200]
}

func (x NamingSystemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemTypeCode_Value.Descriptor instead.
func (NamingSystemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{201, 0}
}

type AuditEventAgentNetworkTypeCode_Value int32

const (
	AuditEventAgentNetworkTypeCode_INVALID_UNINITIALIZED AuditEventAgentNetworkTypeCode_Value = 0
	AuditEventAgentNetworkTypeCode_MACHINE_NAME          AuditEventAgentNetworkTypeCode_Value = 1
	AuditEventAgentNetworkTypeCode_IP_ADDRESS            AuditEventAgentNetworkTypeCode_Value = 2
	AuditEventAgentNetworkTypeCode_TELEPHONE_NUMBER      AuditEventAgentNetworkTypeCode_Value = 3
	AuditEventAgentNetworkTypeCode_EMAIL_ADDRESS         AuditEventAgentNetworkTypeCode_Value = 4
	AuditEventAgentNetworkTypeCode_URI                   AuditEventAgentNetworkTypeCode_Value = 5
)

// Enum value maps for AuditEventAgentNetworkTypeCode_Value.
var (
	AuditEventAgentNetworkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MACHINE_NAME",
		2: "IP_ADDRESS",
		3: "TELEPHONE_NUMBER",
		4: "EMAIL_ADDRESS",
		5: "URI",
	}
	AuditEventAgentNetworkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MACHINE_NAME":          1,
		"IP_ADDRESS":            2,
		"TELEPHONE_NUMBER":      3,
		"EMAIL_ADDRESS":         4,
		"URI":                   5,
	}
)

func (x AuditEventAgentNetworkTypeCode_Value) Enum() *AuditEventAgentNetworkTypeCode_Value {
	p := new(AuditEventAgentNetworkTypeCode_Value)
	*p = x
	return p
}

func (x AuditEventAgentNetworkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventAgentNetworkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[201].Descriptor()
}

func (AuditEventAgentNetworkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[201]
}

func (x AuditEventAgentNetworkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventAgentNetworkTypeCode_Value.Descriptor instead.
func (AuditEventAgentNetworkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{202, 0}
}

type NoteTypeCode_Value int32

const (
	NoteTypeCode_INVALID_UNINITIALIZED NoteTypeCode_Value = 0
	NoteTypeCode_DISPLAY               NoteTypeCode_Value = 1
	NoteTypeCode_PRINT                 NoteTypeCode_Value = 2
	NoteTypeCode_PRINTOPER             NoteTypeCode_Value = 3
)

// Enum value maps for NoteTypeCode_Value.
var (
	NoteTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DISPLAY",
		2: "PRINT",
		3: "PRINTOPER",
	}
	NoteTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DISPLAY":               1,
		"PRINT":                 2,
		"PRINTOPER":             3,
	}
)

func (x NoteTypeCode_Value) Enum() *NoteTypeCode_Value {
	p := new(NoteTypeCode_Value)
	*p = x
	return p
}

func (x NoteTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[202].Descriptor()
}

func (NoteTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[202]
}

func (x NoteTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteTypeCode_Value.Descriptor instead.
func (NoteTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{203, 0}
}

type NullFlavorCode_Value int32

const (
	NullFlavorCode_INVALID_UNINITIALIZED NullFlavorCode_Value = 0
	NullFlavorCode_NI                    NullFlavorCode_Value = 1
	NullFlavorCode_INV                   NullFlavorCode_Value = 2
	NullFlavorCode_DER                   NullFlavorCode_Value = 3
	NullFlavorCode_OTH                   NullFlavorCode_Value = 4
	NullFlavorCode_NINF                  NullFlavorCode_Value = 5
	NullFlavorCode_PINF                  NullFlavorCode_Value = 6
	NullFlavorCode_UNC                   NullFlavorCode_Value = 7
	NullFlavorCode_MSK                   NullFlavorCode_Value = 8
	NullFlavorCode_NA                    NullFlavorCode_Value = 9
	NullFlavorCode_UNK                   NullFlavorCode_Value = 10
	NullFlavorCode_ASKU                  NullFlavorCode_Value = 11
	NullFlavorCode_NAV                   NullFlavorCode_Value = 12
	NullFlavorCode_NASK                  NullFlavorCode_Value = 13
	NullFlavorCode_NAVU                  NullFlavorCode_Value = 14
	NullFlavorCode_QS                    NullFlavorCode_Value = 15
	NullFlavorCode_TRC                   NullFlavorCode_Value = 16
	NullFlavorCode_NP                    NullFlavorCode_Value = 17
)

// Enum value maps for NullFlavorCode_Value.
var (
	NullFlavorCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "NI",
		2:  "INV",
		3:  "DER",
		4:  "OTH",
		5:  "NINF",
		6:  "PINF",
		7:  "UNC",
		8:  "MSK",
		9:  "NA",
		10: "UNK",
		11: "ASKU",
		12: "NAV",
		13: "NASK",
		14: "NAVU",
		15: "QS",
		16: "TRC",
		17: "NP",
	}
	NullFlavorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NI":                    1,
		"INV":                   2,
		"DER":                   3,
		"OTH":                   4,
		"NINF":                  5,
		"PINF":                  6,
		"UNC":                   7,
		"MSK":                   8,
		"NA":                    9,
		"UNK":                   10,
		"ASKU":                  11,
		"NAV":                   12,
		"NASK":                  13,
		"NAVU":                  14,
		"QS":                    15,
		"TRC":                   16,
		"NP":                    17,
	}
)

func (x NullFlavorCode_Value) Enum() *NullFlavorCode_Value {
	p := new(NullFlavorCode_Value)
	*p = x
	return p
}

func (x NullFlavorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullFlavorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[203].Descriptor()
}

func (NullFlavorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[203]
}

func (x NullFlavorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullFlavorCode_Value.Descriptor instead.
func (NullFlavorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{204, 0}
}

type NutritionOrderStatusCode_Value int32

const (
	NutritionOrderStatusCode_INVALID_UNINITIALIZED NutritionOrderStatusCode_Value = 0
	NutritionOrderStatusCode_PROPOSED              NutritionOrderStatusCode_Value = 1
	NutritionOrderStatusCode_DRAFT                 NutritionOrderStatusCode_Value = 2
	NutritionOrderStatusCode_PLANNED               NutritionOrderStatusCode_Value = 3
	NutritionOrderStatusCode_REQUESTED             NutritionOrderStatusCode_Value = 4
	NutritionOrderStatusCode_ACTIVE                NutritionOrderStatusCode_Value = 5
	NutritionOrderStatusCode_ON_HOLD               NutritionOrderStatusCode_Value = 6
	NutritionOrderStatusCode_COMPLETED             NutritionOrderStatusCode_Value = 7
	NutritionOrderStatusCode_CANCELLED             NutritionOrderStatusCode_Value = 8
	NutritionOrderStatusCode_ENTERED_IN_ERROR      NutritionOrderStatusCode_Value = 9
)

// Enum value maps for NutritionOrderStatusCode_Value.
var (
	NutritionOrderStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "DRAFT",
		3: "PLANNED",
		4: "REQUESTED",
		5: "ACTIVE",
		6: "ON_HOLD",
		7: "COMPLETED",
		8: "CANCELLED",
		9: "ENTERED_IN_ERROR",
	}
	NutritionOrderStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"DRAFT":                 2,
		"PLANNED":               3,
		"REQUESTED":             4,
		"ACTIVE":                5,
		"ON_HOLD":               6,
		"COMPLETED":             7,
		"CANCELLED":             8,
		"ENTERED_IN_ERROR":      9,
	}
)

func (x NutritionOrderStatusCode_Value) Enum() *NutritionOrderStatusCode_Value {
	p := new(NutritionOrderStatusCode_Value)
	*p = x
	return p
}

func (x NutritionOrderStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NutritionOrderStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[204].Descriptor()
}

func (NutritionOrderStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[204]
}

func (x NutritionOrderStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NutritionOrderStatusCode_Value.Descriptor instead.
func (NutritionOrderStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{205, 0}
}

type ObservationCategoryCodesCode_Value int32

const (
	ObservationCategoryCodesCode_INVALID_UNINITIALIZED ObservationCategoryCodesCode_Value = 0
	ObservationCategoryCodesCode_SOCIAL_HISTORY        ObservationCategoryCodesCode_Value = 1
	ObservationCategoryCodesCode_VITAL_SIGNS           ObservationCategoryCodesCode_Value = 2
	ObservationCategoryCodesCode_IMAGING               ObservationCategoryCodesCode_Value = 3
	ObservationCategoryCodesCode_LABORATORY            ObservationCategoryCodesCode_Value = 4
	ObservationCategoryCodesCode_PROCEDURE             ObservationCategoryCodesCode_Value = 5
	ObservationCategoryCodesCode_SURVEY                ObservationCategoryCodesCode_Value = 6
	ObservationCategoryCodesCode_EXAM                  ObservationCategoryCodesCode_Value = 7
	ObservationCategoryCodesCode_THERAPY               ObservationCategoryCodesCode_Value = 8
)

// Enum value maps for ObservationCategoryCodesCode_Value.
var (
	ObservationCategoryCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOCIAL_HISTORY",
		2: "VITAL_SIGNS",
		3: "IMAGING",
		4: "LABORATORY",
		5: "PROCEDURE",
		6: "SURVEY",
		7: "EXAM",
		8: "THERAPY",
	}
	ObservationCategoryCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOCIAL_HISTORY":        1,
		"VITAL_SIGNS":           2,
		"IMAGING":               3,
		"LABORATORY":            4,
		"PROCEDURE":             5,
		"SURVEY":                6,
		"EXAM":                  7,
		"THERAPY":               8,
	}
)

func (x ObservationCategoryCodesCode_Value) Enum() *ObservationCategoryCodesCode_Value {
	p := new(ObservationCategoryCodesCode_Value)
	*p = x
	return p
}

func (x ObservationCategoryCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationCategoryCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[205].Descriptor()
}

func (ObservationCategoryCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[205]
}

func (x ObservationCategoryCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationCategoryCodesCode_Value.Descriptor instead.
func (ObservationCategoryCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{206, 0}
}

type ObservationRelationshipTypeCode_Value int32

const (
	ObservationRelationshipTypeCode_INVALID_UNINITIALIZED ObservationRelationshipTypeCode_Value = 0
	ObservationRelationshipTypeCode_HAS_MEMBER            ObservationRelationshipTypeCode_Value = 1
	ObservationRelationshipTypeCode_DERIVED_FROM          ObservationRelationshipTypeCode_Value = 2
	ObservationRelationshipTypeCode_SEQUEL_TO             ObservationRelationshipTypeCode_Value = 3
	ObservationRelationshipTypeCode_REPLACES              ObservationRelationshipTypeCode_Value = 4
	ObservationRelationshipTypeCode_QUALIFIED_BY          ObservationRelationshipTypeCode_Value = 5
	ObservationRelationshipTypeCode_INTERFERED_BY         ObservationRelationshipTypeCode_Value = 6
)

// Enum value maps for ObservationRelationshipTypeCode_Value.
var (
	ObservationRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HAS_MEMBER",
		2: "DERIVED_FROM",
		3: "SEQUEL_TO",
		4: "REPLACES",
		5: "QUALIFIED_BY",
		6: "INTERFERED_BY",
	}
	ObservationRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HAS_MEMBER":            1,
		"DERIVED_FROM":          2,
		"SEQUEL_TO":             3,
		"REPLACES":              4,
		"QUALIFIED_BY":          5,
		"INTERFERED_BY":         6,
	}
)

func (x ObservationRelationshipTypeCode_Value) Enum() *ObservationRelationshipTypeCode_Value {
	p := new(ObservationRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x ObservationRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[206].Descriptor()
}

func (ObservationRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[206]
}

func (x ObservationRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationRelationshipTypeCode_Value.Descriptor instead.
func (ObservationRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{207, 0}
}

type StatisticsCodeCode_Value int32

const (
	StatisticsCodeCode_INVALID_UNINITIALIZED StatisticsCodeCode_Value = 0
	StatisticsCodeCode_AVERAGE               StatisticsCodeCode_Value = 1
	StatisticsCodeCode_MAXIMUM               StatisticsCodeCode_Value = 2
	StatisticsCodeCode_MINIMUM               StatisticsCodeCode_Value = 3
	StatisticsCodeCode_COUNT                 StatisticsCodeCode_Value = 4
	StatisticsCodeCode_TOTALCOUNT            StatisticsCodeCode_Value = 5
	StatisticsCodeCode_MEDIAN                StatisticsCodeCode_Value = 6
	StatisticsCodeCode_STD_DEV               StatisticsCodeCode_Value = 7
	StatisticsCodeCode_SUM                   StatisticsCodeCode_Value = 8
	StatisticsCodeCode_VARIANCE              StatisticsCodeCode_Value = 9
	StatisticsCodeCode_TWENTY_PERCENT        StatisticsCodeCode_Value = 10
	StatisticsCodeCode_EIGHTY_PERCENT        StatisticsCodeCode_Value = 11
	StatisticsCodeCode_FOUR_LOWER            StatisticsCodeCode_Value = 12
	StatisticsCodeCode_FOUR_UPPER            StatisticsCodeCode_Value = 13
	StatisticsCodeCode_FOUR_DEV              StatisticsCodeCode_Value = 14
	StatisticsCodeCode_FIVE_ONE              StatisticsCodeCode_Value = 15
	StatisticsCodeCode_FIVE_TWO              StatisticsCodeCode_Value = 16
	StatisticsCodeCode_FIVE_THREE            StatisticsCodeCode_Value = 17
	StatisticsCodeCode_FIVE_FOUR             StatisticsCodeCode_Value = 18
	StatisticsCodeCode_SKEW                  StatisticsCodeCode_Value = 19
	StatisticsCodeCode_KURTOSIS              StatisticsCodeCode_Value = 20
	StatisticsCodeCode_REGRESSION            StatisticsCodeCode_Value = 21
)

// Enum value maps for StatisticsCodeCode_Value.
var (
	StatisticsCodeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AVERAGE",
		2:  "MAXIMUM",
		3:  "MINIMUM",
		4:  "COUNT",
		5:  "TOTALCOUNT",
		6:  "MEDIAN",
		7:  "STD_DEV",
		8:  "SUM",
		9:  "VARIANCE",
		10: "TWENTY_PERCENT",
		11: "EIGHTY_PERCENT",
		12: "FOUR_LOWER",
		13: "FOUR_UPPER",
		14: "FOUR_DEV",
		15: "FIVE_ONE",
		16: "FIVE_TWO",
		17: "FIVE_THREE",
		18: "FIVE_FOUR",
		19: "SKEW",
		20: "KURTOSIS",
		21: "REGRESSION",
	}
	StatisticsCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVERAGE":               1,
		"MAXIMUM":               2,
		"MINIMUM":               3,
		"COUNT":                 4,
		"TOTALCOUNT":            5,
		"MEDIAN":                6,
		"STD_DEV":               7,
		"SUM":                   8,
		"VARIANCE":              9,
		"TWENTY_PERCENT":        10,
		"EIGHTY_PERCENT":        11,
		"FOUR_LOWER":            12,
		"FOUR_UPPER":            13,
		"FOUR_DEV":              14,
		"FIVE_ONE":              15,
		"FIVE_TWO":              16,
		"FIVE_THREE":            17,
		"FIVE_FOUR":             18,
		"SKEW":                  19,
		"KURTOSIS":              20,
		"REGRESSION":            21,
	}
)

func (x StatisticsCodeCode_Value) Enum() *StatisticsCodeCode_Value {
	p := new(StatisticsCodeCode_Value)
	*p = x
	return p
}

func (x StatisticsCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticsCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[207].Descriptor()
}

func (StatisticsCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[207]
}

func (x StatisticsCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticsCodeCode_Value.Descriptor instead.
func (StatisticsCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{208, 0}
}

type ObservationStatusCode_Value int32

const (
	ObservationStatusCode_INVALID_UNINITIALIZED ObservationStatusCode_Value = 0
	ObservationStatusCode_REGISTERED            ObservationStatusCode_Value = 1
	ObservationStatusCode_PRELIMINARY           ObservationStatusCode_Value = 2
	ObservationStatusCode_FINAL                 ObservationStatusCode_Value = 3
	ObservationStatusCode_AMENDED               ObservationStatusCode_Value = 4
	ObservationStatusCode_CORRECTED             ObservationStatusCode_Value = 5
	ObservationStatusCode_CANCELLED             ObservationStatusCode_Value = 6
	ObservationStatusCode_ENTERED_IN_ERROR      ObservationStatusCode_Value = 7
	ObservationStatusCode_UNKNOWN               ObservationStatusCode_Value = 8
)

// Enum value maps for ObservationStatusCode_Value.
var (
	ObservationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "PRELIMINARY",
		3: "FINAL",
		4: "AMENDED",
		5: "CORRECTED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	ObservationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PRELIMINARY":           2,
		"FINAL":                 3,
		"AMENDED":               4,
		"CORRECTED":             5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
		"UNKNOWN":               8,
	}
)

func (x ObservationStatusCode_Value) Enum() *ObservationStatusCode_Value {
	p := new(ObservationStatusCode_Value)
	*p = x
	return p
}

func (x ObservationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[208].Descriptor()
}

func (ObservationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[208]
}

func (x ObservationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationStatusCode_Value.Descriptor instead.
func (ObservationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{209, 0}
}

type DeviceComponentOperationalStatusCode_Value int32

const (
	DeviceComponentOperationalStatusCode_INVALID_UNINITIALIZED DeviceComponentOperationalStatusCode_Value = 0
	DeviceComponentOperationalStatusCode_OFF                   DeviceComponentOperationalStatusCode_Value = 1
	DeviceComponentOperationalStatusCode_ON                    DeviceComponentOperationalStatusCode_Value = 2
	DeviceComponentOperationalStatusCode_NOT_READY             DeviceComponentOperationalStatusCode_Value = 3
	DeviceComponentOperationalStatusCode_STANDBY               DeviceComponentOperationalStatusCode_Value = 4
	DeviceComponentOperationalStatusCode_TRANSDUC_DISCON       DeviceComponentOperationalStatusCode_Value = 5
	DeviceComponentOperationalStatusCode_HW_DISCON             DeviceComponentOperationalStatusCode_Value = 6
	DeviceComponentOperationalStatusCode_ENTERED_IN_ERROR      DeviceComponentOperationalStatusCode_Value = 7
)

// Enum value maps for DeviceComponentOperationalStatusCode_Value.
var (
	DeviceComponentOperationalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OFF",
		2: "ON",
		3: "NOT_READY",
		4: "STANDBY",
		5: "TRANSDUC_DISCON",
		6: "HW_DISCON",
		7: "ENTERED_IN_ERROR",
	}
	DeviceComponentOperationalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OFF":                   1,
		"ON":                    2,
		"NOT_READY":             3,
		"STANDBY":               4,
		"TRANSDUC_DISCON":       5,
		"HW_DISCON":             6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x DeviceComponentOperationalStatusCode_Value) Enum() *DeviceComponentOperationalStatusCode_Value {
	p := new(DeviceComponentOperationalStatusCode_Value)
	*p = x
	return p
}

func (x DeviceComponentOperationalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceComponentOperationalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[209].Descriptor()
}

func (DeviceComponentOperationalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[209]
}

func (x DeviceComponentOperationalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceComponentOperationalStatusCode_Value.Descriptor instead.
func (DeviceComponentOperationalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{210, 0}
}

type OperationKindCode_Value int32

const (
	OperationKindCode_INVALID_UNINITIALIZED OperationKindCode_Value = 0
	OperationKindCode_OPERATION             OperationKindCode_Value = 1
	OperationKindCode_QUERY                 OperationKindCode_Value = 2
)

// Enum value maps for OperationKindCode_Value.
var (
	OperationKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OPERATION",
		2: "QUERY",
	}
	OperationKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OPERATION":             1,
		"QUERY":                 2,
	}
)

func (x OperationKindCode_Value) Enum() *OperationKindCode_Value {
	p := new(OperationKindCode_Value)
	*p = x
	return p
}

func (x OperationKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[210].Descriptor()
}

func (OperationKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[210]
}

func (x OperationKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationKindCode_Value.Descriptor instead.
func (OperationKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{211, 0}
}

type OperationOutcomeCodesCode_Value int32

const (
	OperationOutcomeCodesCode_INVALID_UNINITIALIZED          OperationOutcomeCodesCode_Value = 0
	OperationOutcomeCodesCode_MSG_AUTH_REQUIRED              OperationOutcomeCodesCode_Value = 1
	OperationOutcomeCodesCode_MSG_BAD_FORMAT                 OperationOutcomeCodesCode_Value = 2
	OperationOutcomeCodesCode_MSG_BAD_SYNTAX                 OperationOutcomeCodesCode_Value = 3
	OperationOutcomeCodesCode_MSG_CANT_PARSE_CONTENT         OperationOutcomeCodesCode_Value = 4
	OperationOutcomeCodesCode_MSG_CANT_PARSE_ROOT            OperationOutcomeCodesCode_Value = 5
	OperationOutcomeCodesCode_MSG_CREATED                    OperationOutcomeCodesCode_Value = 6
	OperationOutcomeCodesCode_MSG_DATE_FORMAT                OperationOutcomeCodesCode_Value = 7
	OperationOutcomeCodesCode_MSG_DELETED                    OperationOutcomeCodesCode_Value = 8
	OperationOutcomeCodesCode_MSG_DELETED_DONE               OperationOutcomeCodesCode_Value = 9
	OperationOutcomeCodesCode_MSG_DELETED_ID                 OperationOutcomeCodesCode_Value = 10
	OperationOutcomeCodesCode_MSG_DUPLICATE_ID               OperationOutcomeCodesCode_Value = 11
	OperationOutcomeCodesCode_MSG_ERROR_PARSING              OperationOutcomeCodesCode_Value = 12
	OperationOutcomeCodesCode_MSG_ID_INVALID                 OperationOutcomeCodesCode_Value = 13
	OperationOutcomeCodesCode_MSG_ID_TOO_LONG                OperationOutcomeCodesCode_Value = 14
	OperationOutcomeCodesCode_MSG_INVALID_ID                 OperationOutcomeCodesCode_Value = 15
	OperationOutcomeCodesCode_MSG_JSON_OBJECT                OperationOutcomeCodesCode_Value = 16
	OperationOutcomeCodesCode_MSG_LOCAL_FAIL                 OperationOutcomeCodesCode_Value = 17
	OperationOutcomeCodesCode_MSG_NO_MATCH                   OperationOutcomeCodesCode_Value = 18
	OperationOutcomeCodesCode_MSG_NO_EXIST                   OperationOutcomeCodesCode_Value = 19
	OperationOutcomeCodesCode_MSG_NO_MODULE                  OperationOutcomeCodesCode_Value = 20
	OperationOutcomeCodesCode_MSG_NO_SUMMARY                 OperationOutcomeCodesCode_Value = 21
	OperationOutcomeCodesCode_MSG_OP_NOT_ALLOWED             OperationOutcomeCodesCode_Value = 22
	OperationOutcomeCodesCode_MSG_PARAM_CHAINED              OperationOutcomeCodesCode_Value = 23
	OperationOutcomeCodesCode_MSG_PARAM_NO_REPEAT            OperationOutcomeCodesCode_Value = 24
	OperationOutcomeCodesCode_MSG_PARAM_UNKNOWN              OperationOutcomeCodesCode_Value = 25
	OperationOutcomeCodesCode_MSG_PARAM_INVALID              OperationOutcomeCodesCode_Value = 26
	OperationOutcomeCodesCode_MSG_PARAM_MODIFIER_INVALID     OperationOutcomeCodesCode_Value = 27
	OperationOutcomeCodesCode_MSG_RESOURCE_EXAMPLE_PROTECTED OperationOutcomeCodesCode_Value = 28
	OperationOutcomeCodesCode_MSG_RESOURCE_ID_FAIL           OperationOutcomeCodesCode_Value = 29
	OperationOutcomeCodesCode_MSG_RESOURCE_NOT_ALLOWED       OperationOutcomeCodesCode_Value = 30
	OperationOutcomeCodesCode_MSG_RESOURCE_REQUIRED          OperationOutcomeCodesCode_Value = 31
	OperationOutcomeCodesCode_MSG_RESOURCE_ID_MISMATCH       OperationOutcomeCodesCode_Value = 32
	OperationOutcomeCodesCode_MSG_RESOURCE_ID_MISSING        OperationOutcomeCodesCode_Value = 33
	OperationOutcomeCodesCode_MSG_RESOURCE_TYPE_MISMATCH     OperationOutcomeCodesCode_Value = 34
	OperationOutcomeCodesCode_MSG_SORT_UNKNOWN               OperationOutcomeCodesCode_Value = 35
	OperationOutcomeCodesCode_MSG_TRANSACTION_DUPLICATE_ID   OperationOutcomeCodesCode_Value = 36
	OperationOutcomeCodesCode_MSG_TRANSACTION_MISSING_ID     OperationOutcomeCodesCode_Value = 37
	OperationOutcomeCodesCode_MSG_UNHANDLED_NODE_TYPE        OperationOutcomeCodesCode_Value = 38
	OperationOutcomeCodesCode_MSG_UNKNOWN_CONTENT            OperationOutcomeCodesCode_Value = 39
	OperationOutcomeCodesCode_MSG_UNKNOWN_OPERATION          OperationOutcomeCodesCode_Value = 40
	OperationOutcomeCodesCode_MSG_UNKNOWN_TYPE               OperationOutcomeCodesCode_Value = 41
	OperationOutcomeCodesCode_MSG_UPDATED                    OperationOutcomeCodesCode_Value = 42
	OperationOutcomeCodesCode_MSG_VERSION_AWARE              OperationOutcomeCodesCode_Value = 43
	OperationOutcomeCodesCode_MSG_VERSION_AWARE_CONFLICT     OperationOutcomeCodesCode_Value = 44
	OperationOutcomeCodesCode_MSG_VERSION_AWARE_URL          OperationOutcomeCodesCode_Value = 45
	OperationOutcomeCodesCode_MSG_WRONG_NS                   OperationOutcomeCodesCode_Value = 46
	OperationOutcomeCodesCode_SEARCH_MULTIPLE                OperationOutcomeCodesCode_Value = 47
	OperationOutcomeCodesCode_UPDATE_MULTIPLE_MATCHES        OperationOutcomeCodesCode_Value = 48
	OperationOutcomeCodesCode_DELETE_MULTIPLE_MATCHES        OperationOutcomeCodesCode_Value = 49
	OperationOutcomeCodesCode_SEARCH_NONE                    OperationOutcomeCodesCode_Value = 50
)

// Enum value maps for OperationOutcomeCodesCode_Value.
var (
	OperationOutcomeCodesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MSG_AUTH_REQUIRED",
		2:  "MSG_BAD_FORMAT",
		3:  "MSG_BAD_SYNTAX",
		4:  "MSG_CANT_PARSE_CONTENT",
		5:  "MSG_CANT_PARSE_ROOT",
		6:  "MSG_CREATED",
		7:  "MSG_DATE_FORMAT",
		8:  "MSG_DELETED",
		9:  "MSG_DELETED_DONE",
		10: "MSG_DELETED_ID",
		11: "MSG_DUPLICATE_ID",
		12: "MSG_ERROR_PARSING",
		13: "MSG_ID_INVALID",
		14: "MSG_ID_TOO_LONG",
		15: "MSG_INVALID_ID",
		16: "MSG_JSON_OBJECT",
		17: "MSG_LOCAL_FAIL",
		18: "MSG_NO_MATCH",
		19: "MSG_NO_EXIST",
		20: "MSG_NO_MODULE",
		21: "MSG_NO_SUMMARY",
		22: "MSG_OP_NOT_ALLOWED",
		23: "MSG_PARAM_CHAINED",
		24: "MSG_PARAM_NO_REPEAT",
		25: "MSG_PARAM_UNKNOWN",
		26: "MSG_PARAM_INVALID",
		27: "MSG_PARAM_MODIFIER_INVALID",
		28: "MSG_RESOURCE_EXAMPLE_PROTECTED",
		29: "MSG_RESOURCE_ID_FAIL",
		30: "MSG_RESOURCE_NOT_ALLOWED",
		31: "MSG_RESOURCE_REQUIRED",
		32: "MSG_RESOURCE_ID_MISMATCH",
		33: "MSG_RESOURCE_ID_MISSING",
		34: "MSG_RESOURCE_TYPE_MISMATCH",
		35: "MSG_SORT_UNKNOWN",
		36: "MSG_TRANSACTION_DUPLICATE_ID",
		37: "MSG_TRANSACTION_MISSING_ID",
		38: "MSG_UNHANDLED_NODE_TYPE",
		39: "MSG_UNKNOWN_CONTENT",
		40: "MSG_UNKNOWN_OPERATION",
		41: "MSG_UNKNOWN_TYPE",
		42: "MSG_UPDATED",
		43: "MSG_VERSION_AWARE",
		44: "MSG_VERSION_AWARE_CONFLICT",
		45: "MSG_VERSION_AWARE_URL",
		46: "MSG_WRONG_NS",
		47: "SEARCH_MULTIPLE",
		48: "UPDATE_MULTIPLE_MATCHES",
		49: "DELETE_MULTIPLE_MATCHES",
		50: "SEARCH_NONE",
	}
	OperationOutcomeCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":          0,
		"MSG_AUTH_REQUIRED":              1,
		"MSG_BAD_FORMAT":                 2,
		"MSG_BAD_SYNTAX":                 3,
		"MSG_CANT_PARSE_CONTENT":         4,
		"MSG_CANT_PARSE_ROOT":            5,
		"MSG_CREATED":                    6,
		"MSG_DATE_FORMAT":                7,
		"MSG_DELETED":                    8,
		"MSG_DELETED_DONE":               9,
		"MSG_DELETED_ID":                 10,
		"MSG_DUPLICATE_ID":               11,
		"MSG_ERROR_PARSING":              12,
		"MSG_ID_INVALID":                 13,
		"MSG_ID_TOO_LONG":                14,
		"MSG_INVALID_ID":                 15,
		"MSG_JSON_OBJECT":                16,
		"MSG_LOCAL_FAIL":                 17,
		"MSG_NO_MATCH":                   18,
		"MSG_NO_EXIST":                   19,
		"MSG_NO_MODULE":                  20,
		"MSG_NO_SUMMARY":                 21,
		"MSG_OP_NOT_ALLOWED":             22,
		"MSG_PARAM_CHAINED":              23,
		"MSG_PARAM_NO_REPEAT":            24,
		"MSG_PARAM_UNKNOWN":              25,
		"MSG_PARAM_INVALID":              26,
		"MSG_PARAM_MODIFIER_INVALID":     27,
		"MSG_RESOURCE_EXAMPLE_PROTECTED": 28,
		"MSG_RESOURCE_ID_FAIL":           29,
		"MSG_RESOURCE_NOT_ALLOWED":       30,
		"MSG_RESOURCE_REQUIRED":          31,
		"MSG_RESOURCE_ID_MISMATCH":       32,
		"MSG_RESOURCE_ID_MISSING":        33,
		"MSG_RESOURCE_TYPE_MISMATCH":     34,
		"MSG_SORT_UNKNOWN":               35,
		"MSG_TRANSACTION_DUPLICATE_ID":   36,
		"MSG_TRANSACTION_MISSING_ID":     37,
		"MSG_UNHANDLED_NODE_TYPE":        38,
		"MSG_UNKNOWN_CONTENT":            39,
		"MSG_UNKNOWN_OPERATION":          40,
		"MSG_UNKNOWN_TYPE":               41,
		"MSG_UPDATED":                    42,
		"MSG_VERSION_AWARE":              43,
		"MSG_VERSION_AWARE_CONFLICT":     44,
		"MSG_VERSION_AWARE_URL":          45,
		"MSG_WRONG_NS":                   46,
		"SEARCH_MULTIPLE":                47,
		"UPDATE_MULTIPLE_MATCHES":        48,
		"DELETE_MULTIPLE_MATCHES":        49,
		"SEARCH_NONE":                    50,
	}
)

func (x OperationOutcomeCodesCode_Value) Enum() *OperationOutcomeCodesCode_Value {
	p := new(OperationOutcomeCodesCode_Value)
	*p = x
	return p
}

func (x OperationOutcomeCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationOutcomeCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[211].Descriptor()
}

func (OperationOutcomeCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[211]
}

func (x OperationOutcomeCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationOutcomeCodesCode_Value.Descriptor instead.
func (OperationOutcomeCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{212, 0}
}

type NarrativeStatusCode_Value int32

const (
	NarrativeStatusCode_INVALID_UNINITIALIZED NarrativeStatusCode_Value = 0
	NarrativeStatusCode_GENERATED             NarrativeStatusCode_Value = 1
	NarrativeStatusCode_EXTENSIONS            NarrativeStatusCode_Value = 2
	NarrativeStatusCode_ADDITIONAL            NarrativeStatusCode_Value = 3
	NarrativeStatusCode_EMPTY                 NarrativeStatusCode_Value = 4
)

// Enum value maps for NarrativeStatusCode_Value.
var (
	NarrativeStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GENERATED",
		2: "EXTENSIONS",
		3: "ADDITIONAL",
		4: "EMPTY",
	}
	NarrativeStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GENERATED":             1,
		"EXTENSIONS":            2,
		"ADDITIONAL":            3,
		"EMPTY":                 4,
	}
)

func (x NarrativeStatusCode_Value) Enum() *NarrativeStatusCode_Value {
	p := new(NarrativeStatusCode_Value)
	*p = x
	return p
}

func (x NarrativeStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NarrativeStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[212].Descriptor()
}

func (NarrativeStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[212]
}

func (x NarrativeStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NarrativeStatusCode_Value.Descriptor instead.
func (NarrativeStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{213, 0}
}

type OperationParameterUseCode_Value int32

const (
	OperationParameterUseCode_INVALID_UNINITIALIZED OperationParameterUseCode_Value = 0
	OperationParameterUseCode_IN                    OperationParameterUseCode_Value = 1
	OperationParameterUseCode_OUT                   OperationParameterUseCode_Value = 2
)

// Enum value maps for OperationParameterUseCode_Value.
var (
	OperationParameterUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN",
		2: "OUT",
	}
	OperationParameterUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN":                    1,
		"OUT":                   2,
	}
)

func (x OperationParameterUseCode_Value) Enum() *OperationParameterUseCode_Value {
	p := new(OperationParameterUseCode_Value)
	*p = x
	return p
}

func (x OperationParameterUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationParameterUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[213].Descriptor()
}

func (OperationParameterUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[213]
}

func (x OperationParameterUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationParameterUseCode_Value.Descriptor instead.
func (OperationParameterUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{214, 0}
}

type OrganizationTypeCode_Value int32

const (
	OrganizationTypeCode_INVALID_UNINITIALIZED OrganizationTypeCode_Value = 0
	OrganizationTypeCode_PROV                  OrganizationTypeCode_Value = 1
	OrganizationTypeCode_DEPT                  OrganizationTypeCode_Value = 2
	OrganizationTypeCode_TEAM                  OrganizationTypeCode_Value = 3
	OrganizationTypeCode_GOVT                  OrganizationTypeCode_Value = 4
	OrganizationTypeCode_INS                   OrganizationTypeCode_Value = 5
	OrganizationTypeCode_EDU                   OrganizationTypeCode_Value = 6
	OrganizationTypeCode_RELI                  OrganizationTypeCode_Value = 7
	OrganizationTypeCode_CRS                   OrganizationTypeCode_Value = 8
	OrganizationTypeCode_CG                    OrganizationTypeCode_Value = 9
	OrganizationTypeCode_BUS                   OrganizationTypeCode_Value = 10
	OrganizationTypeCode_OTHER                 OrganizationTypeCode_Value = 11
)

// Enum value maps for OrganizationTypeCode_Value.
var (
	OrganizationTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROV",
		2:  "DEPT",
		3:  "TEAM",
		4:  "GOVT",
		5:  "INS",
		6:  "EDU",
		7:  "RELI",
		8:  "CRS",
		9:  "CG",
		10: "BUS",
		11: "OTHER",
	}
	OrganizationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROV":                  1,
		"DEPT":                  2,
		"TEAM":                  3,
		"GOVT":                  4,
		"INS":                   5,
		"EDU":                   6,
		"RELI":                  7,
		"CRS":                   8,
		"CG":                    9,
		"BUS":                   10,
		"OTHER":                 11,
	}
)

func (x OrganizationTypeCode_Value) Enum() *OrganizationTypeCode_Value {
	p := new(OrganizationTypeCode_Value)
	*p = x
	return p
}

func (x OrganizationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrganizationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[214].Descriptor()
}

func (OrganizationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[214]
}

func (x OrganizationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrganizationTypeCode_Value.Descriptor instead.
func (OrganizationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{215, 0}
}

type DeviceComponentParameterGroupCode_Value int32

const (
	DeviceComponentParameterGroupCode_INVALID_UNINITIALIZED DeviceComponentParameterGroupCode_Value = 0
	DeviceComponentParameterGroupCode_HAEMODYNAMIC          DeviceComponentParameterGroupCode_Value = 1
	DeviceComponentParameterGroupCode_ECG                   DeviceComponentParameterGroupCode_Value = 2
	DeviceComponentParameterGroupCode_RESPIRATORY           DeviceComponentParameterGroupCode_Value = 3
	DeviceComponentParameterGroupCode_VENTILATION           DeviceComponentParameterGroupCode_Value = 4
	DeviceComponentParameterGroupCode_NEUROLOGICAL          DeviceComponentParameterGroupCode_Value = 5
	DeviceComponentParameterGroupCode_DRUG_DELIVERY         DeviceComponentParameterGroupCode_Value = 6
	DeviceComponentParameterGroupCode_FLUID_CHEMISTRY       DeviceComponentParameterGroupCode_Value = 7
	DeviceComponentParameterGroupCode_BLOOD_CHEMISTRY       DeviceComponentParameterGroupCode_Value = 8
	DeviceComponentParameterGroupCode_MISCELLANEOUS         DeviceComponentParameterGroupCode_Value = 9
)

// Enum value maps for DeviceComponentParameterGroupCode_Value.
var (
	DeviceComponentParameterGroupCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HAEMODYNAMIC",
		2: "ECG",
		3: "RESPIRATORY",
		4: "VENTILATION",
		5: "NEUROLOGICAL",
		6: "DRUG_DELIVERY",
		7: "FLUID_CHEMISTRY",
		8: "BLOOD_CHEMISTRY",
		9: "MISCELLANEOUS",
	}
	DeviceComponentParameterGroupCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HAEMODYNAMIC":          1,
		"ECG":                   2,
		"RESPIRATORY":           3,
		"VENTILATION":           4,
		"NEUROLOGICAL":          5,
		"DRUG_DELIVERY":         6,
		"FLUID_CHEMISTRY":       7,
		"BLOOD_CHEMISTRY":       8,
		"MISCELLANEOUS":         9,
	}
)

func (x DeviceComponentParameterGroupCode_Value) Enum() *DeviceComponentParameterGroupCode_Value {
	p := new(DeviceComponentParameterGroupCode_Value)
	*p = x
	return p
}

func (x DeviceComponentParameterGroupCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceComponentParameterGroupCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[215].Descriptor()
}

func (DeviceComponentParameterGroupCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[215]
}

func (x DeviceComponentParameterGroupCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceComponentParameterGroupCode_Value.Descriptor instead.
func (DeviceComponentParameterGroupCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{216, 0}
}

type ParticipantRequiredCode_Value int32

const (
	ParticipantRequiredCode_INVALID_UNINITIALIZED ParticipantRequiredCode_Value = 0
	ParticipantRequiredCode_REQUIRED              ParticipantRequiredCode_Value = 1
	ParticipantRequiredCode_OPTIONAL              ParticipantRequiredCode_Value = 2
	ParticipantRequiredCode_INFORMATION_ONLY      ParticipantRequiredCode_Value = 3
)

// Enum value maps for ParticipantRequiredCode_Value.
var (
	ParticipantRequiredCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "OPTIONAL",
		3: "INFORMATION_ONLY",
	}
	ParticipantRequiredCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"OPTIONAL":              2,
		"INFORMATION_ONLY":      3,
	}
)

func (x ParticipantRequiredCode_Value) Enum() *ParticipantRequiredCode_Value {
	p := new(ParticipantRequiredCode_Value)
	*p = x
	return p
}

func (x ParticipantRequiredCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantRequiredCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[216].Descriptor()
}

func (ParticipantRequiredCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[216]
}

func (x ParticipantRequiredCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantRequiredCode_Value.Descriptor instead.
func (ParticipantRequiredCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{217, 0}
}

type ParticipationStatusCode_Value int32

const (
	ParticipationStatusCode_INVALID_UNINITIALIZED ParticipationStatusCode_Value = 0
	ParticipationStatusCode_ACCEPTED              ParticipationStatusCode_Value = 1
	ParticipationStatusCode_DECLINED              ParticipationStatusCode_Value = 2
	ParticipationStatusCode_TENTATIVE             ParticipationStatusCode_Value = 3
	ParticipationStatusCode_NEEDS_ACTION          ParticipationStatusCode_Value = 4
)

// Enum value maps for ParticipationStatusCode_Value.
var (
	ParticipationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACCEPTED",
		2: "DECLINED",
		3: "TENTATIVE",
		4: "NEEDS_ACTION",
	}
	ParticipationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACCEPTED":              1,
		"DECLINED":              2,
		"TENTATIVE":             3,
		"NEEDS_ACTION":          4,
	}
)

func (x ParticipationStatusCode_Value) Enum() *ParticipationStatusCode_Value {
	p := new(ParticipationStatusCode_Value)
	*p = x
	return p
}

func (x ParticipationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[217].Descriptor()
}

func (ParticipationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[217]
}

func (x ParticipationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipationStatusCode_Value.Descriptor instead.
func (ParticipationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{218, 0}
}

type PlanDefinitionTypeCode_Value int32

const (
	PlanDefinitionTypeCode_INVALID_UNINITIALIZED PlanDefinitionTypeCode_Value = 0
	PlanDefinitionTypeCode_ORDER_SET             PlanDefinitionTypeCode_Value = 1
	PlanDefinitionTypeCode_PROTOCOL              PlanDefinitionTypeCode_Value = 2
	PlanDefinitionTypeCode_ECA_RULE              PlanDefinitionTypeCode_Value = 3
)

// Enum value maps for PlanDefinitionTypeCode_Value.
var (
	PlanDefinitionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ORDER_SET",
		2: "PROTOCOL",
		3: "ECA_RULE",
	}
	PlanDefinitionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ORDER_SET":             1,
		"PROTOCOL":              2,
		"ECA_RULE":              3,
	}
)

func (x PlanDefinitionTypeCode_Value) Enum() *PlanDefinitionTypeCode_Value {
	p := new(PlanDefinitionTypeCode_Value)
	*p = x
	return p
}

func (x PlanDefinitionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanDefinitionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[218].Descriptor()
}

func (PlanDefinitionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[218]
}

func (x PlanDefinitionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanDefinitionTypeCode_Value.Descriptor instead.
func (PlanDefinitionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{219, 0}
}

type PostalAddressUseTypeCode_Value int32

const (
	PostalAddressUseTypeCode_INVALID_UNINITIALIZED  PostalAddressUseTypeCode_Value = 0
	PostalAddressUseTypeCode_BAD_ADDRESS            PostalAddressUseTypeCode_Value = 1
	PostalAddressUseTypeCode_CONFIDENTIAL_ADDRESS   PostalAddressUseTypeCode_Value = 2
	PostalAddressUseTypeCode_PRIMARY_HOME           PostalAddressUseTypeCode_Value = 3
	PostalAddressUseTypeCode_VACATION_HOME          PostalAddressUseTypeCode_Value = 4
	PostalAddressUseTypeCode_DIRECT                 PostalAddressUseTypeCode_Value = 5
	PostalAddressUseTypeCode_PUBLIC                 PostalAddressUseTypeCode_Value = 6
	PostalAddressUseTypeCode_PHYSICAL_VISIT_ADDRESS PostalAddressUseTypeCode_Value = 7
	PostalAddressUseTypeCode_POSTAL_ADDRESS         PostalAddressUseTypeCode_Value = 8
)

// Enum value maps for PostalAddressUseTypeCode_Value.
var (
	PostalAddressUseTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BAD_ADDRESS",
		2: "CONFIDENTIAL_ADDRESS",
		3: "PRIMARY_HOME",
		4: "VACATION_HOME",
		5: "DIRECT",
		6: "PUBLIC",
		7: "PHYSICAL_VISIT_ADDRESS",
		8: "POSTAL_ADDRESS",
	}
	PostalAddressUseTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"BAD_ADDRESS":            1,
		"CONFIDENTIAL_ADDRESS":   2,
		"PRIMARY_HOME":           3,
		"VACATION_HOME":          4,
		"DIRECT":                 5,
		"PUBLIC":                 6,
		"PHYSICAL_VISIT_ADDRESS": 7,
		"POSTAL_ADDRESS":         8,
	}
)

func (x PostalAddressUseTypeCode_Value) Enum() *PostalAddressUseTypeCode_Value {
	p := new(PostalAddressUseTypeCode_Value)
	*p = x
	return p
}

func (x PostalAddressUseTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostalAddressUseTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[219].Descriptor()
}

func (PostalAddressUseTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[219]
}

func (x PostalAddressUseTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostalAddressUseTypeCode_Value.Descriptor instead.
func (PostalAddressUseTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{220, 0}
}

type PractitionerRoleCode_Value int32

const (
	PractitionerRoleCode_INVALID_UNINITIALIZED PractitionerRoleCode_Value = 0
	PractitionerRoleCode_DOCTOR                PractitionerRoleCode_Value = 1
	PractitionerRoleCode_NURSE                 PractitionerRoleCode_Value = 2
	PractitionerRoleCode_PHARMACIST            PractitionerRoleCode_Value = 3
	PractitionerRoleCode_RESEARCHER            PractitionerRoleCode_Value = 4
	PractitionerRoleCode_TEACHER               PractitionerRoleCode_Value = 5
	PractitionerRoleCode_ICT                   PractitionerRoleCode_Value = 6
)

// Enum value maps for PractitionerRoleCode_Value.
var (
	PractitionerRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DOCTOR",
		2: "NURSE",
		3: "PHARMACIST",
		4: "RESEARCHER",
		5: "TEACHER",
		6: "ICT",
	}
	PractitionerRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCTOR":                1,
		"NURSE":                 2,
		"PHARMACIST":            3,
		"RESEARCHER":            4,
		"TEACHER":               5,
		"ICT":                   6,
	}
)

func (x PractitionerRoleCode_Value) Enum() *PractitionerRoleCode_Value {
	p := new(PractitionerRoleCode_Value)
	*p = x
	return p
}

func (x PractitionerRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PractitionerRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[220].Descriptor()
}

func (PractitionerRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[220]
}

func (x PractitionerRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PractitionerRoleCode_Value.Descriptor instead.
func (PractitionerRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{221, 0}
}

type PractitionerSpecialtyCode_Value int32

const (
	PractitionerSpecialtyCode_INVALID_UNINITIALIZED PractitionerSpecialtyCode_Value = 0
	PractitionerSpecialtyCode_CARDIO                PractitionerSpecialtyCode_Value = 1
	PractitionerSpecialtyCode_DENT                  PractitionerSpecialtyCode_Value = 2
	PractitionerSpecialtyCode_DIETARY               PractitionerSpecialtyCode_Value = 3
	PractitionerSpecialtyCode_MIDW                  PractitionerSpecialtyCode_Value = 4
	PractitionerSpecialtyCode_SYSARCH               PractitionerSpecialtyCode_Value = 5
)

// Enum value maps for PractitionerSpecialtyCode_Value.
var (
	PractitionerSpecialtyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CARDIO",
		2: "DENT",
		3: "DIETARY",
		4: "MIDW",
		5: "SYSARCH",
	}
	PractitionerSpecialtyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CARDIO":                1,
		"DENT":                  2,
		"DIETARY":               3,
		"MIDW":                  4,
		"SYSARCH":               5,
	}
)

func (x PractitionerSpecialtyCode_Value) Enum() *PractitionerSpecialtyCode_Value {
	p := new(PractitionerSpecialtyCode_Value)
	*p = x
	return p
}

func (x PractitionerSpecialtyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PractitionerSpecialtyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[221].Descriptor()
}

func (PractitionerSpecialtyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[221]
}

func (x PractitionerSpecialtyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PractitionerSpecialtyCode_Value.Descriptor instead.
func (PractitionerSpecialtyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{222, 0}
}

type ProcedureProgressStatusCodesCode_Value int32

const (
	ProcedureProgressStatusCodesCode_INVALID_UNINITIALIZED ProcedureProgressStatusCodesCode_Value = 0
	ProcedureProgressStatusCodesCode_IN_OPERATING_ROOM     ProcedureProgressStatusCodesCode_Value = 1
	ProcedureProgressStatusCodesCode_PREPARED              ProcedureProgressStatusCodesCode_Value = 2
	ProcedureProgressStatusCodesCode_ANESTHESIA_INDUCED    ProcedureProgressStatusCodesCode_Value = 3
	ProcedureProgressStatusCodesCode_OPEN_INCISION         ProcedureProgressStatusCodesCode_Value = 4
	ProcedureProgressStatusCodesCode_CLOSED_INCISION       ProcedureProgressStatusCodesCode_Value = 5
	ProcedureProgressStatusCodesCode_IN_RECOVERY_ROOM      ProcedureProgressStatusCodesCode_Value = 6
)

// Enum value maps for ProcedureProgressStatusCodesCode_Value.
var (
	ProcedureProgressStatusCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_OPERATING_ROOM",
		2: "PREPARED",
		3: "ANESTHESIA_INDUCED",
		4: "OPEN_INCISION",
		5: "CLOSED_INCISION",
		6: "IN_RECOVERY_ROOM",
	}
	ProcedureProgressStatusCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_OPERATING_ROOM":     1,
		"PREPARED":              2,
		"ANESTHESIA_INDUCED":    3,
		"OPEN_INCISION":         4,
		"CLOSED_INCISION":       5,
		"IN_RECOVERY_ROOM":      6,
	}
)

func (x ProcedureProgressStatusCodesCode_Value) Enum() *ProcedureProgressStatusCodesCode_Value {
	p := new(ProcedureProgressStatusCodesCode_Value)
	*p = x
	return p
}

func (x ProcedureProgressStatusCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureProgressStatusCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[222].Descriptor()
}

func (ProcedureProgressStatusCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[222]
}

func (x ProcedureProgressStatusCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcedureProgressStatusCodesCode_Value.Descriptor instead.
func (ProcedureProgressStatusCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{223, 0}
}

type ProvenanceEntityRoleCode_Value int32

const (
	ProvenanceEntityRoleCode_INVALID_UNINITIALIZED ProvenanceEntityRoleCode_Value = 0
	ProvenanceEntityRoleCode_DERIVATION            ProvenanceEntityRoleCode_Value = 1
	ProvenanceEntityRoleCode_REVISION              ProvenanceEntityRoleCode_Value = 2
	ProvenanceEntityRoleCode_QUOTATION             ProvenanceEntityRoleCode_Value = 3
	ProvenanceEntityRoleCode_SOURCE                ProvenanceEntityRoleCode_Value = 4
	ProvenanceEntityRoleCode_REMOVAL               ProvenanceEntityRoleCode_Value = 5
)

// Enum value maps for ProvenanceEntityRoleCode_Value.
var (
	ProvenanceEntityRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DERIVATION",
		2: "REVISION",
		3: "QUOTATION",
		4: "SOURCE",
		5: "REMOVAL",
	}
	ProvenanceEntityRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DERIVATION":            1,
		"REVISION":              2,
		"QUOTATION":             3,
		"SOURCE":                4,
		"REMOVAL":               5,
	}
)

func (x ProvenanceEntityRoleCode_Value) Enum() *ProvenanceEntityRoleCode_Value {
	p := new(ProvenanceEntityRoleCode_Value)
	*p = x
	return p
}

func (x ProvenanceEntityRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvenanceEntityRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[223].Descriptor()
}

func (ProvenanceEntityRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[223]
}

func (x ProvenanceEntityRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvenanceEntityRoleCode_Value.Descriptor instead.
func (ProvenanceEntityRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{224, 0}
}

type PublicationStatusCode_Value int32

const (
	PublicationStatusCode_INVALID_UNINITIALIZED PublicationStatusCode_Value = 0
	PublicationStatusCode_DRAFT                 PublicationStatusCode_Value = 1
	PublicationStatusCode_ACTIVE                PublicationStatusCode_Value = 2
	PublicationStatusCode_RETIRED               PublicationStatusCode_Value = 3
	PublicationStatusCode_UNKNOWN               PublicationStatusCode_Value = 4
)

// Enum value maps for PublicationStatusCode_Value.
var (
	PublicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "RETIRED",
		4: "UNKNOWN",
	}
	PublicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"RETIRED":               3,
		"UNKNOWN":               4,
	}
)

func (x PublicationStatusCode_Value) Enum() *PublicationStatusCode_Value {
	p := new(PublicationStatusCode_Value)
	*p = x
	return p
}

func (x PublicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[224].Descriptor()
}

func (PublicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[224]
}

func (x PublicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationStatusCode_Value.Descriptor instead.
func (PublicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{225, 0}
}

type QualityTypeCode_Value int32

const (
	QualityTypeCode_INVALID_UNINITIALIZED QualityTypeCode_Value = 0
	QualityTypeCode_INDEL                 QualityTypeCode_Value = 1
	QualityTypeCode_SNP                   QualityTypeCode_Value = 2
	QualityTypeCode_UNKNOWN               QualityTypeCode_Value = 3
)

// Enum value maps for QualityTypeCode_Value.
var (
	QualityTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INDEL",
		2: "SNP",
		3: "UNKNOWN",
	}
	QualityTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INDEL":                 1,
		"SNP":                   2,
		"UNKNOWN":               3,
	}
)

func (x QualityTypeCode_Value) Enum() *QualityTypeCode_Value {
	p := new(QualityTypeCode_Value)
	*p = x
	return p
}

func (x QualityTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualityTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[225].Descriptor()
}

func (QualityTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[225]
}

func (x QualityTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualityTypeCode_Value.Descriptor instead.
func (QualityTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{226, 0}
}

type MaxOccursCode_Value int32

const (
	MaxOccursCode_INVALID_UNINITIALIZED MaxOccursCode_Value = 0
	MaxOccursCode_MAX                   MaxOccursCode_Value = 1
)

// Enum value maps for MaxOccursCode_Value.
var (
	MaxOccursCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MAX",
	}
	MaxOccursCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MAX":                   1,
	}
)

func (x MaxOccursCode_Value) Enum() *MaxOccursCode_Value {
	p := new(MaxOccursCode_Value)
	*p = x
	return p
}

func (x MaxOccursCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaxOccursCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[226].Descriptor()
}

func (MaxOccursCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[226]
}

func (x MaxOccursCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaxOccursCode_Value.Descriptor instead.
func (MaxOccursCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{227, 0}
}

type QuestionnaireResponseStatusCode_Value int32

const (
	QuestionnaireResponseStatusCode_INVALID_UNINITIALIZED QuestionnaireResponseStatusCode_Value = 0
	QuestionnaireResponseStatusCode_IN_PROGRESS           QuestionnaireResponseStatusCode_Value = 1
	QuestionnaireResponseStatusCode_COMPLETED             QuestionnaireResponseStatusCode_Value = 2
	QuestionnaireResponseStatusCode_AMENDED               QuestionnaireResponseStatusCode_Value = 3
	QuestionnaireResponseStatusCode_ENTERED_IN_ERROR      QuestionnaireResponseStatusCode_Value = 4
	QuestionnaireResponseStatusCode_STOPPED               QuestionnaireResponseStatusCode_Value = 5
)

// Enum value maps for QuestionnaireResponseStatusCode_Value.
var (
	QuestionnaireResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "AMENDED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
	}
	QuestionnaireResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"AMENDED":               3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
	}
)

func (x QuestionnaireResponseStatusCode_Value) Enum() *QuestionnaireResponseStatusCode_Value {
	p := new(QuestionnaireResponseStatusCode_Value)
	*p = x
	return p
}

func (x QuestionnaireResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[227].Descriptor()
}

func (QuestionnaireResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[227]
}

func (x QuestionnaireResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode_Value.Descriptor instead.
func (QuestionnaireResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{228, 0}
}

type QuestionnaireTextCategoriesCode_Value int32

const (
	QuestionnaireTextCategoriesCode_INVALID_UNINITIALIZED QuestionnaireTextCategoriesCode_Value = 0
	QuestionnaireTextCategoriesCode_INSTRUCTIONS          QuestionnaireTextCategoriesCode_Value = 1
	QuestionnaireTextCategoriesCode_SECURITY              QuestionnaireTextCategoriesCode_Value = 2
)

// Enum value maps for QuestionnaireTextCategoriesCode_Value.
var (
	QuestionnaireTextCategoriesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTRUCTIONS",
		2: "SECURITY",
	}
	QuestionnaireTextCategoriesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTRUCTIONS":          1,
		"SECURITY":              2,
	}
)

func (x QuestionnaireTextCategoriesCode_Value) Enum() *QuestionnaireTextCategoriesCode_Value {
	p := new(QuestionnaireTextCategoriesCode_Value)
	*p = x
	return p
}

func (x QuestionnaireTextCategoriesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireTextCategoriesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[228].Descriptor()
}

func (QuestionnaireTextCategoriesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[228]
}

func (x QuestionnaireTextCategoriesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireTextCategoriesCode_Value.Descriptor instead.
func (QuestionnaireTextCategoriesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{229, 0}
}

type QuestionnaireItemUIControlCodesCode_Value int32

const (
	QuestionnaireItemUIControlCodesCode_INVALID_UNINITIALIZED QuestionnaireItemUIControlCodesCode_Value = 0
	QuestionnaireItemUIControlCodesCode_LIST                  QuestionnaireItemUIControlCodesCode_Value = 1
	QuestionnaireItemUIControlCodesCode_TABLE                 QuestionnaireItemUIControlCodesCode_Value = 2
	QuestionnaireItemUIControlCodesCode_HEADER                QuestionnaireItemUIControlCodesCode_Value = 3
	QuestionnaireItemUIControlCodesCode_FOOTER                QuestionnaireItemUIControlCodesCode_Value = 4
	QuestionnaireItemUIControlCodesCode_INLINE                QuestionnaireItemUIControlCodesCode_Value = 5
	QuestionnaireItemUIControlCodesCode_PROMPT                QuestionnaireItemUIControlCodesCode_Value = 6
	QuestionnaireItemUIControlCodesCode_UNIT                  QuestionnaireItemUIControlCodesCode_Value = 7
	QuestionnaireItemUIControlCodesCode_LOWER                 QuestionnaireItemUIControlCodesCode_Value = 8
	QuestionnaireItemUIControlCodesCode_UPPER                 QuestionnaireItemUIControlCodesCode_Value = 9
	QuestionnaireItemUIControlCodesCode_FLYOVER               QuestionnaireItemUIControlCodesCode_Value = 10
	QuestionnaireItemUIControlCodesCode_HELP                  QuestionnaireItemUIControlCodesCode_Value = 11
	QuestionnaireItemUIControlCodesCode_AUTOCOMPLETE          QuestionnaireItemUIControlCodesCode_Value = 12
	QuestionnaireItemUIControlCodesCode_DROP_DOWN             QuestionnaireItemUIControlCodesCode_Value = 13
	QuestionnaireItemUIControlCodesCode_CHECK_BOX             QuestionnaireItemUIControlCodesCode_Value = 14
	QuestionnaireItemUIControlCodesCode_LOOKUP                QuestionnaireItemUIControlCodesCode_Value = 15
	QuestionnaireItemUIControlCodesCode_RADIO_BUTTON          QuestionnaireItemUIControlCodesCode_Value = 16
	QuestionnaireItemUIControlCodesCode_SLIDER                QuestionnaireItemUIControlCodesCode_Value = 17
	QuestionnaireItemUIControlCodesCode_SPINNER               QuestionnaireItemUIControlCodesCode_Value = 18
	QuestionnaireItemUIControlCodesCode_TEXT_BOX              QuestionnaireItemUIControlCodesCode_Value = 19
)

// Enum value maps for QuestionnaireItemUIControlCodesCode_Value.
var (
	QuestionnaireItemUIControlCodesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "LIST",
		2:  "TABLE",
		3:  "HEADER",
		4:  "FOOTER",
		5:  "INLINE",
		6:  "PROMPT",
		7:  "UNIT",
		8:  "LOWER",
		9:  "UPPER",
		10: "FLYOVER",
		11: "HELP",
		12: "AUTOCOMPLETE",
		13: "DROP_DOWN",
		14: "CHECK_BOX",
		15: "LOOKUP",
		16: "RADIO_BUTTON",
		17: "SLIDER",
		18: "SPINNER",
		19: "TEXT_BOX",
	}
	QuestionnaireItemUIControlCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LIST":                  1,
		"TABLE":                 2,
		"HEADER":                3,
		"FOOTER":                4,
		"INLINE":                5,
		"PROMPT":                6,
		"UNIT":                  7,
		"LOWER":                 8,
		"UPPER":                 9,
		"FLYOVER":               10,
		"HELP":                  11,
		"AUTOCOMPLETE":          12,
		"DROP_DOWN":             13,
		"CHECK_BOX":             14,
		"LOOKUP":                15,
		"RADIO_BUTTON":          16,
		"SLIDER":                17,
		"SPINNER":               18,
		"TEXT_BOX":              19,
	}
)

func (x QuestionnaireItemUIControlCodesCode_Value) Enum() *QuestionnaireItemUIControlCodesCode_Value {
	p := new(QuestionnaireItemUIControlCodesCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemUIControlCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemUIControlCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[229].Descriptor()
}

func (QuestionnaireItemUIControlCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[229]
}

func (x QuestionnaireItemUIControlCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemUIControlCodesCode_Value.Descriptor instead.
func (QuestionnaireItemUIControlCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{230, 0}
}

type QuestionnaireItemUsageModeCode_Value int32

const (
	QuestionnaireItemUsageModeCode_INVALID_UNINITIALIZED     QuestionnaireItemUsageModeCode_Value = 0
	QuestionnaireItemUsageModeCode_CAPTURE_DISPLAY           QuestionnaireItemUsageModeCode_Value = 1
	QuestionnaireItemUsageModeCode_CAPTURE                   QuestionnaireItemUsageModeCode_Value = 2
	QuestionnaireItemUsageModeCode_DISPLAY                   QuestionnaireItemUsageModeCode_Value = 3
	QuestionnaireItemUsageModeCode_DISPLAY_NON_EMPTY         QuestionnaireItemUsageModeCode_Value = 4
	QuestionnaireItemUsageModeCode_CAPTURE_DISPLAY_NON_EMPTY QuestionnaireItemUsageModeCode_Value = 5
)

// Enum value maps for QuestionnaireItemUsageModeCode_Value.
var (
	QuestionnaireItemUsageModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CAPTURE_DISPLAY",
		2: "CAPTURE",
		3: "DISPLAY",
		4: "DISPLAY_NON_EMPTY",
		5: "CAPTURE_DISPLAY_NON_EMPTY",
	}
	QuestionnaireItemUsageModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":     0,
		"CAPTURE_DISPLAY":           1,
		"CAPTURE":                   2,
		"DISPLAY":                   3,
		"DISPLAY_NON_EMPTY":         4,
		"CAPTURE_DISPLAY_NON_EMPTY": 5,
	}
)

func (x QuestionnaireItemUsageModeCode_Value) Enum() *QuestionnaireItemUsageModeCode_Value {
	p := new(QuestionnaireItemUsageModeCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemUsageModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemUsageModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[230].Descriptor()
}

func (QuestionnaireItemUsageModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[230]
}

func (x QuestionnaireItemUsageModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemUsageModeCode_Value.Descriptor instead.
func (QuestionnaireItemUsageModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{231, 0}
}

type AllergyIntoleranceCertaintyCode_Value int32

const (
	AllergyIntoleranceCertaintyCode_INVALID_UNINITIALIZED AllergyIntoleranceCertaintyCode_Value = 0
	AllergyIntoleranceCertaintyCode_UNLIKELY              AllergyIntoleranceCertaintyCode_Value = 1
	AllergyIntoleranceCertaintyCode_LIKELY                AllergyIntoleranceCertaintyCode_Value = 2
	AllergyIntoleranceCertaintyCode_CONFIRMED             AllergyIntoleranceCertaintyCode_Value = 3
	AllergyIntoleranceCertaintyCode_UNKNOWN               AllergyIntoleranceCertaintyCode_Value = 4
)

// Enum value maps for AllergyIntoleranceCertaintyCode_Value.
var (
	AllergyIntoleranceCertaintyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNLIKELY",
		2: "LIKELY",
		3: "CONFIRMED",
		4: "UNKNOWN",
	}
	AllergyIntoleranceCertaintyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNLIKELY":              1,
		"LIKELY":                2,
		"CONFIRMED":             3,
		"UNKNOWN":               4,
	}
)

func (x AllergyIntoleranceCertaintyCode_Value) Enum() *AllergyIntoleranceCertaintyCode_Value {
	p := new(AllergyIntoleranceCertaintyCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCertaintyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCertaintyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[231].Descriptor()
}

func (AllergyIntoleranceCertaintyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[231]
}

func (x AllergyIntoleranceCertaintyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCertaintyCode_Value.Descriptor instead.
func (AllergyIntoleranceCertaintyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{232, 0}
}

type AllergyIntoleranceSeverityCode_Value int32

const (
	AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED AllergyIntoleranceSeverityCode_Value = 0
	AllergyIntoleranceSeverityCode_MILD                  AllergyIntoleranceSeverityCode_Value = 1
	AllergyIntoleranceSeverityCode_MODERATE              AllergyIntoleranceSeverityCode_Value = 2
	AllergyIntoleranceSeverityCode_SEVERE                AllergyIntoleranceSeverityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceSeverityCode_Value.
var (
	AllergyIntoleranceSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MILD",
		2: "MODERATE",
		3: "SEVERE",
	}
	AllergyIntoleranceSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MILD":                  1,
		"MODERATE":              2,
		"SEVERE":                3,
	}
)

func (x AllergyIntoleranceSeverityCode_Value) Enum() *AllergyIntoleranceSeverityCode_Value {
	p := new(AllergyIntoleranceSeverityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[232].Descriptor()
}

func (AllergyIntoleranceSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[232]
}

func (x AllergyIntoleranceSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode_Value.Descriptor instead.
func (AllergyIntoleranceSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{233, 0}
}

type ReasonMedicationGivenCodesCode_Value int32

const (
	ReasonMedicationGivenCodesCode_INVALID_UNINITIALIZED ReasonMedicationGivenCodesCode_Value = 0
	ReasonMedicationGivenCodesCode_A                     ReasonMedicationGivenCodesCode_Value = 1
	ReasonMedicationGivenCodesCode_B                     ReasonMedicationGivenCodesCode_Value = 2
	ReasonMedicationGivenCodesCode_C                     ReasonMedicationGivenCodesCode_Value = 3
)

// Enum value maps for ReasonMedicationGivenCodesCode_Value.
var (
	ReasonMedicationGivenCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "A",
		2: "B",
		3: "C",
	}
	ReasonMedicationGivenCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"A":                     1,
		"B":                     2,
		"C":                     3,
	}
)

func (x ReasonMedicationGivenCodesCode_Value) Enum() *ReasonMedicationGivenCodesCode_Value {
	p := new(ReasonMedicationGivenCodesCode_Value)
	*p = x
	return p
}

func (x ReasonMedicationGivenCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReasonMedicationGivenCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[233].Descriptor()
}

func (ReasonMedicationGivenCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[233]
}

func (x ReasonMedicationGivenCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReasonMedicationGivenCodesCode_Value.Descriptor instead.
func (ReasonMedicationGivenCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{234, 0}
}

type ReferenceHandlingPolicyCode_Value int32

const (
	ReferenceHandlingPolicyCode_INVALID_UNINITIALIZED ReferenceHandlingPolicyCode_Value = 0
	ReferenceHandlingPolicyCode_LITERAL               ReferenceHandlingPolicyCode_Value = 1
	ReferenceHandlingPolicyCode_LOGICAL               ReferenceHandlingPolicyCode_Value = 2
	ReferenceHandlingPolicyCode_RESOLVES              ReferenceHandlingPolicyCode_Value = 3
	ReferenceHandlingPolicyCode_ENFORCED              ReferenceHandlingPolicyCode_Value = 4
	ReferenceHandlingPolicyCode_LOCAL                 ReferenceHandlingPolicyCode_Value = 5
)

// Enum value maps for ReferenceHandlingPolicyCode_Value.
var (
	ReferenceHandlingPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LITERAL",
		2: "LOGICAL",
		3: "RESOLVES",
		4: "ENFORCED",
		5: "LOCAL",
	}
	ReferenceHandlingPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LITERAL":               1,
		"LOGICAL":               2,
		"RESOLVES":              3,
		"ENFORCED":              4,
		"LOCAL":                 5,
	}
)

func (x ReferenceHandlingPolicyCode_Value) Enum() *ReferenceHandlingPolicyCode_Value {
	p := new(ReferenceHandlingPolicyCode_Value)
	*p = x
	return p
}

func (x ReferenceHandlingPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceHandlingPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[234].Descriptor()
}

func (ReferenceHandlingPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[234]
}

func (x ReferenceHandlingPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceHandlingPolicyCode_Value.Descriptor instead.
func (ReferenceHandlingPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{235, 0}
}

type RelatedArtifactTypeCode_Value int32

const (
	RelatedArtifactTypeCode_INVALID_UNINITIALIZED RelatedArtifactTypeCode_Value = 0
	RelatedArtifactTypeCode_DOCUMENTATION         RelatedArtifactTypeCode_Value = 1
	RelatedArtifactTypeCode_JUSTIFICATION         RelatedArtifactTypeCode_Value = 2
	RelatedArtifactTypeCode_CITATION              RelatedArtifactTypeCode_Value = 3
	RelatedArtifactTypeCode_PREDECESSOR           RelatedArtifactTypeCode_Value = 4
	RelatedArtifactTypeCode_SUCCESSOR             RelatedArtifactTypeCode_Value = 5
	RelatedArtifactTypeCode_DERIVED_FROM          RelatedArtifactTypeCode_Value = 6
	RelatedArtifactTypeCode_DEPENDS_ON            RelatedArtifactTypeCode_Value = 7
	RelatedArtifactTypeCode_COMPOSED_OF           RelatedArtifactTypeCode_Value = 8
)

// Enum value maps for RelatedArtifactTypeCode_Value.
var (
	RelatedArtifactTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DOCUMENTATION",
		2: "JUSTIFICATION",
		3: "CITATION",
		4: "PREDECESSOR",
		5: "SUCCESSOR",
		6: "DERIVED_FROM",
		7: "DEPENDS_ON",
		8: "COMPOSED_OF",
	}
	RelatedArtifactTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCUMENTATION":         1,
		"JUSTIFICATION":         2,
		"CITATION":              3,
		"PREDECESSOR":           4,
		"SUCCESSOR":             5,
		"DERIVED_FROM":          6,
		"DEPENDS_ON":            7,
		"COMPOSED_OF":           8,
	}
)

func (x RelatedArtifactTypeCode_Value) Enum() *RelatedArtifactTypeCode_Value {
	p := new(RelatedArtifactTypeCode_Value)
	*p = x
	return p
}

func (x RelatedArtifactTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelatedArtifactTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[235].Descriptor()
}

func (RelatedArtifactTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[235]
}

func (x RelatedArtifactTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelatedArtifactTypeCode_Value.Descriptor instead.
func (RelatedArtifactTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{236, 0}
}

type ObservationReferenceRangeMeaningCodesCode_Value int32

const (
	ObservationReferenceRangeMeaningCodesCode_INVALID_UNINITIALIZED ObservationReferenceRangeMeaningCodesCode_Value = 0
	ObservationReferenceRangeMeaningCodesCode_NORMAL                ObservationReferenceRangeMeaningCodesCode_Value = 1
	ObservationReferenceRangeMeaningCodesCode_RECOMMENDED           ObservationReferenceRangeMeaningCodesCode_Value = 2
	ObservationReferenceRangeMeaningCodesCode_TREATMENT             ObservationReferenceRangeMeaningCodesCode_Value = 3
	ObservationReferenceRangeMeaningCodesCode_THERAPEUTIC           ObservationReferenceRangeMeaningCodesCode_Value = 4
	ObservationReferenceRangeMeaningCodesCode_PRE                   ObservationReferenceRangeMeaningCodesCode_Value = 5
	ObservationReferenceRangeMeaningCodesCode_POST                  ObservationReferenceRangeMeaningCodesCode_Value = 6
	ObservationReferenceRangeMeaningCodesCode_PRE_PUBERTY           ObservationReferenceRangeMeaningCodesCode_Value = 7
	ObservationReferenceRangeMeaningCodesCode_FOLLICULAR            ObservationReferenceRangeMeaningCodesCode_Value = 8
	ObservationReferenceRangeMeaningCodesCode_MIDCYCLE              ObservationReferenceRangeMeaningCodesCode_Value = 9
	ObservationReferenceRangeMeaningCodesCode_LUTEAL                ObservationReferenceRangeMeaningCodesCode_Value = 10
	ObservationReferenceRangeMeaningCodesCode_POSTMEOPAUSAL         ObservationReferenceRangeMeaningCodesCode_Value = 11
)

// Enum value maps for ObservationReferenceRangeMeaningCodesCode_Value.
var (
	ObservationReferenceRangeMeaningCodesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "NORMAL",
		2:  "RECOMMENDED",
		3:  "TREATMENT",
		4:  "THERAPEUTIC",
		5:  "PRE",
		6:  "POST",
		7:  "PRE_PUBERTY",
		8:  "FOLLICULAR",
		9:  "MIDCYCLE",
		10: "LUTEAL",
		11: "POSTMEOPAUSAL",
	}
	ObservationReferenceRangeMeaningCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NORMAL":                1,
		"RECOMMENDED":           2,
		"TREATMENT":             3,
		"THERAPEUTIC":           4,
		"PRE":                   5,
		"POST":                  6,
		"PRE_PUBERTY":           7,
		"FOLLICULAR":            8,
		"MIDCYCLE":              9,
		"LUTEAL":                10,
		"POSTMEOPAUSAL":         11,
	}
)

func (x ObservationReferenceRangeMeaningCodesCode_Value) Enum() *ObservationReferenceRangeMeaningCodesCode_Value {
	p := new(ObservationReferenceRangeMeaningCodesCode_Value)
	*p = x
	return p
}

func (x ObservationReferenceRangeMeaningCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationReferenceRangeMeaningCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[236].Descriptor()
}

func (ObservationReferenceRangeMeaningCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[236]
}

func (x ObservationReferenceRangeMeaningCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationReferenceRangeMeaningCodesCode_Value.Descriptor instead.
func (ObservationReferenceRangeMeaningCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{237, 0}
}

type TestReportActionResultCode_Value int32

const (
	TestReportActionResultCode_INVALID_UNINITIALIZED TestReportActionResultCode_Value = 0
	TestReportActionResultCode_PASS                  TestReportActionResultCode_Value = 1
	TestReportActionResultCode_SKIP                  TestReportActionResultCode_Value = 2
	TestReportActionResultCode_FAIL                  TestReportActionResultCode_Value = 3
	TestReportActionResultCode_WARNING               TestReportActionResultCode_Value = 4
	TestReportActionResultCode_ERROR                 TestReportActionResultCode_Value = 5
)

// Enum value maps for TestReportActionResultCode_Value.
var (
	TestReportActionResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PASS",
		2: "SKIP",
		3: "FAIL",
		4: "WARNING",
		5: "ERROR",
	}
	TestReportActionResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PASS":                  1,
		"SKIP":                  2,
		"FAIL":                  3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x TestReportActionResultCode_Value) Enum() *TestReportActionResultCode_Value {
	p := new(TestReportActionResultCode_Value)
	*p = x
	return p
}

func (x TestReportActionResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportActionResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[237].Descriptor()
}

func (TestReportActionResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[237]
}

func (x TestReportActionResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportActionResultCode_Value.Descriptor instead.
func (TestReportActionResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{238, 0}
}

type TestReportParticipantTypeCode_Value int32

const (
	TestReportParticipantTypeCode_INVALID_UNINITIALIZED TestReportParticipantTypeCode_Value = 0
	TestReportParticipantTypeCode_TEST_ENGINE           TestReportParticipantTypeCode_Value = 1
	TestReportParticipantTypeCode_CLIENT                TestReportParticipantTypeCode_Value = 2
	TestReportParticipantTypeCode_SERVER                TestReportParticipantTypeCode_Value = 3
)

// Enum value maps for TestReportParticipantTypeCode_Value.
var (
	TestReportParticipantTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TEST_ENGINE",
		2: "CLIENT",
		3: "SERVER",
	}
	TestReportParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TEST_ENGINE":           1,
		"CLIENT":                2,
		"SERVER":                3,
	}
)

func (x TestReportParticipantTypeCode_Value) Enum() *TestReportParticipantTypeCode_Value {
	p := new(TestReportParticipantTypeCode_Value)
	*p = x
	return p
}

func (x TestReportParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[238].Descriptor()
}

func (TestReportParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[238]
}

func (x TestReportParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportParticipantTypeCode_Value.Descriptor instead.
func (TestReportParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{239, 0}
}

type TestReportResultCode_Value int32

const (
	TestReportResultCode_INVALID_UNINITIALIZED TestReportResultCode_Value = 0
	TestReportResultCode_PASS                  TestReportResultCode_Value = 1
	TestReportResultCode_FAIL                  TestReportResultCode_Value = 2
	TestReportResultCode_PENDING               TestReportResultCode_Value = 3
)

// Enum value maps for TestReportResultCode_Value.
var (
	TestReportResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PASS",
		2: "FAIL",
		3: "PENDING",
	}
	TestReportResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PASS":                  1,
		"FAIL":                  2,
		"PENDING":               3,
	}
)

func (x TestReportResultCode_Value) Enum() *TestReportResultCode_Value {
	p := new(TestReportResultCode_Value)
	*p = x
	return p
}

func (x TestReportResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[239].Descriptor()
}

func (TestReportResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[239]
}

func (x TestReportResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportResultCode_Value.Descriptor instead.
func (TestReportResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{240, 0}
}

type TestReportStatusCode_Value int32

const (
	TestReportStatusCode_INVALID_UNINITIALIZED TestReportStatusCode_Value = 0
	TestReportStatusCode_COMPLETED             TestReportStatusCode_Value = 1
	TestReportStatusCode_IN_PROGRESS           TestReportStatusCode_Value = 2
	TestReportStatusCode_WAITING               TestReportStatusCode_Value = 3
	TestReportStatusCode_STOPPED               TestReportStatusCode_Value = 4
	TestReportStatusCode_ENTERED_IN_ERROR      TestReportStatusCode_Value = 5
)

// Enum value maps for TestReportStatusCode_Value.
var (
	TestReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETED",
		2: "IN_PROGRESS",
		3: "WAITING",
		4: "STOPPED",
		5: "ENTERED_IN_ERROR",
	}
	TestReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETED":             1,
		"IN_PROGRESS":           2,
		"WAITING":               3,
		"STOPPED":               4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x TestReportStatusCode_Value) Enum() *TestReportStatusCode_Value {
	p := new(TestReportStatusCode_Value)
	*p = x
	return p
}

func (x TestReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[240].Descriptor()
}

func (TestReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[240]
}

func (x TestReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportStatusCode_Value.Descriptor instead.
func (TestReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{241, 0}
}

type RepositoryTypeCode_Value int32

const (
	RepositoryTypeCode_INVALID_UNINITIALIZED RepositoryTypeCode_Value = 0
	RepositoryTypeCode_DIRECTLINK            RepositoryTypeCode_Value = 1
	RepositoryTypeCode_OPENAPI               RepositoryTypeCode_Value = 2
	RepositoryTypeCode_LOGIN                 RepositoryTypeCode_Value = 3
	RepositoryTypeCode_OAUTH                 RepositoryTypeCode_Value = 4
	RepositoryTypeCode_OTHER                 RepositoryTypeCode_Value = 5
)

// Enum value maps for RepositoryTypeCode_Value.
var (
	RepositoryTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DIRECTLINK",
		2: "OPENAPI",
		3: "LOGIN",
		4: "OAUTH",
		5: "OTHER",
	}
	RepositoryTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DIRECTLINK":            1,
		"OPENAPI":               2,
		"LOGIN":                 3,
		"OAUTH":                 4,
		"OTHER":                 5,
	}
)

func (x RepositoryTypeCode_Value) Enum() *RepositoryTypeCode_Value {
	p := new(RepositoryTypeCode_Value)
	*p = x
	return p
}

func (x RepositoryTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[241].Descriptor()
}

func (RepositoryTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[241]
}

func (x RepositoryTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryTypeCode_Value.Descriptor instead.
func (RepositoryTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{242, 0}
}

type RequestIntentCode_Value int32

const (
	RequestIntentCode_INVALID_UNINITIALIZED RequestIntentCode_Value = 0
	RequestIntentCode_PROPOSAL              RequestIntentCode_Value = 1
	RequestIntentCode_PLAN                  RequestIntentCode_Value = 2
	RequestIntentCode_ORDER                 RequestIntentCode_Value = 3
	RequestIntentCode_ORIGINAL_ORDER        RequestIntentCode_Value = 4
	RequestIntentCode_REFLEX_ORDER          RequestIntentCode_Value = 5
	RequestIntentCode_FILLER_ORDER          RequestIntentCode_Value = 6
	RequestIntentCode_INSTANCE_ORDER        RequestIntentCode_Value = 7
	RequestIntentCode_OPTION                RequestIntentCode_Value = 8
)

// Enum value maps for RequestIntentCode_Value.
var (
	RequestIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "ORDER",
		4: "ORIGINAL_ORDER",
		5: "REFLEX_ORDER",
		6: "FILLER_ORDER",
		7: "INSTANCE_ORDER",
		8: "OPTION",
	}
	RequestIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"ORDER":                 3,
		"ORIGINAL_ORDER":        4,
		"REFLEX_ORDER":          5,
		"FILLER_ORDER":          6,
		"INSTANCE_ORDER":        7,
		"OPTION":                8,
	}
)

func (x RequestIntentCode_Value) Enum() *RequestIntentCode_Value {
	p := new(RequestIntentCode_Value)
	*p = x
	return p
}

func (x RequestIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[242].Descriptor()
}

func (RequestIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[242]
}

func (x RequestIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestIntentCode_Value.Descriptor instead.
func (RequestIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{243, 0}
}

type RequestPriorityCode_Value int32

const (
	RequestPriorityCode_INVALID_UNINITIALIZED RequestPriorityCode_Value = 0
	RequestPriorityCode_ROUTINE               RequestPriorityCode_Value = 1
	RequestPriorityCode_URGENT                RequestPriorityCode_Value = 2
	RequestPriorityCode_ASAP                  RequestPriorityCode_Value = 3
	RequestPriorityCode_STAT                  RequestPriorityCode_Value = 4
)

// Enum value maps for RequestPriorityCode_Value.
var (
	RequestPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "ASAP",
		4: "STAT",
	}
	RequestPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"ASAP":                  3,
		"STAT":                  4,
	}
)

func (x RequestPriorityCode_Value) Enum() *RequestPriorityCode_Value {
	p := new(RequestPriorityCode_Value)
	*p = x
	return p
}

func (x RequestPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[243].Descriptor()
}

func (RequestPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[243]
}

func (x RequestPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestPriorityCode_Value.Descriptor instead.
func (RequestPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{244, 0}
}

type RequestStatusCode_Value int32

const (
	RequestStatusCode_INVALID_UNINITIALIZED RequestStatusCode_Value = 0
	RequestStatusCode_DRAFT                 RequestStatusCode_Value = 1
	RequestStatusCode_ACTIVE                RequestStatusCode_Value = 2
	RequestStatusCode_SUSPENDED             RequestStatusCode_Value = 3
	RequestStatusCode_CANCELLED             RequestStatusCode_Value = 4
	RequestStatusCode_COMPLETED             RequestStatusCode_Value = 5
	RequestStatusCode_ENTERED_IN_ERROR      RequestStatusCode_Value = 6
	RequestStatusCode_UNKNOWN               RequestStatusCode_Value = 7
)

// Enum value maps for RequestStatusCode_Value.
var (
	RequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "CANCELLED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	RequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"CANCELLED":             4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x RequestStatusCode_Value) Enum() *RequestStatusCode_Value {
	p := new(RequestStatusCode_Value)
	*p = x
	return p
}

func (x RequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[244].Descriptor()
}

func (RequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[244]
}

func (x RequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatusCode_Value.Descriptor instead.
func (RequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{245, 0}
}

type ResearchStudyStatusCode_Value int32

const (
	ResearchStudyStatusCode_INVALID_UNINITIALIZED ResearchStudyStatusCode_Value = 0
	ResearchStudyStatusCode_DRAFT                 ResearchStudyStatusCode_Value = 1
	ResearchStudyStatusCode_IN_PROGRESS           ResearchStudyStatusCode_Value = 2
	ResearchStudyStatusCode_SUSPENDED             ResearchStudyStatusCode_Value = 3
	ResearchStudyStatusCode_STOPPED               ResearchStudyStatusCode_Value = 4
	ResearchStudyStatusCode_COMPLETED             ResearchStudyStatusCode_Value = 5
	ResearchStudyStatusCode_ENTERED_IN_ERROR      ResearchStudyStatusCode_Value = 6
)

// Enum value maps for ResearchStudyStatusCode_Value.
var (
	ResearchStudyStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "IN_PROGRESS",
		3: "SUSPENDED",
		4: "STOPPED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
	}
	ResearchStudyStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"IN_PROGRESS":           2,
		"SUSPENDED":             3,
		"STOPPED":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x ResearchStudyStatusCode_Value) Enum() *ResearchStudyStatusCode_Value {
	p := new(ResearchStudyStatusCode_Value)
	*p = x
	return p
}

func (x ResearchStudyStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResearchStudyStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[245].Descriptor()
}

func (ResearchStudyStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[245]
}

func (x ResearchStudyStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResearchStudyStatusCode_Value.Descriptor instead.
func (ResearchStudyStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{246, 0}
}

type ResearchSubjectStatusCode_Value int32

const (
	ResearchSubjectStatusCode_INVALID_UNINITIALIZED ResearchSubjectStatusCode_Value = 0
	ResearchSubjectStatusCode_CANDIDATE             ResearchSubjectStatusCode_Value = 1
	ResearchSubjectStatusCode_ENROLLED              ResearchSubjectStatusCode_Value = 2
	ResearchSubjectStatusCode_ACTIVE                ResearchSubjectStatusCode_Value = 3
	ResearchSubjectStatusCode_SUSPENDED             ResearchSubjectStatusCode_Value = 4
	ResearchSubjectStatusCode_WITHDRAWN             ResearchSubjectStatusCode_Value = 5
	ResearchSubjectStatusCode_COMPLETED             ResearchSubjectStatusCode_Value = 6
)

// Enum value maps for ResearchSubjectStatusCode_Value.
var (
	ResearchSubjectStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CANDIDATE",
		2: "ENROLLED",
		3: "ACTIVE",
		4: "SUSPENDED",
		5: "WITHDRAWN",
		6: "COMPLETED",
	}
	ResearchSubjectStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CANDIDATE":             1,
		"ENROLLED":              2,
		"ACTIVE":                3,
		"SUSPENDED":             4,
		"WITHDRAWN":             5,
		"COMPLETED":             6,
	}
)

func (x ResearchSubjectStatusCode_Value) Enum() *ResearchSubjectStatusCode_Value {
	p := new(ResearchSubjectStatusCode_Value)
	*p = x
	return p
}

func (x ResearchSubjectStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResearchSubjectStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[246].Descriptor()
}

func (ResearchSubjectStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[246]
}

func (x ResearchSubjectStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResearchSubjectStatusCode_Value.Descriptor instead.
func (ResearchSubjectStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{247, 0}
}

type PayeeResourceTypeCode_Value int32

const (
	PayeeResourceTypeCode_INVALID_UNINITIALIZED PayeeResourceTypeCode_Value = 0
	PayeeResourceTypeCode_ORGANIZATION          PayeeResourceTypeCode_Value = 1
	PayeeResourceTypeCode_PATIENT               PayeeResourceTypeCode_Value = 2
	PayeeResourceTypeCode_PRACTITIONER          PayeeResourceTypeCode_Value = 3
	PayeeResourceTypeCode_RELATEDPERSON         PayeeResourceTypeCode_Value = 4
)

// Enum value maps for PayeeResourceTypeCode_Value.
var (
	PayeeResourceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ORGANIZATION",
		2: "PATIENT",
		3: "PRACTITIONER",
		4: "RELATEDPERSON",
	}
	PayeeResourceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ORGANIZATION":          1,
		"PATIENT":               2,
		"PRACTITIONER":          3,
		"RELATEDPERSON":         4,
	}
)

func (x PayeeResourceTypeCode_Value) Enum() *PayeeResourceTypeCode_Value {
	p := new(PayeeResourceTypeCode_Value)
	*p = x
	return p
}

func (x PayeeResourceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayeeResourceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[247].Descriptor()
}

func (PayeeResourceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[247]
}

func (x PayeeResourceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayeeResourceTypeCode_Value.Descriptor instead.
func (PayeeResourceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{248, 0}
}

type ResourceTypeCode_Value int32

const (
	ResourceTypeCode_INVALID_UNINITIALIZED       ResourceTypeCode_Value = 0
	ResourceTypeCode_ACCOUNT                     ResourceTypeCode_Value = 1
	ResourceTypeCode_ACTIVITY_DEFINITION         ResourceTypeCode_Value = 2
	ResourceTypeCode_ADVERSE_EVENT               ResourceTypeCode_Value = 3
	ResourceTypeCode_ALLERGY_INTOLERANCE         ResourceTypeCode_Value = 4
	ResourceTypeCode_APPOINTMENT                 ResourceTypeCode_Value = 5
	ResourceTypeCode_APPOINTMENT_RESPONSE        ResourceTypeCode_Value = 6
	ResourceTypeCode_AUDIT_EVENT                 ResourceTypeCode_Value = 7
	ResourceTypeCode_BASIC                       ResourceTypeCode_Value = 8
	ResourceTypeCode_BINARY                      ResourceTypeCode_Value = 9
	ResourceTypeCode_BODY_SITE                   ResourceTypeCode_Value = 10
	ResourceTypeCode_BUNDLE                      ResourceTypeCode_Value = 11
	ResourceTypeCode_CAPABILITY_STATEMENT        ResourceTypeCode_Value = 12
	ResourceTypeCode_CARE_PLAN                   ResourceTypeCode_Value = 13
	ResourceTypeCode_CARE_TEAM                   ResourceTypeCode_Value = 14
	ResourceTypeCode_CHARGE_ITEM                 ResourceTypeCode_Value = 15
	ResourceTypeCode_CLAIM                       ResourceTypeCode_Value = 16
	ResourceTypeCode_CLAIM_RESPONSE              ResourceTypeCode_Value = 17
	ResourceTypeCode_CLINICAL_IMPRESSION         ResourceTypeCode_Value = 18
	ResourceTypeCode_CODE_SYSTEM                 ResourceTypeCode_Value = 19
	ResourceTypeCode_COMMUNICATION               ResourceTypeCode_Value = 20
	ResourceTypeCode_COMMUNICATION_REQUEST       ResourceTypeCode_Value = 21
	ResourceTypeCode_COMPARTMENT_DEFINITION      ResourceTypeCode_Value = 22
	ResourceTypeCode_COMPOSITION                 ResourceTypeCode_Value = 23
	ResourceTypeCode_CONCEPT_MAP                 ResourceTypeCode_Value = 24
	ResourceTypeCode_CONDITION                   ResourceTypeCode_Value = 25
	ResourceTypeCode_CONSENT                     ResourceTypeCode_Value = 26
	ResourceTypeCode_CONTRACT                    ResourceTypeCode_Value = 27
	ResourceTypeCode_COVERAGE                    ResourceTypeCode_Value = 28
	ResourceTypeCode_DATA_ELEMENT                ResourceTypeCode_Value = 29
	ResourceTypeCode_DETECTED_ISSUE              ResourceTypeCode_Value = 30
	ResourceTypeCode_DEVICE                      ResourceTypeCode_Value = 31
	ResourceTypeCode_DEVICE_COMPONENT            ResourceTypeCode_Value = 32
	ResourceTypeCode_DEVICE_METRIC               ResourceTypeCode_Value = 33
	ResourceTypeCode_DEVICE_REQUEST              ResourceTypeCode_Value = 34
	ResourceTypeCode_DEVICE_USE_STATEMENT        ResourceTypeCode_Value = 35
	ResourceTypeCode_DIAGNOSTIC_REPORT           ResourceTypeCode_Value = 36
	ResourceTypeCode_DOCUMENT_MANIFEST           ResourceTypeCode_Value = 37
	ResourceTypeCode_DOCUMENT_REFERENCE          ResourceTypeCode_Value = 38
	ResourceTypeCode_DOMAIN_RESOURCE             ResourceTypeCode_Value = 39
	ResourceTypeCode_ELIGIBILITY_REQUEST         ResourceTypeCode_Value = 40
	ResourceTypeCode_ELIGIBILITY_RESPONSE        ResourceTypeCode_Value = 41
	ResourceTypeCode_ENCOUNTER                   ResourceTypeCode_Value = 42
	ResourceTypeCode_ENDPOINT                    ResourceTypeCode_Value = 43
	ResourceTypeCode_ENROLLMENT_REQUEST          ResourceTypeCode_Value = 44
	ResourceTypeCode_ENROLLMENT_RESPONSE         ResourceTypeCode_Value = 45
	ResourceTypeCode_EPISODE_OF_CARE             ResourceTypeCode_Value = 46
	ResourceTypeCode_EXPANSION_PROFILE           ResourceTypeCode_Value = 47
	ResourceTypeCode_EXPLANATION_OF_BENEFIT      ResourceTypeCode_Value = 48
	ResourceTypeCode_FAMILY_MEMBER_HISTORY       ResourceTypeCode_Value = 49
	ResourceTypeCode_FLAG                        ResourceTypeCode_Value = 50
	ResourceTypeCode_GOAL                        ResourceTypeCode_Value = 51
	ResourceTypeCode_GRAPH_DEFINITION            ResourceTypeCode_Value = 52
	ResourceTypeCode_GROUP                       ResourceTypeCode_Value = 53
	ResourceTypeCode_GUIDANCE_RESPONSE           ResourceTypeCode_Value = 54
	ResourceTypeCode_HEALTHCARE_SERVICE          ResourceTypeCode_Value = 55
	ResourceTypeCode_IMAGING_MANIFEST            ResourceTypeCode_Value = 56
	ResourceTypeCode_IMAGING_STUDY               ResourceTypeCode_Value = 57
	ResourceTypeCode_IMMUNIZATION                ResourceTypeCode_Value = 58
	ResourceTypeCode_IMMUNIZATION_RECOMMENDATION ResourceTypeCode_Value = 59
	ResourceTypeCode_IMPLEMENTATION_GUIDE        ResourceTypeCode_Value = 60
	ResourceTypeCode_LIBRARY                     ResourceTypeCode_Value = 61
	ResourceTypeCode_LINKAGE                     ResourceTypeCode_Value = 62
	ResourceTypeCode_LIST                        ResourceTypeCode_Value = 63
	ResourceTypeCode_LOCATION                    ResourceTypeCode_Value = 64
	ResourceTypeCode_MEASURE                     ResourceTypeCode_Value = 65
	ResourceTypeCode_MEASURE_REPORT              ResourceTypeCode_Value = 66
	ResourceTypeCode_MEDIA                       ResourceTypeCode_Value = 67
	ResourceTypeCode_MEDICATION                  ResourceTypeCode_Value = 68
	ResourceTypeCode_MEDICATION_ADMINISTRATION   ResourceTypeCode_Value = 69
	ResourceTypeCode_MEDICATION_DISPENSE         ResourceTypeCode_Value = 70
	ResourceTypeCode_MEDICATION_REQUEST          ResourceTypeCode_Value = 71
	ResourceTypeCode_MEDICATION_STATEMENT        ResourceTypeCode_Value = 72
	ResourceTypeCode_MESSAGE_DEFINITION          ResourceTypeCode_Value = 73
	ResourceTypeCode_MESSAGE_HEADER              ResourceTypeCode_Value = 74
	ResourceTypeCode_NAMING_SYSTEM               ResourceTypeCode_Value = 75
	ResourceTypeCode_NUTRITION_ORDER             ResourceTypeCode_Value = 76
	ResourceTypeCode_OBSERVATION                 ResourceTypeCode_Value = 77
	ResourceTypeCode_OPERATION_DEFINITION        ResourceTypeCode_Value = 78
	ResourceTypeCode_OPERATION_OUTCOME           ResourceTypeCode_Value = 79
	ResourceTypeCode_ORGANIZATION                ResourceTypeCode_Value = 80
	ResourceTypeCode_PARAMETERS                  ResourceTypeCode_Value = 81
	ResourceTypeCode_PATIENT                     ResourceTypeCode_Value = 82
	ResourceTypeCode_PAYMENT_NOTICE              ResourceTypeCode_Value = 83
	ResourceTypeCode_PAYMENT_RECONCILIATION      ResourceTypeCode_Value = 84
	ResourceTypeCode_PERSON                      ResourceTypeCode_Value = 85
	ResourceTypeCode_PLAN_DEFINITION             ResourceTypeCode_Value = 86
	ResourceTypeCode_PRACTITIONER                ResourceTypeCode_Value = 87
	ResourceTypeCode_PRACTITIONER_ROLE           ResourceTypeCode_Value = 88
	ResourceTypeCode_PROCEDURE                   ResourceTypeCode_Value = 89
	ResourceTypeCode_PROCEDURE_REQUEST           ResourceTypeCode_Value = 90
	ResourceTypeCode_PROCESS_REQUEST             ResourceTypeCode_Value = 91
	ResourceTypeCode_PROCESS_RESPONSE            ResourceTypeCode_Value = 92
	ResourceTypeCode_PROVENANCE                  ResourceTypeCode_Value = 93
	ResourceTypeCode_QUESTIONNAIRE               ResourceTypeCode_Value = 94
	ResourceTypeCode_QUESTIONNAIRE_RESPONSE      ResourceTypeCode_Value = 95
	ResourceTypeCode_REFERRAL_REQUEST            ResourceTypeCode_Value = 96
	ResourceTypeCode_RELATED_PERSON              ResourceTypeCode_Value = 97
	ResourceTypeCode_REQUEST_GROUP               ResourceTypeCode_Value = 98
	ResourceTypeCode_RESEARCH_STUDY              ResourceTypeCode_Value = 99
	ResourceTypeCode_RESEARCH_SUBJECT            ResourceTypeCode_Value = 100
	ResourceTypeCode_RESOURCE                    ResourceTypeCode_Value = 101
	ResourceTypeCode_RISK_ASSESSMENT             ResourceTypeCode_Value = 102
	ResourceTypeCode_SCHEDULE                    ResourceTypeCode_Value = 103
	ResourceTypeCode_SEARCH_PARAMETER            ResourceTypeCode_Value = 104
	ResourceTypeCode_SEQUENCE                    ResourceTypeCode_Value = 105
	ResourceTypeCode_SERVICE_DEFINITION          ResourceTypeCode_Value = 106
	ResourceTypeCode_SLOT                        ResourceTypeCode_Value = 107
	ResourceTypeCode_SPECIMEN                    ResourceTypeCode_Value = 108
	ResourceTypeCode_STRUCTURE_DEFINITION        ResourceTypeCode_Value = 109
	ResourceTypeCode_STRUCTURE_MAP               ResourceTypeCode_Value = 110
	ResourceTypeCode_SUBSCRIPTION                ResourceTypeCode_Value = 111
	ResourceTypeCode_SUBSTANCE                   ResourceTypeCode_Value = 112
	ResourceTypeCode_SUPPLY_DELIVERY             ResourceTypeCode_Value = 113
	ResourceTypeCode_SUPPLY_REQUEST              ResourceTypeCode_Value = 114
	ResourceTypeCode_TASK                        ResourceTypeCode_Value = 115
	ResourceTypeCode_TEST_REPORT                 ResourceTypeCode_Value = 116
	ResourceTypeCode_TEST_SCRIPT                 ResourceTypeCode_Value = 117
	ResourceTypeCode_VALUE_SET                   ResourceTypeCode_Value = 118
	ResourceTypeCode_VISION_PRESCRIPTION         ResourceTypeCode_Value = 119
)

// Enum value maps for ResourceTypeCode_Value.
var (
	ResourceTypeCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ACCOUNT",
		2:   "ACTIVITY_DEFINITION",
		3:   "ADVERSE_EVENT",
		4:   "ALLERGY_INTOLERANCE",
		5:   "APPOINTMENT",
		6:   "APPOINTMENT_RESPONSE",
		7:   "AUDIT_EVENT",
		8:   "BASIC",
		9:   "BINARY",
		10:  "BODY_SITE",
		11:  "BUNDLE",
		12:  "CAPABILITY_STATEMENT",
		13:  "CARE_PLAN",
		14:  "CARE_TEAM",
		15:  "CHARGE_ITEM",
		16:  "CLAIM",
		17:  "CLAIM_RESPONSE",
		18:  "CLINICAL_IMPRESSION",
		19:  "CODE_SYSTEM",
		20:  "COMMUNICATION",
		21:  "COMMUNICATION_REQUEST",
		22:  "COMPARTMENT_DEFINITION",
		23:  "COMPOSITION",
		24:  "CONCEPT_MAP",
		25:  "CONDITION",
		26:  "CONSENT",
		27:  "CONTRACT",
		28:  "COVERAGE",
		29:  "DATA_ELEMENT",
		30:  "DETECTED_ISSUE",
		31:  "DEVICE",
		32:  "DEVICE_COMPONENT",
		33:  "DEVICE_METRIC",
		34:  "DEVICE_REQUEST",
		35:  "DEVICE_USE_STATEMENT",
		36:  "DIAGNOSTIC_REPORT",
		37:  "DOCUMENT_MANIFEST",
		38:  "DOCUMENT_REFERENCE",
		39:  "DOMAIN_RESOURCE",
		40:  "ELIGIBILITY_REQUEST",
		41:  "ELIGIBILITY_RESPONSE",
		42:  "ENCOUNTER",
		43:  "ENDPOINT",
		44:  "ENROLLMENT_REQUEST",
		45:  "ENROLLMENT_RESPONSE",
		46:  "EPISODE_OF_CARE",
		47:  "EXPANSION_PROFILE",
		48:  "EXPLANATION_OF_BENEFIT",
		49:  "FAMILY_MEMBER_HISTORY",
		50:  "FLAG",
		51:  "GOAL",
		52:  "GRAPH_DEFINITION",
		53:  "GROUP",
		54:  "GUIDANCE_RESPONSE",
		55:  "HEALTHCARE_SERVICE",
		56:  "IMAGING_MANIFEST",
		57:  "IMAGING_STUDY",
		58:  "IMMUNIZATION",
		59:  "IMMUNIZATION_RECOMMENDATION",
		60:  "IMPLEMENTATION_GUIDE",
		61:  "LIBRARY",
		62:  "LINKAGE",
		63:  "LIST",
		64:  "LOCATION",
		65:  "MEASURE",
		66:  "MEASURE_REPORT",
		67:  "MEDIA",
		68:  "MEDICATION",
		69:  "MEDICATION_ADMINISTRATION",
		70:  "MEDICATION_DISPENSE",
		71:  "MEDICATION_REQUEST",
		72:  "MEDICATION_STATEMENT",
		73:  "MESSAGE_DEFINITION",
		74:  "MESSAGE_HEADER",
		75:  "NAMING_SYSTEM",
		76:  "NUTRITION_ORDER",
		77:  "OBSERVATION",
		78:  "OPERATION_DEFINITION",
		79:  "OPERATION_OUTCOME",
		80:  "ORGANIZATION",
		81:  "PARAMETERS",
		82:  "PATIENT",
		83:  "PAYMENT_NOTICE",
		84:  "PAYMENT_RECONCILIATION",
		85:  "PERSON",
		86:  "PLAN_DEFINITION",
		87:  "PRACTITIONER",
		88:  "PRACTITIONER_ROLE",
		89:  "PROCEDURE",
		90:  "PROCEDURE_REQUEST",
		91:  "PROCESS_REQUEST",
		92:  "PROCESS_RESPONSE",
		93:  "PROVENANCE",
		94:  "QUESTIONNAIRE",
		95:  "QUESTIONNAIRE_RESPONSE",
		96:  "REFERRAL_REQUEST",
		97:  "RELATED_PERSON",
		98:  "REQUEST_GROUP",
		99:  "RESEARCH_STUDY",
		100: "RESEARCH_SUBJECT",
		101: "RESOURCE",
		102: "RISK_ASSESSMENT",
		103: "SCHEDULE",
		104: "SEARCH_PARAMETER",
		105: "SEQUENCE",
		106: "SERVICE_DEFINITION",
		107: "SLOT",
		108: "SPECIMEN",
		109: "STRUCTURE_DEFINITION",
		110: "STRUCTURE_MAP",
		111: "SUBSCRIPTION",
		112: "SUBSTANCE",
		113: "SUPPLY_DELIVERY",
		114: "SUPPLY_REQUEST",
		115: "TASK",
		116: "TEST_REPORT",
		117: "TEST_SCRIPT",
		118: "VALUE_SET",
		119: "VISION_PRESCRIPTION",
	}
	ResourceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":       0,
		"ACCOUNT":                     1,
		"ACTIVITY_DEFINITION":         2,
		"ADVERSE_EVENT":               3,
		"ALLERGY_INTOLERANCE":         4,
		"APPOINTMENT":                 5,
		"APPOINTMENT_RESPONSE":        6,
		"AUDIT_EVENT":                 7,
		"BASIC":                       8,
		"BINARY":                      9,
		"BODY_SITE":                   10,
		"BUNDLE":                      11,
		"CAPABILITY_STATEMENT":        12,
		"CARE_PLAN":                   13,
		"CARE_TEAM":                   14,
		"CHARGE_ITEM":                 15,
		"CLAIM":                       16,
		"CLAIM_RESPONSE":              17,
		"CLINICAL_IMPRESSION":         18,
		"CODE_SYSTEM":                 19,
		"COMMUNICATION":               20,
		"COMMUNICATION_REQUEST":       21,
		"COMPARTMENT_DEFINITION":      22,
		"COMPOSITION":                 23,
		"CONCEPT_MAP":                 24,
		"CONDITION":                   25,
		"CONSENT":                     26,
		"CONTRACT":                    27,
		"COVERAGE":                    28,
		"DATA_ELEMENT":                29,
		"DETECTED_ISSUE":              30,
		"DEVICE":                      31,
		"DEVICE_COMPONENT":            32,
		"DEVICE_METRIC":               33,
		"DEVICE_REQUEST":              34,
		"DEVICE_USE_STATEMENT":        35,
		"DIAGNOSTIC_REPORT":           36,
		"DOCUMENT_MANIFEST":           37,
		"DOCUMENT_REFERENCE":          38,
		"DOMAIN_RESOURCE":             39,
		"ELIGIBILITY_REQUEST":         40,
		"ELIGIBILITY_RESPONSE":        41,
		"ENCOUNTER":                   42,
		"ENDPOINT":                    43,
		"ENROLLMENT_REQUEST":          44,
		"ENROLLMENT_RESPONSE":         45,
		"EPISODE_OF_CARE":             46,
		"EXPANSION_PROFILE":           47,
		"EXPLANATION_OF_BENEFIT":      48,
		"FAMILY_MEMBER_HISTORY":       49,
		"FLAG":                        50,
		"GOAL":                        51,
		"GRAPH_DEFINITION":            52,
		"GROUP":                       53,
		"GUIDANCE_RESPONSE":           54,
		"HEALTHCARE_SERVICE":          55,
		"IMAGING_MANIFEST":            56,
		"IMAGING_STUDY":               57,
		"IMMUNIZATION":                58,
		"IMMUNIZATION_RECOMMENDATION": 59,
		"IMPLEMENTATION_GUIDE":        60,
		"LIBRARY":                     61,
		"LINKAGE":                     62,
		"LIST":                        63,
		"LOCATION":                    64,
		"MEASURE":                     65,
		"MEASURE_REPORT":              66,
		"MEDIA":                       67,
		"MEDICATION":                  68,
		"MEDICATION_ADMINISTRATION":   69,
		"MEDICATION_DISPENSE":         70,
		"MEDICATION_REQUEST":          71,
		"MEDICATION_STATEMENT":        72,
		"MESSAGE_DEFINITION":          73,
		"MESSAGE_HEADER":              74,
		"NAMING_SYSTEM":               75,
		"NUTRITION_ORDER":             76,
		"OBSERVATION":                 77,
		"OPERATION_DEFINITION":        78,
		"OPERATION_OUTCOME":           79,
		"ORGANIZATION":                80,
		"PARAMETERS":                  81,
		"PATIENT":                     82,
		"PAYMENT_NOTICE":              83,
		"PAYMENT_RECONCILIATION":      84,
		"PERSON":                      85,
		"PLAN_DEFINITION":             86,
		"PRACTITIONER":                87,
		"PRACTITIONER_ROLE":           88,
		"PROCEDURE":                   89,
		"PROCEDURE_REQUEST":           90,
		"PROCESS_REQUEST":             91,
		"PROCESS_RESPONSE":            92,
		"PROVENANCE":                  93,
		"QUESTIONNAIRE":               94,
		"QUESTIONNAIRE_RESPONSE":      95,
		"REFERRAL_REQUEST":            96,
		"RELATED_PERSON":              97,
		"REQUEST_GROUP":               98,
		"RESEARCH_STUDY":              99,
		"RESEARCH_SUBJECT":            100,
		"RESOURCE":                    101,
		"RISK_ASSESSMENT":             102,
		"SCHEDULE":                    103,
		"SEARCH_PARAMETER":            104,
		"SEQUENCE":                    105,
		"SERVICE_DEFINITION":          106,
		"SLOT":                        107,
		"SPECIMEN":                    108,
		"STRUCTURE_DEFINITION":        109,
		"STRUCTURE_MAP":               110,
		"SUBSCRIPTION":                111,
		"SUBSTANCE":                   112,
		"SUPPLY_DELIVERY":             113,
		"SUPPLY_REQUEST":              114,
		"TASK":                        115,
		"TEST_REPORT":                 116,
		"TEST_SCRIPT":                 117,
		"VALUE_SET":                   118,
		"VISION_PRESCRIPTION":         119,
	}
)

func (x ResourceTypeCode_Value) Enum() *ResourceTypeCode_Value {
	p := new(ResourceTypeCode_Value)
	*p = x
	return p
}

func (x ResourceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[248].Descriptor()
}

func (ResourceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[248]
}

func (x ResourceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeCode_Value.Descriptor instead.
func (ResourceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{249, 0}
}

type ResourceValidationModeCode_Value int32

const (
	ResourceValidationModeCode_INVALID_UNINITIALIZED ResourceValidationModeCode_Value = 0
	ResourceValidationModeCode_CREATE                ResourceValidationModeCode_Value = 1
	ResourceValidationModeCode_UPDATE                ResourceValidationModeCode_Value = 2
	ResourceValidationModeCode_DELETE                ResourceValidationModeCode_Value = 3
)

// Enum value maps for ResourceValidationModeCode_Value.
var (
	ResourceValidationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	ResourceValidationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CREATE":                1,
		"UPDATE":                2,
		"DELETE":                3,
	}
)

func (x ResourceValidationModeCode_Value) Enum() *ResourceValidationModeCode_Value {
	p := new(ResourceValidationModeCode_Value)
	*p = x
	return p
}

func (x ResourceValidationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceValidationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[249].Descriptor()
}

func (ResourceValidationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[249]
}

func (x ResourceValidationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceValidationModeCode_Value.Descriptor instead.
func (ResourceValidationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{250, 0}
}

type ResponseTypeCode_Value int32

const (
	ResponseTypeCode_INVALID_UNINITIALIZED ResponseTypeCode_Value = 0
	ResponseTypeCode_OK                    ResponseTypeCode_Value = 1
	ResponseTypeCode_TRANSIENT_ERROR       ResponseTypeCode_Value = 2
	ResponseTypeCode_FATAL_ERROR           ResponseTypeCode_Value = 3
)

// Enum value maps for ResponseTypeCode_Value.
var (
	ResponseTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OK",
		2: "TRANSIENT_ERROR",
		3: "FATAL_ERROR",
	}
	ResponseTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OK":                    1,
		"TRANSIENT_ERROR":       2,
		"FATAL_ERROR":           3,
	}
)

func (x ResponseTypeCode_Value) Enum() *ResponseTypeCode_Value {
	p := new(ResponseTypeCode_Value)
	*p = x
	return p
}

func (x ResponseTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[250].Descriptor()
}

func (ResponseTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[250]
}

func (x ResponseTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseTypeCode_Value.Descriptor instead.
func (ResponseTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{251, 0}
}

type RestfulCapabilityModeCode_Value int32

const (
	RestfulCapabilityModeCode_INVALID_UNINITIALIZED RestfulCapabilityModeCode_Value = 0
	RestfulCapabilityModeCode_CLIENT                RestfulCapabilityModeCode_Value = 1
	RestfulCapabilityModeCode_SERVER                RestfulCapabilityModeCode_Value = 2
)

// Enum value maps for RestfulCapabilityModeCode_Value.
var (
	RestfulCapabilityModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLIENT",
		2: "SERVER",
	}
	RestfulCapabilityModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLIENT":                1,
		"SERVER":                2,
	}
)

func (x RestfulCapabilityModeCode_Value) Enum() *RestfulCapabilityModeCode_Value {
	p := new(RestfulCapabilityModeCode_Value)
	*p = x
	return p
}

func (x RestfulCapabilityModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestfulCapabilityModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[251].Descriptor()
}

func (RestfulCapabilityModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[251]
}

func (x RestfulCapabilityModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestfulCapabilityModeCode_Value.Descriptor instead.
func (RestfulCapabilityModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{252, 0}
}

type RestfulSecurityServiceCode_Value int32

const (
	RestfulSecurityServiceCode_INVALID_UNINITIALIZED RestfulSecurityServiceCode_Value = 0
	RestfulSecurityServiceCode_OAUTH                 RestfulSecurityServiceCode_Value = 1
	RestfulSecurityServiceCode_SMART_ON_FHIR         RestfulSecurityServiceCode_Value = 2
	RestfulSecurityServiceCode_NTLM                  RestfulSecurityServiceCode_Value = 3
	RestfulSecurityServiceCode_BASIC                 RestfulSecurityServiceCode_Value = 4
	RestfulSecurityServiceCode_KERBEROS              RestfulSecurityServiceCode_Value = 5
	RestfulSecurityServiceCode_CERTIFICATES          RestfulSecurityServiceCode_Value = 6
)

// Enum value maps for RestfulSecurityServiceCode_Value.
var (
	RestfulSecurityServiceCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OAUTH",
		2: "SMART_ON_FHIR",
		3: "NTLM",
		4: "BASIC",
		5: "KERBEROS",
		6: "CERTIFICATES",
	}
	RestfulSecurityServiceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OAUTH":                 1,
		"SMART_ON_FHIR":         2,
		"NTLM":                  3,
		"BASIC":                 4,
		"KERBEROS":              5,
		"CERTIFICATES":          6,
	}
)

func (x RestfulSecurityServiceCode_Value) Enum() *RestfulSecurityServiceCode_Value {
	p := new(RestfulSecurityServiceCode_Value)
	*p = x
	return p
}

func (x RestfulSecurityServiceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestfulSecurityServiceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[252].Descriptor()
}

func (RestfulSecurityServiceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[252]
}

func (x RestfulSecurityServiceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestfulSecurityServiceCode_Value.Descriptor instead.
func (RestfulSecurityServiceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{253, 0}
}

type RiskProbabilityCode_Value int32

const (
	RiskProbabilityCode_INVALID_UNINITIALIZED RiskProbabilityCode_Value = 0
	RiskProbabilityCode_NEGLIGIBLE            RiskProbabilityCode_Value = 1
	RiskProbabilityCode_LOW                   RiskProbabilityCode_Value = 2
	RiskProbabilityCode_MODERATE              RiskProbabilityCode_Value = 3
	RiskProbabilityCode_HIGH                  RiskProbabilityCode_Value = 4
	RiskProbabilityCode_CERTAIN               RiskProbabilityCode_Value = 5
)

// Enum value maps for RiskProbabilityCode_Value.
var (
	RiskProbabilityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NEGLIGIBLE",
		2: "LOW",
		3: "MODERATE",
		4: "HIGH",
		5: "CERTAIN",
	}
	RiskProbabilityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NEGLIGIBLE":            1,
		"LOW":                   2,
		"MODERATE":              3,
		"HIGH":                  4,
		"CERTAIN":               5,
	}
)

func (x RiskProbabilityCode_Value) Enum() *RiskProbabilityCode_Value {
	p := new(RiskProbabilityCode_Value)
	*p = x
	return p
}

func (x RiskProbabilityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskProbabilityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[253].Descriptor()
}

func (RiskProbabilityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[253]
}

func (x RiskProbabilityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskProbabilityCode_Value.Descriptor instead.
func (RiskProbabilityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{254, 0}
}

type SearchComparatorCode_Value int32

const (
	SearchComparatorCode_INVALID_UNINITIALIZED SearchComparatorCode_Value = 0
	SearchComparatorCode_EQ                    SearchComparatorCode_Value = 1
	SearchComparatorCode_NE                    SearchComparatorCode_Value = 2
	SearchComparatorCode_GT                    SearchComparatorCode_Value = 3
	SearchComparatorCode_LT                    SearchComparatorCode_Value = 4
	SearchComparatorCode_GE                    SearchComparatorCode_Value = 5
	SearchComparatorCode_LE                    SearchComparatorCode_Value = 6
	SearchComparatorCode_SA                    SearchComparatorCode_Value = 7
	SearchComparatorCode_EB                    SearchComparatorCode_Value = 8
	SearchComparatorCode_AP                    SearchComparatorCode_Value = 9
)

// Enum value maps for SearchComparatorCode_Value.
var (
	SearchComparatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EQ",
		2: "NE",
		3: "GT",
		4: "LT",
		5: "GE",
		6: "LE",
		7: "SA",
		8: "EB",
		9: "AP",
	}
	SearchComparatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQ":                    1,
		"NE":                    2,
		"GT":                    3,
		"LT":                    4,
		"GE":                    5,
		"LE":                    6,
		"SA":                    7,
		"EB":                    8,
		"AP":                    9,
	}
)

func (x SearchComparatorCode_Value) Enum() *SearchComparatorCode_Value {
	p := new(SearchComparatorCode_Value)
	*p = x
	return p
}

func (x SearchComparatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchComparatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[254].Descriptor()
}

func (SearchComparatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[254]
}

func (x SearchComparatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchComparatorCode_Value.Descriptor instead.
func (SearchComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{255, 0}
}

type SearchEntryModeCode_Value int32

const (
	SearchEntryModeCode_INVALID_UNINITIALIZED SearchEntryModeCode_Value = 0
	SearchEntryModeCode_MATCH                 SearchEntryModeCode_Value = 1
	SearchEntryModeCode_INCLUDE               SearchEntryModeCode_Value = 2
	SearchEntryModeCode_OUTCOME               SearchEntryModeCode_Value = 3
)

// Enum value maps for SearchEntryModeCode_Value.
var (
	SearchEntryModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MATCH",
		2: "INCLUDE",
		3: "OUTCOME",
	}
	SearchEntryModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MATCH":                 1,
		"INCLUDE":               2,
		"OUTCOME":               3,
	}
)

func (x SearchEntryModeCode_Value) Enum() *SearchEntryModeCode_Value {
	p := new(SearchEntryModeCode_Value)
	*p = x
	return p
}

func (x SearchEntryModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchEntryModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[255].Descriptor()
}

func (SearchEntryModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[255]
}

func (x SearchEntryModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchEntryModeCode_Value.Descriptor instead.
func (SearchEntryModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{256, 0}
}

type SearchModifierCodeCode_Value int32

const (
	SearchModifierCodeCode_INVALID_UNINITIALIZED SearchModifierCodeCode_Value = 0
	SearchModifierCodeCode_MISSING               SearchModifierCodeCode_Value = 1
	SearchModifierCodeCode_EXACT                 SearchModifierCodeCode_Value = 2
	SearchModifierCodeCode_CONTAINS              SearchModifierCodeCode_Value = 3
	SearchModifierCodeCode_NOT                   SearchModifierCodeCode_Value = 4
	SearchModifierCodeCode_TEXT                  SearchModifierCodeCode_Value = 5
	SearchModifierCodeCode_IN                    SearchModifierCodeCode_Value = 6
	SearchModifierCodeCode_NOT_IN                SearchModifierCodeCode_Value = 7
	SearchModifierCodeCode_BELOW                 SearchModifierCodeCode_Value = 8
	SearchModifierCodeCode_ABOVE                 SearchModifierCodeCode_Value = 9
	SearchModifierCodeCode_TYPE                  SearchModifierCodeCode_Value = 10
)

// Enum value maps for SearchModifierCodeCode_Value.
var (
	SearchModifierCodeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MISSING",
		2:  "EXACT",
		3:  "CONTAINS",
		4:  "NOT",
		5:  "TEXT",
		6:  "IN",
		7:  "NOT_IN",
		8:  "BELOW",
		9:  "ABOVE",
		10: "TYPE",
	}
	SearchModifierCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MISSING":               1,
		"EXACT":                 2,
		"CONTAINS":              3,
		"NOT":                   4,
		"TEXT":                  5,
		"IN":                    6,
		"NOT_IN":                7,
		"BELOW":                 8,
		"ABOVE":                 9,
		"TYPE":                  10,
	}
)

func (x SearchModifierCodeCode_Value) Enum() *SearchModifierCodeCode_Value {
	p := new(SearchModifierCodeCode_Value)
	*p = x
	return p
}

func (x SearchModifierCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchModifierCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[256].Descriptor()
}

func (SearchModifierCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[256]
}

func (x SearchModifierCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchModifierCodeCode_Value.Descriptor instead.
func (SearchModifierCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{257, 0}
}

type SearchParamTypeCode_Value int32

const (
	SearchParamTypeCode_INVALID_UNINITIALIZED SearchParamTypeCode_Value = 0
	SearchParamTypeCode_NUMBER                SearchParamTypeCode_Value = 1
	SearchParamTypeCode_DATE                  SearchParamTypeCode_Value = 2
	SearchParamTypeCode_STRING                SearchParamTypeCode_Value = 3
	SearchParamTypeCode_TOKEN                 SearchParamTypeCode_Value = 4
	SearchParamTypeCode_REFERENCE             SearchParamTypeCode_Value = 5
	SearchParamTypeCode_COMPOSITE             SearchParamTypeCode_Value = 6
	SearchParamTypeCode_QUANTITY              SearchParamTypeCode_Value = 7
	SearchParamTypeCode_URI                   SearchParamTypeCode_Value = 8
)

// Enum value maps for SearchParamTypeCode_Value.
var (
	SearchParamTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NUMBER",
		2: "DATE",
		3: "STRING",
		4: "TOKEN",
		5: "REFERENCE",
		6: "COMPOSITE",
		7: "QUANTITY",
		8: "URI",
	}
	SearchParamTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NUMBER":                1,
		"DATE":                  2,
		"STRING":                3,
		"TOKEN":                 4,
		"REFERENCE":             5,
		"COMPOSITE":             6,
		"QUANTITY":              7,
		"URI":                   8,
	}
)

func (x SearchParamTypeCode_Value) Enum() *SearchParamTypeCode_Value {
	p := new(SearchParamTypeCode_Value)
	*p = x
	return p
}

func (x SearchParamTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchParamTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[257].Descriptor()
}

func (SearchParamTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[257]
}

func (x SearchParamTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchParamTypeCode_Value.Descriptor instead.
func (SearchParamTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{258, 0}
}

type XPathUsageTypeCode_Value int32

const (
	XPathUsageTypeCode_INVALID_UNINITIALIZED XPathUsageTypeCode_Value = 0
	XPathUsageTypeCode_NORMAL                XPathUsageTypeCode_Value = 1
	XPathUsageTypeCode_PHONETIC              XPathUsageTypeCode_Value = 2
	XPathUsageTypeCode_NEARBY                XPathUsageTypeCode_Value = 3
	XPathUsageTypeCode_DISTANCE              XPathUsageTypeCode_Value = 4
	XPathUsageTypeCode_OTHER                 XPathUsageTypeCode_Value = 5
)

// Enum value maps for XPathUsageTypeCode_Value.
var (
	XPathUsageTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NORMAL",
		2: "PHONETIC",
		3: "NEARBY",
		4: "DISTANCE",
		5: "OTHER",
	}
	XPathUsageTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NORMAL":                1,
		"PHONETIC":              2,
		"NEARBY":                3,
		"DISTANCE":              4,
		"OTHER":                 5,
	}
)

func (x XPathUsageTypeCode_Value) Enum() *XPathUsageTypeCode_Value {
	p := new(XPathUsageTypeCode_Value)
	*p = x
	return p
}

func (x XPathUsageTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XPathUsageTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[258].Descriptor()
}

func (XPathUsageTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[258]
}

func (x XPathUsageTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XPathUsageTypeCode_Value.Descriptor instead.
func (XPathUsageTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{259, 0}
}

type SequenceTypeCode_Value int32

const (
	SequenceTypeCode_INVALID_UNINITIALIZED SequenceTypeCode_Value = 0
	SequenceTypeCode_AA                    SequenceTypeCode_Value = 1
	SequenceTypeCode_DNA                   SequenceTypeCode_Value = 2
	SequenceTypeCode_RNA                   SequenceTypeCode_Value = 3
)

// Enum value maps for SequenceTypeCode_Value.
var (
	SequenceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AA",
		2: "DNA",
		3: "RNA",
	}
	SequenceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AA":                    1,
		"DNA":                   2,
		"RNA":                   3,
	}
)

func (x SequenceTypeCode_Value) Enum() *SequenceTypeCode_Value {
	p := new(SequenceTypeCode_Value)
	*p = x
	return p
}

func (x SequenceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequenceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[259].Descriptor()
}

func (SequenceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[259]
}

func (x SequenceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SequenceTypeCode_Value.Descriptor instead.
func (SequenceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{260, 0}
}

type ServiceProvisionConditionsCode_Value int32

const (
	ServiceProvisionConditionsCode_INVALID_UNINITIALIZED ServiceProvisionConditionsCode_Value = 0
	ServiceProvisionConditionsCode_FREE                  ServiceProvisionConditionsCode_Value = 1
	ServiceProvisionConditionsCode_DISC                  ServiceProvisionConditionsCode_Value = 2
	ServiceProvisionConditionsCode_COST                  ServiceProvisionConditionsCode_Value = 3
)

// Enum value maps for ServiceProvisionConditionsCode_Value.
var (
	ServiceProvisionConditionsCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FREE",
		2: "DISC",
		3: "COST",
	}
	ServiceProvisionConditionsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FREE":                  1,
		"DISC":                  2,
		"COST":                  3,
	}
)

func (x ServiceProvisionConditionsCode_Value) Enum() *ServiceProvisionConditionsCode_Value {
	p := new(ServiceProvisionConditionsCode_Value)
	*p = x
	return p
}

func (x ServiceProvisionConditionsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceProvisionConditionsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[260].Descriptor()
}

func (ServiceProvisionConditionsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[260]
}

func (x ServiceProvisionConditionsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceProvisionConditionsCode_Value.Descriptor instead.
func (ServiceProvisionConditionsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{261, 0}
}

type ReferralMethodCode_Value int32

const (
	ReferralMethodCode_INVALID_UNINITIALIZED ReferralMethodCode_Value = 0
	ReferralMethodCode_FAX                   ReferralMethodCode_Value = 1
	ReferralMethodCode_PHONE                 ReferralMethodCode_Value = 2
	ReferralMethodCode_ELEC                  ReferralMethodCode_Value = 3
	ReferralMethodCode_SEMAIL                ReferralMethodCode_Value = 4
	ReferralMethodCode_MAIL                  ReferralMethodCode_Value = 5
)

// Enum value maps for ReferralMethodCode_Value.
var (
	ReferralMethodCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FAX",
		2: "PHONE",
		3: "ELEC",
		4: "SEMAIL",
		5: "MAIL",
	}
	ReferralMethodCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FAX":                   1,
		"PHONE":                 2,
		"ELEC":                  3,
		"SEMAIL":                4,
		"MAIL":                  5,
	}
)

func (x ReferralMethodCode_Value) Enum() *ReferralMethodCode_Value {
	p := new(ReferralMethodCode_Value)
	*p = x
	return p
}

func (x ReferralMethodCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferralMethodCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[261].Descriptor()
}

func (ReferralMethodCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[261]
}

func (x ReferralMethodCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferralMethodCode_Value.Descriptor instead.
func (ReferralMethodCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{262, 0}
}

type SlotStatusCode_Value int32

const (
	SlotStatusCode_INVALID_UNINITIALIZED SlotStatusCode_Value = 0
	SlotStatusCode_BUSY                  SlotStatusCode_Value = 1
	SlotStatusCode_FREE                  SlotStatusCode_Value = 2
	SlotStatusCode_BUSY_UNAVAILABLE      SlotStatusCode_Value = 3
	SlotStatusCode_BUSY_TENTATIVE        SlotStatusCode_Value = 4
	SlotStatusCode_ENTERED_IN_ERROR      SlotStatusCode_Value = 5
)

// Enum value maps for SlotStatusCode_Value.
var (
	SlotStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BUSY",
		2: "FREE",
		3: "BUSY_UNAVAILABLE",
		4: "BUSY_TENTATIVE",
		5: "ENTERED_IN_ERROR",
	}
	SlotStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BUSY":                  1,
		"FREE":                  2,
		"BUSY_UNAVAILABLE":      3,
		"BUSY_TENTATIVE":        4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x SlotStatusCode_Value) Enum() *SlotStatusCode_Value {
	p := new(SlotStatusCode_Value)
	*p = x
	return p
}

func (x SlotStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[262].Descriptor()
}

func (SlotStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[262]
}

func (x SlotStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotStatusCode_Value.Descriptor instead.
func (SlotStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{263, 0}
}

type SpecialValuesCode_Value int32

const (
	SpecialValuesCode_INVALID_UNINITIALIZED SpecialValuesCode_Value = 0
	SpecialValuesCode_TRUE                  SpecialValuesCode_Value = 1
	SpecialValuesCode_FALSE                 SpecialValuesCode_Value = 2
	SpecialValuesCode_TRACE                 SpecialValuesCode_Value = 3
	SpecialValuesCode_SUFFICIENT            SpecialValuesCode_Value = 4
	SpecialValuesCode_WITHDRAWN             SpecialValuesCode_Value = 5
	SpecialValuesCode_NIL_KNOWN             SpecialValuesCode_Value = 6
)

// Enum value maps for SpecialValuesCode_Value.
var (
	SpecialValuesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TRUE",
		2: "FALSE",
		3: "TRACE",
		4: "SUFFICIENT",
		5: "WITHDRAWN",
		6: "NIL_KNOWN",
	}
	SpecialValuesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TRUE":                  1,
		"FALSE":                 2,
		"TRACE":                 3,
		"SUFFICIENT":            4,
		"WITHDRAWN":             5,
		"NIL_KNOWN":             6,
	}
)

func (x SpecialValuesCode_Value) Enum() *SpecialValuesCode_Value {
	p := new(SpecialValuesCode_Value)
	*p = x
	return p
}

func (x SpecialValuesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialValuesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[263].Descriptor()
}

func (SpecialValuesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[263]
}

func (x SpecialValuesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialValuesCode_Value.Descriptor instead.
func (SpecialValuesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{264, 0}
}

type DeviceSpecificationSpecTypeCode_Value int32

const (
	DeviceSpecificationSpecTypeCode_INVALID_UNINITIALIZED DeviceSpecificationSpecTypeCode_Value = 0
	DeviceSpecificationSpecTypeCode_UNSPECIFIED           DeviceSpecificationSpecTypeCode_Value = 1
	DeviceSpecificationSpecTypeCode_SERIAL_NUMBER         DeviceSpecificationSpecTypeCode_Value = 2
	DeviceSpecificationSpecTypeCode_PART_NUMBER           DeviceSpecificationSpecTypeCode_Value = 3
	DeviceSpecificationSpecTypeCode_HARDWARE_REVISION     DeviceSpecificationSpecTypeCode_Value = 4
	DeviceSpecificationSpecTypeCode_SOFTWARE_REVISION     DeviceSpecificationSpecTypeCode_Value = 5
	DeviceSpecificationSpecTypeCode_FIRMWARE_REVISION     DeviceSpecificationSpecTypeCode_Value = 6
	DeviceSpecificationSpecTypeCode_PROTOCOL_REVISION     DeviceSpecificationSpecTypeCode_Value = 7
	DeviceSpecificationSpecTypeCode_GMDN                  DeviceSpecificationSpecTypeCode_Value = 8
)

// Enum value maps for DeviceSpecificationSpecTypeCode_Value.
var (
	DeviceSpecificationSpecTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNSPECIFIED",
		2: "SERIAL_NUMBER",
		3: "PART_NUMBER",
		4: "HARDWARE_REVISION",
		5: "SOFTWARE_REVISION",
		6: "FIRMWARE_REVISION",
		7: "PROTOCOL_REVISION",
		8: "GMDN",
	}
	DeviceSpecificationSpecTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNSPECIFIED":           1,
		"SERIAL_NUMBER":         2,
		"PART_NUMBER":           3,
		"HARDWARE_REVISION":     4,
		"SOFTWARE_REVISION":     5,
		"FIRMWARE_REVISION":     6,
		"PROTOCOL_REVISION":     7,
		"GMDN":                  8,
	}
)

func (x DeviceSpecificationSpecTypeCode_Value) Enum() *DeviceSpecificationSpecTypeCode_Value {
	p := new(DeviceSpecificationSpecTypeCode_Value)
	*p = x
	return p
}

func (x DeviceSpecificationSpecTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceSpecificationSpecTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[264].Descriptor()
}

func (DeviceSpecificationSpecTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[264]
}

func (x DeviceSpecificationSpecTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceSpecificationSpecTypeCode_Value.Descriptor instead.
func (DeviceSpecificationSpecTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{265, 0}
}

type SpecimenStatusCode_Value int32

const (
	SpecimenStatusCode_INVALID_UNINITIALIZED SpecimenStatusCode_Value = 0
	SpecimenStatusCode_AVAILABLE             SpecimenStatusCode_Value = 1
	SpecimenStatusCode_UNAVAILABLE           SpecimenStatusCode_Value = 2
	SpecimenStatusCode_UNSATISFACTORY        SpecimenStatusCode_Value = 3
	SpecimenStatusCode_ENTERED_IN_ERROR      SpecimenStatusCode_Value = 4
)

// Enum value maps for SpecimenStatusCode_Value.
var (
	SpecimenStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "UNAVAILABLE",
		3: "UNSATISFACTORY",
		4: "ENTERED_IN_ERROR",
	}
	SpecimenStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"UNAVAILABLE":           2,
		"UNSATISFACTORY":        3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SpecimenStatusCode_Value) Enum() *SpecimenStatusCode_Value {
	p := new(SpecimenStatusCode_Value)
	*p = x
	return p
}

func (x SpecimenStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[265].Descriptor()
}

func (SpecimenStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[265]
}

func (x SpecimenStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenStatusCode_Value.Descriptor instead.
func (SpecimenStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{266, 0}
}

type StructureDefinitionKindCode_Value int32

const (
	StructureDefinitionKindCode_INVALID_UNINITIALIZED StructureDefinitionKindCode_Value = 0
	StructureDefinitionKindCode_PRIMITIVE_TYPE        StructureDefinitionKindCode_Value = 1
	StructureDefinitionKindCode_COMPLEX_TYPE          StructureDefinitionKindCode_Value = 2
	StructureDefinitionKindCode_RESOURCE              StructureDefinitionKindCode_Value = 3
	StructureDefinitionKindCode_LOGICAL               StructureDefinitionKindCode_Value = 4
)

// Enum value maps for StructureDefinitionKindCode_Value.
var (
	StructureDefinitionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRIMITIVE_TYPE",
		2: "COMPLEX_TYPE",
		3: "RESOURCE",
		4: "LOGICAL",
	}
	StructureDefinitionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRIMITIVE_TYPE":        1,
		"COMPLEX_TYPE":          2,
		"RESOURCE":              3,
		"LOGICAL":               4,
	}
)

func (x StructureDefinitionKindCode_Value) Enum() *StructureDefinitionKindCode_Value {
	p := new(StructureDefinitionKindCode_Value)
	*p = x
	return p
}

func (x StructureDefinitionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureDefinitionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[266].Descriptor()
}

func (StructureDefinitionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[266]
}

func (x StructureDefinitionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureDefinitionKindCode_Value.Descriptor instead.
func (StructureDefinitionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{267, 0}
}

type SubscriptionChannelTypeCode_Value int32

const (
	SubscriptionChannelTypeCode_INVALID_UNINITIALIZED SubscriptionChannelTypeCode_Value = 0
	SubscriptionChannelTypeCode_REST_HOOK             SubscriptionChannelTypeCode_Value = 1
	SubscriptionChannelTypeCode_WEBSOCKET             SubscriptionChannelTypeCode_Value = 2
	SubscriptionChannelTypeCode_EMAIL                 SubscriptionChannelTypeCode_Value = 3
	SubscriptionChannelTypeCode_SMS                   SubscriptionChannelTypeCode_Value = 4
	SubscriptionChannelTypeCode_MESSAGE               SubscriptionChannelTypeCode_Value = 5
)

// Enum value maps for SubscriptionChannelTypeCode_Value.
var (
	SubscriptionChannelTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REST_HOOK",
		2: "WEBSOCKET",
		3: "EMAIL",
		4: "SMS",
		5: "MESSAGE",
	}
	SubscriptionChannelTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REST_HOOK":             1,
		"WEBSOCKET":             2,
		"EMAIL":                 3,
		"SMS":                   4,
		"MESSAGE":               5,
	}
)

func (x SubscriptionChannelTypeCode_Value) Enum() *SubscriptionChannelTypeCode_Value {
	p := new(SubscriptionChannelTypeCode_Value)
	*p = x
	return p
}

func (x SubscriptionChannelTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionChannelTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[267].Descriptor()
}

func (SubscriptionChannelTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[267]
}

func (x SubscriptionChannelTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionChannelTypeCode_Value.Descriptor instead.
func (SubscriptionChannelTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{268, 0}
}

type SubscriptionStatusCode_Value int32

const (
	SubscriptionStatusCode_INVALID_UNINITIALIZED SubscriptionStatusCode_Value = 0
	SubscriptionStatusCode_REQUESTED             SubscriptionStatusCode_Value = 1
	SubscriptionStatusCode_ACTIVE                SubscriptionStatusCode_Value = 2
	SubscriptionStatusCode_ERROR                 SubscriptionStatusCode_Value = 3
	SubscriptionStatusCode_OFF                   SubscriptionStatusCode_Value = 4
)

// Enum value maps for SubscriptionStatusCode_Value.
var (
	SubscriptionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUESTED",
		2: "ACTIVE",
		3: "ERROR",
		4: "OFF",
	}
	SubscriptionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUESTED":             1,
		"ACTIVE":                2,
		"ERROR":                 3,
		"OFF":                   4,
	}
)

func (x SubscriptionStatusCode_Value) Enum() *SubscriptionStatusCode_Value {
	p := new(SubscriptionStatusCode_Value)
	*p = x
	return p
}

func (x SubscriptionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[268].Descriptor()
}

func (SubscriptionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[268]
}

func (x SubscriptionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatusCode_Value.Descriptor instead.
func (SubscriptionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{269, 0}
}

type SubscriptionTagCode_Value int32

const (
	SubscriptionTagCode_INVALID_UNINITIALIZED SubscriptionTagCode_Value = 0
	SubscriptionTagCode_QUEUED                SubscriptionTagCode_Value = 1
	SubscriptionTagCode_DELIVERED             SubscriptionTagCode_Value = 2
)

// Enum value maps for SubscriptionTagCode_Value.
var (
	SubscriptionTagCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "QUEUED",
		2: "DELIVERED",
	}
	SubscriptionTagCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUEUED":                1,
		"DELIVERED":             2,
	}
)

func (x SubscriptionTagCode_Value) Enum() *SubscriptionTagCode_Value {
	p := new(SubscriptionTagCode_Value)
	*p = x
	return p
}

func (x SubscriptionTagCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionTagCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[269].Descriptor()
}

func (SubscriptionTagCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[269]
}

func (x SubscriptionTagCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionTagCode_Value.Descriptor instead.
func (SubscriptionTagCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{270, 0}
}

type SubstanceCategoryCodesCode_Value int32

const (
	SubstanceCategoryCodesCode_INVALID_UNINITIALIZED SubstanceCategoryCodesCode_Value = 0
	SubstanceCategoryCodesCode_ALLERGEN              SubstanceCategoryCodesCode_Value = 1
	SubstanceCategoryCodesCode_BIOLOGICAL            SubstanceCategoryCodesCode_Value = 2
	SubstanceCategoryCodesCode_BODY                  SubstanceCategoryCodesCode_Value = 3
	SubstanceCategoryCodesCode_CHEMICAL              SubstanceCategoryCodesCode_Value = 4
	SubstanceCategoryCodesCode_FOOD                  SubstanceCategoryCodesCode_Value = 5
	SubstanceCategoryCodesCode_DRUG                  SubstanceCategoryCodesCode_Value = 6
	SubstanceCategoryCodesCode_MATERIAL              SubstanceCategoryCodesCode_Value = 7
)

// Enum value maps for SubstanceCategoryCodesCode_Value.
var (
	SubstanceCategoryCodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALLERGEN",
		2: "BIOLOGICAL",
		3: "BODY",
		4: "CHEMICAL",
		5: "FOOD",
		6: "DRUG",
		7: "MATERIAL",
	}
	SubstanceCategoryCodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALLERGEN":              1,
		"BIOLOGICAL":            2,
		"BODY":                  3,
		"CHEMICAL":              4,
		"FOOD":                  5,
		"DRUG":                  6,
		"MATERIAL":              7,
	}
)

func (x SubstanceCategoryCodesCode_Value) Enum() *SubstanceCategoryCodesCode_Value {
	p := new(SubstanceCategoryCodesCode_Value)
	*p = x
	return p
}

func (x SubstanceCategoryCodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubstanceCategoryCodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[270].Descriptor()
}

func (SubstanceCategoryCodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[270]
}

func (x SubstanceCategoryCodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubstanceCategoryCodesCode_Value.Descriptor instead.
func (SubstanceCategoryCodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{271, 0}
}

type FHIRSubstanceStatusCode_Value int32

const (
	FHIRSubstanceStatusCode_INVALID_UNINITIALIZED FHIRSubstanceStatusCode_Value = 0
	FHIRSubstanceStatusCode_ACTIVE                FHIRSubstanceStatusCode_Value = 1
	FHIRSubstanceStatusCode_INACTIVE              FHIRSubstanceStatusCode_Value = 2
	FHIRSubstanceStatusCode_ENTERED_IN_ERROR      FHIRSubstanceStatusCode_Value = 3
)

// Enum value maps for FHIRSubstanceStatusCode_Value.
var (
	FHIRSubstanceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FHIRSubstanceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FHIRSubstanceStatusCode_Value) Enum() *FHIRSubstanceStatusCode_Value {
	p := new(FHIRSubstanceStatusCode_Value)
	*p = x
	return p
}

func (x FHIRSubstanceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRSubstanceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[271].Descriptor()
}

func (FHIRSubstanceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[271]
}

func (x FHIRSubstanceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRSubstanceStatusCode_Value.Descriptor instead.
func (FHIRSubstanceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{272, 0}
}

type SupplyDeliveryStatusCode_Value int32

const (
	SupplyDeliveryStatusCode_INVALID_UNINITIALIZED SupplyDeliveryStatusCode_Value = 0
	SupplyDeliveryStatusCode_IN_PROGRESS           SupplyDeliveryStatusCode_Value = 1
	SupplyDeliveryStatusCode_COMPLETED             SupplyDeliveryStatusCode_Value = 2
	SupplyDeliveryStatusCode_ABANDONED             SupplyDeliveryStatusCode_Value = 3
	SupplyDeliveryStatusCode_ENTERED_IN_ERROR      SupplyDeliveryStatusCode_Value = 4
)

// Enum value maps for SupplyDeliveryStatusCode_Value.
var (
	SupplyDeliveryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ABANDONED",
		4: "ENTERED_IN_ERROR",
	}
	SupplyDeliveryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ABANDONED":             3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SupplyDeliveryStatusCode_Value) Enum() *SupplyDeliveryStatusCode_Value {
	p := new(SupplyDeliveryStatusCode_Value)
	*p = x
	return p
}

func (x SupplyDeliveryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyDeliveryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[272].Descriptor()
}

func (SupplyDeliveryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[272]
}

func (x SupplyDeliveryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyDeliveryStatusCode_Value.Descriptor instead.
func (SupplyDeliveryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{273, 0}
}

type SupplyItemTypeCode_Value int32

const (
	SupplyItemTypeCode_INVALID_UNINITIALIZED SupplyItemTypeCode_Value = 0
	SupplyItemTypeCode_MEDICATION            SupplyItemTypeCode_Value = 1
	SupplyItemTypeCode_DEVICE                SupplyItemTypeCode_Value = 2
)

// Enum value maps for SupplyItemTypeCode_Value.
var (
	SupplyItemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEDICATION",
		2: "DEVICE",
	}
	SupplyItemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEDICATION":            1,
		"DEVICE":                2,
	}
)

func (x SupplyItemTypeCode_Value) Enum() *SupplyItemTypeCode_Value {
	p := new(SupplyItemTypeCode_Value)
	*p = x
	return p
}

func (x SupplyItemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyItemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[273].Descriptor()
}

func (SupplyItemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[273]
}

func (x SupplyItemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyItemTypeCode_Value.Descriptor instead.
func (SupplyItemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{274, 0}
}

type SupplyTypeCode_Value int32

const (
	SupplyTypeCode_INVALID_UNINITIALIZED SupplyTypeCode_Value = 0
	SupplyTypeCode_CENTRAL               SupplyTypeCode_Value = 1
	SupplyTypeCode_NONSTOCK              SupplyTypeCode_Value = 2
)

// Enum value maps for SupplyTypeCode_Value.
var (
	SupplyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CENTRAL",
		2: "NONSTOCK",
	}
	SupplyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CENTRAL":               1,
		"NONSTOCK":              2,
	}
)

func (x SupplyTypeCode_Value) Enum() *SupplyTypeCode_Value {
	p := new(SupplyTypeCode_Value)
	*p = x
	return p
}

func (x SupplyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[274].Descriptor()
}

func (SupplyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[274]
}

func (x SupplyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyTypeCode_Value.Descriptor instead.
func (SupplyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{275, 0}
}

type SupplyRequestReasonCode_Value int32

const (
	SupplyRequestReasonCode_INVALID_UNINITIALIZED SupplyRequestReasonCode_Value = 0
	SupplyRequestReasonCode_PATIENT_CARE          SupplyRequestReasonCode_Value = 1
	SupplyRequestReasonCode_WARD_STOCK            SupplyRequestReasonCode_Value = 2
)

// Enum value maps for SupplyRequestReasonCode_Value.
var (
	SupplyRequestReasonCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PATIENT_CARE",
		2: "WARD_STOCK",
	}
	SupplyRequestReasonCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PATIENT_CARE":          1,
		"WARD_STOCK":            2,
	}
)

func (x SupplyRequestReasonCode_Value) Enum() *SupplyRequestReasonCode_Value {
	p := new(SupplyRequestReasonCode_Value)
	*p = x
	return p
}

func (x SupplyRequestReasonCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyRequestReasonCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[275].Descriptor()
}

func (SupplyRequestReasonCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[275]
}

func (x SupplyRequestReasonCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyRequestReasonCode_Value.Descriptor instead.
func (SupplyRequestReasonCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{276, 0}
}

type SupplyRequestStatusCode_Value int32

const (
	SupplyRequestStatusCode_INVALID_UNINITIALIZED SupplyRequestStatusCode_Value = 0
	SupplyRequestStatusCode_DRAFT                 SupplyRequestStatusCode_Value = 1
	SupplyRequestStatusCode_ACTIVE                SupplyRequestStatusCode_Value = 2
	SupplyRequestStatusCode_SUSPENDED             SupplyRequestStatusCode_Value = 3
	SupplyRequestStatusCode_CANCELLED             SupplyRequestStatusCode_Value = 4
	SupplyRequestStatusCode_COMPLETED             SupplyRequestStatusCode_Value = 5
	SupplyRequestStatusCode_ENTERED_IN_ERROR      SupplyRequestStatusCode_Value = 6
	SupplyRequestStatusCode_UNKNOWN               SupplyRequestStatusCode_Value = 7
)

// Enum value maps for SupplyRequestStatusCode_Value.
var (
	SupplyRequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "CANCELLED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	SupplyRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"CANCELLED":             4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x SupplyRequestStatusCode_Value) Enum() *SupplyRequestStatusCode_Value {
	p := new(SupplyRequestStatusCode_Value)
	*p = x
	return p
}

func (x SupplyRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[276].Descriptor()
}

func (SupplyRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[276]
}

func (x SupplyRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyRequestStatusCode_Value.Descriptor instead.
func (SupplyRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{277, 0}
}

type SystemRestfulInteractionCode_Value int32

const (
	SystemRestfulInteractionCode_INVALID_UNINITIALIZED SystemRestfulInteractionCode_Value = 0
	SystemRestfulInteractionCode_TRANSACTION           SystemRestfulInteractionCode_Value = 1
	SystemRestfulInteractionCode_BATCH                 SystemRestfulInteractionCode_Value = 2
	SystemRestfulInteractionCode_SEARCH_SYSTEM         SystemRestfulInteractionCode_Value = 3
	SystemRestfulInteractionCode_HISTORY_SYSTEM        SystemRestfulInteractionCode_Value = 4
)

// Enum value maps for SystemRestfulInteractionCode_Value.
var (
	SystemRestfulInteractionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TRANSACTION",
		2: "BATCH",
		3: "SEARCH_SYSTEM",
		4: "HISTORY_SYSTEM",
	}
	SystemRestfulInteractionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TRANSACTION":           1,
		"BATCH":                 2,
		"SEARCH_SYSTEM":         3,
		"HISTORY_SYSTEM":        4,
	}
)

func (x SystemRestfulInteractionCode_Value) Enum() *SystemRestfulInteractionCode_Value {
	p := new(SystemRestfulInteractionCode_Value)
	*p = x
	return p
}

func (x SystemRestfulInteractionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemRestfulInteractionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[277].Descriptor()
}

func (SystemRestfulInteractionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[277]
}

func (x SystemRestfulInteractionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemRestfulInteractionCode_Value.Descriptor instead.
func (SystemRestfulInteractionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{278, 0}
}

type SystemVersionProcessingModeCode_Value int32

const (
	SystemVersionProcessingModeCode_INVALID_UNINITIALIZED SystemVersionProcessingModeCode_Value = 0
	SystemVersionProcessingModeCode_DEFAULT               SystemVersionProcessingModeCode_Value = 1
	SystemVersionProcessingModeCode_CHECK                 SystemVersionProcessingModeCode_Value = 2
	SystemVersionProcessingModeCode_OVERRIDE              SystemVersionProcessingModeCode_Value = 3
)

// Enum value maps for SystemVersionProcessingModeCode_Value.
var (
	SystemVersionProcessingModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DEFAULT",
		2: "CHECK",
		3: "OVERRIDE",
	}
	SystemVersionProcessingModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DEFAULT":               1,
		"CHECK":                 2,
		"OVERRIDE":              3,
	}
)

func (x SystemVersionProcessingModeCode_Value) Enum() *SystemVersionProcessingModeCode_Value {
	p := new(SystemVersionProcessingModeCode_Value)
	*p = x
	return p
}

func (x SystemVersionProcessingModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemVersionProcessingModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[278].Descriptor()
}

func (SystemVersionProcessingModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[278]
}

func (x SystemVersionProcessingModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemVersionProcessingModeCode_Value.Descriptor instead.
func (SystemVersionProcessingModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{279, 0}
}

type TaskPerformerTypeCode_Value int32

const (
	TaskPerformerTypeCode_INVALID_UNINITIALIZED TaskPerformerTypeCode_Value = 0
	TaskPerformerTypeCode_REQUESTER             TaskPerformerTypeCode_Value = 1
	TaskPerformerTypeCode_DISPATCHER            TaskPerformerTypeCode_Value = 2
	TaskPerformerTypeCode_SCHEDULER             TaskPerformerTypeCode_Value = 3
	TaskPerformerTypeCode_PERFORMER             TaskPerformerTypeCode_Value = 4
	TaskPerformerTypeCode_MONITOR               TaskPerformerTypeCode_Value = 5
	TaskPerformerTypeCode_MANAGER               TaskPerformerTypeCode_Value = 6
	TaskPerformerTypeCode_ACQUIRER              TaskPerformerTypeCode_Value = 7
	TaskPerformerTypeCode_REVIEWER              TaskPerformerTypeCode_Value = 8
)

// Enum value maps for TaskPerformerTypeCode_Value.
var (
	TaskPerformerTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUESTER",
		2: "DISPATCHER",
		3: "SCHEDULER",
		4: "PERFORMER",
		5: "MONITOR",
		6: "MANAGER",
		7: "ACQUIRER",
		8: "REVIEWER",
	}
	TaskPerformerTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUESTER":             1,
		"DISPATCHER":            2,
		"SCHEDULER":             3,
		"PERFORMER":             4,
		"MONITOR":               5,
		"MANAGER":               6,
		"ACQUIRER":              7,
		"REVIEWER":              8,
	}
)

func (x TaskPerformerTypeCode_Value) Enum() *TaskPerformerTypeCode_Value {
	p := new(TaskPerformerTypeCode_Value)
	*p = x
	return p
}

func (x TaskPerformerTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskPerformerTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[279].Descriptor()
}

func (TaskPerformerTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[279]
}

func (x TaskPerformerTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskPerformerTypeCode_Value.Descriptor instead.
func (TaskPerformerTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{280, 0}
}

type TemplateStatusCodeCode_Value int32

const (
	TemplateStatusCodeCode_INVALID_UNINITIALIZED TemplateStatusCodeCode_Value = 0
	TemplateStatusCodeCode_DRAFT                 TemplateStatusCodeCode_Value = 1
	TemplateStatusCodeCode_PENDING               TemplateStatusCodeCode_Value = 2
	TemplateStatusCodeCode_ACTIVE                TemplateStatusCodeCode_Value = 3
	TemplateStatusCodeCode_REVIEW                TemplateStatusCodeCode_Value = 4
	TemplateStatusCodeCode_CANCELLED             TemplateStatusCodeCode_Value = 5
	TemplateStatusCodeCode_REJECTED              TemplateStatusCodeCode_Value = 6
	TemplateStatusCodeCode_RETIRED               TemplateStatusCodeCode_Value = 7
	TemplateStatusCodeCode_TERMINATED            TemplateStatusCodeCode_Value = 8
)

// Enum value maps for TemplateStatusCodeCode_Value.
var (
	TemplateStatusCodeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "PENDING",
		3: "ACTIVE",
		4: "REVIEW",
		5: "CANCELLED",
		6: "REJECTED",
		7: "RETIRED",
		8: "TERMINATED",
	}
	TemplateStatusCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"PENDING":               2,
		"ACTIVE":                3,
		"REVIEW":                4,
		"CANCELLED":             5,
		"REJECTED":              6,
		"RETIRED":               7,
		"TERMINATED":            8,
	}
)

func (x TemplateStatusCodeCode_Value) Enum() *TemplateStatusCodeCode_Value {
	p := new(TemplateStatusCodeCode_Value)
	*p = x
	return p
}

func (x TemplateStatusCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateStatusCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[280].Descriptor()
}

func (TemplateStatusCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[280]
}

func (x TemplateStatusCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateStatusCodeCode_Value.Descriptor instead.
func (TemplateStatusCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{281, 0}
}

type TaskStatusCode_Value int32

const (
	TaskStatusCode_INVALID_UNINITIALIZED TaskStatusCode_Value = 0
	TaskStatusCode_DRAFT                 TaskStatusCode_Value = 1
	TaskStatusCode_REQUESTED             TaskStatusCode_Value = 2
	TaskStatusCode_RECEIVED              TaskStatusCode_Value = 3
	TaskStatusCode_ACCEPTED              TaskStatusCode_Value = 4
	TaskStatusCode_REJECTED              TaskStatusCode_Value = 5
	TaskStatusCode_READY                 TaskStatusCode_Value = 6
	TaskStatusCode_CANCELLED             TaskStatusCode_Value = 7
	TaskStatusCode_IN_PROGRESS           TaskStatusCode_Value = 8
	TaskStatusCode_ON_HOLD               TaskStatusCode_Value = 9
	TaskStatusCode_FAILED                TaskStatusCode_Value = 10
	TaskStatusCode_COMPLETED             TaskStatusCode_Value = 11
	TaskStatusCode_ENTERED_IN_ERROR      TaskStatusCode_Value = 12
)

// Enum value maps for TaskStatusCode_Value.
var (
	TaskStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "DRAFT",
		2:  "REQUESTED",
		3:  "RECEIVED",
		4:  "ACCEPTED",
		5:  "REJECTED",
		6:  "READY",
		7:  "CANCELLED",
		8:  "IN_PROGRESS",
		9:  "ON_HOLD",
		10: "FAILED",
		11: "COMPLETED",
		12: "ENTERED_IN_ERROR",
	}
	TaskStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"REQUESTED":             2,
		"RECEIVED":              3,
		"ACCEPTED":              4,
		"REJECTED":              5,
		"READY":                 6,
		"CANCELLED":             7,
		"IN_PROGRESS":           8,
		"ON_HOLD":               9,
		"FAILED":                10,
		"COMPLETED":             11,
		"ENTERED_IN_ERROR":      12,
	}
)

func (x TaskStatusCode_Value) Enum() *TaskStatusCode_Value {
	p := new(TaskStatusCode_Value)
	*p = x
	return p
}

func (x TaskStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[281].Descriptor()
}

func (TaskStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[281]
}

func (x TaskStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatusCode_Value.Descriptor instead.
func (TaskStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{282, 0}
}

type TestScriptOperationCodeCode_Value int32

const (
	TestScriptOperationCodeCode_INVALID_UNINITIALIZED TestScriptOperationCodeCode_Value = 0
	TestScriptOperationCodeCode_READ                  TestScriptOperationCodeCode_Value = 1
	TestScriptOperationCodeCode_VREAD                 TestScriptOperationCodeCode_Value = 2
	TestScriptOperationCodeCode_UPDATE                TestScriptOperationCodeCode_Value = 3
	TestScriptOperationCodeCode_UPDATE_CREATE         TestScriptOperationCodeCode_Value = 4
	TestScriptOperationCodeCode_DELETE                TestScriptOperationCodeCode_Value = 5
	TestScriptOperationCodeCode_DELETE_COND_SINGLE    TestScriptOperationCodeCode_Value = 6
	TestScriptOperationCodeCode_DELETE_COND_MULTIPLE  TestScriptOperationCodeCode_Value = 7
	TestScriptOperationCodeCode_HISTORY               TestScriptOperationCodeCode_Value = 8
	TestScriptOperationCodeCode_CREATE                TestScriptOperationCodeCode_Value = 9
	TestScriptOperationCodeCode_SEARCH                TestScriptOperationCodeCode_Value = 10
	TestScriptOperationCodeCode_BATCH                 TestScriptOperationCodeCode_Value = 11
	TestScriptOperationCodeCode_TRANSACTION           TestScriptOperationCodeCode_Value = 12
	TestScriptOperationCodeCode_CAPABILITIES          TestScriptOperationCodeCode_Value = 13
	TestScriptOperationCodeCode_APPLY                 TestScriptOperationCodeCode_Value = 14
	TestScriptOperationCodeCode_CANCEL                TestScriptOperationCodeCode_Value = 15
	TestScriptOperationCodeCode_CLOSURE               TestScriptOperationCodeCode_Value = 16
	TestScriptOperationCodeCode_COMPOSE               TestScriptOperationCodeCode_Value = 17
	TestScriptOperationCodeCode_CONFORMS              TestScriptOperationCodeCode_Value = 18
	TestScriptOperationCodeCode_DATA_REQUIREMENTS     TestScriptOperationCodeCode_Value = 19
	TestScriptOperationCodeCode_DOCUMENT              TestScriptOperationCodeCode_Value = 20
	TestScriptOperationCodeCode_EVALUATE              TestScriptOperationCodeCode_Value = 21
	TestScriptOperationCodeCode_EVALUATE_MEASURE      TestScriptOperationCodeCode_Value = 22
	TestScriptOperationCodeCode_EVERYTHING            TestScriptOperationCodeCode_Value = 23
	TestScriptOperationCodeCode_EXPAND                TestScriptOperationCodeCode_Value = 24
	TestScriptOperationCodeCode_FAIL                  TestScriptOperationCodeCode_Value = 25
	TestScriptOperationCodeCode_FIND                  TestScriptOperationCodeCode_Value = 26
	TestScriptOperationCodeCode_FINISH                TestScriptOperationCodeCode_Value = 27
	TestScriptOperationCodeCode_IMPLEMENTS            TestScriptOperationCodeCode_Value = 28
	TestScriptOperationCodeCode_LOOKUP                TestScriptOperationCodeCode_Value = 29
	TestScriptOperationCodeCode_MATCH                 TestScriptOperationCodeCode_Value = 30
	TestScriptOperationCodeCode_META                  TestScriptOperationCodeCode_Value = 31
	TestScriptOperationCodeCode_META_ADD              TestScriptOperationCodeCode_Value = 32
	TestScriptOperationCodeCode_META_DELETE           TestScriptOperationCodeCode_Value = 33
	TestScriptOperationCodeCode_POPULATE              TestScriptOperationCodeCode_Value = 34
	TestScriptOperationCodeCode_POPULATEHTML          TestScriptOperationCodeCode_Value = 35
	TestScriptOperationCodeCode_POPULATELINK          TestScriptOperationCodeCode_Value = 36
	TestScriptOperationCodeCode_PROCESS_MESSAGE       TestScriptOperationCodeCode_Value = 37
	TestScriptOperationCodeCode_QUESTIONNAIRE         TestScriptOperationCodeCode_Value = 38
	TestScriptOperationCodeCode_RELEASE               TestScriptOperationCodeCode_Value = 39
	TestScriptOperationCodeCode_RESERVE               TestScriptOperationCodeCode_Value = 40
	TestScriptOperationCodeCode_RESUME                TestScriptOperationCodeCode_Value = 41
	TestScriptOperationCodeCode_SET_INPUT             TestScriptOperationCodeCode_Value = 42
	TestScriptOperationCodeCode_SET_OUTPUT            TestScriptOperationCodeCode_Value = 43
	TestScriptOperationCodeCode_START                 TestScriptOperationCodeCode_Value = 44
	TestScriptOperationCodeCode_STATS                 TestScriptOperationCodeCode_Value = 45
	TestScriptOperationCodeCode_STOP                  TestScriptOperationCodeCode_Value = 46
	TestScriptOperationCodeCode_SUBSET                TestScriptOperationCodeCode_Value = 47
	TestScriptOperationCodeCode_SUBSUMES              TestScriptOperationCodeCode_Value = 48
	TestScriptOperationCodeCode_SUSPEND               TestScriptOperationCodeCode_Value = 49
	TestScriptOperationCodeCode_TRANSFORM             TestScriptOperationCodeCode_Value = 50
	TestScriptOperationCodeCode_TRANSLATE             TestScriptOperationCodeCode_Value = 51
	TestScriptOperationCodeCode_VALIDATE              TestScriptOperationCodeCode_Value = 52
	TestScriptOperationCodeCode_VALIDATE_CODE         TestScriptOperationCodeCode_Value = 53
)

// Enum value maps for TestScriptOperationCodeCode_Value.
var (
	TestScriptOperationCodeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "READ",
		2:  "VREAD",
		3:  "UPDATE",
		4:  "UPDATE_CREATE",
		5:  "DELETE",
		6:  "DELETE_COND_SINGLE",
		7:  "DELETE_COND_MULTIPLE",
		8:  "HISTORY",
		9:  "CREATE",
		10: "SEARCH",
		11: "BATCH",
		12: "TRANSACTION",
		13: "CAPABILITIES",
		14: "APPLY",
		15: "CANCEL",
		16: "CLOSURE",
		17: "COMPOSE",
		18: "CONFORMS",
		19: "DATA_REQUIREMENTS",
		20: "DOCUMENT",
		21: "EVALUATE",
		22: "EVALUATE_MEASURE",
		23: "EVERYTHING",
		24: "EXPAND",
		25: "FAIL",
		26: "FIND",
		27: "FINISH",
		28: "IMPLEMENTS",
		29: "LOOKUP",
		30: "MATCH",
		31: "META",
		32: "META_ADD",
		33: "META_DELETE",
		34: "POPULATE",
		35: "POPULATEHTML",
		36: "POPULATELINK",
		37: "PROCESS_MESSAGE",
		38: "QUESTIONNAIRE",
		39: "RELEASE",
		40: "RESERVE",
		41: "RESUME",
		42: "SET_INPUT",
		43: "SET_OUTPUT",
		44: "START",
		45: "STATS",
		46: "STOP",
		47: "SUBSET",
		48: "SUBSUMES",
		49: "SUSPEND",
		50: "TRANSFORM",
		51: "TRANSLATE",
		52: "VALIDATE",
		53: "VALIDATE_CODE",
	}
	TestScriptOperationCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"READ":                  1,
		"VREAD":                 2,
		"UPDATE":                3,
		"UPDATE_CREATE":         4,
		"DELETE":                5,
		"DELETE_COND_SINGLE":    6,
		"DELETE_COND_MULTIPLE":  7,
		"HISTORY":               8,
		"CREATE":                9,
		"SEARCH":                10,
		"BATCH":                 11,
		"TRANSACTION":           12,
		"CAPABILITIES":          13,
		"APPLY":                 14,
		"CANCEL":                15,
		"CLOSURE":               16,
		"COMPOSE":               17,
		"CONFORMS":              18,
		"DATA_REQUIREMENTS":     19,
		"DOCUMENT":              20,
		"EVALUATE":              21,
		"EVALUATE_MEASURE":      22,
		"EVERYTHING":            23,
		"EXPAND":                24,
		"FAIL":                  25,
		"FIND":                  26,
		"FINISH":                27,
		"IMPLEMENTS":            28,
		"LOOKUP":                29,
		"MATCH":                 30,
		"META":                  31,
		"META_ADD":              32,
		"META_DELETE":           33,
		"POPULATE":              34,
		"POPULATEHTML":          35,
		"POPULATELINK":          36,
		"PROCESS_MESSAGE":       37,
		"QUESTIONNAIRE":         38,
		"RELEASE":               39,
		"RESERVE":               40,
		"RESUME":                41,
		"SET_INPUT":             42,
		"SET_OUTPUT":            43,
		"START":                 44,
		"STATS":                 45,
		"STOP":                  46,
		"SUBSET":                47,
		"SUBSUMES":              48,
		"SUSPEND":               49,
		"TRANSFORM":             50,
		"TRANSLATE":             51,
		"VALIDATE":              52,
		"VALIDATE_CODE":         53,
	}
)

func (x TestScriptOperationCodeCode_Value) Enum() *TestScriptOperationCodeCode_Value {
	p := new(TestScriptOperationCodeCode_Value)
	*p = x
	return p
}

func (x TestScriptOperationCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestScriptOperationCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[282].Descriptor()
}

func (TestScriptOperationCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[282]
}

func (x TestScriptOperationCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestScriptOperationCodeCode_Value.Descriptor instead.
func (TestScriptOperationCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{283, 0}
}

type TestScriptProfileDestinationTypeCode_Value int32

const (
	TestScriptProfileDestinationTypeCode_INVALID_UNINITIALIZED  TestScriptProfileDestinationTypeCode_Value = 0
	TestScriptProfileDestinationTypeCode_FHIR_SERVER            TestScriptProfileDestinationTypeCode_Value = 1
	TestScriptProfileDestinationTypeCode_FHIR_SDC_FORMMANAGER   TestScriptProfileDestinationTypeCode_Value = 2
	TestScriptProfileDestinationTypeCode_FHIR_SDC_FORMPROCESSOR TestScriptProfileDestinationTypeCode_Value = 3
	TestScriptProfileDestinationTypeCode_FHIR_SDC_FORMRECEIVER  TestScriptProfileDestinationTypeCode_Value = 4
)

// Enum value maps for TestScriptProfileDestinationTypeCode_Value.
var (
	TestScriptProfileDestinationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FHIR_SERVER",
		2: "FHIR_SDC_FORMMANAGER",
		3: "FHIR_SDC_FORMPROCESSOR",
		4: "FHIR_SDC_FORMRECEIVER",
	}
	TestScriptProfileDestinationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"FHIR_SERVER":            1,
		"FHIR_SDC_FORMMANAGER":   2,
		"FHIR_SDC_FORMPROCESSOR": 3,
		"FHIR_SDC_FORMRECEIVER":  4,
	}
)

func (x TestScriptProfileDestinationTypeCode_Value) Enum() *TestScriptProfileDestinationTypeCode_Value {
	p := new(TestScriptProfileDestinationTypeCode_Value)
	*p = x
	return p
}

func (x TestScriptProfileDestinationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestScriptProfileDestinationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[283].Descriptor()
}

func (TestScriptProfileDestinationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[283]
}

func (x TestScriptProfileDestinationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestScriptProfileDestinationTypeCode_Value.Descriptor instead.
func (TestScriptProfileDestinationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{284, 0}
}

type TestScriptProfileOriginTypeCode_Value int32

const (
	TestScriptProfileOriginTypeCode_INVALID_UNINITIALIZED TestScriptProfileOriginTypeCode_Value = 0
	TestScriptProfileOriginTypeCode_FHIR_CLIENT           TestScriptProfileOriginTypeCode_Value = 1
	TestScriptProfileOriginTypeCode_FHIR_SDC_FORMFILLER   TestScriptProfileOriginTypeCode_Value = 2
)

// Enum value maps for TestScriptProfileOriginTypeCode_Value.
var (
	TestScriptProfileOriginTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FHIR_CLIENT",
		2: "FHIR_SDC_FORMFILLER",
	}
	TestScriptProfileOriginTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FHIR_CLIENT":           1,
		"FHIR_SDC_FORMFILLER":   2,
	}
)

func (x TestScriptProfileOriginTypeCode_Value) Enum() *TestScriptProfileOriginTypeCode_Value {
	p := new(TestScriptProfileOriginTypeCode_Value)
	*p = x
	return p
}

func (x TestScriptProfileOriginTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestScriptProfileOriginTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[284].Descriptor()
}

func (TestScriptProfileOriginTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[284]
}

func (x TestScriptProfileOriginTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestScriptProfileOriginTypeCode_Value.Descriptor instead.
func (TestScriptProfileOriginTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{285, 0}
}

type TransactionModeCode_Value int32

const (
	TransactionModeCode_INVALID_UNINITIALIZED TransactionModeCode_Value = 0
	TransactionModeCode_NOT_SUPPORTED         TransactionModeCode_Value = 1
	TransactionModeCode_BATCH                 TransactionModeCode_Value = 2
	TransactionModeCode_TRANSACTION           TransactionModeCode_Value = 3
	TransactionModeCode_BOTH                  TransactionModeCode_Value = 4
)

// Enum value maps for TransactionModeCode_Value.
var (
	TransactionModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "BATCH",
		3: "TRANSACTION",
		4: "BOTH",
	}
	TransactionModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"BATCH":                 2,
		"TRANSACTION":           3,
		"BOTH":                  4,
	}
)

func (x TransactionModeCode_Value) Enum() *TransactionModeCode_Value {
	p := new(TransactionModeCode_Value)
	*p = x
	return p
}

func (x TransactionModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[285].Descriptor()
}

func (TransactionModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[285]
}

func (x TransactionModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionModeCode_Value.Descriptor instead.
func (TransactionModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{286, 0}
}

type TypeDerivationRuleCode_Value int32

const (
	TypeDerivationRuleCode_INVALID_UNINITIALIZED TypeDerivationRuleCode_Value = 0
	TypeDerivationRuleCode_SPECIALIZATION        TypeDerivationRuleCode_Value = 1
	TypeDerivationRuleCode_CONSTRAINT            TypeDerivationRuleCode_Value = 2
)

// Enum value maps for TypeDerivationRuleCode_Value.
var (
	TypeDerivationRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SPECIALIZATION",
		2: "CONSTRAINT",
	}
	TypeDerivationRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SPECIALIZATION":        1,
		"CONSTRAINT":            2,
	}
)

func (x TypeDerivationRuleCode_Value) Enum() *TypeDerivationRuleCode_Value {
	p := new(TypeDerivationRuleCode_Value)
	*p = x
	return p
}

func (x TypeDerivationRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeDerivationRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[286].Descriptor()
}

func (TypeDerivationRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[286]
}

func (x TypeDerivationRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeDerivationRuleCode_Value.Descriptor instead.
func (TypeDerivationRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{287, 0}
}

type TypeRestfulInteractionCode_Value int32

const (
	TypeRestfulInteractionCode_INVALID_UNINITIALIZED TypeRestfulInteractionCode_Value = 0
	TypeRestfulInteractionCode_READ                  TypeRestfulInteractionCode_Value = 1
	TypeRestfulInteractionCode_VREAD                 TypeRestfulInteractionCode_Value = 2
	TypeRestfulInteractionCode_UPDATE                TypeRestfulInteractionCode_Value = 3
	TypeRestfulInteractionCode_PATCH                 TypeRestfulInteractionCode_Value = 4
	TypeRestfulInteractionCode_DELETE                TypeRestfulInteractionCode_Value = 5
	TypeRestfulInteractionCode_HISTORY_INSTANCE      TypeRestfulInteractionCode_Value = 6
	TypeRestfulInteractionCode_HISTORY_TYPE          TypeRestfulInteractionCode_Value = 7
	TypeRestfulInteractionCode_CREATE                TypeRestfulInteractionCode_Value = 8
	TypeRestfulInteractionCode_SEARCH_TYPE           TypeRestfulInteractionCode_Value = 9
)

// Enum value maps for TypeRestfulInteractionCode_Value.
var (
	TypeRestfulInteractionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "READ",
		2: "VREAD",
		3: "UPDATE",
		4: "PATCH",
		5: "DELETE",
		6: "HISTORY_INSTANCE",
		7: "HISTORY_TYPE",
		8: "CREATE",
		9: "SEARCH_TYPE",
	}
	TypeRestfulInteractionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"READ":                  1,
		"VREAD":                 2,
		"UPDATE":                3,
		"PATCH":                 4,
		"DELETE":                5,
		"HISTORY_INSTANCE":      6,
		"HISTORY_TYPE":          7,
		"CREATE":                8,
		"SEARCH_TYPE":           9,
	}
)

func (x TypeRestfulInteractionCode_Value) Enum() *TypeRestfulInteractionCode_Value {
	p := new(TypeRestfulInteractionCode_Value)
	*p = x
	return p
}

func (x TypeRestfulInteractionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeRestfulInteractionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[287].Descriptor()
}

func (TypeRestfulInteractionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[287]
}

func (x TypeRestfulInteractionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeRestfulInteractionCode_Value.Descriptor instead.
func (TypeRestfulInteractionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{288, 0}
}

type UDIEntryTypeCode_Value int32

const (
	UDIEntryTypeCode_INVALID_UNINITIALIZED UDIEntryTypeCode_Value = 0
	UDIEntryTypeCode_BARCODE               UDIEntryTypeCode_Value = 1
	UDIEntryTypeCode_RFID                  UDIEntryTypeCode_Value = 2
	UDIEntryTypeCode_MANUAL                UDIEntryTypeCode_Value = 3
	UDIEntryTypeCode_CARD                  UDIEntryTypeCode_Value = 4
	UDIEntryTypeCode_SELF_REPORTED         UDIEntryTypeCode_Value = 5
	UDIEntryTypeCode_UNKNOWN               UDIEntryTypeCode_Value = 6
)

// Enum value maps for UDIEntryTypeCode_Value.
var (
	UDIEntryTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BARCODE",
		2: "RFID",
		3: "MANUAL",
		4: "CARD",
		5: "SELF_REPORTED",
		6: "UNKNOWN",
	}
	UDIEntryTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BARCODE":               1,
		"RFID":                  2,
		"MANUAL":                3,
		"CARD":                  4,
		"SELF_REPORTED":         5,
		"UNKNOWN":               6,
	}
)

func (x UDIEntryTypeCode_Value) Enum() *UDIEntryTypeCode_Value {
	p := new(UDIEntryTypeCode_Value)
	*p = x
	return p
}

func (x UDIEntryTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UDIEntryTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[288].Descriptor()
}

func (UDIEntryTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[288]
}

func (x UDIEntryTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UDIEntryTypeCode_Value.Descriptor instead.
func (UDIEntryTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{289, 0}
}

type UnknownContentCodeCode_Value int32

const (
	UnknownContentCodeCode_INVALID_UNINITIALIZED UnknownContentCodeCode_Value = 0
	UnknownContentCodeCode_NO                    UnknownContentCodeCode_Value = 1
	UnknownContentCodeCode_EXTENSIONS            UnknownContentCodeCode_Value = 2
	UnknownContentCodeCode_ELEMENTS              UnknownContentCodeCode_Value = 3
	UnknownContentCodeCode_BOTH                  UnknownContentCodeCode_Value = 4
)

// Enum value maps for UnknownContentCodeCode_Value.
var (
	UnknownContentCodeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NO",
		2: "EXTENSIONS",
		3: "ELEMENTS",
		4: "BOTH",
	}
	UnknownContentCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NO":                    1,
		"EXTENSIONS":            2,
		"ELEMENTS":              3,
		"BOTH":                  4,
	}
)

func (x UnknownContentCodeCode_Value) Enum() *UnknownContentCodeCode_Value {
	p := new(UnknownContentCodeCode_Value)
	*p = x
	return p
}

func (x UnknownContentCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnknownContentCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[289].Descriptor()
}

func (UnknownContentCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[289]
}

func (x UnknownContentCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnknownContentCodeCode_Value.Descriptor instead.
func (UnknownContentCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{290, 0}
}

type UsageContextTypeCode_Value int32

const (
	UsageContextTypeCode_INVALID_UNINITIALIZED UsageContextTypeCode_Value = 0
	UsageContextTypeCode_GENDER                UsageContextTypeCode_Value = 1
	UsageContextTypeCode_AGE                   UsageContextTypeCode_Value = 2
	UsageContextTypeCode_FOCUS                 UsageContextTypeCode_Value = 3
	UsageContextTypeCode_USER                  UsageContextTypeCode_Value = 4
	UsageContextTypeCode_WORKFLOW              UsageContextTypeCode_Value = 5
	UsageContextTypeCode_TASK                  UsageContextTypeCode_Value = 6
	UsageContextTypeCode_VENUE                 UsageContextTypeCode_Value = 7
	UsageContextTypeCode_SPECIES               UsageContextTypeCode_Value = 8
)

// Enum value maps for UsageContextTypeCode_Value.
var (
	UsageContextTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GENDER",
		2: "AGE",
		3: "FOCUS",
		4: "USER",
		5: "WORKFLOW",
		6: "TASK",
		7: "VENUE",
		8: "SPECIES",
	}
	UsageContextTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GENDER":                1,
		"AGE":                   2,
		"FOCUS":                 3,
		"USER":                  4,
		"WORKFLOW":              5,
		"TASK":                  6,
		"VENUE":                 7,
		"SPECIES":               8,
	}
)

func (x UsageContextTypeCode_Value) Enum() *UsageContextTypeCode_Value {
	p := new(UsageContextTypeCode_Value)
	*p = x
	return p
}

func (x UsageContextTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageContextTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[290].Descriptor()
}

func (UsageContextTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[290]
}

func (x UsageContextTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageContextTypeCode_Value.Descriptor instead.
func (UsageContextTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{291, 0}
}

type ConfidentialityClassificationCode_Value int32

const (
	ConfidentialityClassificationCode_INVALID_UNINITIALIZED ConfidentialityClassificationCode_Value = 0
	ConfidentialityClassificationCode_U                     ConfidentialityClassificationCode_Value = 1
	ConfidentialityClassificationCode_L                     ConfidentialityClassificationCode_Value = 2
	ConfidentialityClassificationCode_M                     ConfidentialityClassificationCode_Value = 3
	ConfidentialityClassificationCode_N                     ConfidentialityClassificationCode_Value = 4
	ConfidentialityClassificationCode_R                     ConfidentialityClassificationCode_Value = 5
	ConfidentialityClassificationCode_V                     ConfidentialityClassificationCode_Value = 6
)

// Enum value maps for ConfidentialityClassificationCode_Value.
var (
	ConfidentialityClassificationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "U",
		2: "L",
		3: "M",
		4: "N",
		5: "R",
		6: "V",
	}
	ConfidentialityClassificationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"U":                     1,
		"L":                     2,
		"M":                     3,
		"N":                     4,
		"R":                     5,
		"V":                     6,
	}
)

func (x ConfidentialityClassificationCode_Value) Enum() *ConfidentialityClassificationCode_Value {
	p := new(ConfidentialityClassificationCode_Value)
	*p = x
	return p
}

func (x ConfidentialityClassificationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidentialityClassificationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[291].Descriptor()
}

func (ConfidentialityClassificationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[291]
}

func (x ConfidentialityClassificationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidentialityClassificationCode_Value.Descriptor instead.
func (ConfidentialityClassificationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{292, 0}
}

type VaccinationProtocolDoseStatuscodesCode_Value int32

const (
	VaccinationProtocolDoseStatuscodesCode_INVALID_UNINITIALIZED VaccinationProtocolDoseStatuscodesCode_Value = 0
	VaccinationProtocolDoseStatuscodesCode_COUNT                 VaccinationProtocolDoseStatuscodesCode_Value = 1
	VaccinationProtocolDoseStatuscodesCode_NOCOUNT               VaccinationProtocolDoseStatuscodesCode_Value = 2
)

// Enum value maps for VaccinationProtocolDoseStatuscodesCode_Value.
var (
	VaccinationProtocolDoseStatuscodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COUNT",
		2: "NOCOUNT",
	}
	VaccinationProtocolDoseStatuscodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COUNT":                 1,
		"NOCOUNT":               2,
	}
)

func (x VaccinationProtocolDoseStatuscodesCode_Value) Enum() *VaccinationProtocolDoseStatuscodesCode_Value {
	p := new(VaccinationProtocolDoseStatuscodesCode_Value)
	*p = x
	return p
}

func (x VaccinationProtocolDoseStatuscodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VaccinationProtocolDoseStatuscodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[292].Descriptor()
}

func (VaccinationProtocolDoseStatuscodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[292]
}

func (x VaccinationProtocolDoseStatuscodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VaccinationProtocolDoseStatuscodesCode_Value.Descriptor instead.
func (VaccinationProtocolDoseStatuscodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{293, 0}
}

type VaccinationProtocolDoseStatusReasoncodesCode_Value int32

const (
	VaccinationProtocolDoseStatusReasoncodesCode_INVALID_UNINITIALIZED VaccinationProtocolDoseStatusReasoncodesCode_Value = 0
	VaccinationProtocolDoseStatusReasoncodesCode_ADVSTORAGE            VaccinationProtocolDoseStatusReasoncodesCode_Value = 1
	VaccinationProtocolDoseStatusReasoncodesCode_COLDCHBRK             VaccinationProtocolDoseStatusReasoncodesCode_Value = 2
	VaccinationProtocolDoseStatusReasoncodesCode_EXPLOT                VaccinationProtocolDoseStatusReasoncodesCode_Value = 3
	VaccinationProtocolDoseStatusReasoncodesCode_OUTSIDESCHED          VaccinationProtocolDoseStatusReasoncodesCode_Value = 4
	VaccinationProtocolDoseStatusReasoncodesCode_PRODRECALL            VaccinationProtocolDoseStatusReasoncodesCode_Value = 5
)

// Enum value maps for VaccinationProtocolDoseStatusReasoncodesCode_Value.
var (
	VaccinationProtocolDoseStatusReasoncodesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ADVSTORAGE",
		2: "COLDCHBRK",
		3: "EXPLOT",
		4: "OUTSIDESCHED",
		5: "PRODRECALL",
	}
	VaccinationProtocolDoseStatusReasoncodesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ADVSTORAGE":            1,
		"COLDCHBRK":             2,
		"EXPLOT":                3,
		"OUTSIDESCHED":          4,
		"PRODRECALL":            5,
	}
)

func (x VaccinationProtocolDoseStatusReasoncodesCode_Value) Enum() *VaccinationProtocolDoseStatusReasoncodesCode_Value {
	p := new(VaccinationProtocolDoseStatusReasoncodesCode_Value)
	*p = x
	return p
}

func (x VaccinationProtocolDoseStatusReasoncodesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VaccinationProtocolDoseStatusReasoncodesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[293].Descriptor()
}

func (VaccinationProtocolDoseStatusReasoncodesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[293]
}

func (x VaccinationProtocolDoseStatusReasoncodesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VaccinationProtocolDoseStatusReasoncodesCode_Value.Descriptor instead.
func (VaccinationProtocolDoseStatusReasoncodesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{294, 0}
}

type SequenceStatusCode_Value int32

const (
	SequenceStatusCode_INVALID_UNINITIALIZED SequenceStatusCode_Value = 0
	SequenceStatusCode_POSITIVE              SequenceStatusCode_Value = 1
	SequenceStatusCode_NEGATIVE              SequenceStatusCode_Value = 2
	SequenceStatusCode_ABSENT                SequenceStatusCode_Value = 3
)

// Enum value maps for SequenceStatusCode_Value.
var (
	SequenceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POSITIVE",
		2: "NEGATIVE",
		3: "ABSENT",
	}
	SequenceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POSITIVE":              1,
		"NEGATIVE":              2,
		"ABSENT":                3,
	}
)

func (x SequenceStatusCode_Value) Enum() *SequenceStatusCode_Value {
	p := new(SequenceStatusCode_Value)
	*p = x
	return p
}

func (x SequenceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequenceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[294].Descriptor()
}

func (SequenceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[294]
}

func (x SequenceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SequenceStatusCode_Value.Descriptor instead.
func (SequenceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{295, 0}
}

type ResourceVersionPolicyCode_Value int32

const (
	ResourceVersionPolicyCode_INVALID_UNINITIALIZED ResourceVersionPolicyCode_Value = 0
	ResourceVersionPolicyCode_NO_VERSION            ResourceVersionPolicyCode_Value = 1
	ResourceVersionPolicyCode_VERSIONED             ResourceVersionPolicyCode_Value = 2
	ResourceVersionPolicyCode_VERSIONED_UPDATE      ResourceVersionPolicyCode_Value = 3
)

// Enum value maps for ResourceVersionPolicyCode_Value.
var (
	ResourceVersionPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NO_VERSION",
		2: "VERSIONED",
		3: "VERSIONED_UPDATE",
	}
	ResourceVersionPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NO_VERSION":            1,
		"VERSIONED":             2,
		"VERSIONED_UPDATE":      3,
	}
)

func (x ResourceVersionPolicyCode_Value) Enum() *ResourceVersionPolicyCode_Value {
	p := new(ResourceVersionPolicyCode_Value)
	*p = x
	return p
}

func (x ResourceVersionPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceVersionPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[295].Descriptor()
}

func (ResourceVersionPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[295]
}

func (x ResourceVersionPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceVersionPolicyCode_Value.Descriptor instead.
func (ResourceVersionPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{296, 0}
}

type VisionBaseCode_Value int32

const (
	VisionBaseCode_INVALID_UNINITIALIZED VisionBaseCode_Value = 0
	VisionBaseCode_UP                    VisionBaseCode_Value = 1
	VisionBaseCode_DOWN                  VisionBaseCode_Value = 2
	VisionBaseCode_IN                    VisionBaseCode_Value = 3
	VisionBaseCode_OUT                   VisionBaseCode_Value = 4
)

// Enum value maps for VisionBaseCode_Value.
var (
	VisionBaseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UP",
		2: "DOWN",
		3: "IN",
		4: "OUT",
	}
	VisionBaseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UP":                    1,
		"DOWN":                  2,
		"IN":                    3,
		"OUT":                   4,
	}
)

func (x VisionBaseCode_Value) Enum() *VisionBaseCode_Value {
	p := new(VisionBaseCode_Value)
	*p = x
	return p
}

func (x VisionBaseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionBaseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[296].Descriptor()
}

func (VisionBaseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[296]
}

func (x VisionBaseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionBaseCode_Value.Descriptor instead.
func (VisionBaseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{297, 0}
}

type VisionEyesCode_Value int32

const (
	VisionEyesCode_INVALID_UNINITIALIZED VisionEyesCode_Value = 0
	VisionEyesCode_RIGHT                 VisionEyesCode_Value = 1
	VisionEyesCode_LEFT                  VisionEyesCode_Value = 2
)

// Enum value maps for VisionEyesCode_Value.
var (
	VisionEyesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RIGHT",
		2: "LEFT",
	}
	VisionEyesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RIGHT":                 1,
		"LEFT":                  2,
	}
)

func (x VisionEyesCode_Value) Enum() *VisionEyesCode_Value {
	p := new(VisionEyesCode_Value)
	*p = x
	return p
}

func (x VisionEyesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionEyesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[297].Descriptor()
}

func (VisionEyesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_codes_proto_enumTypes[297]
}

func (x VisionEyesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionEyesCode_Value.Descriptor instead.
func (VisionEyesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{298, 0}
}

// A type defined by FHIR that is an abstract type
// See http://hl7.org/fhir/ValueSet/abstract-types
type AbstractTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AbstractTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AbstractTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AbstractTypeCode) Reset() {
	*x = AbstractTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractTypeCode) ProtoMessage() {}

func (x *AbstractTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractTypeCode.ProtoReflect.Descriptor instead.
func (*AbstractTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{0}
}

func (x *AbstractTypeCode) GetValue() AbstractTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AbstractTypeCode_INVALID_UNINITIALIZED
}

func (x *AbstractTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AbstractTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How resource references can be aggregated.
// See http://hl7.org/fhir/ValueSet/resource-aggregation-mode
type AggregationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AggregationModeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AggregationModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AggregationModeCode) Reset() {
	*x = AggregationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationModeCode) ProtoMessage() {}

func (x *AggregationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationModeCode.ProtoReflect.Descriptor instead.
func (*AggregationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{1}
}

func (x *AggregationModeCode) GetValue() AggregationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return AggregationModeCode_INVALID_UNINITIALIZED
}

func (x *AggregationModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AggregationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indication of the degree of conformance expectations associated with a
// binding. See http://hl7.org/fhir/ValueSet/binding-strength
type BindingStrengthCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     BindingStrengthCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.BindingStrengthCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *BindingStrengthCode) Reset() {
	*x = BindingStrengthCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingStrengthCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingStrengthCode) ProtoMessage() {}

func (x *BindingStrengthCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingStrengthCode.ProtoReflect.Descriptor instead.
func (*BindingStrengthCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{2}
}

func (x *BindingStrengthCode) GetValue() BindingStrengthCode_Value {
	if x != nil {
		return x.Value
	}
	return BindingStrengthCode_INVALID_UNINITIALIZED
}

func (x *BindingStrengthCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BindingStrengthCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// SHALL applications comply with this constraint?
// See http://hl7.org/fhir/ValueSet/constraint-severity
type ConstraintSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConstraintSeverityCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConstraintSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConstraintSeverityCode) Reset() {
	*x = ConstraintSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintSeverityCode) ProtoMessage() {}

func (x *ConstraintSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintSeverityCode.ProtoReflect.Descriptor instead.
func (*ConstraintSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{3}
}

func (x *ConstraintSeverityCode) GetValue() ConstraintSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return ConstraintSeverityCode_INVALID_UNINITIALIZED
}

func (x *ConstraintSeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConstraintSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How slices are interpreted when evaluating an instance.
// See http://hl7.org/fhir/ValueSet/resource-slicing-rules
type SlicingRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SlicingRulesCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SlicingRulesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SlicingRulesCode) Reset() {
	*x = SlicingRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlicingRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlicingRulesCode) ProtoMessage() {}

func (x *SlicingRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlicingRulesCode.ProtoReflect.Descriptor instead.
func (*SlicingRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{4}
}

func (x *SlicingRulesCode) GetValue() SlicingRulesCode_Value {
	if x != nil {
		return x.Value
	}
	return SlicingRulesCode_INVALID_UNINITIALIZED
}

func (x *SlicingRulesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SlicingRulesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How an element value is interpreted when discrimination is evaluated
// See http://hl7.org/fhir/ValueSet/discriminator-type
type DiscriminatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DiscriminatorTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DiscriminatorTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DiscriminatorTypeCode) Reset() {
	*x = DiscriminatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscriminatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscriminatorTypeCode) ProtoMessage() {}

func (x *DiscriminatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscriminatorTypeCode.ProtoReflect.Descriptor instead.
func (*DiscriminatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{5}
}

func (x *DiscriminatorTypeCode) GetValue() DiscriminatorTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DiscriminatorTypeCode_INVALID_UNINITIALIZED
}

func (x *DiscriminatorTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiscriminatorTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a property is represented when serialized.
// See http://hl7.org/fhir/ValueSet/property-representation
type PropertyRepresentationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PropertyRepresentationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PropertyRepresentationCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PropertyRepresentationCode) Reset() {
	*x = PropertyRepresentationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyRepresentationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyRepresentationCode) ProtoMessage() {}

func (x *PropertyRepresentationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyRepresentationCode.ProtoReflect.Descriptor instead.
func (*PropertyRepresentationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{6}
}

func (x *PropertyRepresentationCode) GetValue() PropertyRepresentationCode_Value {
	if x != nil {
		return x.Value
	}
	return PropertyRepresentationCode_INVALID_UNINITIALIZED
}

func (x *PropertyRepresentationCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PropertyRepresentationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Whether a reference needs to be version specific or version independent, or
// whether either can be used See
// http://hl7.org/fhir/ValueSet/reference-version-rules
type ReferenceVersionRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ReferenceVersionRulesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ReferenceVersionRulesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReferenceVersionRulesCode) Reset() {
	*x = ReferenceVersionRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceVersionRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceVersionRulesCode) ProtoMessage() {}

func (x *ReferenceVersionRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceVersionRulesCode.ProtoReflect.Descriptor instead.
func (*ReferenceVersionRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{7}
}

func (x *ReferenceVersionRulesCode) GetValue() ReferenceVersionRulesCode_Value {
	if x != nil {
		return x.Value
	}
	return ReferenceVersionRulesCode_INVALID_UNINITIALIZED
}

func (x *ReferenceVersionRulesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferenceVersionRulesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether the account is available to be used.
// See http://hl7.org/fhir/ValueSet/account-status
type AccountStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AccountStatusCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AccountStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AccountStatusCode) Reset() {
	*x = AccountStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatusCode) ProtoMessage() {}

func (x *AccountStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatusCode.ProtoReflect.Descriptor instead.
func (*AccountStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{8}
}

func (x *AccountStatusCode) GetValue() AccountStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return AccountStatusCode_INVALID_UNINITIALIZED
}

func (x *AccountStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccountStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines behavior for an action or a group for how many times that item may
// be repeated See http://hl7.org/fhir/ValueSet/action-cardinality-behavior
type ActionCardinalityBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionCardinalityBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionCardinalityBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionCardinalityBehaviorCode) Reset() {
	*x = ActionCardinalityBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCardinalityBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCardinalityBehaviorCode) ProtoMessage() {}

func (x *ActionCardinalityBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCardinalityBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionCardinalityBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{9}
}

func (x *ActionCardinalityBehaviorCode) GetValue() ActionCardinalityBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionCardinalityBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ActionCardinalityBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionCardinalityBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines the kinds of conditions that can appear on actions
// See http://hl7.org/fhir/ValueSet/action-condition-kind
type ActionConditionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionConditionKindCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionConditionKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionConditionKindCode) Reset() {
	*x = ActionConditionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionConditionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConditionKindCode) ProtoMessage() {}

func (x *ActionConditionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConditionKindCode.ProtoReflect.Descriptor instead.
func (*ActionConditionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{10}
}

func (x *ActionConditionKindCode) GetValue() ActionConditionKindCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionConditionKindCode_INVALID_UNINITIALIZED
}

func (x *ActionConditionKindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionConditionKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines organization behavior of a group
// See http://hl7.org/fhir/ValueSet/action-grouping-behavior
type ActionGroupingBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionGroupingBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionGroupingBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionGroupingBehaviorCode) Reset() {
	*x = ActionGroupingBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGroupingBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGroupingBehaviorCode) ProtoMessage() {}

func (x *ActionGroupingBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGroupingBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionGroupingBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{11}
}

func (x *ActionGroupingBehaviorCode) GetValue() ActionGroupingBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionGroupingBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ActionGroupingBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionGroupingBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// List of allowable action which this resource can request.
// See http://hl7.org/fhir/ValueSet/actionlist
type ActionListCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionListCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionListCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionListCode) Reset() {
	*x = ActionListCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionListCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionListCode) ProtoMessage() {}

func (x *ActionListCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionListCode.ProtoReflect.Descriptor instead.
func (*ActionListCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{12}
}

func (x *ActionListCode) GetValue() ActionListCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionListCode_INVALID_UNINITIALIZED
}

func (x *ActionListCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionListCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of participant for the action
// See http://hl7.org/fhir/ValueSet/action-participant-type
type ActionParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionParticipantTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionParticipantTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionParticipantTypeCode) Reset() {
	*x = ActionParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParticipantTypeCode) ProtoMessage() {}

func (x *ActionParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*ActionParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{13}
}

func (x *ActionParticipantTypeCode) GetValue() ActionParticipantTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionParticipantTypeCode_INVALID_UNINITIALIZED
}

func (x *ActionParticipantTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionParticipantTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines selection frequency behavior for an action or group
// See http://hl7.org/fhir/ValueSet/action-precheck-behavior
type ActionPrecheckBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionPrecheckBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionPrecheckBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionPrecheckBehaviorCode) Reset() {
	*x = ActionPrecheckBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPrecheckBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPrecheckBehaviorCode) ProtoMessage() {}

func (x *ActionPrecheckBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPrecheckBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionPrecheckBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{14}
}

func (x *ActionPrecheckBehaviorCode) GetValue() ActionPrecheckBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionPrecheckBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ActionPrecheckBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionPrecheckBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines the types of relationships between actions
// See http://hl7.org/fhir/ValueSet/action-relationship-type
type ActionRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionRelationshipTypeCode) Reset() {
	*x = ActionRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRelationshipTypeCode) ProtoMessage() {}

func (x *ActionRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*ActionRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{15}
}

func (x *ActionRelationshipTypeCode) GetValue() ActionRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *ActionRelationshipTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionRelationshipTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines requiredness behavior for selecting an action or an action group
// See http://hl7.org/fhir/ValueSet/action-required-behavior
type ActionRequiredBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionRequiredBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionRequiredBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionRequiredBehaviorCode) Reset() {
	*x = ActionRequiredBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequiredBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequiredBehaviorCode) ProtoMessage() {}

func (x *ActionRequiredBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequiredBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionRequiredBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{16}
}

func (x *ActionRequiredBehaviorCode) GetValue() ActionRequiredBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionRequiredBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ActionRequiredBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionRequiredBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines selection behavior of a group
// See http://hl7.org/fhir/ValueSet/action-selection-behavior
type ActionSelectionBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionSelectionBehaviorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionSelectionBehaviorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionSelectionBehaviorCode) Reset() {
	*x = ActionSelectionBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSelectionBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSelectionBehaviorCode) ProtoMessage() {}

func (x *ActionSelectionBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSelectionBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionSelectionBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{17}
}

func (x *ActionSelectionBehaviorCode) GetValue() ActionSelectionBehaviorCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionSelectionBehaviorCode_INVALID_UNINITIALIZED
}

func (x *ActionSelectionBehaviorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionSelectionBehaviorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of action to be performed
// See http://hl7.org/fhir/ValueSet/action-type
type ActionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActionTypeCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActionTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionTypeCode) Reset() {
	*x = ActionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTypeCode) ProtoMessage() {}

func (x *ActionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTypeCode.ProtoReflect.Descriptor instead.
func (*ActionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{18}
}

func (x *ActionTypeCode) GetValue() ActionTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionTypeCode_INVALID_UNINITIALIZED
}

func (x *ActionTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// High-level categorization of the type of activity
// See http://hl7.org/fhir/ValueSet/activity-definition-category
type ActivityDefinitionCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ActivityDefinitionCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ActivityDefinitionCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActivityDefinitionCategoryCode) Reset() {
	*x = ActivityDefinitionCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDefinitionCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDefinitionCategoryCode) ProtoMessage() {}

func (x *ActivityDefinitionCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDefinitionCategoryCode.ProtoReflect.Descriptor instead.
func (*ActivityDefinitionCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{19}
}

func (x *ActivityDefinitionCategoryCode) GetValue() ActivityDefinitionCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return ActivityDefinitionCategoryCode_INVALID_UNINITIALIZED
}

func (x *ActivityDefinitionCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActivityDefinitionCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The gender of a person used for administrative purposes.
// See http://hl7.org/fhir/ValueSet/administrative-gender
type AdministrativeGenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdministrativeGenderCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdministrativeGenderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdministrativeGenderCode) Reset() {
	*x = AdministrativeGenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministrativeGenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministrativeGenderCode) ProtoMessage() {}

func (x *AdministrativeGenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministrativeGenderCode.ProtoReflect.Descriptor instead.
func (*AdministrativeGenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{20}
}

func (x *AdministrativeGenderCode) GetValue() AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *AdministrativeGenderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdministrativeGenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Overall categorization of the event, e.g. real or potential
// See http://hl7.org/fhir/ValueSet/adverse-event-category
type AdverseEventCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventCategoryCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventCategoryCode) Reset() {
	*x = AdverseEventCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventCategoryCode) ProtoMessage() {}

func (x *AdverseEventCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventCategoryCode.ProtoReflect.Descriptor instead.
func (*AdverseEventCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{21}
}

func (x *AdverseEventCategoryCode) GetValue() AdverseEventCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventCategoryCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// TODO
// See http://hl7.org/fhir/ValueSet/adverse-event-causality-assess
type AdverseEventCausalityAssessmentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventCausalityAssessmentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventCausalityAssessmentCode) Reset() {
	*x = AdverseEventCausalityAssessmentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventCausalityAssessmentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventCausalityAssessmentCode) ProtoMessage() {}

func (x *AdverseEventCausalityAssessmentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventCausalityAssessmentCode.ProtoReflect.Descriptor instead.
func (*AdverseEventCausalityAssessmentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{22}
}

func (x *AdverseEventCausalityAssessmentCode) GetValue() AdverseEventCausalityAssessmentCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventCausalityAssessmentCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventCausalityAssessmentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventCausalityAssessmentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// TODO
// See http://hl7.org/fhir/ValueSet/adverse-event-causality
type AdverseEventCausalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventCausalityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventCausalityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventCausalityCode) Reset() {
	*x = AdverseEventCausalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventCausalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventCausalityCode) ProtoMessage() {}

func (x *AdverseEventCausalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventCausalityCode.ProtoReflect.Descriptor instead.
func (*AdverseEventCausalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{23}
}

func (x *AdverseEventCausalityCode) GetValue() AdverseEventCausalityCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventCausalityCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventCausalityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventCausalityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// TODO
// See http://hl7.org/fhir/ValueSet/adverse-event-causality-method
type AdverseEventCausalityMethodCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventCausalityMethodCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventCausalityMethodCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventCausalityMethodCode) Reset() {
	*x = AdverseEventCausalityMethodCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventCausalityMethodCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventCausalityMethodCode) ProtoMessage() {}

func (x *AdverseEventCausalityMethodCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventCausalityMethodCode.ProtoReflect.Descriptor instead.
func (*AdverseEventCausalityMethodCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{24}
}

func (x *AdverseEventCausalityMethodCode) GetValue() AdverseEventCausalityMethodCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventCausalityMethodCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventCausalityMethodCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventCausalityMethodCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// TODO
// See http://hl7.org/fhir/ValueSet/adverse-event-causality-result
type AdverseEventCausalityResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventCausalityResultCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventCausalityResultCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventCausalityResultCode) Reset() {
	*x = AdverseEventCausalityResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventCausalityResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventCausalityResultCode) ProtoMessage() {}

func (x *AdverseEventCausalityResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventCausalityResultCode.ProtoReflect.Descriptor instead.
func (*AdverseEventCausalityResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{25}
}

func (x *AdverseEventCausalityResultCode) GetValue() AdverseEventCausalityResultCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventCausalityResultCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventCausalityResultCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventCausalityResultCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// TODO (and should this be required?)
// See http://hl7.org/fhir/ValueSet/adverse-event-outcome
type AdverseEventOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventOutcomeCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventOutcomeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventOutcomeCode) Reset() {
	*x = AdverseEventOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventOutcomeCode) ProtoMessage() {}

func (x *AdverseEventOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventOutcomeCode.ProtoReflect.Descriptor instead.
func (*AdverseEventOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{26}
}

func (x *AdverseEventOutcomeCode) GetValue() AdverseEventOutcomeCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventOutcomeCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventOutcomeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventOutcomeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Overall seriousness of this event for the patient
// See http://hl7.org/fhir/ValueSet/adverse-event-seriousness
type AdverseEventSeriousnessCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdverseEventSeriousnessCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdverseEventSeriousnessCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdverseEventSeriousnessCode) Reset() {
	*x = AdverseEventSeriousnessCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventSeriousnessCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventSeriousnessCode) ProtoMessage() {}

func (x *AdverseEventSeriousnessCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventSeriousnessCode.ProtoReflect.Descriptor instead.
func (*AdverseEventSeriousnessCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{27}
}

func (x *AdverseEventSeriousnessCode) GetValue() AdverseEventSeriousnessCode_Value {
	if x != nil {
		return x.Value
	}
	return AdverseEventSeriousnessCode_INVALID_UNINITIALIZED
}

func (x *AdverseEventSeriousnessCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdverseEventSeriousnessCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The risk of an adverse reaction (allergy or intolerance) for this patient
// upon exposure to the substance (including pharmaceutical products). See
// http://hl7.org/fhir/ValueSet/allerg-intol-substance-exp-risk
type AllergyIntoleranceSubstanceExposureRiskCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceSubstanceExposureRiskCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) Reset() {
	*x = AllergyIntoleranceSubstanceExposureRiskCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSubstanceExposureRiskCode) ProtoMessage() {}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSubstanceExposureRiskCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSubstanceExposureRiskCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{28}
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) GetValue() AllergyIntoleranceSubstanceExposureRiskCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceSubstanceExposureRiskCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The clinical status of the allergy or intolerance.
// See http://hl7.org/fhir/ValueSet/allergy-clinical-status
type AllergyIntoleranceClinicalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceClinicalStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceClinicalStatusCode) Reset() {
	*x = AllergyIntoleranceClinicalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceClinicalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceClinicalStatusCode) ProtoMessage() {}

func (x *AllergyIntoleranceClinicalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceClinicalStatusCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceClinicalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{29}
}

func (x *AllergyIntoleranceClinicalStatusCode) GetValue() AllergyIntoleranceClinicalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceClinicalStatusCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceClinicalStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceClinicalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Category of an identified substance.
// See http://hl7.org/fhir/ValueSet/allergy-intolerance-category
type AllergyIntoleranceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceCategoryCode) Reset() {
	*x = AllergyIntoleranceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCategoryCode) ProtoMessage() {}

func (x *AllergyIntoleranceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{30}
}

func (x *AllergyIntoleranceCategoryCode) GetValue() AllergyIntoleranceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Estimate of the potential clinical harm, or seriousness, of a reaction to
// an identified substance. See
// http://hl7.org/fhir/ValueSet/allergy-intolerance-criticality
type AllergyIntoleranceCriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceCriticalityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceCriticalityCode) Reset() {
	*x = AllergyIntoleranceCriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCriticalityCode) ProtoMessage() {}

func (x *AllergyIntoleranceCriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{31}
}

func (x *AllergyIntoleranceCriticalityCode) GetValue() AllergyIntoleranceCriticalityCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceCriticalityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCriticalityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identification of the underlying physiological mechanism for a Reaction
// Risk. See http://hl7.org/fhir/ValueSet/allergy-intolerance-type
type AllergyIntoleranceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceTypeCode) Reset() {
	*x = AllergyIntoleranceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceTypeCode) ProtoMessage() {}

func (x *AllergyIntoleranceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceTypeCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{32}
}

func (x *AllergyIntoleranceTypeCode) GetValue() AllergyIntoleranceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Assertion about certainty associated with a propensity, or potential risk,
// of a reaction to the identified substance. See
// http://hl7.org/fhir/ValueSet/allergy-verification-status
type AllergyIntoleranceVerificationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceVerificationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceVerificationStatusCode) Reset() {
	*x = AllergyIntoleranceVerificationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceVerificationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceVerificationStatusCode) ProtoMessage() {}

func (x *AllergyIntoleranceVerificationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceVerificationStatusCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceVerificationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{33}
}

func (x *AllergyIntoleranceVerificationStatusCode) GetValue() AllergyIntoleranceVerificationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceVerificationStatusCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceVerificationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceVerificationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// the current state of the animal's reproductive organs. See
// http://hl7.org/fhir/ValueSet/animal-genderstatus
type GenderStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GenderStatusCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GenderStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GenderStatusCode) Reset() {
	*x = GenderStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenderStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenderStatusCode) ProtoMessage() {}

func (x *GenderStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenderStatusCode.ProtoReflect.Descriptor instead.
func (*GenderStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{34}
}

func (x *GenderStatusCode) GetValue() GenderStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return GenderStatusCode_INVALID_UNINITIALIZED
}

func (x *GenderStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GenderStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The free/busy status of an appointment.
// See http://hl7.org/fhir/ValueSet/appointmentstatus
type AppointmentStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AppointmentStatusCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AppointmentStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AppointmentStatusCode) Reset() {
	*x = AppointmentStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentStatusCode) ProtoMessage() {}

func (x *AppointmentStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentStatusCode.ProtoReflect.Descriptor instead.
func (*AppointmentStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{35}
}

func (x *AppointmentStatusCode) GetValue() AppointmentStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return AppointmentStatusCode_INVALID_UNINITIALIZED
}

func (x *AppointmentStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AppointmentStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of direction to use for assertion.
// See http://hl7.org/fhir/ValueSet/assert-direction-codes
type AssertionDirectionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AssertionDirectionTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AssertionDirectionTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AssertionDirectionTypeCode) Reset() {
	*x = AssertionDirectionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionDirectionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionDirectionTypeCode) ProtoMessage() {}

func (x *AssertionDirectionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionDirectionTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionDirectionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{36}
}

func (x *AssertionDirectionTypeCode) GetValue() AssertionDirectionTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AssertionDirectionTypeCode_INVALID_UNINITIALIZED
}

func (x *AssertionDirectionTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssertionDirectionTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of operator to use for assertion.
// See http://hl7.org/fhir/ValueSet/assert-operator-codes
type AssertionOperatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AssertionOperatorTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AssertionOperatorTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AssertionOperatorTypeCode) Reset() {
	*x = AssertionOperatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionOperatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionOperatorTypeCode) ProtoMessage() {}

func (x *AssertionOperatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionOperatorTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionOperatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{37}
}

func (x *AssertionOperatorTypeCode) GetValue() AssertionOperatorTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AssertionOperatorTypeCode_INVALID_UNINITIALIZED
}

func (x *AssertionOperatorTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssertionOperatorTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of response code to use for assertion.
// See http://hl7.org/fhir/ValueSet/assert-response-code-types
type AssertionResponseTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AssertionResponseTypesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AssertionResponseTypesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AssertionResponseTypesCode) Reset() {
	*x = AssertionResponseTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionResponseTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionResponseTypesCode) ProtoMessage() {}

func (x *AssertionResponseTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionResponseTypesCode.ProtoReflect.Descriptor instead.
func (*AssertionResponseTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{38}
}

func (x *AssertionResponseTypesCode) GetValue() AssertionResponseTypesCode_Value {
	if x != nil {
		return x.Value
	}
	return AssertionResponseTypesCode_INVALID_UNINITIALIZED
}

func (x *AssertionResponseTypesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssertionResponseTypesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicator for type of action performed during the event that generated the
// event See http://hl7.org/fhir/ValueSet/audit-event-action
type AuditEventActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AuditEventActionCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AuditEventActionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEventActionCode) Reset() {
	*x = AuditEventActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventActionCode) ProtoMessage() {}

func (x *AuditEventActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventActionCode.ProtoReflect.Descriptor instead.
func (*AuditEventActionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{39}
}

func (x *AuditEventActionCode) GetValue() AuditEventActionCode_Value {
	if x != nil {
		return x.Value
	}
	return AuditEventActionCode_INVALID_UNINITIALIZED
}

func (x *AuditEventActionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventActionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether the event succeeded or failed
// See http://hl7.org/fhir/ValueSet/audit-event-outcome
type AuditEventOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AuditEventOutcomeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AuditEventOutcomeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEventOutcomeCode) Reset() {
	*x = AuditEventOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventOutcomeCode) ProtoMessage() {}

func (x *AuditEventOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventOutcomeCode.ProtoReflect.Descriptor instead.
func (*AuditEventOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{40}
}

func (x *AuditEventOutcomeCode) GetValue() AuditEventOutcomeCode_Value {
	if x != nil {
		return x.Value
	}
	return AuditEventOutcomeCode_INVALID_UNINITIALIZED
}

func (x *AuditEventOutcomeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventOutcomeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines codes for resources not yet supported by (or which
// will never be supported by) FHIR.  Many of the codes listed here will
// eventually be turned into official resources.  However, there is no
// guarantee that any particular resource will be created nor that the scope
// will be exactly as defined by the codes presented here.  Codes in this set
// will be deprecated if/when formal resources are defined that encompass
// these concepts. See http://hl7.org/fhir/ValueSet/basic-resource-type
type BasicResourceTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     BasicResourceTypesCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.BasicResourceTypesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *BasicResourceTypesCode) Reset() {
	*x = BasicResourceTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicResourceTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicResourceTypesCode) ProtoMessage() {}

func (x *BasicResourceTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicResourceTypesCode.ProtoReflect.Descriptor instead.
func (*BasicResourceTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{41}
}

func (x *BasicResourceTypesCode) GetValue() BasicResourceTypesCode_Value {
	if x != nil {
		return x.Value
	}
	return BasicResourceTypesCode_INVALID_UNINITIALIZED
}

func (x *BasicResourceTypesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicResourceTypesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the purpose of a bundle - how it was intended to be used.
// See http://hl7.org/fhir/ValueSet/bundle-type
type BundleTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     BundleTypeCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.BundleTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *BundleTypeCode) Reset() {
	*x = BundleTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleTypeCode) ProtoMessage() {}

func (x *BundleTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleTypeCode.ProtoReflect.Descriptor instead.
func (*BundleTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{42}
}

func (x *BundleTypeCode) GetValue() BundleTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return BundleTypeCode_INVALID_UNINITIALIZED
}

func (x *BundleTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BundleTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a capability statement is intended to be used.
// See http://hl7.org/fhir/ValueSet/capability-statement-kind
type CapabilityStatementKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CapabilityStatementKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CapabilityStatementKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CapabilityStatementKindCode) Reset() {
	*x = CapabilityStatementKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementKindCode) ProtoMessage() {}

func (x *CapabilityStatementKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementKindCode.ProtoReflect.Descriptor instead.
func (*CapabilityStatementKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{43}
}

func (x *CapabilityStatementKindCode) GetValue() CapabilityStatementKindCode_Value {
	if x != nil {
		return x.Value
	}
	return CapabilityStatementKindCode_INVALID_UNINITIALIZED
}

func (x *CapabilityStatementKindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// High-level categorization of the type of activity in a care plan.
// See http://hl7.org/fhir/ValueSet/care-plan-activity-category
type CarePlanActivityCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CarePlanActivityCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CarePlanActivityCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanActivityCategoryCode) Reset() {
	*x = CarePlanActivityCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanActivityCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanActivityCategoryCode) ProtoMessage() {}

func (x *CarePlanActivityCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanActivityCategoryCode.ProtoReflect.Descriptor instead.
func (*CarePlanActivityCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{44}
}

func (x *CarePlanActivityCategoryCode) GetValue() CarePlanActivityCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanActivityCategoryCode_INVALID_UNINITIALIZED
}

func (x *CarePlanActivityCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanActivityCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates where the activity is at in its overall life cycle.
// See http://hl7.org/fhir/ValueSet/care-plan-activity-status
type CarePlanActivityStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CarePlanActivityStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CarePlanActivityStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanActivityStatusCode) Reset() {
	*x = CarePlanActivityStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanActivityStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanActivityStatusCode) ProtoMessage() {}

func (x *CarePlanActivityStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanActivityStatusCode.ProtoReflect.Descriptor instead.
func (*CarePlanActivityStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{45}
}

func (x *CarePlanActivityStatusCode) GetValue() CarePlanActivityStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanActivityStatusCode_INVALID_UNINITIALIZED
}

func (x *CarePlanActivityStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanActivityStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes indicating the degree of authority/intentionality associated with a
// care plan See http://hl7.org/fhir/ValueSet/care-plan-intent
type CarePlanIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CarePlanIntentCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CarePlanIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanIntentCode) Reset() {
	*x = CarePlanIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanIntentCode) ProtoMessage() {}

func (x *CarePlanIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanIntentCode.ProtoReflect.Descriptor instead.
func (*CarePlanIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{46}
}

func (x *CarePlanIntentCode) GetValue() CarePlanIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanIntentCode_INVALID_UNINITIALIZED
}

func (x *CarePlanIntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanIntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether the plan is currently being acted upon, represents future
// intentions or is now a historical record. See
// http://hl7.org/fhir/ValueSet/care-plan-status
type CarePlanStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CarePlanStatusCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CarePlanStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanStatusCode) Reset() {
	*x = CarePlanStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanStatusCode) ProtoMessage() {}

func (x *CarePlanStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanStatusCode.ProtoReflect.Descriptor instead.
func (*CarePlanStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{47}
}

func (x *CarePlanStatusCode) GetValue() CarePlanStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanStatusCode_INVALID_UNINITIALIZED
}

func (x *CarePlanStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the type of care team.
// See http://hl7.org/fhir/ValueSet/care-team-category
type CareTeamCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CareTeamCategoryCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CareTeamCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CareTeamCategoryCode) Reset() {
	*x = CareTeamCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CareTeamCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareTeamCategoryCode) ProtoMessage() {}

func (x *CareTeamCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareTeamCategoryCode.ProtoReflect.Descriptor instead.
func (*CareTeamCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{48}
}

func (x *CareTeamCategoryCode) GetValue() CareTeamCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return CareTeamCategoryCode_INVALID_UNINITIALIZED
}

func (x *CareTeamCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CareTeamCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the status of the care team.
// See http://hl7.org/fhir/ValueSet/care-team-status
type CareTeamStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CareTeamStatusCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CareTeamStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CareTeamStatusCode) Reset() {
	*x = CareTeamStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CareTeamStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareTeamStatusCode) ProtoMessage() {}

func (x *CareTeamStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareTeamStatusCode.ProtoReflect.Descriptor instead.
func (*CareTeamStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{49}
}

func (x *CareTeamStatusCode) GetValue() CareTeamStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CareTeamStatusCode_INVALID_UNINITIALIZED
}

func (x *CareTeamStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CareTeamStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes identifying the stage lifecycle stage of a ChargeItem
// See http://hl7.org/fhir/ValueSet/chargeitem-status
type ChargeItemStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ChargeItemStatusCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ChargeItemStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ChargeItemStatusCode) Reset() {
	*x = ChargeItemStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeItemStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeItemStatusCode) ProtoMessage() {}

func (x *ChargeItemStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeItemStatusCode.ProtoReflect.Descriptor instead.
func (*ChargeItemStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{50}
}

func (x *ChargeItemStatusCode) GetValue() ChargeItemStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ChargeItemStatusCode_INVALID_UNINITIALIZED
}

func (x *ChargeItemStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ChargeItemStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Direction in which lists of question options should be displayed
// See http://hl7.org/fhir/ValueSet/choice-list-orientation
type ChoiceListOrientationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ChoiceListOrientationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ChoiceListOrientationCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ChoiceListOrientationCode) Reset() {
	*x = ChoiceListOrientationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoiceListOrientationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceListOrientationCode) ProtoMessage() {}

func (x *ChoiceListOrientationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceListOrientationCode.ProtoReflect.Descriptor instead.
func (*ChoiceListOrientationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{51}
}

func (x *ChoiceListOrientationCode) GetValue() ChoiceListOrientationCode_Value {
	if x != nil {
		return x.Value
	}
	return ChoiceListOrientationCode_INVALID_UNINITIALIZED
}

func (x *ChoiceListOrientationCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ChoiceListOrientationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Complete, proposed, exploratory, other
// See http://hl7.org/fhir/ValueSet/claim-use
type UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     UseCode_Value                   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.UseCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UseCode) Reset() {
	*x = UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCode) ProtoMessage() {}

func (x *UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCode.ProtoReflect.Descriptor instead.
func (*UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{52}
}

func (x *UseCode) GetValue() UseCode_Value {
	if x != nil {
		return x.Value
	}
	return UseCode_INVALID_UNINITIALIZED
}

func (x *UseCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identifies whether a useContext represents a context or classification for
// the element See http://hl7.org/fhir/ValueSet/classification-or-context
type ClassificationOrContextCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ClassificationOrContextCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ClassificationOrContextCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClassificationOrContextCode) Reset() {
	*x = ClassificationOrContextCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassificationOrContextCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationOrContextCode) ProtoMessage() {}

func (x *ClassificationOrContextCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationOrContextCode.ProtoReflect.Descriptor instead.
func (*ClassificationOrContextCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{53}
}

func (x *ClassificationOrContextCode) GetValue() ClassificationOrContextCode_Value {
	if x != nil {
		return x.Value
	}
	return ClassificationOrContextCode_INVALID_UNINITIALIZED
}

func (x *ClassificationOrContextCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClassificationOrContextCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The workflow state of a clinical impression.
// See http://hl7.org/fhir/ValueSet/clinical-impression-status
type ClinicalImpressionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ClinicalImpressionStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ClinicalImpressionStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClinicalImpressionStatusCode) Reset() {
	*x = ClinicalImpressionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpressionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpressionStatusCode) ProtoMessage() {}

func (x *ClinicalImpressionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpressionStatusCode.ProtoReflect.Descriptor instead.
func (*ClinicalImpressionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{54}
}

func (x *ClinicalImpressionStatusCode) GetValue() ClinicalImpressionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ClinicalImpressionStatusCode_INVALID_UNINITIALIZED
}

func (x *ClinicalImpressionStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalImpressionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How much of the content of the code system - the concepts and codes it
// defines - are represented in a code system resource See
// http://hl7.org/fhir/ValueSet/codesystem-content-mode
type CodeSystemContentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CodeSystemContentModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CodeSystemContentModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CodeSystemContentModeCode) Reset() {
	*x = CodeSystemContentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemContentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemContentModeCode) ProtoMessage() {}

func (x *CodeSystemContentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemContentModeCode.ProtoReflect.Descriptor instead.
func (*CodeSystemContentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{55}
}

func (x *CodeSystemContentModeCode) GetValue() CodeSystemContentModeCode_Value {
	if x != nil {
		return x.Value
	}
	return CodeSystemContentModeCode_INVALID_UNINITIALIZED
}

func (x *CodeSystemContentModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemContentModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The meaning of the hierarchy of concepts in a code system
// See http://hl7.org/fhir/ValueSet/codesystem-hierarchy-meaning
type CodeSystemHierarchyMeaningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CodeSystemHierarchyMeaningCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CodeSystemHierarchyMeaningCode) Reset() {
	*x = CodeSystemHierarchyMeaningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemHierarchyMeaningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemHierarchyMeaningCode) ProtoMessage() {}

func (x *CodeSystemHierarchyMeaningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemHierarchyMeaningCode.ProtoReflect.Descriptor instead.
func (*CodeSystemHierarchyMeaningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{56}
}

func (x *CodeSystemHierarchyMeaningCode) GetValue() CodeSystemHierarchyMeaningCode_Value {
	if x != nil {
		return x.Value
	}
	return CodeSystemHierarchyMeaningCode_INVALID_UNINITIALIZED
}

func (x *CodeSystemHierarchyMeaningCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemHierarchyMeaningCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Common Tag Codes defined by FHIR project
// See http://hl7.org/fhir/ValueSet/common-tags
type CommonTagsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CommonTagsCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CommonTagsCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CommonTagsCode) Reset() {
	*x = CommonTagsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonTagsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonTagsCode) ProtoMessage() {}

func (x *CommonTagsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonTagsCode.ProtoReflect.Descriptor instead.
func (*CommonTagsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{57}
}

func (x *CommonTagsCode) GetValue() CommonTagsCode_Value {
	if x != nil {
		return x.Value
	}
	return CommonTagsCode_INVALID_UNINITIALIZED
}

func (x *CommonTagsCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommonTagsCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes for general categories of communications such as alerts, instruction,
// etc. See http://hl7.org/fhir/ValueSet/communication-category
type CommunicationCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CommunicationCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CommunicationCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CommunicationCategoryCode) Reset() {
	*x = CommunicationCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationCategoryCode) ProtoMessage() {}

func (x *CommunicationCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationCategoryCode.ProtoReflect.Descriptor instead.
func (*CommunicationCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{58}
}

func (x *CommunicationCategoryCode) GetValue() CommunicationCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return CommunicationCategoryCode_INVALID_UNINITIALIZED
}

func (x *CommunicationCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes for the reason why a communication was not done.
// See http://hl7.org/fhir/ValueSet/communication-not-done-reason
type CommunicationNotDoneReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CommunicationNotDoneReasonCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CommunicationNotDoneReasonCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CommunicationNotDoneReasonCode) Reset() {
	*x = CommunicationNotDoneReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationNotDoneReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationNotDoneReasonCode) ProtoMessage() {}

func (x *CommunicationNotDoneReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationNotDoneReasonCode.ProtoReflect.Descriptor instead.
func (*CommunicationNotDoneReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{59}
}

func (x *CommunicationNotDoneReasonCode) GetValue() CommunicationNotDoneReasonCode_Value {
	if x != nil {
		return x.Value
	}
	return CommunicationNotDoneReasonCode_INVALID_UNINITIALIZED
}

func (x *CommunicationNotDoneReasonCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationNotDoneReasonCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Which compartment a compartment definition describes
// See http://hl7.org/fhir/ValueSet/compartment-type
type CompartmentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CompartmentTypeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CompartmentTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CompartmentTypeCode) Reset() {
	*x = CompartmentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompartmentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompartmentTypeCode) ProtoMessage() {}

func (x *CompartmentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompartmentTypeCode.ProtoReflect.Descriptor instead.
func (*CompartmentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{60}
}

func (x *CompartmentTypeCode) GetValue() CompartmentTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return CompartmentTypeCode_INVALID_UNINITIALIZED
}

func (x *CompartmentTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompartmentTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The composite scoring method of the measure
// See http://hl7.org/fhir/ValueSet/composite-measure-scoring
type CompositeMeasureScoringCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CompositeMeasureScoringCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CompositeMeasureScoringCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CompositeMeasureScoringCode) Reset() {
	*x = CompositeMeasureScoringCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeMeasureScoringCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeMeasureScoringCode) ProtoMessage() {}

func (x *CompositeMeasureScoringCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeMeasureScoringCode.ProtoReflect.Descriptor instead.
func (*CompositeMeasureScoringCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{61}
}

func (x *CompositeMeasureScoringCode) GetValue() CompositeMeasureScoringCode_Value {
	if x != nil {
		return x.Value
	}
	return CompositeMeasureScoringCode_INVALID_UNINITIALIZED
}

func (x *CompositeMeasureScoringCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompositeMeasureScoringCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The way in which a person authenticated a composition.
// See http://hl7.org/fhir/ValueSet/composition-attestation-mode
type CompositionAttestationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CompositionAttestationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CompositionAttestationModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CompositionAttestationModeCode) Reset() {
	*x = CompositionAttestationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionAttestationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionAttestationModeCode) ProtoMessage() {}

func (x *CompositionAttestationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionAttestationModeCode.ProtoReflect.Descriptor instead.
func (*CompositionAttestationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{62}
}

func (x *CompositionAttestationModeCode) GetValue() CompositionAttestationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return CompositionAttestationModeCode_INVALID_UNINITIALIZED
}

func (x *CompositionAttestationModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompositionAttestationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The workflow/clinical status of the composition.
// See http://hl7.org/fhir/ValueSet/composition-status
type CompositionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CompositionStatusCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CompositionStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CompositionStatusCode) Reset() {
	*x = CompositionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionStatusCode) ProtoMessage() {}

func (x *CompositionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionStatusCode.ProtoReflect.Descriptor instead.
func (*CompositionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{63}
}

func (x *CompositionStatusCode) GetValue() CompositionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CompositionStatusCode_INVALID_UNINITIALIZED
}

func (x *CompositionStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompositionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The degree of equivalence between concepts.
// See http://hl7.org/fhir/ValueSet/concept-map-equivalence
type ConceptMapEquivalenceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConceptMapEquivalenceCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConceptMapEquivalenceCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConceptMapEquivalenceCode) Reset() {
	*x = ConceptMapEquivalenceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapEquivalenceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapEquivalenceCode) ProtoMessage() {}

func (x *ConceptMapEquivalenceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapEquivalenceCode.ProtoReflect.Descriptor instead.
func (*ConceptMapEquivalenceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{64}
}

func (x *ConceptMapEquivalenceCode) GetValue() ConceptMapEquivalenceCode_Value {
	if x != nil {
		return x.Value
	}
	return ConceptMapEquivalenceCode_INVALID_UNINITIALIZED
}

func (x *ConceptMapEquivalenceCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMapEquivalenceCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines which action to take if there is no match in the group.
// See http://hl7.org/fhir/ValueSet/conceptmap-unmapped-mode
type ConceptMapGroupUnmappedModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConceptMapGroupUnmappedModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConceptMapGroupUnmappedModeCode) Reset() {
	*x = ConceptMapGroupUnmappedModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapGroupUnmappedModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapGroupUnmappedModeCode) ProtoMessage() {}

func (x *ConceptMapGroupUnmappedModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapGroupUnmappedModeCode.ProtoReflect.Descriptor instead.
func (*ConceptMapGroupUnmappedModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{65}
}

func (x *ConceptMapGroupUnmappedModeCode) GetValue() ConceptMapGroupUnmappedModeCode_Value {
	if x != nil {
		return x.Value
	}
	return ConceptMapGroupUnmappedModeCode_INVALID_UNINITIALIZED
}

func (x *ConceptMapGroupUnmappedModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMapGroupUnmappedModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of a property value
// See http://hl7.org/fhir/ValueSet/concept-property-type
type PropertyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PropertyTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PropertyTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PropertyTypeCode) Reset() {
	*x = PropertyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyTypeCode) ProtoMessage() {}

func (x *PropertyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyTypeCode.ProtoReflect.Descriptor instead.
func (*PropertyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{66}
}

func (x *PropertyTypeCode) GetValue() PropertyTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return PropertyTypeCode_INVALID_UNINITIALIZED
}

func (x *PropertyTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PropertyTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that indicates how the server supports conditional delete.
// See http://hl7.org/fhir/ValueSet/conditional-delete-status
type ConditionalDeleteStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConditionalDeleteStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConditionalDeleteStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionalDeleteStatusCode) Reset() {
	*x = ConditionalDeleteStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalDeleteStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalDeleteStatusCode) ProtoMessage() {}

func (x *ConditionalDeleteStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalDeleteStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalDeleteStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{67}
}

func (x *ConditionalDeleteStatusCode) GetValue() ConditionalDeleteStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionalDeleteStatusCode_INVALID_UNINITIALIZED
}

func (x *ConditionalDeleteStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionalDeleteStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that indicates how the server supports conditional read.
// See http://hl7.org/fhir/ValueSet/conditional-read-status
type ConditionalReadStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConditionalReadStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConditionalReadStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionalReadStatusCode) Reset() {
	*x = ConditionalReadStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalReadStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalReadStatusCode) ProtoMessage() {}

func (x *ConditionalReadStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalReadStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalReadStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{68}
}

func (x *ConditionalReadStatusCode) GetValue() ConditionalReadStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionalReadStatusCode_INVALID_UNINITIALIZED
}

func (x *ConditionalReadStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionalReadStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Preferred value set for Condition Categories.
// See http://hl7.org/fhir/ValueSet/condition-category
type ConditionCategoryCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConditionCategoryCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConditionCategoryCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionCategoryCodesCode) Reset() {
	*x = ConditionCategoryCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionCategoryCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionCategoryCodesCode) ProtoMessage() {}

func (x *ConditionCategoryCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionCategoryCodesCode.ProtoReflect.Descriptor instead.
func (*ConditionCategoryCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{69}
}

func (x *ConditionCategoryCodesCode) GetValue() ConditionCategoryCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionCategoryCodesCode_INVALID_UNINITIALIZED
}

func (x *ConditionCategoryCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionCategoryCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Preferred value set for Condition Clinical Status.
// See http://hl7.org/fhir/ValueSet/condition-clinical
type ConditionClinicalStatusCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConditionClinicalStatusCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConditionClinicalStatusCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionClinicalStatusCodesCode) Reset() {
	*x = ConditionClinicalStatusCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionClinicalStatusCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionClinicalStatusCodesCode) ProtoMessage() {}

func (x *ConditionClinicalStatusCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionClinicalStatusCodesCode.ProtoReflect.Descriptor instead.
func (*ConditionClinicalStatusCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{70}
}

func (x *ConditionClinicalStatusCodesCode) GetValue() ConditionClinicalStatusCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionClinicalStatusCodesCode_INVALID_UNINITIALIZED
}

func (x *ConditionClinicalStatusCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionClinicalStatusCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Enumeration indicating whether the condition is currently active, inactive,
// or has been resolved. See http://hl7.org/fhir/ValueSet/condition-state
type ConditionStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConditionStateCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConditionStateCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionStateCode) Reset() {
	*x = ConditionStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionStateCode) ProtoMessage() {}

func (x *ConditionStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionStateCode.ProtoReflect.Descriptor instead.
func (*ConditionStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{71}
}

func (x *ConditionStateCode) GetValue() ConditionStateCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionStateCode_INVALID_UNINITIALIZED
}

func (x *ConditionStateCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionStateCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The verification status to support or decline the clinical status of the
// condition or diagnosis. See
// http://hl7.org/fhir/ValueSet/condition-ver-status
type ConditionVerificationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConditionVerificationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConditionVerificationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionVerificationStatusCode) Reset() {
	*x = ConditionVerificationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionVerificationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionVerificationStatusCode) ProtoMessage() {}

func (x *ConditionVerificationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionVerificationStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionVerificationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{72}
}

func (x *ConditionVerificationStatusCode) GetValue() ConditionVerificationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionVerificationStatusCode_INVALID_UNINITIALIZED
}

func (x *ConditionVerificationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionVerificationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the degree of adherence to a specified behavior or capability
// expected for a system to be deemed conformant with a specification. See
// http://hl7.org/fhir/ValueSet/conformance-expectation
type ConformanceExpectationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConformanceExpectationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConformanceExpectationCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConformanceExpectationCode) Reset() {
	*x = ConformanceExpectationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformanceExpectationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformanceExpectationCode) ProtoMessage() {}

func (x *ConformanceExpectationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformanceExpectationCode.ProtoReflect.Descriptor instead.
func (*ConformanceExpectationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{73}
}

func (x *ConformanceExpectationCode) GetValue() ConformanceExpectationCode_Value {
	if x != nil {
		return x.Value
	}
	return ConformanceExpectationCode_INVALID_UNINITIALIZED
}

func (x *ConformanceExpectationCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConformanceExpectationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a resource reference is interpreted when testing consent restrictions
// See http://hl7.org/fhir/ValueSet/consent-data-meaning
type ConsentDataMeaningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConsentDataMeaningCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConsentDataMeaningCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConsentDataMeaningCode) Reset() {
	*x = ConsentDataMeaningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentDataMeaningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentDataMeaningCode) ProtoMessage() {}

func (x *ConsentDataMeaningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentDataMeaningCode.ProtoReflect.Descriptor instead.
func (*ConsentDataMeaningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{74}
}

func (x *ConsentDataMeaningCode) GetValue() ConsentDataMeaningCode_Value {
	if x != nil {
		return x.Value
	}
	return ConsentDataMeaningCode_INVALID_UNINITIALIZED
}

func (x *ConsentDataMeaningCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConsentDataMeaningCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How an exception statement is applied, such as adding additional consent or
// removing consent See http://hl7.org/fhir/ValueSet/consent-except-type
type ConsentExceptTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConsentExceptTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConsentExceptTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConsentExceptTypeCode) Reset() {
	*x = ConsentExceptTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentExceptTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentExceptTypeCode) ProtoMessage() {}

func (x *ConsentExceptTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentExceptTypeCode.ProtoReflect.Descriptor instead.
func (*ConsentExceptTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{75}
}

func (x *ConsentExceptTypeCode) GetValue() ConsentExceptTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ConsentExceptTypeCode_INVALID_UNINITIALIZED
}

func (x *ConsentExceptTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConsentExceptTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the state of the consent
// See http://hl7.org/fhir/ValueSet/consent-state-codes
type ConsentStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConsentStateCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConsentStateCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConsentStateCode) Reset() {
	*x = ConsentStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentStateCode) ProtoMessage() {}

func (x *ConsentStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentStateCode.ProtoReflect.Descriptor instead.
func (*ConsentStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{76}
}

func (x *ConsentStateCode) GetValue() ConsentStateCode_Value {
	if x != nil {
		return x.Value
	}
	return ConsentStateCode_INVALID_UNINITIALIZED
}

func (x *ConsentStateCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConsentStateCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// the purpose for which you would contact a contact party. See
// http://hl7.org/fhir/ValueSet/contactentity-type
type ContactEntityTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ContactEntityTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContactEntityTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContactEntityTypeCode) Reset() {
	*x = ContactEntityTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactEntityTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactEntityTypeCode) ProtoMessage() {}

func (x *ContactEntityTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactEntityTypeCode.ProtoReflect.Descriptor instead.
func (*ContactEntityTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{77}
}

func (x *ContactEntityTypeCode) GetValue() ContactEntityTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ContactEntityTypeCode_INVALID_UNINITIALIZED
}

func (x *ContactEntityTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactEntityTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The content or mime type.
// See http://hl7.org/fhir/ValueSet/content-type
type ContentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ContentTypeCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContentTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContentTypeCode) Reset() {
	*x = ContentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTypeCode) ProtoMessage() {}

func (x *ContentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTypeCode.ProtoReflect.Descriptor instead.
func (*ContentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{78}
}

func (x *ContentTypeCode) GetValue() ContentTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ContentTypeCode_INVALID_UNINITIALIZED
}

func (x *ContentTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContentTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set contract specific codes for status.
// See http://hl7.org/fhir/ValueSet/contract-status
type ContractResourceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ContractResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContractResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContractResourceStatusCode) Reset() {
	*x = ContractResourceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractResourceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractResourceStatusCode) ProtoMessage() {}

func (x *ContractResourceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractResourceStatusCode.ProtoReflect.Descriptor instead.
func (*ContractResourceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{79}
}

func (x *ContractResourceStatusCode) GetValue() ContractResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ContractResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *ContractResourceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContractResourceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of contributor
// See http://hl7.org/fhir/ValueSet/contributor-type
type ContributorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ContributorTypeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContributorTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContributorTypeCode) Reset() {
	*x = ContributorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorTypeCode) ProtoMessage() {}

func (x *ContributorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorTypeCode.ProtoReflect.Descriptor instead.
func (*ContributorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{80}
}

func (x *ContributorTypeCode) GetValue() ContributorTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ContributorTypeCode_INVALID_UNINITIALIZED
}

func (x *ContributorTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContributorTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Copy Number Event
// See http://hl7.org/fhir/ValueSet/copy-number-event
type CopyNumberEventCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     CopyNumberEventCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.CopyNumberEventCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CopyNumberEventCode) Reset() {
	*x = CopyNumberEventCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyNumberEventCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNumberEventCode) ProtoMessage() {}

func (x *CopyNumberEventCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNumberEventCode.ProtoReflect.Descriptor instead.
func (*CopyNumberEventCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{81}
}

func (x *CopyNumberEventCode) GetValue() CopyNumberEventCode_Value {
	if x != nil {
		return x.Value
	}
	return CopyNumberEventCode_INVALID_UNINITIALIZED
}

func (x *CopyNumberEventCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CopyNumberEventCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Used to specify why the normally expected content of the data element is
// missing. See http://hl7.org/fhir/ValueSet/data-absent-reason
type DataAbsentReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DataAbsentReasonCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DataAbsentReasonCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataAbsentReasonCode) Reset() {
	*x = DataAbsentReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAbsentReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAbsentReasonCode) ProtoMessage() {}

func (x *DataAbsentReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAbsentReasonCode.ProtoReflect.Descriptor instead.
func (*DataAbsentReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{82}
}

func (x *DataAbsentReasonCode) GetValue() DataAbsentReasonCode_Value {
	if x != nil {
		return x.Value
	}
	return DataAbsentReasonCode_INVALID_UNINITIALIZED
}

func (x *DataAbsentReasonCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataAbsentReasonCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the degree of precision of the data element definition.
// See http://hl7.org/fhir/ValueSet/dataelement-stringency
type DataElementStringencyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DataElementStringencyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DataElementStringencyCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataElementStringencyCode) Reset() {
	*x = DataElementStringencyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementStringencyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementStringencyCode) ProtoMessage() {}

func (x *DataElementStringencyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementStringencyCode.ProtoReflect.Descriptor instead.
func (*DataElementStringencyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{83}
}

func (x *DataElementStringencyCode) GetValue() DataElementStringencyCode_Value {
	if x != nil {
		return x.Value
	}
	return DataElementStringencyCode_INVALID_UNINITIALIZED
}

func (x *DataElementStringencyCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementStringencyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of trigger
// See http://hl7.org/fhir/ValueSet/trigger-type
type TriggerTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TriggerTypeCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TriggerTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TriggerTypeCode) Reset() {
	*x = TriggerTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeCode) ProtoMessage() {}

func (x *TriggerTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeCode.ProtoReflect.Descriptor instead.
func (*TriggerTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{84}
}

func (x *TriggerTypeCode) GetValue() TriggerTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return TriggerTypeCode_INVALID_UNINITIALIZED
}

func (x *TriggerTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TriggerTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of an element - one of the FHIR data types.
// See http://hl7.org/fhir/ValueSet/data-types
type DataTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DataTypeCode_Value              `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DataTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataTypeCode) Reset() {
	*x = DataTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTypeCode) ProtoMessage() {}

func (x *DataTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTypeCode.ProtoReflect.Descriptor instead.
func (*DataTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{85}
}

func (x *DataTypeCode) GetValue() DataTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DataTypeCode_INVALID_UNINITIALIZED
}

func (x *DataTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Either an abstract type, a resource or a data type.
// See http://hl7.org/fhir/ValueSet/all-types
type FHIRAllTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FHIRAllTypesCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FHIRAllTypesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FHIRAllTypesCode) Reset() {
	*x = FHIRAllTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRAllTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRAllTypesCode) ProtoMessage() {}

func (x *FHIRAllTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRAllTypesCode.ProtoReflect.Descriptor instead.
func (*FHIRAllTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{86}
}

func (x *FHIRAllTypesCode) GetValue() FHIRAllTypesCode_Value {
	if x != nil {
		return x.Value
	}
	return FHIRAllTypesCode_INVALID_UNINITIALIZED
}

func (x *FHIRAllTypesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FHIRAllTypesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Either a resource or a data type.
// See http://hl7.org/fhir/ValueSet/defined-types
type FHIRDefinedTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FHIRDefinedTypeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FHIRDefinedTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FHIRDefinedTypeCode) Reset() {
	*x = FHIRDefinedTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDefinedTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDefinedTypeCode) ProtoMessage() {}

func (x *FHIRDefinedTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDefinedTypeCode.ProtoReflect.Descriptor instead.
func (*FHIRDefinedTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{87}
}

func (x *FHIRDefinedTypeCode) GetValue() FHIRDefinedTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return FHIRDefinedTypeCode_INVALID_UNINITIALIZED
}

func (x *FHIRDefinedTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FHIRDefinedTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Either a resource or a data type, extended to allow arbitrary other codes
// representing FHIR resources. See http://hl7.org/fhir/ValueSet/defined-types
// Due to
// https://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_item_id=15559
// there are two value sets with valueset url:
// http://hl7.org/fhir/ValueSet/defined-types.
// Fragment added here to disambiguate.
type FHIRDefinedTypeExtCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     string                          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FHIRDefinedTypeExtCode) Reset() {
	*x = FHIRDefinedTypeExtCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDefinedTypeExtCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDefinedTypeExtCode) ProtoMessage() {}

func (x *FHIRDefinedTypeExtCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDefinedTypeExtCode.ProtoReflect.Descriptor instead.
func (*FHIRDefinedTypeExtCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{88}
}

func (x *FHIRDefinedTypeExtCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FHIRDefinedTypeExtCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FHIRDefinedTypeExtCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes identifying the lifecycle stage of a definition
// See http://hl7.org/fhir/ValueSet/definition-status
type DefinitionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DefinitionStatusCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DefinitionStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DefinitionStatusCode) Reset() {
	*x = DefinitionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionStatusCode) ProtoMessage() {}

func (x *DefinitionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionStatusCode.ProtoReflect.Descriptor instead.
func (*DefinitionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{89}
}

func (x *DefinitionStatusCode) GetValue() DefinitionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DefinitionStatusCode_INVALID_UNINITIALIZED
}

func (x *DefinitionStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DefinitionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// High-level categorization of the definition, used for searching, sorting,
// and filtering See http://hl7.org/fhir/ValueSet/definition-topic
type DefinitionTopicCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DefinitionTopicCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DefinitionTopicCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DefinitionTopicCode) Reset() {
	*x = DefinitionTopicCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionTopicCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionTopicCode) ProtoMessage() {}

func (x *DefinitionTopicCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionTopicCode.ProtoReflect.Descriptor instead.
func (*DefinitionTopicCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{90}
}

func (x *DefinitionTopicCode) GetValue() DefinitionTopicCode_Value {
	if x != nil {
		return x.Value
	}
	return DefinitionTopicCode_INVALID_UNINITIALIZED
}

func (x *DefinitionTopicCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DefinitionTopicCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the potential degree of impact of the identified issue on the
// patient. See http://hl7.org/fhir/ValueSet/detectedissue-severity
type DetectedIssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DetectedIssueSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DetectedIssueSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DetectedIssueSeverityCode) Reset() {
	*x = DetectedIssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssueSeverityCode) ProtoMessage() {}

func (x *DetectedIssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssueSeverityCode.ProtoReflect.Descriptor instead.
func (*DetectedIssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{91}
}

func (x *DetectedIssueSeverityCode) GetValue() DetectedIssueSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return DetectedIssueSeverityCode_INVALID_UNINITIALIZED
}

func (x *DetectedIssueSeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DetectedIssueSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept indicating the current status of a the Device Usage
// See http://hl7.org/fhir/ValueSet/device-statement-status
type DeviceUseStatementStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceUseStatementStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceUseStatementStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceUseStatementStatusCode) Reset() {
	*x = DeviceUseStatementStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatementStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatementStatusCode) ProtoMessage() {}

func (x *DeviceUseStatementStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatementStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceUseStatementStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{92}
}

func (x *DeviceUseStatementStatusCode) GetValue() DeviceUseStatementStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceUseStatementStatusCode_INVALID_UNINITIALIZED
}

func (x *DeviceUseStatementStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceUseStatementStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The availability status of the device.
// See http://hl7.org/fhir/ValueSet/device-status
type FHIRDeviceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FHIRDeviceStatusCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FHIRDeviceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FHIRDeviceStatusCode) Reset() {
	*x = FHIRDeviceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDeviceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDeviceStatusCode) ProtoMessage() {}

func (x *FHIRDeviceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDeviceStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRDeviceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{93}
}

func (x *FHIRDeviceStatusCode) GetValue() FHIRDeviceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FHIRDeviceStatusCode_INVALID_UNINITIALIZED
}

func (x *FHIRDeviceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FHIRDeviceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that can be used to express the role
// of a diagnosis on the Encounter or EpisodeOfCare record. See
// http://hl7.org/fhir/ValueSet/diagnosis-role
type DiagnosisRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DiagnosisRoleCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DiagnosisRoleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DiagnosisRoleCode) Reset() {
	*x = DiagnosisRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosisRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosisRoleCode) ProtoMessage() {}

func (x *DiagnosisRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosisRoleCode.ProtoReflect.Descriptor instead.
func (*DiagnosisRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{94}
}

func (x *DiagnosisRoleCode) GetValue() DiagnosisRoleCode_Value {
	if x != nil {
		return x.Value
	}
	return DiagnosisRoleCode_INVALID_UNINITIALIZED
}

func (x *DiagnosisRoleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosisRoleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of the diagnostic report as a whole.
// See http://hl7.org/fhir/ValueSet/diagnostic-report-status
type DiagnosticReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DiagnosticReportStatusCode) Reset() {
	*x = DiagnosticReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportStatusCode) ProtoMessage() {}

func (x *DiagnosticReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportStatusCode.ProtoReflect.Descriptor instead.
func (*DiagnosticReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{95}
}

func (x *DiagnosticReportStatusCode) GetValue() DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *DiagnosticReportStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Whether the media is a photo, video, or audio
// See http://hl7.org/fhir/ValueSet/digital-media-type
type DigitalMediaTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DigitalMediaTypeCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DigitalMediaTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DigitalMediaTypeCode) Reset() {
	*x = DigitalMediaTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalMediaTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalMediaTypeCode) ProtoMessage() {}

func (x *DigitalMediaTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalMediaTypeCode.ProtoReflect.Descriptor instead.
func (*DigitalMediaTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{96}
}

func (x *DigitalMediaTypeCode) GetValue() DigitalMediaTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DigitalMediaTypeCode_INVALID_UNINITIALIZED
}

func (x *DigitalMediaTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DigitalMediaTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Whether the application produces or consumes documents.
// See http://hl7.org/fhir/ValueSet/document-mode
type DocumentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DocumentModeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DocumentModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DocumentModeCode) Reset() {
	*x = DocumentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentModeCode) ProtoMessage() {}

func (x *DocumentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentModeCode.ProtoReflect.Descriptor instead.
func (*DocumentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{97}
}

func (x *DocumentModeCode) GetValue() DocumentModeCode_Value {
	if x != nil {
		return x.Value
	}
	return DocumentModeCode_INVALID_UNINITIALIZED
}

func (x *DocumentModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of the document reference.
// See http://hl7.org/fhir/ValueSet/document-reference-status
type DocumentReferenceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DocumentReferenceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DocumentReferenceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DocumentReferenceStatusCode) Reset() {
	*x = DocumentReferenceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReferenceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReferenceStatusCode) ProtoMessage() {}

func (x *DocumentReferenceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReferenceStatusCode.ProtoReflect.Descriptor instead.
func (*DocumentReferenceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{98}
}

func (x *DocumentReferenceStatusCode) GetValue() DocumentReferenceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DocumentReferenceStatusCode_INVALID_UNINITIALIZED
}

func (x *DocumentReferenceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReferenceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of relationship between documents.
// See http://hl7.org/fhir/ValueSet/document-relationship-type
type DocumentRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DocumentRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DocumentRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DocumentRelationshipTypeCode) Reset() {
	*x = DocumentRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRelationshipTypeCode) ProtoMessage() {}

func (x *DocumentRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*DocumentRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{99}
}

func (x *DocumentRelationshipTypeCode) GetValue() DocumentRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DocumentRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *DocumentRelationshipTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentRelationshipTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that can be used to indicate from
// where the patient came in. See
// http://hl7.org/fhir/ValueSet/encounter-admit-source
type AdmitSourceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AdmitSourceCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AdmitSourceCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdmitSourceCode) Reset() {
	*x = AdmitSourceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmitSourceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmitSourceCode) ProtoMessage() {}

func (x *AdmitSourceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmitSourceCode.ProtoReflect.Descriptor instead.
func (*AdmitSourceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{100}
}

func (x *AdmitSourceCode) GetValue() AdmitSourceCode_Value {
	if x != nil {
		return x.Value
	}
	return AdmitSourceCode_INVALID_UNINITIALIZED
}

func (x *AdmitSourceCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdmitSourceCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that can be used to indicate dietary
// preferences or restrictions a patient may have. See
// http://hl7.org/fhir/ValueSet/encounter-diet
type DietCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DietCode_Value                  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DietCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DietCode) Reset() {
	*x = DietCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DietCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DietCode) ProtoMessage() {}

func (x *DietCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DietCode.ProtoReflect.Descriptor instead.
func (*DietCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{101}
}

func (x *DietCode) GetValue() DietCode_Value {
	if x != nil {
		return x.Value
	}
	return DietCode_INVALID_UNINITIALIZED
}

func (x *DietCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DietCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that can be used to where the patient
// left the hospital. See
// http://hl7.org/fhir/ValueSet/encounter-discharge-disposition
type DischargeDispositionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DischargeDispositionCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DischargeDispositionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DischargeDispositionCode) Reset() {
	*x = DischargeDispositionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DischargeDispositionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DischargeDispositionCode) ProtoMessage() {}

func (x *DischargeDispositionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DischargeDispositionCode.ProtoReflect.Descriptor instead.
func (*DischargeDispositionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{102}
}

func (x *DischargeDispositionCode) GetValue() DischargeDispositionCode_Value {
	if x != nil {
		return x.Value
	}
	return DischargeDispositionCode_INVALID_UNINITIALIZED
}

func (x *DischargeDispositionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DischargeDispositionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of the location.
// See http://hl7.org/fhir/ValueSet/encounter-location-status
type EncounterLocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EncounterLocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EncounterLocationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EncounterLocationStatusCode) Reset() {
	*x = EncounterLocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterLocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterLocationStatusCode) ProtoMessage() {}

func (x *EncounterLocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterLocationStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterLocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{103}
}

func (x *EncounterLocationStatusCode) GetValue() EncounterLocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EncounterLocationStatusCode_INVALID_UNINITIALIZED
}

func (x *EncounterLocationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterLocationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that can be used to indicate the
// kinds of special arrangements in place for a patients visit. See
// http://hl7.org/fhir/ValueSet/encounter-special-arrangements
type SpecialArrangementsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SpecialArrangementsCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SpecialArrangementsCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SpecialArrangementsCode) Reset() {
	*x = SpecialArrangementsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialArrangementsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialArrangementsCode) ProtoMessage() {}

func (x *SpecialArrangementsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialArrangementsCode.ProtoReflect.Descriptor instead.
func (*SpecialArrangementsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{104}
}

func (x *SpecialArrangementsCode) GetValue() SpecialArrangementsCode_Value {
	if x != nil {
		return x.Value
	}
	return SpecialArrangementsCode_INVALID_UNINITIALIZED
}

func (x *SpecialArrangementsCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecialArrangementsCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Current state of the encounter
// See http://hl7.org/fhir/ValueSet/encounter-status
type EncounterStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EncounterStatusCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EncounterStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EncounterStatusCode) Reset() {
	*x = EncounterStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterStatusCode) ProtoMessage() {}

func (x *EncounterStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{105}
}

func (x *EncounterStatusCode) GetValue() EncounterStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EncounterStatusCode_INVALID_UNINITIALIZED
}

func (x *EncounterStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// the type of encounter: a specific code indicating type of service provided.
// See http://hl7.org/fhir/ValueSet/encounter-type
type EncounterTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EncounterTypeCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EncounterTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EncounterTypeCode) Reset() {
	*x = EncounterTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterTypeCode) ProtoMessage() {}

func (x *EncounterTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterTypeCode.ProtoReflect.Descriptor instead.
func (*EncounterTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{106}
}

func (x *EncounterTypeCode) GetValue() EncounterTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return EncounterTypeCode_INVALID_UNINITIALIZED
}

func (x *EncounterTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of the endpoint
// See http://hl7.org/fhir/ValueSet/endpoint-status
type EndpointStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EndpointStatusCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EndpointStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EndpointStatusCode) Reset() {
	*x = EndpointStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointStatusCode) ProtoMessage() {}

func (x *EndpointStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointStatusCode.ProtoReflect.Descriptor instead.
func (*EndpointStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{107}
}

func (x *EndpointStatusCode) GetValue() EndpointStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EndpointStatusCode_INVALID_UNINITIALIZED
}

func (x *EndpointStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EndpointStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A set of codes each of which specifies a certain subcategory of the name part
// in addition to the main name part type See
// http://hl7.org/fhir/ValueSet/name-part-qualifier
type EntityNamePartQualifierCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EntityNamePartQualifierCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EntityNamePartQualifierCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EntityNamePartQualifierCode) Reset() {
	*x = EntityNamePartQualifierCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityNamePartQualifierCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityNamePartQualifierCode) ProtoMessage() {}

func (x *EntityNamePartQualifierCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityNamePartQualifierCode.ProtoReflect.Descriptor instead.
func (*EntityNamePartQualifierCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{108}
}

func (x *EntityNamePartQualifierCode) GetValue() EntityNamePartQualifierCode_Value {
	if x != nil {
		return x.Value
	}
	return EntityNamePartQualifierCode_INVALID_UNINITIALIZED
}

func (x *EntityNamePartQualifierCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityNamePartQualifierCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// EnteralFormulaAdditiveType: Codes for the type of modular component such as
// protein, carbohydrate or fiber to be provided in addition to or mixed with
// the base formula. This value set is provided as a suggestive example. See
// http://hl7.org/fhir/ValueSet/entformula-additive
type EnteralFormulaAdditiveTypeCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EnteralFormulaAdditiveTypeCodeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EnteralFormulaAdditiveTypeCodeCode) Reset() {
	*x = EnteralFormulaAdditiveTypeCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnteralFormulaAdditiveTypeCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnteralFormulaAdditiveTypeCodeCode) ProtoMessage() {}

func (x *EnteralFormulaAdditiveTypeCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnteralFormulaAdditiveTypeCodeCode.ProtoReflect.Descriptor instead.
func (*EnteralFormulaAdditiveTypeCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{109}
}

func (x *EnteralFormulaAdditiveTypeCodeCode) GetValue() EnteralFormulaAdditiveTypeCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return EnteralFormulaAdditiveTypeCodeCode_INVALID_UNINITIALIZED
}

func (x *EnteralFormulaAdditiveTypeCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EnteralFormulaAdditiveTypeCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of the episode of care.
// See http://hl7.org/fhir/ValueSet/episode-of-care-status
type EpisodeOfCareStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EpisodeOfCareStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EpisodeOfCareStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EpisodeOfCareStatusCode) Reset() {
	*x = EpisodeOfCareStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCareStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCareStatusCode) ProtoMessage() {}

func (x *EpisodeOfCareStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCareStatusCode.ProtoReflect.Descriptor instead.
func (*EpisodeOfCareStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{110}
}

func (x *EpisodeOfCareStatusCode) GetValue() EpisodeOfCareStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EpisodeOfCareStatusCode_INVALID_UNINITIALIZED
}

func (x *EpisodeOfCareStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOfCareStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to express
// the usage type of an EpisodeOfCare record. See
// http://hl7.org/fhir/ValueSet/episodeofcare-type
type EpisodeOfCareTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EpisodeOfCareTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EpisodeOfCareTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EpisodeOfCareTypeCode) Reset() {
	*x = EpisodeOfCareTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCareTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCareTypeCode) ProtoMessage() {}

func (x *EpisodeOfCareTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCareTypeCode.ProtoReflect.Descriptor instead.
func (*EpisodeOfCareTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{111}
}

func (x *EpisodeOfCareTypeCode) GetValue() EpisodeOfCareTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return EpisodeOfCareTypeCode_INVALID_UNINITIALIZED
}

func (x *EpisodeOfCareTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOfCareTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The mode of a message capability statement.
// See http://hl7.org/fhir/ValueSet/event-capability-mode
type EventCapabilityModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EventCapabilityModeCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EventCapabilityModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EventCapabilityModeCode) Reset() {
	*x = EventCapabilityModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCapabilityModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCapabilityModeCode) ProtoMessage() {}

func (x *EventCapabilityModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCapabilityModeCode.ProtoReflect.Descriptor instead.
func (*EventCapabilityModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{112}
}

func (x *EventCapabilityModeCode) GetValue() EventCapabilityModeCode_Value {
	if x != nil {
		return x.Value
	}
	return EventCapabilityModeCode_INVALID_UNINITIALIZED
}

func (x *EventCapabilityModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EventCapabilityModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes identifying the stage lifecycle stage of a event
// See http://hl7.org/fhir/ValueSet/event-status
type EventStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     EventStatusCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EventStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EventStatusCode) Reset() {
	*x = EventStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusCode) ProtoMessage() {}

func (x *EventStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusCode.ProtoReflect.Descriptor instead.
func (*EventStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{113}
}

func (x *EventStatusCode) GetValue() EventStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EventStatusCode_INVALID_UNINITIALIZED
}

func (x *EventStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EventStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of Claim payee Resource
// See http://hl7.org/fhir/ValueSet/ex-payee-resource-type
type ClaimPayeeResourceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ClaimPayeeResourceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ClaimPayeeResourceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClaimPayeeResourceTypeCode) Reset() {
	*x = ClaimPayeeResourceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimPayeeResourceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimPayeeResourceTypeCode) ProtoMessage() {}

func (x *ClaimPayeeResourceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimPayeeResourceTypeCode.ProtoReflect.Descriptor instead.
func (*ClaimPayeeResourceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{114}
}

func (x *ClaimPayeeResourceTypeCode) GetValue() ClaimPayeeResourceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ClaimPayeeResourceTypeCode_INVALID_UNINITIALIZED
}

func (x *ClaimPayeeResourceTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimPayeeResourceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code specifying the state of the resource instance.
// See http://hl7.org/fhir/ValueSet/explanationofbenefit-status
type ExplanationOfBenefitStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ExplanationOfBenefitStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ExplanationOfBenefitStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExplanationOfBenefitStatusCode) Reset() {
	*x = ExplanationOfBenefitStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplanationOfBenefitStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplanationOfBenefitStatusCode) ProtoMessage() {}

func (x *ExplanationOfBenefitStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplanationOfBenefitStatusCode.ProtoReflect.Descriptor instead.
func (*ExplanationOfBenefitStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{115}
}

func (x *ExplanationOfBenefitStatusCode) GetValue() ExplanationOfBenefitStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ExplanationOfBenefitStatusCode_INVALID_UNINITIALIZED
}

func (x *ExplanationOfBenefitStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExplanationOfBenefitStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How an extension context is interpreted.
// See http://hl7.org/fhir/ValueSet/extension-context
type ExtensionContextCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ExtensionContextCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ExtensionContextCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExtensionContextCode) Reset() {
	*x = ExtensionContextCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionContextCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionContextCode) ProtoMessage() {}

func (x *ExtensionContextCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionContextCode.ProtoReflect.Descriptor instead.
func (*ExtensionContextCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{116}
}

func (x *ExtensionContextCode) GetValue() ExtensionContextCode_Value {
	if x != nil {
		return x.Value
	}
	return ExtensionContextCode_INVALID_UNINITIALIZED
}

func (x *ExtensionContextCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExtensionContextCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The kind of operation to perform as a part of a property based filter.
// See http://hl7.org/fhir/ValueSet/filter-operator
type FilterOperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FilterOperatorCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FilterOperatorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FilterOperatorCode) Reset() {
	*x = FilterOperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperatorCode) ProtoMessage() {}

func (x *FilterOperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperatorCode.ProtoReflect.Descriptor instead.
func (*FilterOperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{117}
}

func (x *FilterOperatorCode) GetValue() FilterOperatorCode_Value {
	if x != nil {
		return x.Value
	}
	return FilterOperatorCode_INVALID_UNINITIALIZED
}

func (x *FilterOperatorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FilterOperatorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Example list of general categories for flagged issues. (Not complete or
// necessarily appropriate.) See http://hl7.org/fhir/ValueSet/flag-category
type FlagCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FlagCategoryCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FlagCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FlagCategoryCode) Reset() {
	*x = FlagCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagCategoryCode) ProtoMessage() {}

func (x *FlagCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagCategoryCode.ProtoReflect.Descriptor instead.
func (*FlagCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{118}
}

func (x *FlagCategoryCode) GetValue() FlagCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return FlagCategoryCode_INVALID_UNINITIALIZED
}

func (x *FlagCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlagCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set is provided as an exemplar. The value set is driven by IHE
// Table B.8-4: Abnormal Flags, Alert Priority. See
// http://hl7.org/fhir/ValueSet/flag-priority
type FlagPriorityCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FlagPriorityCodesCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FlagPriorityCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FlagPriorityCodesCode) Reset() {
	*x = FlagPriorityCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagPriorityCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagPriorityCodesCode) ProtoMessage() {}

func (x *FlagPriorityCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagPriorityCodesCode.ProtoReflect.Descriptor instead.
func (*FlagPriorityCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{119}
}

func (x *FlagPriorityCodesCode) GetValue() FlagPriorityCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return FlagPriorityCodesCode_INVALID_UNINITIALIZED
}

func (x *FlagPriorityCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlagPriorityCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether this flag is active and needs to be displayed to a user,
// or whether it is no longer needed or entered in error. See
// http://hl7.org/fhir/ValueSet/flag-status
type FlagStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FlagStatusCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FlagStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FlagStatusCode) Reset() {
	*x = FlagStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagStatusCode) ProtoMessage() {}

func (x *FlagStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagStatusCode.ProtoReflect.Descriptor instead.
func (*FlagStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{120}
}

func (x *FlagStatusCode) GetValue() FlagStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FlagStatusCode_INVALID_UNINITIALIZED
}

func (x *FlagStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlagStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set includes Status codes.
// See http://hl7.org/fhir/ValueSet/fm-status
type FinancialResourceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FinancialResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FinancialResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FinancialResourceStatusCode) Reset() {
	*x = FinancialResourceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialResourceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialResourceStatusCode) ProtoMessage() {}

func (x *FinancialResourceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialResourceStatusCode.ProtoReflect.Descriptor instead.
func (*FinancialResourceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{121}
}

func (x *FinancialResourceStatusCode) GetValue() FinancialResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FinancialResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *FinancialResourceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FinancialResourceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes indicating whether the goal has been accepted by a stakeholder
// See http://hl7.org/fhir/ValueSet/goal-acceptance-status
type GoalAcceptanceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GoalAcceptanceStatusCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GoalAcceptanceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalAcceptanceStatusCode) Reset() {
	*x = GoalAcceptanceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalAcceptanceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalAcceptanceStatusCode) ProtoMessage() {}

func (x *GoalAcceptanceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalAcceptanceStatusCode.ProtoReflect.Descriptor instead.
func (*GoalAcceptanceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{122}
}

func (x *GoalAcceptanceStatusCode) GetValue() GoalAcceptanceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalAcceptanceStatusCode_INVALID_UNINITIALIZED
}

func (x *GoalAcceptanceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalAcceptanceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Example codes for grouping goals for filtering or presentation.
// See http://hl7.org/fhir/ValueSet/goal-category
type GoalCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GoalCategoryCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GoalCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalCategoryCode) Reset() {
	*x = GoalCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalCategoryCode) ProtoMessage() {}

func (x *GoalCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalCategoryCode.ProtoReflect.Descriptor instead.
func (*GoalCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{123}
}

func (x *GoalCategoryCode) GetValue() GoalCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalCategoryCode_INVALID_UNINITIALIZED
}

func (x *GoalCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the level of importance associated with reaching or sustaining a
// goal. See http://hl7.org/fhir/ValueSet/goal-priority
type GoalPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GoalPriorityCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GoalPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalPriorityCode) Reset() {
	*x = GoalPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalPriorityCode) ProtoMessage() {}

func (x *GoalPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalPriorityCode.ProtoReflect.Descriptor instead.
func (*GoalPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{124}
}

func (x *GoalPriorityCode) GetValue() GoalPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalPriorityCode_INVALID_UNINITIALIZED
}

func (x *GoalPriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalPriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Types of relationships between two goals
// See http://hl7.org/fhir/ValueSet/goal-relationship-type
type GoalRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GoalRelationshipTypeCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GoalRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalRelationshipTypeCode) Reset() {
	*x = GoalRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalRelationshipTypeCode) ProtoMessage() {}

func (x *GoalRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*GoalRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{125}
}

func (x *GoalRelationshipTypeCode) GetValue() GoalRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *GoalRelationshipTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalRelationshipTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether the goal has been met and is still being targeted
// See http://hl7.org/fhir/ValueSet/goal-status
type GoalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GoalStatusCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GoalStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalStatusCode) Reset() {
	*x = GoalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalStatusCode) ProtoMessage() {}

func (x *GoalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalStatusCode.ProtoReflect.Descriptor instead.
func (*GoalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{126}
}

func (x *GoalStatusCode) GetValue() GoalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalStatusCode_INVALID_UNINITIALIZED
}

func (x *GoalStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Example codes indicating the reason for a current status.  Note that these
// are in no way complete and may not even be appropriate for some uses. See
// http://hl7.org/fhir/ValueSet/goal-status-reason
type GoalStatusReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GoalStatusReasonCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GoalStatusReasonCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalStatusReasonCode) Reset() {
	*x = GoalStatusReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalStatusReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalStatusReasonCode) ProtoMessage() {}

func (x *GoalStatusReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalStatusReasonCode.ProtoReflect.Descriptor instead.
func (*GoalStatusReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{127}
}

func (x *GoalStatusReasonCode) GetValue() GoalStatusReasonCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalStatusReasonCode_INVALID_UNINITIALIZED
}

func (x *GoalStatusReasonCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalStatusReasonCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a compartment must be linked
// See http://hl7.org/fhir/ValueSet/graph-compartment-rule
type GraphCompartmentRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GraphCompartmentRuleCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GraphCompartmentRuleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GraphCompartmentRuleCode) Reset() {
	*x = GraphCompartmentRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphCompartmentRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphCompartmentRuleCode) ProtoMessage() {}

func (x *GraphCompartmentRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphCompartmentRuleCode.ProtoReflect.Descriptor instead.
func (*GraphCompartmentRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{128}
}

func (x *GraphCompartmentRuleCode) GetValue() GraphCompartmentRuleCode_Value {
	if x != nil {
		return x.Value
	}
	return GraphCompartmentRuleCode_INVALID_UNINITIALIZED
}

func (x *GraphCompartmentRuleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GraphCompartmentRuleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Types of resources that are part of group
// See http://hl7.org/fhir/ValueSet/group-type
type GroupTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GroupTypeCode_Value             `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GroupTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GroupTypeCode) Reset() {
	*x = GroupTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTypeCode) ProtoMessage() {}

func (x *GroupTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTypeCode.ProtoReflect.Descriptor instead.
func (*GroupTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{129}
}

func (x *GroupTypeCode) GetValue() GroupTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return GroupTypeCode_INVALID_UNINITIALIZED
}

func (x *GroupTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GroupTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of a guidance response
// See http://hl7.org/fhir/ValueSet/guidance-response-status
type GuidanceResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GuidanceResponseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GuidanceResponseStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GuidanceResponseStatusCode) Reset() {
	*x = GuidanceResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceResponseStatusCode) ProtoMessage() {}

func (x *GuidanceResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceResponseStatusCode.ProtoReflect.Descriptor instead.
func (*GuidanceResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{130}
}

func (x *GuidanceResponseStatusCode) GetValue() GuidanceResponseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return GuidanceResponseStatusCode_INVALID_UNINITIALIZED
}

func (x *GuidanceResponseStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuidanceResponseStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a dependency is represented when the guide is published.
// See http://hl7.org/fhir/ValueSet/guide-dependency-type
type GuideDependencyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GuideDependencyTypeCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GuideDependencyTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GuideDependencyTypeCode) Reset() {
	*x = GuideDependencyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideDependencyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideDependencyTypeCode) ProtoMessage() {}

func (x *GuideDependencyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideDependencyTypeCode.ProtoReflect.Descriptor instead.
func (*GuideDependencyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{131}
}

func (x *GuideDependencyTypeCode) GetValue() GuideDependencyTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return GuideDependencyTypeCode_INVALID_UNINITIALIZED
}

func (x *GuideDependencyTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuideDependencyTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The kind of an included page.
// See http://hl7.org/fhir/ValueSet/guide-page-kind
type GuidePageKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     GuidePageKindCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.GuidePageKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GuidePageKindCode) Reset() {
	*x = GuidePageKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidePageKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidePageKindCode) ProtoMessage() {}

func (x *GuidePageKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidePageKindCode.ProtoReflect.Descriptor instead.
func (*GuidePageKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{132}
}

func (x *GuidePageKindCode) GetValue() GuidePageKindCode_Value {
	if x != nil {
		return x.Value
	}
	return GuidePageKindCode_INVALID_UNINITIALIZED
}

func (x *GuidePageKindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuidePageKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes describing the reason why a family member history was not done.
// See http://hl7.org/fhir/ValueSet/history-not-done-reason
type FamilyHistoryNotDoneReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FamilyHistoryNotDoneReasonCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FamilyHistoryNotDoneReasonCode) Reset() {
	*x = FamilyHistoryNotDoneReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyHistoryNotDoneReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyHistoryNotDoneReasonCode) ProtoMessage() {}

func (x *FamilyHistoryNotDoneReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyHistoryNotDoneReasonCode.ProtoReflect.Descriptor instead.
func (*FamilyHistoryNotDoneReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{133}
}

func (x *FamilyHistoryNotDoneReasonCode) GetValue() FamilyHistoryNotDoneReasonCode_Value {
	if x != nil {
		return x.Value
	}
	return FamilyHistoryNotDoneReasonCode_INVALID_UNINITIALIZED
}

func (x *FamilyHistoryNotDoneReasonCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyHistoryNotDoneReasonCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that identifies the status of the family history record.
// See http://hl7.org/fhir/ValueSet/history-status
type FamilyHistoryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FamilyHistoryStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FamilyHistoryStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FamilyHistoryStatusCode) Reset() {
	*x = FamilyHistoryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyHistoryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyHistoryStatusCode) ProtoMessage() {}

func (x *FamilyHistoryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyHistoryStatusCode.ProtoReflect.Descriptor instead.
func (*FamilyHistoryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{134}
}

func (x *FamilyHistoryStatusCode) GetValue() FamilyHistoryStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FamilyHistoryStatusCode_INVALID_UNINITIALIZED
}

func (x *FamilyHistoryStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyHistoryStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// An HL7 administrative unit that owns artifacts in the FHIR specification
// See http://hl7.org/fhir/ValueSet/hl7-work-group
type HL7WorkgroupCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     HL7WorkgroupCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.HL7WorkgroupCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *HL7WorkgroupCode) Reset() {
	*x = HL7WorkgroupCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HL7WorkgroupCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HL7WorkgroupCode) ProtoMessage() {}

func (x *HL7WorkgroupCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HL7WorkgroupCode.ProtoReflect.Descriptor instead.
func (*HL7WorkgroupCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{135}
}

func (x *HL7WorkgroupCode) GetValue() HL7WorkgroupCode_Value {
	if x != nil {
		return x.Value
	}
	return HL7WorkgroupCode_INVALID_UNINITIALIZED
}

func (x *HL7WorkgroupCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HL7WorkgroupCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The allowable request method or HTTP operation codes.
// See http://hl7.org/fhir/ValueSet/http-operations
type TestScriptRequestMethodCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestScriptRequestMethodCodeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestScriptRequestMethodCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestScriptRequestMethodCodeCode) Reset() {
	*x = TestScriptRequestMethodCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScriptRequestMethodCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScriptRequestMethodCodeCode) ProtoMessage() {}

func (x *TestScriptRequestMethodCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScriptRequestMethodCodeCode.ProtoReflect.Descriptor instead.
func (*TestScriptRequestMethodCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{136}
}

func (x *TestScriptRequestMethodCodeCode) GetValue() TestScriptRequestMethodCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return TestScriptRequestMethodCodeCode_INVALID_UNINITIALIZED
}

func (x *TestScriptRequestMethodCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScriptRequestMethodCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// HTTP verbs (in the HTTP command line).
// See http://hl7.org/fhir/ValueSet/http-verb
type HTTPVerbCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     HTTPVerbCode_Value              `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.HTTPVerbCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *HTTPVerbCode) Reset() {
	*x = HTTPVerbCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPVerbCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPVerbCode) ProtoMessage() {}

func (x *HTTPVerbCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPVerbCode.ProtoReflect.Descriptor instead.
func (*HTTPVerbCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{137}
}

func (x *HTTPVerbCode) GetValue() HTTPVerbCode_Value {
	if x != nil {
		return x.Value
	}
	return HTTPVerbCode_INVALID_UNINITIALIZED
}

func (x *HTTPVerbCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HTTPVerbCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The level of confidence that this link represents the same actual person,
// based on NIST Authentication Levels. See
// http://hl7.org/fhir/ValueSet/identity-assuranceLevel
type IdentityAssuranceLevelCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     IdentityAssuranceLevelCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.IdentityAssuranceLevelCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IdentityAssuranceLevelCode) Reset() {
	*x = IdentityAssuranceLevelCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAssuranceLevelCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAssuranceLevelCode) ProtoMessage() {}

func (x *IdentityAssuranceLevelCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAssuranceLevelCode.ProtoReflect.Descriptor instead.
func (*IdentityAssuranceLevelCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{138}
}

func (x *IdentityAssuranceLevelCode) GetValue() IdentityAssuranceLevelCode_Value {
	if x != nil {
		return x.Value
	}
	return IdentityAssuranceLevelCode_INVALID_UNINITIALIZED
}

func (x *IdentityAssuranceLevelCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IdentityAssuranceLevelCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts
// to support describing the source of the data when the report of the
// immunization event is not based on information from the person, entity or
// organization who administered the vaccine. This value set is provided as a
// suggestive example. See http://hl7.org/fhir/ValueSet/immunization-origin
type ImmunizationOriginCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ImmunizationOriginCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ImmunizationOriginCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ImmunizationOriginCodesCode) Reset() {
	*x = ImmunizationOriginCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationOriginCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationOriginCodesCode) ProtoMessage() {}

func (x *ImmunizationOriginCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationOriginCodesCode.ProtoReflect.Descriptor instead.
func (*ImmunizationOriginCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{139}
}

func (x *ImmunizationOriginCodesCode) GetValue() ImmunizationOriginCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ImmunizationOriginCodesCode_INVALID_UNINITIALIZED
}

func (x *ImmunizationOriginCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationOriginCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts
// to support the definition of dates relevant to recommendations for future
// doses of vaccines. This value set is provided as a suggestive example. See
// http://hl7.org/fhir/ValueSet/immunization-recommendation-date-criterion
type ImmunizationRecommendationDateCriterionCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ImmunizationRecommendationDateCriterionCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ImmunizationRecommendationDateCriterionCodesCode) Reset() {
	*x = ImmunizationRecommendationDateCriterionCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationRecommendationDateCriterionCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationRecommendationDateCriterionCodesCode) ProtoMessage() {}

func (x *ImmunizationRecommendationDateCriterionCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationRecommendationDateCriterionCodesCode.ProtoReflect.Descriptor instead.
func (*ImmunizationRecommendationDateCriterionCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{140}
}

func (x *ImmunizationRecommendationDateCriterionCodesCode) GetValue() ImmunizationRecommendationDateCriterionCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ImmunizationRecommendationDateCriterionCodesCode_INVALID_UNINITIALIZED
}

func (x *ImmunizationRecommendationDateCriterionCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationRecommendationDateCriterionCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts
// to support describing the status of the patient towards perceived immunity
// against a vaccine preventable disease. This value set is provided as a
// suggestive example. See
// http://hl7.org/fhir/ValueSet/immunization-recommendation-status
type ImmunizationRecommendationStatusCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ImmunizationRecommendationStatusCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ImmunizationRecommendationStatusCodesCode) Reset() {
	*x = ImmunizationRecommendationStatusCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationRecommendationStatusCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationRecommendationStatusCodesCode) ProtoMessage() {}

func (x *ImmunizationRecommendationStatusCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationRecommendationStatusCodesCode.ProtoReflect.Descriptor instead.
func (*ImmunizationRecommendationStatusCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{141}
}

func (x *ImmunizationRecommendationStatusCodesCode) GetValue() ImmunizationRecommendationStatusCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ImmunizationRecommendationStatusCodesCode_INVALID_UNINITIALIZED
}

func (x *ImmunizationRecommendationStatusCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationRecommendationStatusCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts
// to support describing the current status of the administered dose of
// vaccine. See http://hl7.org/fhir/ValueSet/immunization-status
type ImmunizationStatusCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ImmunizationStatusCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ImmunizationStatusCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ImmunizationStatusCodesCode) Reset() {
	*x = ImmunizationStatusCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationStatusCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationStatusCodesCode) ProtoMessage() {}

func (x *ImmunizationStatusCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationStatusCodesCode.ProtoReflect.Descriptor instead.
func (*ImmunizationStatusCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{142}
}

func (x *ImmunizationStatusCodesCode) GetValue() ImmunizationStatusCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ImmunizationStatusCodesCode_INVALID_UNINITIALIZED
}

func (x *ImmunizationStatusCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationStatusCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A set codes that define the functional status of an implanted device.
// See http://hl7.org/fhir/ValueSet/implant-status
type ImplantStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ImplantStatusCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ImplantStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ImplantStatusCode) Reset() {
	*x = ImplantStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantStatusCode) ProtoMessage() {}

func (x *ImplantStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantStatusCode.ProtoReflect.Descriptor instead.
func (*ImplantStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{143}
}

func (x *ImplantStatusCode) GetValue() ImplantStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ImplantStatusCode_INVALID_UNINITIALIZED
}

func (x *ImplantStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplantStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Availability of the resource
// See http://hl7.org/fhir/ValueSet/instance-availability
type InstanceAvailabilityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     InstanceAvailabilityCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.InstanceAvailabilityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *InstanceAvailabilityCode) Reset() {
	*x = InstanceAvailabilityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAvailabilityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAvailabilityCode) ProtoMessage() {}

func (x *InstanceAvailabilityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAvailabilityCode.ProtoReflect.Descriptor instead.
func (*InstanceAvailabilityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{144}
}

func (x *InstanceAvailabilityCode) GetValue() InstanceAvailabilityCode_Value {
	if x != nil {
		return x.Value
	}
	return InstanceAvailabilityCode_INVALID_UNINITIALIZED
}

func (x *InstanceAvailabilityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InstanceAvailabilityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How the issue affects the success of the action.
// See http://hl7.org/fhir/ValueSet/issue-severity
type IssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     IssueSeverityCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.IssueSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IssueSeverityCode) Reset() {
	*x = IssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSeverityCode) ProtoMessage() {}

func (x *IssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSeverityCode.ProtoReflect.Descriptor instead.
func (*IssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{145}
}

func (x *IssueSeverityCode) GetValue() IssueSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return IssueSeverityCode_INVALID_UNINITIALIZED
}

func (x *IssueSeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IssueSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that describes the type of issue.
// See http://hl7.org/fhir/ValueSet/issue-type
type IssueTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     IssueTypeCode_Value             `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.IssueTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IssueTypeCode) Reset() {
	*x = IssueTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTypeCode) ProtoMessage() {}

func (x *IssueTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTypeCode.ProtoReflect.Descriptor instead.
func (*IssueTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{146}
}

func (x *IssueTypeCode) GetValue() IssueTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return IssueTypeCode_INVALID_UNINITIALIZED
}

func (x *IssueTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IssueTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Distinguishes groups from questions and display text and indicates data
// type for questions See http://hl7.org/fhir/ValueSet/item-type
type QuestionnaireItemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     QuestionnaireItemTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuestionnaireItemTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireItemTypeCode) Reset() {
	*x = QuestionnaireItemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemTypeCode) ProtoMessage() {}

func (x *QuestionnaireItemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemTypeCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{147}
}

func (x *QuestionnaireItemTypeCode) GetValue() QuestionnaireItemTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireItemTypeCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireItemTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireItemTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of knowledge asset this library contains
// See http://hl7.org/fhir/ValueSet/library-type
type LibraryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     LibraryTypeCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.LibraryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LibraryTypeCode) Reset() {
	*x = LibraryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryTypeCode) ProtoMessage() {}

func (x *LibraryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryTypeCode.ProtoReflect.Descriptor instead.
func (*LibraryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{148}
}

func (x *LibraryTypeCode) GetValue() LibraryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return LibraryTypeCode_INVALID_UNINITIALIZED
}

func (x *LibraryTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LibraryTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Used to distinguish different roles a resource can play within a set of
// linked resources See http://hl7.org/fhir/ValueSet/linkage-type
type LinkageTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     LinkageTypeCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.LinkageTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LinkageTypeCode) Reset() {
	*x = LinkageTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkageTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkageTypeCode) ProtoMessage() {}

func (x *LinkageTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkageTypeCode.ProtoReflect.Descriptor instead.
func (*LinkageTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{149}
}

func (x *LinkageTypeCode) GetValue() LinkageTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return LinkageTypeCode_INVALID_UNINITIALIZED
}

func (x *LinkageTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LinkageTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of link between this patient resource and another patient
// resource. See http://hl7.org/fhir/ValueSet/link-type
type LinkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     LinkTypeCode_Value              `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.LinkTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LinkTypeCode) Reset() {
	*x = LinkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTypeCode) ProtoMessage() {}

func (x *LinkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTypeCode.ProtoReflect.Descriptor instead.
func (*LinkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{150}
}

func (x *LinkTypeCode) GetValue() LinkTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return LinkTypeCode_INVALID_UNINITIALIZED
}

func (x *LinkTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LinkTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// General reasons for a list to be empty. Reasons are either related to a
// summary list (i.e. problem or medication list) or to a workflow related
// list (i.e. consultation list). See
// http://hl7.org/fhir/ValueSet/list-empty-reason
type ListEmptyReasonsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ListEmptyReasonsCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ListEmptyReasonsCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ListEmptyReasonsCode) Reset() {
	*x = ListEmptyReasonsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEmptyReasonsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEmptyReasonsCode) ProtoMessage() {}

func (x *ListEmptyReasonsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEmptyReasonsCode.ProtoReflect.Descriptor instead.
func (*ListEmptyReasonsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{151}
}

func (x *ListEmptyReasonsCode) GetValue() ListEmptyReasonsCode_Value {
	if x != nil {
		return x.Value
	}
	return ListEmptyReasonsCode_INVALID_UNINITIALIZED
}

func (x *ListEmptyReasonsCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListEmptyReasonsCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Example use codes for the List resource - typical kinds of use.
// See http://hl7.org/fhir/ValueSet/list-example-codes
type ExampleUseCodesforListCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ExampleUseCodesforListCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ExampleUseCodesforListCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExampleUseCodesforListCode) Reset() {
	*x = ExampleUseCodesforListCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleUseCodesforListCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleUseCodesforListCode) ProtoMessage() {}

func (x *ExampleUseCodesforListCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleUseCodesforListCode.ProtoReflect.Descriptor instead.
func (*ExampleUseCodesforListCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{152}
}

func (x *ExampleUseCodesforListCode) GetValue() ExampleUseCodesforListCode_Value {
	if x != nil {
		return x.Value
	}
	return ExampleUseCodesforListCode_INVALID_UNINITIALIZED
}

func (x *ExampleUseCodesforListCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExampleUseCodesforListCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The processing mode that applies to this list
// See http://hl7.org/fhir/ValueSet/list-mode
type ListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ListModeCode_Value              `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ListModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ListModeCode) Reset() {
	*x = ListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModeCode) ProtoMessage() {}

func (x *ListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModeCode.ProtoReflect.Descriptor instead.
func (*ListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{153}
}

func (x *ListModeCode) GetValue() ListModeCode_Value {
	if x != nil {
		return x.Value
	}
	return ListModeCode_INVALID_UNINITIALIZED
}

func (x *ListModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Base values for the order of the items in a list resource.
// See http://hl7.org/fhir/ValueSet/list-order
type ListOrderCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ListOrderCodesCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ListOrderCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ListOrderCodesCode) Reset() {
	*x = ListOrderCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrderCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderCodesCode) ProtoMessage() {}

func (x *ListOrderCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderCodesCode.ProtoReflect.Descriptor instead.
func (*ListOrderCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{154}
}

func (x *ListOrderCodesCode) GetValue() ListOrderCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ListOrderCodesCode_INVALID_UNINITIALIZED
}

func (x *ListOrderCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListOrderCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The current state of the list
// See http://hl7.org/fhir/ValueSet/list-status
type ListStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ListStatusCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ListStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ListStatusCode) Reset() {
	*x = ListStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusCode) ProtoMessage() {}

func (x *ListStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusCode.ProtoReflect.Descriptor instead.
func (*ListStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{155}
}

func (x *ListStatusCode) GetValue() ListStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ListStatusCode_INVALID_UNINITIALIZED
}

func (x *ListStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether a resource instance represents a specific location or a
// class of locations. See http://hl7.org/fhir/ValueSet/location-mode
type LocationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     LocationModeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.LocationModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LocationModeCode) Reset() {
	*x = LocationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationModeCode) ProtoMessage() {}

func (x *LocationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationModeCode.ProtoReflect.Descriptor instead.
func (*LocationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{156}
}

func (x *LocationModeCode) GetValue() LocationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return LocationModeCode_INVALID_UNINITIALIZED
}

func (x *LocationModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// the physical form of the Location. See
// http://hl7.org/fhir/ValueSet/location-physical-type
type LocationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     LocationTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.LocationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LocationTypeCode) Reset() {
	*x = LocationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationTypeCode) ProtoMessage() {}

func (x *LocationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationTypeCode.ProtoReflect.Descriptor instead.
func (*LocationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{157}
}

func (x *LocationTypeCode) GetValue() LocationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return LocationTypeCode_INVALID_UNINITIALIZED
}

func (x *LocationTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates whether the location is still in use.
// See http://hl7.org/fhir/ValueSet/location-status
type LocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     LocationStatusCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.LocationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LocationStatusCode) Reset() {
	*x = LocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationStatusCode) ProtoMessage() {}

func (x *LocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationStatusCode.ProtoReflect.Descriptor instead.
func (*LocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{158}
}

func (x *LocationStatusCode) GetValue() LocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return LocationStatusCode_INVALID_UNINITIALIZED
}

func (x *LocationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes specifying the type of probability distribution.
// See http://hl7.org/fhir/ValueSet/probability-distribution-type
type ProbabilityDistributionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ProbabilityDistributionTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ProbabilityDistributionTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProbabilityDistributionTypeCode) Reset() {
	*x = ProbabilityDistributionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbabilityDistributionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbabilityDistributionTypeCode) ProtoMessage() {}

func (x *ProbabilityDistributionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbabilityDistributionTypeCode.ProtoReflect.Descriptor instead.
func (*ProbabilityDistributionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{159}
}

func (x *ProbabilityDistributionTypeCode) GetValue() ProbabilityDistributionTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ProbabilityDistributionTypeCode_INVALID_UNINITIALIZED
}

func (x *ProbabilityDistributionTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProbabilityDistributionTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How to interpret the context
// See http://hl7.org/fhir/ValueSet/map-context-type
type StructureMapContextTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapContextTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapContextTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapContextTypeCode) Reset() {
	*x = StructureMapContextTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapContextTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapContextTypeCode) ProtoMessage() {}

func (x *StructureMapContextTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapContextTypeCode.ProtoReflect.Descriptor instead.
func (*StructureMapContextTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{160}
}

func (x *StructureMapContextTypeCode) GetValue() StructureMapContextTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapContextTypeCode_INVALID_UNINITIALIZED
}

func (x *StructureMapContextTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapContextTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// If this is the default rule set to apply for the source type, or this
// combination of types See http://hl7.org/fhir/ValueSet/map-group-type-mode
type StructureMapGroupTypeModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapGroupTypeModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapGroupTypeModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapGroupTypeModeCode) Reset() {
	*x = StructureMapGroupTypeModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapGroupTypeModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapGroupTypeModeCode) ProtoMessage() {}

func (x *StructureMapGroupTypeModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapGroupTypeModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapGroupTypeModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{161}
}

func (x *StructureMapGroupTypeModeCode) GetValue() StructureMapGroupTypeModeCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapGroupTypeModeCode_INVALID_UNINITIALIZED
}

func (x *StructureMapGroupTypeModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapGroupTypeModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Mode for this instance of data
// See http://hl7.org/fhir/ValueSet/map-input-mode
type StructureMapInputModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapInputModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapInputModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapInputModeCode) Reset() {
	*x = StructureMapInputModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapInputModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapInputModeCode) ProtoMessage() {}

func (x *StructureMapInputModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapInputModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapInputModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{162}
}

func (x *StructureMapInputModeCode) GetValue() StructureMapInputModeCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapInputModeCode_INVALID_UNINITIALIZED
}

func (x *StructureMapInputModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapInputModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How the referenced structure is used in this mapping
// See http://hl7.org/fhir/ValueSet/map-model-mode
type StructureMapModelModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapModelModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapModelModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapModelModeCode) Reset() {
	*x = StructureMapModelModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapModelModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapModelModeCode) ProtoMessage() {}

func (x *StructureMapModelModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapModelModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapModelModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{163}
}

func (x *StructureMapModelModeCode) GetValue() StructureMapModelModeCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapModelModeCode_INVALID_UNINITIALIZED
}

func (x *StructureMapModelModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapModelModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// If field is a list, how to manage the source
// See http://hl7.org/fhir/ValueSet/map-source-list-mode
type StructureMapSourceListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapSourceListModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapSourceListModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapSourceListModeCode) Reset() {
	*x = StructureMapSourceListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapSourceListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapSourceListModeCode) ProtoMessage() {}

func (x *StructureMapSourceListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapSourceListModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapSourceListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{164}
}

func (x *StructureMapSourceListModeCode) GetValue() StructureMapSourceListModeCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapSourceListModeCode_INVALID_UNINITIALIZED
}

func (x *StructureMapSourceListModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapSourceListModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// If field is a list, how to manage the production
// See http://hl7.org/fhir/ValueSet/map-target-list-mode
type StructureMapTargetListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapTargetListModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapTargetListModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapTargetListModeCode) Reset() {
	*x = StructureMapTargetListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapTargetListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapTargetListModeCode) ProtoMessage() {}

func (x *StructureMapTargetListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapTargetListModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapTargetListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{165}
}

func (x *StructureMapTargetListModeCode) GetValue() StructureMapTargetListModeCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapTargetListModeCode_INVALID_UNINITIALIZED
}

func (x *StructureMapTargetListModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapTargetListModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How data is copied/created
// See http://hl7.org/fhir/ValueSet/map-transform
type StructureMapTransformCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureMapTransformCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureMapTransformCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureMapTransformCode) Reset() {
	*x = StructureMapTransformCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapTransformCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapTransformCode) ProtoMessage() {}

func (x *StructureMapTransformCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapTransformCode.ProtoReflect.Descriptor instead.
func (*StructureMapTransformCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{166}
}

func (x *StructureMapTransformCode) GetValue() StructureMapTransformCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureMapTransformCode_INVALID_UNINITIALIZED
}

func (x *StructureMapTransformCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureMapTransformCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A Master Patient Index (MPI) assessment of whether a candidate patient
// record is a match or not. See http://hl7.org/fhir/ValueSet/match-grade
type MatchGradeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MatchGradeCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MatchGradeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MatchGradeCode) Reset() {
	*x = MatchGradeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchGradeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchGradeCode) ProtoMessage() {}

func (x *MatchGradeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchGradeCode.ProtoReflect.Descriptor instead.
func (*MatchGradeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{167}
}

func (x *MatchGradeCode) GetValue() MatchGradeCode_Value {
	if x != nil {
		return x.Value
	}
	return MatchGradeCode_INVALID_UNINITIALIZED
}

func (x *MatchGradeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MatchGradeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The intended usage for supplemental data elements in the measure
// See http://hl7.org/fhir/ValueSet/measure-data-usage
type MeasureDataUsageCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasureDataUsageCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasureDataUsageCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureDataUsageCode) Reset() {
	*x = MeasureDataUsageCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureDataUsageCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureDataUsageCode) ProtoMessage() {}

func (x *MeasureDataUsageCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureDataUsageCode.ProtoReflect.Descriptor instead.
func (*MeasureDataUsageCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{168}
}

func (x *MeasureDataUsageCode) GetValue() MeasureDataUsageCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasureDataUsageCode_INVALID_UNINITIALIZED
}

func (x *MeasureDataUsageCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureDataUsageCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Different measurement principle supported by the device.
// See http://hl7.org/fhir/ValueSet/measurement-principle
type MeasmntPrincipleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasmntPrincipleCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasmntPrincipleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasmntPrincipleCode) Reset() {
	*x = MeasmntPrincipleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasmntPrincipleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasmntPrincipleCode) ProtoMessage() {}

func (x *MeasmntPrincipleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasmntPrincipleCode.ProtoReflect.Descriptor instead.
func (*MeasmntPrincipleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{169}
}

func (x *MeasmntPrincipleCode) GetValue() MeasmntPrincipleCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasmntPrincipleCode_INVALID_UNINITIALIZED
}

func (x *MeasmntPrincipleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasmntPrincipleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of population
// See http://hl7.org/fhir/ValueSet/measure-population
type MeasurePopulationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasurePopulationTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasurePopulationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasurePopulationTypeCode) Reset() {
	*x = MeasurePopulationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurePopulationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurePopulationTypeCode) ProtoMessage() {}

func (x *MeasurePopulationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurePopulationTypeCode.ProtoReflect.Descriptor instead.
func (*MeasurePopulationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{170}
}

func (x *MeasurePopulationTypeCode) GetValue() MeasurePopulationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasurePopulationTypeCode_INVALID_UNINITIALIZED
}

func (x *MeasurePopulationTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasurePopulationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of the measure report
// See http://hl7.org/fhir/ValueSet/measure-report-status
type MeasureReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasureReportStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasureReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureReportStatusCode) Reset() {
	*x = MeasureReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReportStatusCode) ProtoMessage() {}

func (x *MeasureReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReportStatusCode.ProtoReflect.Descriptor instead.
func (*MeasureReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{171}
}

func (x *MeasureReportStatusCode) GetValue() MeasureReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasureReportStatusCode_INVALID_UNINITIALIZED
}

func (x *MeasureReportStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReportStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of the measure report
// See http://hl7.org/fhir/ValueSet/measure-report-type
type MeasureReportTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasureReportTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasureReportTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureReportTypeCode) Reset() {
	*x = MeasureReportTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReportTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReportTypeCode) ProtoMessage() {}

func (x *MeasureReportTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReportTypeCode.ProtoReflect.Descriptor instead.
func (*MeasureReportTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{172}
}

func (x *MeasureReportTypeCode) GetValue() MeasureReportTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasureReportTypeCode_INVALID_UNINITIALIZED
}

func (x *MeasureReportTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureReportTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The scoring type of the measure
// See http://hl7.org/fhir/ValueSet/measure-scoring
type MeasureScoringCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasureScoringCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasureScoringCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureScoringCode) Reset() {
	*x = MeasureScoringCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureScoringCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureScoringCode) ProtoMessage() {}

func (x *MeasureScoringCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureScoringCode.ProtoReflect.Descriptor instead.
func (*MeasureScoringCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{173}
}

func (x *MeasureScoringCode) GetValue() MeasureScoringCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasureScoringCode_INVALID_UNINITIALIZED
}

func (x *MeasureScoringCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureScoringCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of measure (includes codes from 2.16.840.1.113883.1.11.20368)
// See http://hl7.org/fhir/ValueSet/measure-type
type MeasureTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MeasureTypeCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MeasureTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasureTypeCode) Reset() {
	*x = MeasureTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureTypeCode) ProtoMessage() {}

func (x *MeasureTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureTypeCode.ProtoReflect.Descriptor instead.
func (*MeasureTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{174}
}

func (x *MeasureTypeCode) GetValue() MeasureTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasureTypeCode_INVALID_UNINITIALIZED
}

func (x *MeasureTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept describing where the medication administered is expected to
// occur See http://hl7.org/fhir/ValueSet/medication-admin-category
type MedicationAdministrationCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationAdministrationCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationAdministrationCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationAdministrationCategoryCode) Reset() {
	*x = MedicationAdministrationCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministrationCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministrationCategoryCode) ProtoMessage() {}

func (x *MedicationAdministrationCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministrationCategoryCode.ProtoReflect.Descriptor instead.
func (*MedicationAdministrationCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{175}
}

func (x *MedicationAdministrationCategoryCode) GetValue() MedicationAdministrationCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationAdministrationCategoryCode_INVALID_UNINITIALIZED
}

func (x *MedicationAdministrationCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministrationCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A set of codes indicating the current status of a MedicationAdministration.
// See http://hl7.org/fhir/ValueSet/medication-admin-status
type MedicationAdministrationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationAdministrationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationAdministrationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationAdministrationStatusCode) Reset() {
	*x = MedicationAdministrationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministrationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministrationStatusCode) ProtoMessage() {}

func (x *MedicationAdministrationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministrationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationAdministrationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{176}
}

func (x *MedicationAdministrationStatusCode) GetValue() MedicationAdministrationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationAdministrationStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationAdministrationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministrationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code describing where the dispensed medication is expected to be consumed
// or administered See
// http://hl7.org/fhir/ValueSet/medication-dispense-category
type MedicationDispenseCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationDispenseCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationDispenseCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationDispenseCategoryCode) Reset() {
	*x = MedicationDispenseCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispenseCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispenseCategoryCode) ProtoMessage() {}

func (x *MedicationDispenseCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispenseCategoryCode.ProtoReflect.Descriptor instead.
func (*MedicationDispenseCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{177}
}

func (x *MedicationDispenseCategoryCode) GetValue() MedicationDispenseCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationDispenseCategoryCode_INVALID_UNINITIALIZED
}

func (x *MedicationDispenseCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispenseCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept specifying the state of the dispense event.
// See http://hl7.org/fhir/ValueSet/medication-dispense-status
type MedicationDispenseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationDispenseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationDispenseStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationDispenseStatusCode) Reset() {
	*x = MedicationDispenseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispenseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispenseStatusCode) ProtoMessage() {}

func (x *MedicationDispenseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispenseStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationDispenseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{178}
}

func (x *MedicationDispenseStatusCode) GetValue() MedicationDispenseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationDispenseStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationDispenseStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispenseStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept defining the kind of container a medication package is
// packaged in See http://hl7.org/fhir/ValueSet/medication-package-form
type MedicationContainerCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationContainerCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationContainerCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationContainerCode) Reset() {
	*x = MedicationContainerCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationContainerCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationContainerCode) ProtoMessage() {}

func (x *MedicationContainerCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationContainerCode.ProtoReflect.Descriptor instead.
func (*MedicationContainerCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{179}
}

func (x *MedicationContainerCode) GetValue() MedicationContainerCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationContainerCode_INVALID_UNINITIALIZED
}

func (x *MedicationContainerCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationContainerCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept identifying where the medication ordered is expected to be
// consumed or administered See
// http://hl7.org/fhir/ValueSet/medication-request-category
type MedicationRequestCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationRequestCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationRequestCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationRequestCategoryCode) Reset() {
	*x = MedicationRequestCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestCategoryCode) ProtoMessage() {}

func (x *MedicationRequestCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestCategoryCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{180}
}

func (x *MedicationRequestCategoryCode) GetValue() MedicationRequestCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationRequestCategoryCode_INVALID_UNINITIALIZED
}

func (x *MedicationRequestCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationRequestCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The kind of medication order
// See http://hl7.org/fhir/ValueSet/medication-request-intent
type MedicationRequestIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationRequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationRequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationRequestIntentCode) Reset() {
	*x = MedicationRequestIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestIntentCode) ProtoMessage() {}

func (x *MedicationRequestIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestIntentCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{181}
}

func (x *MedicationRequestIntentCode) GetValue() MedicationRequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationRequestIntentCode_INVALID_UNINITIALIZED
}

func (x *MedicationRequestIntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationRequestIntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identifies the level of importance to be assigned to actioning the request
// See http://hl7.org/fhir/ValueSet/medication-request-priority
type MedicationRequestPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationRequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationRequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationRequestPriorityCode) Reset() {
	*x = MedicationRequestPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestPriorityCode) ProtoMessage() {}

func (x *MedicationRequestPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestPriorityCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{182}
}

func (x *MedicationRequestPriorityCode) GetValue() MedicationRequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationRequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *MedicationRequestPriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationRequestPriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept specifying the state of the prescribing event. Describes
// the lifecycle of the prescription See
// http://hl7.org/fhir/ValueSet/medication-request-status
type MedicationRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationRequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationRequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationRequestStatusCode) Reset() {
	*x = MedicationRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestStatusCode) ProtoMessage() {}

func (x *MedicationRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{183}
}

func (x *MedicationRequestStatusCode) GetValue() MedicationRequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationRequestStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationRequestStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationRequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept identifying where the medication included in the
// medicationstatement is expected to be consumed or administered See
// http://hl7.org/fhir/ValueSet/medication-statement-category
type MedicationStatementCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationStatementCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationStatementCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationStatementCategoryCode) Reset() {
	*x = MedicationStatementCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementCategoryCode) ProtoMessage() {}

func (x *MedicationStatementCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementCategoryCode.ProtoReflect.Descriptor instead.
func (*MedicationStatementCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{184}
}

func (x *MedicationStatementCategoryCode) GetValue() MedicationStatementCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationStatementCategoryCode_INVALID_UNINITIALIZED
}

func (x *MedicationStatementCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatementCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept indicating the current status of a MedicationStatement.
// See http://hl7.org/fhir/ValueSet/medication-statement-status
type MedicationStatementStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationStatementStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationStatementStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationStatementStatusCode) Reset() {
	*x = MedicationStatementStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementStatusCode) ProtoMessage() {}

func (x *MedicationStatementStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationStatementStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{185}
}

func (x *MedicationStatementStatusCode) GetValue() MedicationStatementStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationStatementStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationStatementStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatementStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept identifying level of certainty if patient has taken or has
// not taken the medication See
// http://hl7.org/fhir/ValueSet/medication-statement-taken
type MedicationStatementTakenCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationStatementTakenCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationStatementTakenCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationStatementTakenCode) Reset() {
	*x = MedicationStatementTakenCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementTakenCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementTakenCode) ProtoMessage() {}

func (x *MedicationStatementTakenCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementTakenCode.ProtoReflect.Descriptor instead.
func (*MedicationStatementTakenCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{186}
}

func (x *MedicationStatementTakenCode) GetValue() MedicationStatementTakenCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationStatementTakenCode_INVALID_UNINITIALIZED
}

func (x *MedicationStatementTakenCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatementTakenCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept defining if the medication is in active use
// See http://hl7.org/fhir/ValueSet/medication-status
type MedicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MedicationStatusCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MedicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationStatusCode) Reset() {
	*x = MedicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatusCode) ProtoMessage() {}

func (x *MedicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{187}
}

func (x *MedicationStatusCode) GetValue() MedicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// One of the message events defined as part of FHIR.
// See http://hl7.org/fhir/ValueSet/message-events
type MessageEventCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MessageEventCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MessageEventCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MessageEventCode) Reset() {
	*x = MessageEventCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEventCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEventCode) ProtoMessage() {}

func (x *MessageEventCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEventCode.ProtoReflect.Descriptor instead.
func (*MessageEventCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{188}
}

func (x *MessageEventCode) GetValue() MessageEventCode_Value {
	if x != nil {
		return x.Value
	}
	return MessageEventCode_INVALID_UNINITIALIZED
}

func (x *MessageEventCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageEventCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// One of the message events defined as part of FHIR.
// See http://hl7.org/fhir/ValueSet/messageheader-response-request
type MessageHeaderResponseRequestCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MessageHeaderResponseRequestCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MessageHeaderResponseRequestCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MessageHeaderResponseRequestCode) Reset() {
	*x = MessageHeaderResponseRequestCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeaderResponseRequestCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeaderResponseRequestCode) ProtoMessage() {}

func (x *MessageHeaderResponseRequestCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeaderResponseRequestCode.ProtoReflect.Descriptor instead.
func (*MessageHeaderResponseRequestCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{189}
}

func (x *MessageHeaderResponseRequestCode) GetValue() MessageHeaderResponseRequestCode_Value {
	if x != nil {
		return x.Value
	}
	return MessageHeaderResponseRequestCode_INVALID_UNINITIALIZED
}

func (x *MessageHeaderResponseRequestCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageHeaderResponseRequestCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Example Message Reasons. These are the set of codes that might be used an
// updating an encounter using admin-update. See
// http://hl7.org/fhir/ValueSet/message-reason-encounter
type ExampleMessageReasonCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ExampleMessageReasonCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ExampleMessageReasonCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExampleMessageReasonCodesCode) Reset() {
	*x = ExampleMessageReasonCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleMessageReasonCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleMessageReasonCodesCode) ProtoMessage() {}

func (x *ExampleMessageReasonCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleMessageReasonCodesCode.ProtoReflect.Descriptor instead.
func (*ExampleMessageReasonCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{190}
}

func (x *ExampleMessageReasonCodesCode) GetValue() ExampleMessageReasonCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ExampleMessageReasonCodesCode_INVALID_UNINITIALIZED
}

func (x *ExampleMessageReasonCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExampleMessageReasonCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The impact of the content of a message.
// See http://hl7.org/fhir/ValueSet/message-significance-category
type MessageSignificanceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MessageSignificanceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MessageSignificanceCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MessageSignificanceCategoryCode) Reset() {
	*x = MessageSignificanceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSignificanceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSignificanceCategoryCode) ProtoMessage() {}

func (x *MessageSignificanceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSignificanceCategoryCode.ProtoReflect.Descriptor instead.
func (*MessageSignificanceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{191}
}

func (x *MessageSignificanceCategoryCode) GetValue() MessageSignificanceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return MessageSignificanceCategoryCode_INVALID_UNINITIALIZED
}

func (x *MessageSignificanceCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageSignificanceCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The protocol used for message transport.
// See http://hl7.org/fhir/ValueSet/message-transport
type MessageTransportCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MessageTransportCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MessageTransportCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MessageTransportCode) Reset() {
	*x = MessageTransportCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTransportCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTransportCode) ProtoMessage() {}

func (x *MessageTransportCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTransportCode.ProtoReflect.Descriptor instead.
func (*MessageTransportCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{192}
}

func (x *MessageTransportCode) GetValue() MessageTransportCode_Value {
	if x != nil {
		return x.Value
	}
	return MessageTransportCode_INVALID_UNINITIALIZED
}

func (x *MessageTransportCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageTransportCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Describes the state of a metric calibration.
// See http://hl7.org/fhir/ValueSet/metric-calibration-state
type DeviceMetricCalibrationStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceMetricCalibrationStateCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceMetricCalibrationStateCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricCalibrationStateCode) Reset() {
	*x = DeviceMetricCalibrationStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationStateCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{193}
}

func (x *DeviceMetricCalibrationStateCode) GetValue() DeviceMetricCalibrationStateCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricCalibrationStateCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricCalibrationStateCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricCalibrationStateCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Describes the type of a metric calibration.
// See http://hl7.org/fhir/ValueSet/metric-calibration-type
type DeviceMetricCalibrationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceMetricCalibrationTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricCalibrationTypeCode) Reset() {
	*x = DeviceMetricCalibrationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationTypeCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{194}
}

func (x *DeviceMetricCalibrationTypeCode) GetValue() DeviceMetricCalibrationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricCalibrationTypeCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricCalibrationTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricCalibrationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Describes the category of the metric.
// See http://hl7.org/fhir/ValueSet/metric-category
type DeviceMetricCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceMetricCategoryCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceMetricCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricCategoryCode) Reset() {
	*x = DeviceMetricCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCategoryCode) ProtoMessage() {}

func (x *DeviceMetricCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCategoryCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{195}
}

func (x *DeviceMetricCategoryCode) GetValue() DeviceMetricCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricCategoryCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricCategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Describes the typical color of representation.
// See http://hl7.org/fhir/ValueSet/metric-color
type DeviceMetricColorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceMetricColorCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceMetricColorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricColorCode) Reset() {
	*x = DeviceMetricColorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricColorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricColorCode) ProtoMessage() {}

func (x *DeviceMetricColorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricColorCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricColorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{196}
}

func (x *DeviceMetricColorCode) GetValue() DeviceMetricColorCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricColorCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricColorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricColorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Describes the operational status of the DeviceMetric.
// See http://hl7.org/fhir/ValueSet/metric-operational-status
type DeviceMetricOperationalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceMetricOperationalStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceMetricOperationalStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricOperationalStatusCode) Reset() {
	*x = DeviceMetricOperationalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricOperationalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricOperationalStatusCode) ProtoMessage() {}

func (x *DeviceMetricOperationalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricOperationalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{197}
}

func (x *DeviceMetricOperationalStatusCode) GetValue() DeviceMetricOperationalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricOperationalStatusCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricOperationalStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricOperationalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that represents the preferred display order of the components of a
// human name See http://hl7.org/fhir/ValueSet/name-assembly-order
type HumanNameAssemblyOrderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     HumanNameAssemblyOrderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.HumanNameAssemblyOrderCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *HumanNameAssemblyOrderCode) Reset() {
	*x = HumanNameAssemblyOrderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameAssemblyOrderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameAssemblyOrderCode) ProtoMessage() {}

func (x *HumanNameAssemblyOrderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameAssemblyOrderCode.ProtoReflect.Descriptor instead.
func (*HumanNameAssemblyOrderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{198}
}

func (x *HumanNameAssemblyOrderCode) GetValue() HumanNameAssemblyOrderCode_Value {
	if x != nil {
		return x.Value
	}
	return HumanNameAssemblyOrderCode_INVALID_UNINITIALIZED
}

func (x *HumanNameAssemblyOrderCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameAssemblyOrderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A set of codes for each different representation of a name.
// See http://hl7.org/fhir/ValueSet/name-v3-representation
type NameRepresentationUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NameRepresentationUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NameRepresentationUseCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NameRepresentationUseCode) Reset() {
	*x = NameRepresentationUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameRepresentationUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRepresentationUseCode) ProtoMessage() {}

func (x *NameRepresentationUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRepresentationUseCode.ProtoReflect.Descriptor instead.
func (*NameRepresentationUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{199}
}

func (x *NameRepresentationUseCode) GetValue() NameRepresentationUseCode_Value {
	if x != nil {
		return x.Value
	}
	return NameRepresentationUseCode_INVALID_UNINITIALIZED
}

func (x *NameRepresentationUseCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NameRepresentationUseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identifies the style of unique identifier used to identify a namespace.
// See http://hl7.org/fhir/ValueSet/namingsystem-identifier-type
type NamingSystemIdentifierTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NamingSystemIdentifierTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NamingSystemIdentifierTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NamingSystemIdentifierTypeCode) Reset() {
	*x = NamingSystemIdentifierTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemIdentifierTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemIdentifierTypeCode) ProtoMessage() {}

func (x *NamingSystemIdentifierTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemIdentifierTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{200}
}

func (x *NamingSystemIdentifierTypeCode) GetValue() NamingSystemIdentifierTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return NamingSystemIdentifierTypeCode_INVALID_UNINITIALIZED
}

func (x *NamingSystemIdentifierTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystemIdentifierTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identifies the purpose of the naming system.
// See http://hl7.org/fhir/ValueSet/namingsystem-type
type NamingSystemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NamingSystemTypeCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NamingSystemTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NamingSystemTypeCode) Reset() {
	*x = NamingSystemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemTypeCode) ProtoMessage() {}

func (x *NamingSystemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{201}
}

func (x *NamingSystemTypeCode) GetValue() NamingSystemTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return NamingSystemTypeCode_INVALID_UNINITIALIZED
}

func (x *NamingSystemTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystemTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of network access point of this agent in the audit event
// See http://hl7.org/fhir/ValueSet/network-type
type AuditEventAgentNetworkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AuditEventAgentNetworkTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEventAgentNetworkTypeCode) Reset() {
	*x = AuditEventAgentNetworkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventAgentNetworkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventAgentNetworkTypeCode) ProtoMessage() {}

func (x *AuditEventAgentNetworkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventAgentNetworkTypeCode.ProtoReflect.Descriptor instead.
func (*AuditEventAgentNetworkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{202}
}

func (x *AuditEventAgentNetworkTypeCode) GetValue() AuditEventAgentNetworkTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AuditEventAgentNetworkTypeCode_INVALID_UNINITIALIZED
}

func (x *AuditEventAgentNetworkTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventAgentNetworkTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The presentation types of notes.
// See http://hl7.org/fhir/ValueSet/note-type
type NoteTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NoteTypeCode_Value              `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NoteTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NoteTypeCode) Reset() {
	*x = NoteTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTypeCode) ProtoMessage() {}

func (x *NoteTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTypeCode.ProtoReflect.Descriptor instead.
func (*NoteTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{203}
}

func (x *NoteTypeCode) GetValue() NoteTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return NoteTypeCode_INVALID_UNINITIALIZED
}

func (x *NoteTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NoteTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A collection of codes specifying why a valid value is not present.
// See http://hl7.org/fhir/ValueSet/v3-NullFlavor
type NullFlavorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NullFlavorCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NullFlavorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NullFlavorCode) Reset() {
	*x = NullFlavorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullFlavorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullFlavorCode) ProtoMessage() {}

func (x *NullFlavorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullFlavorCode.ProtoReflect.Descriptor instead.
func (*NullFlavorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{204}
}

func (x *NullFlavorCode) GetValue() NullFlavorCode_Value {
	if x != nil {
		return x.Value
	}
	return NullFlavorCode_INVALID_UNINITIALIZED
}

func (x *NullFlavorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NullFlavorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes specifying the state of the request. Describes the lifecycle of the
// nutrition order. See http://hl7.org/fhir/ValueSet/nutrition-request-status
type NutritionOrderStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NutritionOrderStatusCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NutritionOrderStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NutritionOrderStatusCode) Reset() {
	*x = NutritionOrderStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrderStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrderStatusCode) ProtoMessage() {}

func (x *NutritionOrderStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrderStatusCode.ProtoReflect.Descriptor instead.
func (*NutritionOrderStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{205}
}

func (x *NutritionOrderStatusCode) GetValue() NutritionOrderStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return NutritionOrderStatusCode_INVALID_UNINITIALIZED
}

func (x *NutritionOrderStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrderStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Observation Category codes.
// See http://hl7.org/fhir/ValueSet/observation-category
type ObservationCategoryCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ObservationCategoryCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ObservationCategoryCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ObservationCategoryCodesCode) Reset() {
	*x = ObservationCategoryCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationCategoryCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationCategoryCodesCode) ProtoMessage() {}

func (x *ObservationCategoryCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationCategoryCodesCode.ProtoReflect.Descriptor instead.
func (*ObservationCategoryCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{206}
}

func (x *ObservationCategoryCodesCode) GetValue() ObservationCategoryCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ObservationCategoryCodesCode_INVALID_UNINITIALIZED
}

func (x *ObservationCategoryCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationCategoryCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes specifying how two observations are related.
// See http://hl7.org/fhir/ValueSet/observation-relationshiptypes
type ObservationRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ObservationRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ObservationRelationshipTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ObservationRelationshipTypeCode) Reset() {
	*x = ObservationRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRelationshipTypeCode) ProtoMessage() {}

func (x *ObservationRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*ObservationRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{207}
}

func (x *ObservationRelationshipTypeCode) GetValue() ObservationRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ObservationRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *ObservationRelationshipTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationRelationshipTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The statistical operation parameter -\
// See http://hl7.org/fhir/ValueSet/observation-statistics
type StatisticsCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StatisticsCodeCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StatisticsCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StatisticsCodeCode) Reset() {
	*x = StatisticsCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsCodeCode) ProtoMessage() {}

func (x *StatisticsCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsCodeCode.ProtoReflect.Descriptor instead.
func (*StatisticsCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{208}
}

func (x *StatisticsCodeCode) GetValue() StatisticsCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return StatisticsCodeCode_INVALID_UNINITIALIZED
}

func (x *StatisticsCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StatisticsCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes providing the status of an observation.
// See http://hl7.org/fhir/ValueSet/observation-status
type ObservationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ObservationStatusCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ObservationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ObservationStatusCode) Reset() {
	*x = ObservationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationStatusCode) ProtoMessage() {}

func (x *ObservationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationStatusCode.ProtoReflect.Descriptor instead.
func (*ObservationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{209}
}

func (x *ObservationStatusCode) GetValue() ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *ObservationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes representing the current status of the device - on, off, suspended,
// etc. See http://hl7.org/fhir/ValueSet/operational-status
type DeviceComponentOperationalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceComponentOperationalStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceComponentOperationalStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceComponentOperationalStatusCode) Reset() {
	*x = DeviceComponentOperationalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceComponentOperationalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceComponentOperationalStatusCode) ProtoMessage() {}

func (x *DeviceComponentOperationalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceComponentOperationalStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceComponentOperationalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{210}
}

func (x *DeviceComponentOperationalStatusCode) GetValue() DeviceComponentOperationalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceComponentOperationalStatusCode_INVALID_UNINITIALIZED
}

func (x *DeviceComponentOperationalStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceComponentOperationalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Whether an operation is a normal operation or a query.
// See http://hl7.org/fhir/ValueSet/operation-kind
type OperationKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     OperationKindCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.OperationKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OperationKindCode) Reset() {
	*x = OperationKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationKindCode) ProtoMessage() {}

func (x *OperationKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationKindCode.ProtoReflect.Descriptor instead.
func (*OperationKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{211}
}

func (x *OperationKindCode) GetValue() OperationKindCode_Value {
	if x != nil {
		return x.Value
	}
	return OperationKindCode_INVALID_UNINITIALIZED
}

func (x *OperationKindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Operation Outcome codes used by FHIR test servers (see Implementation file
// translations.xml) See http://hl7.org/fhir/ValueSet/operation-outcome
type OperationOutcomeCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     OperationOutcomeCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.OperationOutcomeCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OperationOutcomeCodesCode) Reset() {
	*x = OperationOutcomeCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcomeCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcomeCodesCode) ProtoMessage() {}

func (x *OperationOutcomeCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcomeCodesCode.ProtoReflect.Descriptor instead.
func (*OperationOutcomeCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{212}
}

func (x *OperationOutcomeCodesCode) GetValue() OperationOutcomeCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return OperationOutcomeCodesCode_INVALID_UNINITIALIZED
}

func (x *OperationOutcomeCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationOutcomeCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of a resource narrative
// See http://hl7.org/fhir/ValueSet/narrative-status
type NarrativeStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     NarrativeStatusCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NarrativeStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NarrativeStatusCode) Reset() {
	*x = NarrativeStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NarrativeStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NarrativeStatusCode) ProtoMessage() {}

func (x *NarrativeStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NarrativeStatusCode.ProtoReflect.Descriptor instead.
func (*NarrativeStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{213}
}

func (x *NarrativeStatusCode) GetValue() NarrativeStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return NarrativeStatusCode_INVALID_UNINITIALIZED
}

func (x *NarrativeStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NarrativeStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Whether an operation parameter is an input or an output parameter.
// See http://hl7.org/fhir/ValueSet/operation-parameter-use
type OperationParameterUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     OperationParameterUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.OperationParameterUseCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OperationParameterUseCode) Reset() {
	*x = OperationParameterUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationParameterUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationParameterUseCode) ProtoMessage() {}

func (x *OperationParameterUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationParameterUseCode.ProtoReflect.Descriptor instead.
func (*OperationParameterUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{214}
}

func (x *OperationParameterUseCode) GetValue() OperationParameterUseCode_Value {
	if x != nil {
		return x.Value
	}
	return OperationParameterUseCode_INVALID_UNINITIALIZED
}

func (x *OperationParameterUseCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationParameterUseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// a type of organization. See http://hl7.org/fhir/ValueSet/organization-type
type OrganizationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     OrganizationTypeCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.OrganizationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OrganizationTypeCode) Reset() {
	*x = OrganizationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationTypeCode) ProtoMessage() {}

func (x *OrganizationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationTypeCode.ProtoReflect.Descriptor instead.
func (*OrganizationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{215}
}

func (x *OrganizationTypeCode) GetValue() OrganizationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return OrganizationTypeCode_INVALID_UNINITIALIZED
}

func (x *OrganizationTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrganizationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes identifying groupings of parameters; e.g. Cardiovascular.
// See http://hl7.org/fhir/ValueSet/parameter-group
type DeviceComponentParameterGroupCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceComponentParameterGroupCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceComponentParameterGroupCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceComponentParameterGroupCode) Reset() {
	*x = DeviceComponentParameterGroupCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceComponentParameterGroupCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceComponentParameterGroupCode) ProtoMessage() {}

func (x *DeviceComponentParameterGroupCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceComponentParameterGroupCode.ProtoReflect.Descriptor instead.
func (*DeviceComponentParameterGroupCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{216}
}

func (x *DeviceComponentParameterGroupCode) GetValue() DeviceComponentParameterGroupCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceComponentParameterGroupCode_INVALID_UNINITIALIZED
}

func (x *DeviceComponentParameterGroupCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceComponentParameterGroupCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Is the Participant required to attend the appointment.
// See http://hl7.org/fhir/ValueSet/participantrequired
type ParticipantRequiredCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ParticipantRequiredCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ParticipantRequiredCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParticipantRequiredCode) Reset() {
	*x = ParticipantRequiredCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantRequiredCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantRequiredCode) ProtoMessage() {}

func (x *ParticipantRequiredCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantRequiredCode.ProtoReflect.Descriptor instead.
func (*ParticipantRequiredCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{217}
}

func (x *ParticipantRequiredCode) GetValue() ParticipantRequiredCode_Value {
	if x != nil {
		return x.Value
	}
	return ParticipantRequiredCode_INVALID_UNINITIALIZED
}

func (x *ParticipantRequiredCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParticipantRequiredCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The Participation status of an appointment.
// See http://hl7.org/fhir/ValueSet/participationstatus
type ParticipationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ParticipationStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ParticipationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParticipationStatusCode) Reset() {
	*x = ParticipationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipationStatusCode) ProtoMessage() {}

func (x *ParticipationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipationStatusCode.ProtoReflect.Descriptor instead.
func (*ParticipationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{218}
}

func (x *ParticipationStatusCode) GetValue() ParticipationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ParticipationStatusCode_INVALID_UNINITIALIZED
}

func (x *ParticipationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParticipationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of PlanDefinition
// See http://hl7.org/fhir/ValueSet/plan-definition-type
type PlanDefinitionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PlanDefinitionTypeCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PlanDefinitionTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PlanDefinitionTypeCode) Reset() {
	*x = PlanDefinitionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDefinitionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDefinitionTypeCode) ProtoMessage() {}

func (x *PlanDefinitionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDefinitionTypeCode.ProtoReflect.Descriptor instead.
func (*PlanDefinitionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{219}
}

func (x *PlanDefinitionTypeCode) GetValue() PlanDefinitionTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return PlanDefinitionTypeCode_INVALID_UNINITIALIZED
}

func (x *PlanDefinitionTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PlanDefinitionTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of PostalAddressUse
// See http://hl7.org/fhir/ValueSet/postal-address-use
type PostalAddressUseTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PostalAddressUseTypeCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PostalAddressUseTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PostalAddressUseTypeCode) Reset() {
	*x = PostalAddressUseTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostalAddressUseTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalAddressUseTypeCode) ProtoMessage() {}

func (x *PostalAddressUseTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalAddressUseTypeCode.ProtoReflect.Descriptor instead.
func (*PostalAddressUseTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{220}
}

func (x *PostalAddressUseTypeCode) GetValue() PostalAddressUseTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return PostalAddressUseTypeCode_INVALID_UNINITIALIZED
}

func (x *PostalAddressUseTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PostalAddressUseTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// the role of a Practitioner. See
// http://hl7.org/fhir/ValueSet/practitioner-role
type PractitionerRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PractitionerRoleCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PractitionerRoleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PractitionerRoleCode) Reset() {
	*x = PractitionerRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PractitionerRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PractitionerRoleCode) ProtoMessage() {}

func (x *PractitionerRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PractitionerRoleCode.ProtoReflect.Descriptor instead.
func (*PractitionerRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{221}
}

func (x *PractitionerRoleCode) GetValue() PractitionerRoleCode_Value {
	if x != nil {
		return x.Value
	}
	return PractitionerRoleCode_INVALID_UNINITIALIZED
}

func (x *PractitionerRoleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PractitionerRoleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This example value set defines a set of codes that can be used to indicate
// the specialty of a Practitioner. See
// http://hl7.org/fhir/ValueSet/practitioner-specialty
type PractitionerSpecialtyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PractitionerSpecialtyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PractitionerSpecialtyCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PractitionerSpecialtyCode) Reset() {
	*x = PractitionerSpecialtyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PractitionerSpecialtyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PractitionerSpecialtyCode) ProtoMessage() {}

func (x *PractitionerSpecialtyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PractitionerSpecialtyCode.ProtoReflect.Descriptor instead.
func (*PractitionerSpecialtyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{222}
}

func (x *PractitionerSpecialtyCode) GetValue() PractitionerSpecialtyCode_Value {
	if x != nil {
		return x.Value
	}
	return PractitionerSpecialtyCode_INVALID_UNINITIALIZED
}

func (x *PractitionerSpecialtyCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PractitionerSpecialtyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set is provided as an example. The value set to instantiate this
// attribute should be drawn from a robust terminology code system that
// consists of or contains concepts to support the procedure performance
// process. See http://hl7.org/fhir/ValueSet/procedure-progress-status-codes
type ProcedureProgressStatusCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ProcedureProgressStatusCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ProcedureProgressStatusCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProcedureProgressStatusCodesCode) Reset() {
	*x = ProcedureProgressStatusCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureProgressStatusCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureProgressStatusCodesCode) ProtoMessage() {}

func (x *ProcedureProgressStatusCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureProgressStatusCodesCode.ProtoReflect.Descriptor instead.
func (*ProcedureProgressStatusCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{223}
}

func (x *ProcedureProgressStatusCodesCode) GetValue() ProcedureProgressStatusCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ProcedureProgressStatusCodesCode_INVALID_UNINITIALIZED
}

func (x *ProcedureProgressStatusCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureProgressStatusCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How an entity was used in an activity.
// See http://hl7.org/fhir/ValueSet/provenance-entity-role
type ProvenanceEntityRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ProvenanceEntityRoleCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ProvenanceEntityRoleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProvenanceEntityRoleCode) Reset() {
	*x = ProvenanceEntityRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceEntityRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceEntityRoleCode) ProtoMessage() {}

func (x *ProvenanceEntityRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceEntityRoleCode.ProtoReflect.Descriptor instead.
func (*ProvenanceEntityRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{224}
}

func (x *ProvenanceEntityRoleCode) GetValue() ProvenanceEntityRoleCode_Value {
	if x != nil {
		return x.Value
	}
	return ProvenanceEntityRoleCode_INVALID_UNINITIALIZED
}

func (x *ProvenanceEntityRoleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProvenanceEntityRoleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The lifecycle status of a Value Set or Concept Map.
// See http://hl7.org/fhir/ValueSet/publication-status
type PublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PublicationStatusCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PublicationStatusCode) Reset() {
	*x = PublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationStatusCode) ProtoMessage() {}

func (x *PublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationStatusCode.ProtoReflect.Descriptor instead.
func (*PublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{225}
}

func (x *PublicationStatusCode) GetValue() PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return PublicationStatusCode_INVALID_UNINITIALIZED
}

func (x *PublicationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PublicationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Type for quality report
// See http://hl7.org/fhir/ValueSet/quality-type
type QualityTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     QualityTypeCode_Value           `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QualityTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QualityTypeCode) Reset() {
	*x = QualityTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityTypeCode) ProtoMessage() {}

func (x *QualityTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityTypeCode.ProtoReflect.Descriptor instead.
func (*QualityTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{226}
}

func (x *QualityTypeCode) GetValue() QualityTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return QualityTypeCode_INVALID_UNINITIALIZED
}

func (x *QualityTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QualityTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Flags an element as having unlimited repetitions
// See http://hl7.org/fhir/ValueSet/question-max-occurs
type MaxOccursCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     MaxOccursCode_Value             `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.MaxOccursCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MaxOccursCode) Reset() {
	*x = MaxOccursCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxOccursCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxOccursCode) ProtoMessage() {}

func (x *MaxOccursCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxOccursCode.ProtoReflect.Descriptor instead.
func (*MaxOccursCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{227}
}

func (x *MaxOccursCode) GetValue() MaxOccursCode_Value {
	if x != nil {
		return x.Value
	}
	return MaxOccursCode_INVALID_UNINITIALIZED
}

func (x *MaxOccursCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MaxOccursCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Lifecycle status of the questionnaire response.
// See http://hl7.org/fhir/ValueSet/questionnaire-answers-status
type QuestionnaireResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     QuestionnaireResponseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuestionnaireResponseStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireResponseStatusCode) Reset() {
	*x = QuestionnaireResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseStatusCode) ProtoMessage() {}

func (x *QuestionnaireResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{228}
}

func (x *QuestionnaireResponseStatusCode) GetValue() QuestionnaireResponseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireResponseStatusCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireResponseStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponseStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes defining the purpose of a Questionnaire item of type 'text'.
// See http://hl7.org/fhir/ValueSet/questionnaire-display-category
type QuestionnaireTextCategoriesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     QuestionnaireTextCategoriesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuestionnaireTextCategoriesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireTextCategoriesCode) Reset() {
	*x = QuestionnaireTextCategoriesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireTextCategoriesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireTextCategoriesCode) ProtoMessage() {}

func (x *QuestionnaireTextCategoriesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireTextCategoriesCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireTextCategoriesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{229}
}

func (x *QuestionnaireTextCategoriesCode) GetValue() QuestionnaireTextCategoriesCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireTextCategoriesCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireTextCategoriesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireTextCategoriesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Starter set of user interface control/display mechanisms that might be used
// when rendering an item in a questionnaire. See
// http://hl7.org/fhir/ValueSet/questionnaire-item-control
type QuestionnaireItemUIControlCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     QuestionnaireItemUIControlCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireItemUIControlCodesCode) Reset() {
	*x = QuestionnaireItemUIControlCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemUIControlCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemUIControlCodesCode) ProtoMessage() {}

func (x *QuestionnaireItemUIControlCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemUIControlCodesCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemUIControlCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{230}
}

func (x *QuestionnaireItemUIControlCodesCode) GetValue() QuestionnaireItemUIControlCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireItemUIControlCodesCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireItemUIControlCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireItemUIControlCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identifies the modes of usage of a questionnaire that should enable a
// particular questionnaire item See
// http://hl7.org/fhir/ValueSet/questionnaire-usage-mode
type QuestionnaireItemUsageModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     QuestionnaireItemUsageModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuestionnaireItemUsageModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireItemUsageModeCode) Reset() {
	*x = QuestionnaireItemUsageModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemUsageModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemUsageModeCode) ProtoMessage() {}

func (x *QuestionnaireItemUsageModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemUsageModeCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemUsageModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{231}
}

func (x *QuestionnaireItemUsageModeCode) GetValue() QuestionnaireItemUsageModeCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireItemUsageModeCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireItemUsageModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireItemUsageModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Statement about the degree of clinical certainty that a specific substance
// was the cause of the manifestation in a reaction event. See
// http://hl7.org/fhir/ValueSet/reaction-event-certainty
type AllergyIntoleranceCertaintyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceCertaintyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceCertaintyCode) Reset() {
	*x = AllergyIntoleranceCertaintyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCertaintyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCertaintyCode) ProtoMessage() {}

func (x *AllergyIntoleranceCertaintyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCertaintyCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCertaintyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{232}
}

func (x *AllergyIntoleranceCertaintyCode) GetValue() AllergyIntoleranceCertaintyCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceCertaintyCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceCertaintyCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCertaintyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Clinical assessment of the severity of a reaction event as a whole,
// potentially considering multiple different manifestations. See
// http://hl7.org/fhir/ValueSet/reaction-event-severity
type AllergyIntoleranceSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     AllergyIntoleranceSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AllergyIntoleranceSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceSeverityCode) Reset() {
	*x = AllergyIntoleranceSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSeverityCode) ProtoMessage() {}

func (x *AllergyIntoleranceSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{233}
}

func (x *AllergyIntoleranceSeverityCode) GetValue() AllergyIntoleranceSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceSeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set is provided as an example. The value set to instantiate this
// attribute should be drawn from a robust terminology code system that
// consists of or contains concepts to support the medication process. See
// http://hl7.org/fhir/ValueSet/reason-medication-given-codes
type ReasonMedicationGivenCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ReasonMedicationGivenCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ReasonMedicationGivenCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReasonMedicationGivenCodesCode) Reset() {
	*x = ReasonMedicationGivenCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonMedicationGivenCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonMedicationGivenCodesCode) ProtoMessage() {}

func (x *ReasonMedicationGivenCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonMedicationGivenCodesCode.ProtoReflect.Descriptor instead.
func (*ReasonMedicationGivenCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{234}
}

func (x *ReasonMedicationGivenCodesCode) GetValue() ReasonMedicationGivenCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ReasonMedicationGivenCodesCode_INVALID_UNINITIALIZED
}

func (x *ReasonMedicationGivenCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReasonMedicationGivenCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A set of flags that defines how references are supported.
// See http://hl7.org/fhir/ValueSet/reference-handling-policy
type ReferenceHandlingPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ReferenceHandlingPolicyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ReferenceHandlingPolicyCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReferenceHandlingPolicyCode) Reset() {
	*x = ReferenceHandlingPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceHandlingPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceHandlingPolicyCode) ProtoMessage() {}

func (x *ReferenceHandlingPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceHandlingPolicyCode.ProtoReflect.Descriptor instead.
func (*ReferenceHandlingPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{235}
}

func (x *ReferenceHandlingPolicyCode) GetValue() ReferenceHandlingPolicyCode_Value {
	if x != nil {
		return x.Value
	}
	return ReferenceHandlingPolicyCode_INVALID_UNINITIALIZED
}

func (x *ReferenceHandlingPolicyCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferenceHandlingPolicyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of relationship to the related artifact
// See http://hl7.org/fhir/ValueSet/related-artifact-type
type RelatedArtifactTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RelatedArtifactTypeCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RelatedArtifactTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RelatedArtifactTypeCode) Reset() {
	*x = RelatedArtifactTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifactTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifactTypeCode) ProtoMessage() {}

func (x *RelatedArtifactTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifactTypeCode.ProtoReflect.Descriptor instead.
func (*RelatedArtifactTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{236}
}

func (x *RelatedArtifactTypeCode) GetValue() RelatedArtifactTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return RelatedArtifactTypeCode_INVALID_UNINITIALIZED
}

func (x *RelatedArtifactTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedArtifactTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that can be used to indicate the
// meaning/use of a reference range for a particular target population. See
// http://hl7.org/fhir/ValueSet/referencerange-meaning
type ObservationReferenceRangeMeaningCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ObservationReferenceRangeMeaningCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ObservationReferenceRangeMeaningCodesCode) Reset() {
	*x = ObservationReferenceRangeMeaningCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationReferenceRangeMeaningCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationReferenceRangeMeaningCodesCode) ProtoMessage() {}

func (x *ObservationReferenceRangeMeaningCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationReferenceRangeMeaningCodesCode.ProtoReflect.Descriptor instead.
func (*ObservationReferenceRangeMeaningCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{237}
}

func (x *ObservationReferenceRangeMeaningCodesCode) GetValue() ObservationReferenceRangeMeaningCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return ObservationReferenceRangeMeaningCodesCode_INVALID_UNINITIALIZED
}

func (x *ObservationReferenceRangeMeaningCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationReferenceRangeMeaningCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The results of executing an action.
// See http://hl7.org/fhir/ValueSet/report-action-result-codes
type TestReportActionResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestReportActionResultCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestReportActionResultCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestReportActionResultCode) Reset() {
	*x = TestReportActionResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportActionResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportActionResultCode) ProtoMessage() {}

func (x *TestReportActionResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportActionResultCode.ProtoReflect.Descriptor instead.
func (*TestReportActionResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{238}
}

func (x *TestReportActionResultCode) GetValue() TestReportActionResultCode_Value {
	if x != nil {
		return x.Value
	}
	return TestReportActionResultCode_INVALID_UNINITIALIZED
}

func (x *TestReportActionResultCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestReportActionResultCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of participant.
// See http://hl7.org/fhir/ValueSet/report-participant-type
type TestReportParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestReportParticipantTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestReportParticipantTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestReportParticipantTypeCode) Reset() {
	*x = TestReportParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportParticipantTypeCode) ProtoMessage() {}

func (x *TestReportParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*TestReportParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{239}
}

func (x *TestReportParticipantTypeCode) GetValue() TestReportParticipantTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return TestReportParticipantTypeCode_INVALID_UNINITIALIZED
}

func (x *TestReportParticipantTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestReportParticipantTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The reported execution result.
// See http://hl7.org/fhir/ValueSet/report-result-codes
type TestReportResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestReportResultCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestReportResultCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestReportResultCode) Reset() {
	*x = TestReportResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportResultCode) ProtoMessage() {}

func (x *TestReportResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportResultCode.ProtoReflect.Descriptor instead.
func (*TestReportResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{240}
}

func (x *TestReportResultCode) GetValue() TestReportResultCode_Value {
	if x != nil {
		return x.Value
	}
	return TestReportResultCode_INVALID_UNINITIALIZED
}

func (x *TestReportResultCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestReportResultCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The current status of the test report.
// See http://hl7.org/fhir/ValueSet/report-status-codes
type TestReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestReportStatusCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestReportStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestReportStatusCode) Reset() {
	*x = TestReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportStatusCode) ProtoMessage() {}

func (x *TestReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportStatusCode.ProtoReflect.Descriptor instead.
func (*TestReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{241}
}

func (x *TestReportStatusCode) GetValue() TestReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return TestReportStatusCode_INVALID_UNINITIALIZED
}

func (x *TestReportStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestReportStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Type for access of external URI
// See http://hl7.org/fhir/ValueSet/repository-type
type RepositoryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RepositoryTypeCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RepositoryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RepositoryTypeCode) Reset() {
	*x = RepositoryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryTypeCode) ProtoMessage() {}

func (x *RepositoryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryTypeCode.ProtoReflect.Descriptor instead.
func (*RepositoryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{242}
}

func (x *RepositoryTypeCode) GetValue() RepositoryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return RepositoryTypeCode_INVALID_UNINITIALIZED
}

func (x *RepositoryTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RepositoryTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes indicating the degree of authority/intentionality associated with a
// request See http://hl7.org/fhir/ValueSet/request-intent
type RequestIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RequestIntentCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RequestIntentCode) Reset() {
	*x = RequestIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestIntentCode) ProtoMessage() {}

func (x *RequestIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestIntentCode.ProtoReflect.Descriptor instead.
func (*RequestIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{243}
}

func (x *RequestIntentCode) GetValue() RequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return RequestIntentCode_INVALID_UNINITIALIZED
}

func (x *RequestIntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RequestIntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The clinical priority of a diagnostic order.
// See http://hl7.org/fhir/ValueSet/request-priority
type RequestPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RequestPriorityCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RequestPriorityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RequestPriorityCode) Reset() {
	*x = RequestPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPriorityCode) ProtoMessage() {}

func (x *RequestPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPriorityCode.ProtoReflect.Descriptor instead.
func (*RequestPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{244}
}

func (x *RequestPriorityCode) GetValue() RequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return RequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *RequestPriorityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RequestPriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes identifying the stage lifecycle stage of a request
// See http://hl7.org/fhir/ValueSet/request-status
type RequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RequestStatusCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RequestStatusCode) Reset() {
	*x = RequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatusCode) ProtoMessage() {}

func (x *RequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatusCode.ProtoReflect.Descriptor instead.
func (*RequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{245}
}

func (x *RequestStatusCode) GetValue() RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *RequestStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes that convey the current status of the research study
// See http://hl7.org/fhir/ValueSet/research-study-status
type ResearchStudyStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ResearchStudyStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ResearchStudyStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResearchStudyStatusCode) Reset() {
	*x = ResearchStudyStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResearchStudyStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResearchStudyStatusCode) ProtoMessage() {}

func (x *ResearchStudyStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResearchStudyStatusCode.ProtoReflect.Descriptor instead.
func (*ResearchStudyStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{246}
}

func (x *ResearchStudyStatusCode) GetValue() ResearchStudyStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ResearchStudyStatusCode_INVALID_UNINITIALIZED
}

func (x *ResearchStudyStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResearchStudyStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Indicates the progression of a study subject through a study
// See http://hl7.org/fhir/ValueSet/research-subject-status
type ResearchSubjectStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ResearchSubjectStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ResearchSubjectStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResearchSubjectStatusCode) Reset() {
	*x = ResearchSubjectStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResearchSubjectStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResearchSubjectStatusCode) ProtoMessage() {}

func (x *ResearchSubjectStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResearchSubjectStatusCode.ProtoReflect.Descriptor instead.
func (*ResearchSubjectStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{247}
}

func (x *ResearchSubjectStatusCode) GetValue() ResearchSubjectStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ResearchSubjectStatusCode_INVALID_UNINITIALIZED
}

func (x *ResearchSubjectStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResearchSubjectStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of payee Resource
// See http://hl7.org/fhir/ValueSet/resource-type-link
type PayeeResourceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     PayeeResourceTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.PayeeResourceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PayeeResourceTypeCode) Reset() {
	*x = PayeeResourceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayeeResourceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayeeResourceTypeCode) ProtoMessage() {}

func (x *PayeeResourceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayeeResourceTypeCode.ProtoReflect.Descriptor instead.
func (*PayeeResourceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{248}
}

func (x *PayeeResourceTypeCode) GetValue() PayeeResourceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return PayeeResourceTypeCode_INVALID_UNINITIALIZED
}

func (x *PayeeResourceTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PayeeResourceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// One of the resource types defined as part of FHIR.
// See http://hl7.org/fhir/ValueSet/resource-types
type ResourceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ResourceTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ResourceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResourceTypeCode) Reset() {
	*x = ResourceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeCode) ProtoMessage() {}

func (x *ResourceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeCode.ProtoReflect.Descriptor instead.
func (*ResourceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{249}
}

func (x *ResourceTypeCode) GetValue() ResourceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ResourceTypeCode_INVALID_UNINITIALIZED
}

func (x *ResourceTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes indicating the type of validation to perform
// See http://hl7.org/fhir/ValueSet/resource-validation-mode
type ResourceValidationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ResourceValidationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ResourceValidationModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResourceValidationModeCode) Reset() {
	*x = ResourceValidationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceValidationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceValidationModeCode) ProtoMessage() {}

func (x *ResourceValidationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceValidationModeCode.ProtoReflect.Descriptor instead.
func (*ResourceValidationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{250}
}

func (x *ResourceValidationModeCode) GetValue() ResourceValidationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return ResourceValidationModeCode_INVALID_UNINITIALIZED
}

func (x *ResourceValidationModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceValidationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The kind of response to a message
// See http://hl7.org/fhir/ValueSet/response-code
type ResponseTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ResponseTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ResponseTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResponseTypeCode) Reset() {
	*x = ResponseTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTypeCode) ProtoMessage() {}

func (x *ResponseTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTypeCode.ProtoReflect.Descriptor instead.
func (*ResponseTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{251}
}

func (x *ResponseTypeCode) GetValue() ResponseTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ResponseTypeCode_INVALID_UNINITIALIZED
}

func (x *ResponseTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResponseTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The mode of a RESTful capability statement.
// See http://hl7.org/fhir/ValueSet/restful-capability-mode
type RestfulCapabilityModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RestfulCapabilityModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RestfulCapabilityModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RestfulCapabilityModeCode) Reset() {
	*x = RestfulCapabilityModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestfulCapabilityModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestfulCapabilityModeCode) ProtoMessage() {}

func (x *RestfulCapabilityModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestfulCapabilityModeCode.ProtoReflect.Descriptor instead.
func (*RestfulCapabilityModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{252}
}

func (x *RestfulCapabilityModeCode) GetValue() RestfulCapabilityModeCode_Value {
	if x != nil {
		return x.Value
	}
	return RestfulCapabilityModeCode_INVALID_UNINITIALIZED
}

func (x *RestfulCapabilityModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RestfulCapabilityModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Types of security services used with FHIR.
// See http://hl7.org/fhir/ValueSet/restful-security-service
type RestfulSecurityServiceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RestfulSecurityServiceCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RestfulSecurityServiceCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RestfulSecurityServiceCode) Reset() {
	*x = RestfulSecurityServiceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestfulSecurityServiceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestfulSecurityServiceCode) ProtoMessage() {}

func (x *RestfulSecurityServiceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestfulSecurityServiceCode.ProtoReflect.Descriptor instead.
func (*RestfulSecurityServiceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{253}
}

func (x *RestfulSecurityServiceCode) GetValue() RestfulSecurityServiceCode_Value {
	if x != nil {
		return x.Value
	}
	return RestfulSecurityServiceCode_INVALID_UNINITIALIZED
}

func (x *RestfulSecurityServiceCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RestfulSecurityServiceCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes representing the likelihood of a particular outcome in a risk
// assessment. See http://hl7.org/fhir/ValueSet/risk-probability
type RiskProbabilityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     RiskProbabilityCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.RiskProbabilityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RiskProbabilityCode) Reset() {
	*x = RiskProbabilityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskProbabilityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskProbabilityCode) ProtoMessage() {}

func (x *RiskProbabilityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskProbabilityCode.ProtoReflect.Descriptor instead.
func (*RiskProbabilityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{254}
}

func (x *RiskProbabilityCode) GetValue() RiskProbabilityCode_Value {
	if x != nil {
		return x.Value
	}
	return RiskProbabilityCode_INVALID_UNINITIALIZED
}

func (x *RiskProbabilityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RiskProbabilityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// What Search Comparator Codes are supported in search
// See http://hl7.org/fhir/ValueSet/search-comparator
type SearchComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SearchComparatorCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SearchComparatorCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchComparatorCode) Reset() {
	*x = SearchComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComparatorCode) ProtoMessage() {}

func (x *SearchComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComparatorCode.ProtoReflect.Descriptor instead.
func (*SearchComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{255}
}

func (x *SearchComparatorCode) GetValue() SearchComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchComparatorCode_INVALID_UNINITIALIZED
}

func (x *SearchComparatorCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchComparatorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Why an entry is in the result set - whether it's included as a match or
// because of an _include requirement. See
// http://hl7.org/fhir/ValueSet/search-entry-mode
type SearchEntryModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SearchEntryModeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SearchEntryModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchEntryModeCode) Reset() {
	*x = SearchEntryModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntryModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntryModeCode) ProtoMessage() {}

func (x *SearchEntryModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntryModeCode.ProtoReflect.Descriptor instead.
func (*SearchEntryModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{256}
}

func (x *SearchEntryModeCode) GetValue() SearchEntryModeCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchEntryModeCode_INVALID_UNINITIALIZED
}

func (x *SearchEntryModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchEntryModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A supported modifier for a search parameter.
// See http://hl7.org/fhir/ValueSet/search-modifier-code
type SearchModifierCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SearchModifierCodeCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SearchModifierCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchModifierCodeCode) Reset() {
	*x = SearchModifierCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchModifierCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchModifierCodeCode) ProtoMessage() {}

func (x *SearchModifierCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchModifierCodeCode.ProtoReflect.Descriptor instead.
func (*SearchModifierCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{257}
}

func (x *SearchModifierCodeCode) GetValue() SearchModifierCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchModifierCodeCode_INVALID_UNINITIALIZED
}

func (x *SearchModifierCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchModifierCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Data types allowed to be used for search parameters.
// See http://hl7.org/fhir/ValueSet/search-param-type
type SearchParamTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SearchParamTypeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SearchParamTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchParamTypeCode) Reset() {
	*x = SearchParamTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParamTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParamTypeCode) ProtoMessage() {}

func (x *SearchParamTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParamTypeCode.ProtoReflect.Descriptor instead.
func (*SearchParamTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{258}
}

func (x *SearchParamTypeCode) GetValue() SearchParamTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchParamTypeCode_INVALID_UNINITIALIZED
}

func (x *SearchParamTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchParamTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a search parameter relates to the set of elements returned by
// evaluating its xpath query. See
// http://hl7.org/fhir/ValueSet/search-xpath-usage
type XPathUsageTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     XPathUsageTypeCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.XPathUsageTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *XPathUsageTypeCode) Reset() {
	*x = XPathUsageTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XPathUsageTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XPathUsageTypeCode) ProtoMessage() {}

func (x *XPathUsageTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XPathUsageTypeCode.ProtoReflect.Descriptor instead.
func (*XPathUsageTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{259}
}

func (x *XPathUsageTypeCode) GetValue() XPathUsageTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return XPathUsageTypeCode_INVALID_UNINITIALIZED
}

func (x *XPathUsageTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XPathUsageTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Type if a sequence -- DNA, RNA, or amino acid sequence
// See http://hl7.org/fhir/ValueSet/sequence-type
type SequenceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SequenceTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SequenceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SequenceTypeCode) Reset() {
	*x = SequenceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceTypeCode) ProtoMessage() {}

func (x *SequenceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceTypeCode.ProtoReflect.Descriptor instead.
func (*SequenceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{260}
}

func (x *SequenceTypeCode) GetValue() SequenceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SequenceTypeCode_INVALID_UNINITIALIZED
}

func (x *SequenceTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SequenceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The code(s) that detail the conditions under which the healthcare service
// is available/offered. See
// http://hl7.org/fhir/ValueSet/service-provision-conditions
type ServiceProvisionConditionsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ServiceProvisionConditionsCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ServiceProvisionConditionsCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ServiceProvisionConditionsCode) Reset() {
	*x = ServiceProvisionConditionsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceProvisionConditionsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceProvisionConditionsCode) ProtoMessage() {}

func (x *ServiceProvisionConditionsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceProvisionConditionsCode.ProtoReflect.Descriptor instead.
func (*ServiceProvisionConditionsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{261}
}

func (x *ServiceProvisionConditionsCode) GetValue() ServiceProvisionConditionsCode_Value {
	if x != nil {
		return x.Value
	}
	return ServiceProvisionConditionsCode_INVALID_UNINITIALIZED
}

func (x *ServiceProvisionConditionsCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServiceProvisionConditionsCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The methods of referral can be used when referring to a specific
// HealthCareService resource. See
// http://hl7.org/fhir/ValueSet/service-referral-method
type ReferralMethodCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ReferralMethodCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ReferralMethodCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReferralMethodCode) Reset() {
	*x = ReferralMethodCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralMethodCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralMethodCode) ProtoMessage() {}

func (x *ReferralMethodCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralMethodCode.ProtoReflect.Descriptor instead.
func (*ReferralMethodCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{262}
}

func (x *ReferralMethodCode) GetValue() ReferralMethodCode_Value {
	if x != nil {
		return x.Value
	}
	return ReferralMethodCode_INVALID_UNINITIALIZED
}

func (x *ReferralMethodCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferralMethodCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The free/busy status of the slot.
// See http://hl7.org/fhir/ValueSet/slotstatus
type SlotStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SlotStatusCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SlotStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SlotStatusCode) Reset() {
	*x = SlotStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotStatusCode) ProtoMessage() {}

func (x *SlotStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotStatusCode.ProtoReflect.Descriptor instead.
func (*SlotStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{263}
}

func (x *SlotStatusCode) GetValue() SlotStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SlotStatusCode_INVALID_UNINITIALIZED
}

func (x *SlotStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SlotStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A set of generally useful codes defined so they can be included in value
// sets. See http://hl7.org/fhir/ValueSet/special-values
type SpecialValuesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SpecialValuesCode_Value         `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SpecialValuesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SpecialValuesCode) Reset() {
	*x = SpecialValuesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialValuesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialValuesCode) ProtoMessage() {}

func (x *SpecialValuesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialValuesCode.ProtoReflect.Descriptor instead.
func (*SpecialValuesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{264}
}

func (x *SpecialValuesCode) GetValue() SpecialValuesCode_Value {
	if x != nil {
		return x.Value
	}
	return SpecialValuesCode_INVALID_UNINITIALIZED
}

func (x *SpecialValuesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecialValuesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes for device specification types such as serial number, part number,
// hardware revision, software revision, etc. See
// http://hl7.org/fhir/ValueSet/specification-type
type DeviceSpecificationSpecTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     DeviceSpecificationSpecTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceSpecificationSpecTypeCode) Reset() {
	*x = DeviceSpecificationSpecTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSpecificationSpecTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSpecificationSpecTypeCode) ProtoMessage() {}

func (x *DeviceSpecificationSpecTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSpecificationSpecTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceSpecificationSpecTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{265}
}

func (x *DeviceSpecificationSpecTypeCode) GetValue() DeviceSpecificationSpecTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceSpecificationSpecTypeCode_INVALID_UNINITIALIZED
}

func (x *DeviceSpecificationSpecTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceSpecificationSpecTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes providing the status/availability of a specimen.
// See http://hl7.org/fhir/ValueSet/specimen-status
type SpecimenStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SpecimenStatusCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SpecimenStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SpecimenStatusCode) Reset() {
	*x = SpecimenStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenStatusCode) ProtoMessage() {}

func (x *SpecimenStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenStatusCode.ProtoReflect.Descriptor instead.
func (*SpecimenStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{266}
}

func (x *SpecimenStatusCode) GetValue() SpecimenStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SpecimenStatusCode_INVALID_UNINITIALIZED
}

func (x *SpecimenStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Defines the type of structure that a definition is describing.
// See http://hl7.org/fhir/ValueSet/structure-definition-kind
type StructureDefinitionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     StructureDefinitionKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.StructureDefinitionKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinitionKindCode) Reset() {
	*x = StructureDefinitionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionKindCode) ProtoMessage() {}

func (x *StructureDefinitionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionKindCode.ProtoReflect.Descriptor instead.
func (*StructureDefinitionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{267}
}

func (x *StructureDefinitionKindCode) GetValue() StructureDefinitionKindCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureDefinitionKindCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinitionKindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of method used to execute a subscription.
// See http://hl7.org/fhir/ValueSet/subscription-channel-type
type SubscriptionChannelTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SubscriptionChannelTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SubscriptionChannelTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionChannelTypeCode) Reset() {
	*x = SubscriptionChannelTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionChannelTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionChannelTypeCode) ProtoMessage() {}

func (x *SubscriptionChannelTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionChannelTypeCode.ProtoReflect.Descriptor instead.
func (*SubscriptionChannelTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{268}
}

func (x *SubscriptionChannelTypeCode) GetValue() SubscriptionChannelTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SubscriptionChannelTypeCode_INVALID_UNINITIALIZED
}

func (x *SubscriptionChannelTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionChannelTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status of a subscription.
// See http://hl7.org/fhir/ValueSet/subscription-status
type SubscriptionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SubscriptionStatusCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SubscriptionStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionStatusCode) Reset() {
	*x = SubscriptionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionStatusCode) ProtoMessage() {}

func (x *SubscriptionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionStatusCode.ProtoReflect.Descriptor instead.
func (*SubscriptionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{269}
}

func (x *SubscriptionStatusCode) GetValue() SubscriptionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SubscriptionStatusCode_INVALID_UNINITIALIZED
}

func (x *SubscriptionStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Tags to put on a resource after subscriptions have been sent.
// See http://hl7.org/fhir/ValueSet/subscription-tag
type SubscriptionTagCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SubscriptionTagCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SubscriptionTagCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionTagCode) Reset() {
	*x = SubscriptionTagCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTagCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTagCode) ProtoMessage() {}

func (x *SubscriptionTagCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTagCode.ProtoReflect.Descriptor instead.
func (*SubscriptionTagCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{270}
}

func (x *SubscriptionTagCode) GetValue() SubscriptionTagCode_Value {
	if x != nil {
		return x.Value
	}
	return SubscriptionTagCode_INVALID_UNINITIALIZED
}

func (x *SubscriptionTagCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionTagCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Substance category codes
// See http://hl7.org/fhir/ValueSet/substance-category
type SubstanceCategoryCodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SubstanceCategoryCodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SubstanceCategoryCodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubstanceCategoryCodesCode) Reset() {
	*x = SubstanceCategoryCodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceCategoryCodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceCategoryCodesCode) ProtoMessage() {}

func (x *SubstanceCategoryCodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceCategoryCodesCode.ProtoReflect.Descriptor instead.
func (*SubstanceCategoryCodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{271}
}

func (x *SubstanceCategoryCodesCode) GetValue() SubstanceCategoryCodesCode_Value {
	if x != nil {
		return x.Value
	}
	return SubstanceCategoryCodesCode_INVALID_UNINITIALIZED
}

func (x *SubstanceCategoryCodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceCategoryCodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code to indicate if the substance is actively used
// See http://hl7.org/fhir/ValueSet/substance-status
type FHIRSubstanceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     FHIRSubstanceStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.FHIRSubstanceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FHIRSubstanceStatusCode) Reset() {
	*x = FHIRSubstanceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRSubstanceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRSubstanceStatusCode) ProtoMessage() {}

func (x *FHIRSubstanceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRSubstanceStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRSubstanceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{272}
}

func (x *FHIRSubstanceStatusCode) GetValue() FHIRSubstanceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FHIRSubstanceStatusCode_INVALID_UNINITIALIZED
}

func (x *FHIRSubstanceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FHIRSubstanceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Status of the supply delivery.
// See http://hl7.org/fhir/ValueSet/supplydelivery-status
type SupplyDeliveryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SupplyDeliveryStatusCode_Value  `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SupplyDeliveryStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyDeliveryStatusCode) Reset() {
	*x = SupplyDeliveryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDeliveryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDeliveryStatusCode) ProtoMessage() {}

func (x *SupplyDeliveryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDeliveryStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyDeliveryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{273}
}

func (x *SupplyDeliveryStatusCode) GetValue() SupplyDeliveryStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyDeliveryStatusCode_INVALID_UNINITIALIZED
}

func (x *SupplyDeliveryStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyDeliveryStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value sets refers to a specific supply item.
// See http://hl7.org/fhir/ValueSet/supplydelivery-type
type SupplyItemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SupplyItemTypeCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SupplyItemTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyItemTypeCode) Reset() {
	*x = SupplyItemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyItemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyItemTypeCode) ProtoMessage() {}

func (x *SupplyItemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyItemTypeCode.ProtoReflect.Descriptor instead.
func (*SupplyItemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{274}
}

func (x *SupplyItemTypeCode) GetValue() SupplyItemTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyItemTypeCode_INVALID_UNINITIALIZED
}

func (x *SupplyItemTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyItemTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value sets refers to a Category of supply.
// See http://hl7.org/fhir/ValueSet/supplyrequest-kind
type SupplyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SupplyTypeCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SupplyTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyTypeCode) Reset() {
	*x = SupplyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyTypeCode) ProtoMessage() {}

func (x *SupplyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyTypeCode.ProtoReflect.Descriptor instead.
func (*SupplyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{275}
}

func (x *SupplyTypeCode) GetValue() SupplyTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyTypeCode_INVALID_UNINITIALIZED
}

func (x *SupplyTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Why the supply item was requested
// See http://hl7.org/fhir/ValueSet/supplyrequest-reason
type SupplyRequestReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SupplyRequestReasonCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SupplyRequestReasonCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyRequestReasonCode) Reset() {
	*x = SupplyRequestReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequestReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequestReasonCode) ProtoMessage() {}

func (x *SupplyRequestReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequestReasonCode.ProtoReflect.Descriptor instead.
func (*SupplyRequestReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{276}
}

func (x *SupplyRequestReasonCode) GetValue() SupplyRequestReasonCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyRequestReasonCode_INVALID_UNINITIALIZED
}

func (x *SupplyRequestReasonCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyRequestReasonCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Status of the supply request
// See http://hl7.org/fhir/ValueSet/supplyrequest-status
type SupplyRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SupplyRequestStatusCode_Value   `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SupplyRequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyRequestStatusCode) Reset() {
	*x = SupplyRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequestStatusCode) ProtoMessage() {}

func (x *SupplyRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequestStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{277}
}

func (x *SupplyRequestStatusCode) GetValue() SupplyRequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyRequestStatusCode_INVALID_UNINITIALIZED
}

func (x *SupplyRequestStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyRequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Operations supported by REST at the system level.
// http://hl7.org/fhir/ValueSet/system-restful-interaction
type SystemRestfulInteractionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SystemRestfulInteractionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SystemRestfulInteractionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SystemRestfulInteractionCode) Reset() {
	*x = SystemRestfulInteractionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemRestfulInteractionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemRestfulInteractionCode) ProtoMessage() {}

func (x *SystemRestfulInteractionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemRestfulInteractionCode.ProtoReflect.Descriptor instead.
func (*SystemRestfulInteractionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{278}
}

func (x *SystemRestfulInteractionCode) GetValue() SystemRestfulInteractionCode_Value {
	if x != nil {
		return x.Value
	}
	return SystemRestfulInteractionCode_INVALID_UNINITIALIZED
}

func (x *SystemRestfulInteractionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SystemRestfulInteractionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How to manage the intersection between a fixed version in a value set, and
// a fixed version of the system in the expansion profile See
// http://hl7.org/fhir/ValueSet/system-version-processing-mode
type SystemVersionProcessingModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SystemVersionProcessingModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SystemVersionProcessingModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SystemVersionProcessingModeCode) Reset() {
	*x = SystemVersionProcessingModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemVersionProcessingModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemVersionProcessingModeCode) ProtoMessage() {}

func (x *SystemVersionProcessingModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemVersionProcessingModeCode.ProtoReflect.Descriptor instead.
func (*SystemVersionProcessingModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{279}
}

func (x *SystemVersionProcessingModeCode) GetValue() SystemVersionProcessingModeCode_Value {
	if x != nil {
		return x.Value
	}
	return SystemVersionProcessingModeCode_INVALID_UNINITIALIZED
}

func (x *SystemVersionProcessingModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SystemVersionProcessingModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type(s) of task performers allowed
// See http://hl7.org/fhir/ValueSet/task-performer-type
type TaskPerformerTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TaskPerformerTypeCode_Value     `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TaskPerformerTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TaskPerformerTypeCode) Reset() {
	*x = TaskPerformerTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPerformerTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPerformerTypeCode) ProtoMessage() {}

func (x *TaskPerformerTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPerformerTypeCode.ProtoReflect.Descriptor instead.
func (*TaskPerformerTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{280}
}

func (x *TaskPerformerTypeCode) GetValue() TaskPerformerTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return TaskPerformerTypeCode_INVALID_UNINITIALIZED
}

func (x *TaskPerformerTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskPerformerTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The status indicates the level of maturity of the design and may be used to
// manage the use of the design See
// http://hl7.org/fhir/ValueSet/template-status-code
type TemplateStatusCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TemplateStatusCodeCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TemplateStatusCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TemplateStatusCodeCode) Reset() {
	*x = TemplateStatusCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateStatusCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateStatusCodeCode) ProtoMessage() {}

func (x *TemplateStatusCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateStatusCodeCode.ProtoReflect.Descriptor instead.
func (*TemplateStatusCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{281}
}

func (x *TemplateStatusCodeCode) GetValue() TemplateStatusCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return TemplateStatusCodeCode_INVALID_UNINITIALIZED
}

func (x *TemplateStatusCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TemplateStatusCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The current status of the task.
// See http://hl7.org/fhir/ValueSet/task-status
type TaskStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TaskStatusCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TaskStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TaskStatusCode) Reset() {
	*x = TaskStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusCode) ProtoMessage() {}

func (x *TaskStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusCode.ProtoReflect.Descriptor instead.
func (*TaskStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{282}
}

func (x *TaskStatusCode) GetValue() TaskStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return TaskStatusCode_INVALID_UNINITIALIZED
}

func (x *TaskStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that are used to indicate the
// supported operations of a testing engine or tool. See
// http://hl7.org/fhir/ValueSet/testscript-operation-codes
type TestScriptOperationCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestScriptOperationCodeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestScriptOperationCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestScriptOperationCodeCode) Reset() {
	*x = TestScriptOperationCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScriptOperationCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScriptOperationCodeCode) ProtoMessage() {}

func (x *TestScriptOperationCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScriptOperationCodeCode.ProtoReflect.Descriptor instead.
func (*TestScriptOperationCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{283}
}

func (x *TestScriptOperationCodeCode) GetValue() TestScriptOperationCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return TestScriptOperationCodeCode_INVALID_UNINITIALIZED
}

func (x *TestScriptOperationCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScriptOperationCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that are used to indicate the profile
// type of a test system when acting as the destination within a TestScript.
// See http://hl7.org/fhir/ValueSet/testscript-profile-destination-types
type TestScriptProfileDestinationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestScriptProfileDestinationTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestScriptProfileDestinationTypeCode) Reset() {
	*x = TestScriptProfileDestinationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScriptProfileDestinationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScriptProfileDestinationTypeCode) ProtoMessage() {}

func (x *TestScriptProfileDestinationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScriptProfileDestinationTypeCode.ProtoReflect.Descriptor instead.
func (*TestScriptProfileDestinationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{284}
}

func (x *TestScriptProfileDestinationTypeCode) GetValue() TestScriptProfileDestinationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return TestScriptProfileDestinationTypeCode_INVALID_UNINITIALIZED
}

func (x *TestScriptProfileDestinationTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScriptProfileDestinationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set defines a set of codes that are used to indicate the profile
// type of a test system when acting as the origin within a TestScript. See
// http://hl7.org/fhir/ValueSet/testscript-profile-origin-types
type TestScriptProfileOriginTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TestScriptProfileOriginTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TestScriptProfileOriginTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TestScriptProfileOriginTypeCode) Reset() {
	*x = TestScriptProfileOriginTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScriptProfileOriginTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScriptProfileOriginTypeCode) ProtoMessage() {}

func (x *TestScriptProfileOriginTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScriptProfileOriginTypeCode.ProtoReflect.Descriptor instead.
func (*TestScriptProfileOriginTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{285}
}

func (x *TestScriptProfileOriginTypeCode) GetValue() TestScriptProfileOriginTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return TestScriptProfileOriginTypeCode_INVALID_UNINITIALIZED
}

func (x *TestScriptProfileOriginTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScriptProfileOriginTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that indicates how transactions are supported.
// See http://hl7.org/fhir/ValueSet/transaction-mode
type TransactionModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TransactionModeCode_Value       `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TransactionModeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TransactionModeCode) Reset() {
	*x = TransactionModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionModeCode) ProtoMessage() {}

func (x *TransactionModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionModeCode.ProtoReflect.Descriptor instead.
func (*TransactionModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{286}
}

func (x *TransactionModeCode) GetValue() TransactionModeCode_Value {
	if x != nil {
		return x.Value
	}
	return TransactionModeCode_INVALID_UNINITIALIZED
}

func (x *TransactionModeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TransactionModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How a type relates to its baseDefinition.
// See http://hl7.org/fhir/ValueSet/type-derivation-rule
type TypeDerivationRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TypeDerivationRuleCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TypeDerivationRuleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TypeDerivationRuleCode) Reset() {
	*x = TypeDerivationRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDerivationRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDerivationRuleCode) ProtoMessage() {}

func (x *TypeDerivationRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDerivationRuleCode.ProtoReflect.Descriptor instead.
func (*TypeDerivationRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{287}
}

func (x *TypeDerivationRuleCode) GetValue() TypeDerivationRuleCode_Value {
	if x != nil {
		return x.Value
	}
	return TypeDerivationRuleCode_INVALID_UNINITIALIZED
}

func (x *TypeDerivationRuleCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TypeDerivationRuleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Operations supported by REST at the type or instance level.
// See http://hl7.org/fhir/ValueSet/type-restful-interaction
type TypeRestfulInteractionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     TypeRestfulInteractionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.TypeRestfulInteractionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TypeRestfulInteractionCode) Reset() {
	*x = TypeRestfulInteractionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRestfulInteractionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRestfulInteractionCode) ProtoMessage() {}

func (x *TypeRestfulInteractionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRestfulInteractionCode.ProtoReflect.Descriptor instead.
func (*TypeRestfulInteractionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{288}
}

func (x *TypeRestfulInteractionCode) GetValue() TypeRestfulInteractionCode_Value {
	if x != nil {
		return x.Value
	}
	return TypeRestfulInteractionCode_INVALID_UNINITIALIZED
}

func (x *TypeRestfulInteractionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TypeRestfulInteractionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes to identify how UDI data was entered
// See http://hl7.org/fhir/ValueSet/udi-entry-type
type UDIEntryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     UDIEntryTypeCode_Value          `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.UDIEntryTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UDIEntryTypeCode) Reset() {
	*x = UDIEntryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDIEntryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDIEntryTypeCode) ProtoMessage() {}

func (x *UDIEntryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDIEntryTypeCode.ProtoReflect.Descriptor instead.
func (*UDIEntryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{289}
}

func (x *UDIEntryTypeCode) GetValue() UDIEntryTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return UDIEntryTypeCode_INVALID_UNINITIALIZED
}

func (x *UDIEntryTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UDIEntryTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that indicates whether an application accepts unknown elements or
// extensions when reading resources. See
// http://hl7.org/fhir/ValueSet/unknown-content-code
type UnknownContentCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     UnknownContentCodeCode_Value    `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.UnknownContentCodeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UnknownContentCodeCode) Reset() {
	*x = UnknownContentCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownContentCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownContentCodeCode) ProtoMessage() {}

func (x *UnknownContentCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownContentCodeCode.ProtoReflect.Descriptor instead.
func (*UnknownContentCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{290}
}

func (x *UnknownContentCodeCode) GetValue() UnknownContentCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return UnknownContentCodeCode_INVALID_UNINITIALIZED
}

func (x *UnknownContentCodeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UnknownContentCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A code that specifies a type of context being specified by a usage context
// See http://hl7.org/fhir/ValueSet/usage-context-type
type UsageContextTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     UsageContextTypeCode_Value      `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.UsageContextTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UsageContextTypeCode) Reset() {
	*x = UsageContextTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageContextTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageContextTypeCode) ProtoMessage() {}

func (x *UsageContextTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageContextTypeCode.ProtoReflect.Descriptor instead.
func (*UsageContextTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{291}
}

func (x *UsageContextTypeCode) GetValue() UsageContextTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return UsageContextTypeCode_INVALID_UNINITIALIZED
}

func (x *UsageContextTypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsageContextTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Set of codes used to value Act.Confidentiality and Role.Confidentiality
// attribute in accordance with the definition for concept domain
// "Confidentiality". See
// http://hl7.org/fhir/ValueSet/v3-ConfidentialityClassification
type ConfidentialityClassificationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ConfidentialityClassificationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ConfidentialityClassificationCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConfidentialityClassificationCode) Reset() {
	*x = ConfidentialityClassificationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfidentialityClassificationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidentialityClassificationCode) ProtoMessage() {}

func (x *ConfidentialityClassificationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidentialityClassificationCode.ProtoReflect.Descriptor instead.
func (*ConfidentialityClassificationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{292}
}

func (x *ConfidentialityClassificationCode) GetValue() ConfidentialityClassificationCode_Value {
	if x != nil {
		return x.Value
	}
	return ConfidentialityClassificationCode_INVALID_UNINITIALIZED
}

func (x *ConfidentialityClassificationCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfidentialityClassificationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts
// to support describing the validity of a dose relative to a particular
// recommended schedule. This value set is provided as a suggestive example.
// See http://hl7.org/fhir/ValueSet/vaccination-protocol-dose-status
type VaccinationProtocolDoseStatuscodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     VaccinationProtocolDoseStatuscodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension              `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *VaccinationProtocolDoseStatuscodesCode) Reset() {
	*x = VaccinationProtocolDoseStatuscodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaccinationProtocolDoseStatuscodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaccinationProtocolDoseStatuscodesCode) ProtoMessage() {}

func (x *VaccinationProtocolDoseStatuscodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaccinationProtocolDoseStatuscodesCode.ProtoReflect.Descriptor instead.
func (*VaccinationProtocolDoseStatuscodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{293}
}

func (x *VaccinationProtocolDoseStatuscodesCode) GetValue() VaccinationProtocolDoseStatuscodesCode_Value {
	if x != nil {
		return x.Value
	}
	return VaccinationProtocolDoseStatuscodesCode_INVALID_UNINITIALIZED
}

func (x *VaccinationProtocolDoseStatuscodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VaccinationProtocolDoseStatuscodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts
// to support describing the reason why an administered dose has been assigned
// a particular status. Often, this reason describes why a dose is considered
// invalid. This value set is provided as a suggestive example. See
// http://hl7.org/fhir/ValueSet/vaccination-protocol-dose-status-reason
type VaccinationProtocolDoseStatusReasoncodesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     VaccinationProtocolDoseStatusReasoncodesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *VaccinationProtocolDoseStatusReasoncodesCode) Reset() {
	*x = VaccinationProtocolDoseStatusReasoncodesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaccinationProtocolDoseStatusReasoncodesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaccinationProtocolDoseStatusReasoncodesCode) ProtoMessage() {}

func (x *VaccinationProtocolDoseStatusReasoncodesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaccinationProtocolDoseStatusReasoncodesCode.ProtoReflect.Descriptor instead.
func (*VaccinationProtocolDoseStatusReasoncodesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{294}
}

func (x *VaccinationProtocolDoseStatusReasoncodesCode) GetValue() VaccinationProtocolDoseStatusReasoncodesCode_Value {
	if x != nil {
		return x.Value
	}
	return VaccinationProtocolDoseStatusReasoncodesCode_INVALID_UNINITIALIZED
}

func (x *VaccinationProtocolDoseStatusReasoncodesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VaccinationProtocolDoseStatusReasoncodesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Codes providing the status of the variant test result
// See http://hl7.org/fhir/ValueSet/variant-state
type SequenceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     SequenceStatusCode_Value        `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.SequenceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SequenceStatusCode) Reset() {
	*x = SequenceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceStatusCode) ProtoMessage() {}

func (x *SequenceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceStatusCode.ProtoReflect.Descriptor instead.
func (*SequenceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{295}
}

func (x *SequenceStatusCode) GetValue() SequenceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SequenceStatusCode_INVALID_UNINITIALIZED
}

func (x *SequenceStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SequenceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How the system supports versioning for a resource.
// See http://hl7.org/fhir/ValueSet/versioning-policy
type ResourceVersionPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     ResourceVersionPolicyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ResourceVersionPolicyCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResourceVersionPolicyCode) Reset() {
	*x = ResourceVersionPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceVersionPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceVersionPolicyCode) ProtoMessage() {}

func (x *ResourceVersionPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceVersionPolicyCode.ProtoReflect.Descriptor instead.
func (*ResourceVersionPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{296}
}

func (x *ResourceVersionPolicyCode) GetValue() ResourceVersionPolicyCode_Value {
	if x != nil {
		return x.Value
	}
	return ResourceVersionPolicyCode_INVALID_UNINITIALIZED
}

func (x *ResourceVersionPolicyCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceVersionPolicyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept listing the base codes.
// See http://hl7.org/fhir/ValueSet/vision-base-codes
type VisionBaseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     VisionBaseCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.VisionBaseCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *VisionBaseCode) Reset() {
	*x = VisionBaseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionBaseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionBaseCode) ProtoMessage() {}

func (x *VisionBaseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionBaseCode.ProtoReflect.Descriptor instead.
func (*VisionBaseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{297}
}

func (x *VisionBaseCode) GetValue() VisionBaseCode_Value {
	if x != nil {
		return x.Value
	}
	return VisionBaseCode_INVALID_UNINITIALIZED
}

func (x *VisionBaseCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VisionBaseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A coded concept listing the eye codes.
// See http://hl7.org/fhir/ValueSet/vision-eye-codes
type VisionEyesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     VisionEyesCode_Value            `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.VisionEyesCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *VisionEyesCode) Reset() {
	*x = VisionEyesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionEyesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionEyesCode) ProtoMessage() {}

func (x *VisionEyesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionEyesCode.ProtoReflect.Descriptor instead.
func (*VisionEyesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP(), []int{298}
}

func (x *VisionEyesCode) GetValue() VisionEyesCode_Value {
	if x != nil {
		return x.Value
	}
	return VisionEyesCode_INVALID_UNINITIALIZED
}

func (x *VisionEyesCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VisionEyesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_stu3_codes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_stu3_codes_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x10,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x41, 0x6e, 0x79, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe3,
	0x02, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x10, 0x04, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xcf, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xe6, 0x02, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x73, 0x6c, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x5d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x3a,
	0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x03, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x08, 0x58, 0x4d, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x78, 0x6d, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b,
	0x0a, 0x08, 0x58, 0x4d, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x78, 0x6d, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x74, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x44,
	0x41, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x63, 0x64, 0x61, 0x54, 0x65, 0x78, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d, 0x4c,
	0x10, 0x05, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x49, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10,
	0x03, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe7,
	0x02, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45,
	0x10, 0x02, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xe3, 0x02, 0x0a, 0x17, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x3a, 0x3e,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xfd,
	0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x54, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x3a, 0x41, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xcf,
	0x02, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x3a, 0x33, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xf4, 0x02, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x10, 0x03, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x3a, 0x41, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22,
	0xe2, 0x03, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xbf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54, 0x45, 0x52,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x09, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x9d, 0x03, 0x0a,
	0x1b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59,
	0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x45, 0x5f, 0x4f,
	0x52, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xd3, 0x02, 0x0a,
	0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x49, 0x52, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x3a, 0x34, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x1e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x3a, 0x45, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0xeb, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x50, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0xe4, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x45, 0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x41, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x41, 0x45, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x50, 0x41, 0x45, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xf6, 0x02, 0x0a, 0x23, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x53, 0x53, 0x45, 0x53, 0x53, 0x32, 0x10, 0x02, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x22, 0xe1, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x42, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x31, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x55, 0x53, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x32, 0x10, 0x02, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x75, 0x73,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xee, 0x02, 0x0a, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x31, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x32, 0x10, 0x02, 0x3a, 0x47, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x1f, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x3c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x31, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x32, 0x10, 0x02, 0x3a, 0x47,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x17, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x34, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x57, 0x49, 0x54,
	0x48, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4c, 0x41, 0x45, 0x10, 0x04, 0x1a, 0x1a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6c, 0x61, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x3a,
	0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0x95, 0x03, 0x0a, 0x1b, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x69, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x4d,
	0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x65, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x69,
	0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xa2, 0x03, 0x0a, 0x2b, 0x41, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x69, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x10, 0x02, 0x3a, 0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x22, 0xff, 0x02, 0x0a,
	0x24, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x40, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89,
	0x03, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f,
	0x4f, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x10, 0x04, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x82, 0x03, 0x0a, 0x21, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x3a, 0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xe2, 0x02, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x40, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x02, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x28, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x65, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd2, 0x02,
	0x0a, 0x10, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x45, 0x55, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x03, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa8, 0x03, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x08, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x02,
	0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x3a, 0x3f, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xb3, 0x04,
	0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x05, 0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x10, 0x04, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0b,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x1c, 0x0a, 0x08, 0x4c, 0x45, 0x53, 0x53, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x06, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x54,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x08, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e,
	0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x53, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x53, 0x10, 0x0a, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x41,
	0x4c, 0x10, 0x0b, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4b, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x09, 0x4e, 0x4f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x08, 0x4e,
	0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x4e, 0x4f, 0x54, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x08, 0x1a,
	0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12,
	0x30, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x0c, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x14, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x43, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x52, 0x12, 0x0e, 0x0a, 0x01, 0x55, 0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x55, 0x12, 0x0e, 0x0a, 0x01, 0x44, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x44, 0x12, 0x0e, 0x0a, 0x01, 0x45, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x45, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3,
	0x03, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x30, 0x12,
	0x1a, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x34, 0x12, 0x1c, 0x0a, 0x0f, 0x53,
	0x45, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x38, 0x12, 0x1b, 0x0a, 0x0d, 0x4d, 0x41, 0x4a,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x31, 0x32, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x02, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x44, 0x56, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x54, 0x4d, 0x54, 0x52, 0x45, 0x51, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x45, 0x54, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x4a,
	0x55, 0x44, 0x49, 0x43, 0x41, 0x54, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x44,
	0x45, 0x54, 0x52, 0x45, 0x51, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x44, 0x45,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x55,
	0x44, 0x59, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x10, 0x10, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xb1, 0x03, 0x0a, 0x0e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x3a, 0x34,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x1b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xa5,
	0x03, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x55, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07,
	0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xaf, 0x03, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x07, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x12, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c,
	0x41, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x3a, 0x39, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x07, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72,
	0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x03,
	0x0a, 0x14, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x4f, 0x4e, 0x47, 0x49, 0x54, 0x55, 0x44, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x10, 0x06, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x72, 0x65, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b,
	0x03, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07,
	0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf, 0x02, 0x0a,
	0x19, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x3a, 0x40, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x6c, 0x69,
	0x73, 0x74, 0x2d, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7,
	0x02, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x50, 0x4c,
	0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x04, 0x3a, 0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x3a,
	0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x43, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xfb, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x3a, 0x40, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8c,
	0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4d, 0x65, 0x61,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53,
	0x5f, 0x41, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x10, 0x04, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x2d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xaf, 0x02,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x74, 0x61, 0x67, 0x73, 0x22,
	0xfc, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x3a, 0x3f, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xd3,
	0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x3a, 0x46, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x6f, 0x74, 0x2d, 0x64, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd3, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x50,
	0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10,
	0x04, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x1b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x04, 0x3a,
	0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x73, 0x63, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x89, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xf3, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45,
	0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49, 0x56,
	0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x55, 0x42, 0x53, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x41, 0x52, 0x52, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x0a, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x03, 0x3a, 0x41, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6d, 0x61,
	0x70, 0x2d, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x96, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x41,
	0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x03, 0x3a, 0x42, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x2d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x89, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x53, 0x49, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d,
	0x72, 0x65, 0x61, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x49, 0x53, 0x10, 0x02, 0x3a,
	0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x91, 0x03, 0x0a,
	0x20, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x10, 0x05, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x22, 0xd3, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x38, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x53,
	0x48, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x48,
	0x41, 0x4c, 0x4c, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x02, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x12, 0x12, 0x0a,
	0x03, 0x4d, 0x41, 0x59, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x41,
	0x59, 0x12, 0x20, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x10,
	0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x2d,
	0x4e, 0x4f, 0x54, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x45, 0x44, 0x42, 0x59, 0x10, 0x04, 0x3a, 0x3d, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xcb, 0x02, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x38, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06,
	0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xbf,
	0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x49, 0x4c,
	0x4c, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x42, 0x49, 0x4c, 0x4c, 0x12,
	0x16, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x12, 0x10, 0x0a, 0x02, 0x48, 0x52, 0x10, 0x03, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x52, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x41, 0x59,
	0x4f, 0x52, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x41, 0x59, 0x4f,
	0x52, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x41, 0x54, 0x49, 0x4e, 0x46, 0x10, 0x05, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x41, 0x54, 0x49, 0x4e, 0x46, 0x12, 0x16, 0x0a, 0x05, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xc8, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x04, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x45, 0x44, 0x10, 0x0c,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x3a, 0x38, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x52, 0x10, 0x04, 0x3a,
	0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x70, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x4c,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x46, 0x10, 0x03, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x53, 0x54, 0x45, 0x58, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e,
	0x61, 0x4e, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52,
	0x4d, 0x45, 0x44, 0x10, 0x0a, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xa4, 0x03, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x85, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51,
	0x55, 0x49, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c,
	0x45, 0x58, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xa1, 0x03, 0x0a, 0x0f, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41, 0x4d, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x07, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x0e,
	0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8e, 0x0c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x41, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x42, 0x41,
	0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x06, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27,
	0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x10, 0x08, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x0d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x0e, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x07, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x11, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x48, 0x55,
	0x4d, 0x41, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x13, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x14, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x15, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x16, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x4e,
	0x41, 0x52, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x17, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x18, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x19, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x51, 0x55,
	0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x1b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x1c, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x1d, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x1e, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x1f, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x20, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x21, 0x1a,
	0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x22, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x2f, 0x0a, 0x12, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0d, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x24, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x36,
	0x34, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x25, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x26, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x28, 0x12,
	0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x29, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x2a, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x44, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x2c,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x49, 0x44, 0x10, 0x2f, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x10, 0x30, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x32, 0x12,
	0x23, 0x0a, 0x0c, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10,
	0x33, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x34, 0x12, 0x08, 0x0a,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x35, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d, 0x4c,
	0x10, 0x36, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xf2, 0x33, 0x0a, 0x10, 0x46, 0x48, 0x49, 0x52,
	0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x31, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10,
	0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f,
	0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x4f, 0x44,
	0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x06, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0x08, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10,
	0x0a, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x0c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0e, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x11, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a,
	0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x13, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x14, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x15, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x16,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x09, 0x4e, 0x41, 0x52, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x17, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a,
	0x14, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x19, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x08,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x1b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x1c, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x1d, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x1e,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x1f, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x09,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x20, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x0f,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x21, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e,
	0x47, 0x10, 0x22, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x12, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x24, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x42, 0x41, 0x53,
	0x45, 0x36, 0x34, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x25, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x26, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x28, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x29,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x2a, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x44, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54,
	0x10, 0x2c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x2d, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x2e, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x49, 0x44, 0x10, 0x2f, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x30, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x32, 0x12, 0x23, 0x0a, 0x0c, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x33, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x34, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x35, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48, 0x54,
	0x4d, 0x4c, 0x10, 0x36, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x37, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x39, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x3a, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x3b, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x3c, 0x1a, 0x19, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x3d, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x3e, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x3f, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x42,
	0x4f, 0x44, 0x59, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x40, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x55,
	0x4e, 0x44, 0x4c, 0x45, 0x10, 0x41, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x42, 0x1a, 0x19,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x43, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x44, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x45, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x10, 0x46, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x47, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x43,
	0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x48, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x43, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x49, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x4a, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x4b, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4c, 0x1a, 0x1b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4d, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x4e, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4f, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x50, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x51, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x52, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x53, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10,
	0x54, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x55, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x10, 0x56, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x57,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x58, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x59, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x5a, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2d, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e,
	0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x5b, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x5c, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x5d, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x45,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x5e, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x14, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x5f, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x60, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x61, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x62, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x63, 0x1a, 0x18, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x64, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12,
	0x2d, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x65, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46,
	0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x10, 0x66, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0x67, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x04,
	0x46, 0x4c, 0x41, 0x47, 0x10, 0x68, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x69, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x6b,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a,
	0x11, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x6c, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x75, 0x69, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x12,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x6d, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x10, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53,
	0x54, 0x10, 0x6e, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x49, 0x4d,
	0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x6f, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x70, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1b, 0x49, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x71, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49,
	0x44, 0x45, 0x10, 0x72, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x07, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x73, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x4c,
	0x49, 0x4e, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x74, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x75, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x76, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x77, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x78, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x05, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x79, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7a, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7b, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45,
	0x10, 0x7c, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x12,
	0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x7d, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x7e, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7f, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x80, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0d, 0x4e, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x81,
	0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x82, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x83, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x84,
	0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x11,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x10, 0x85, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x86, 0x01, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x53, 0x10, 0x87, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x88, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x89, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49,
	0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8a, 0x01, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x8b, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8c, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x8d,
	0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x11, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x8e, 0x01, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55,
	0x52, 0x45, 0x10, 0x8f, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x01, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x91, 0x01, 0x1a, 0x14, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x92, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x93,
	0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e,
	0x41, 0x49, 0x52, 0x45, 0x10, 0x94, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x16,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x95, 0x01, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x96, 0x01, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x97, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x98, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x99, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x12, 0x2c, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x9a, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x9b, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x9c, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x9d, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x9e, 0x01, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x9f, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa0, 0x01, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10,
	0xa1, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d,
	0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0xa2, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x34, 0x0a,
	0x14, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa3, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0xa4, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0c, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa5, 0x01, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0xa6, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0xa7, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xa8, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0xa9, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x22, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0xaa, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x10, 0xab, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xac, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xad, 0x01, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04,
	0x54, 0x59, 0x50, 0x45, 0x10, 0xae, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0xaf, 0x01, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x6e, 0x79, 0x3a, 0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd0, 0x33, 0x0a,
	0x13, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49,
	0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6,
	0x31, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x03, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x41, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x42, 0x41, 0x43, 0x4b, 0x42,
	0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x06, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0e, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x11, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x0d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x08,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x48, 0x55, 0x4d, 0x41, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x13, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x14, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x4d, 0x45,
	0x54, 0x41, 0x10, 0x15, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x16, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x41, 0x52, 0x52,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x17, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x18, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x06, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x19, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x10, 0x1a, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1b,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x1c, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x1d, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x1e, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x1f, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x20, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x21, 0x1a, 0x14, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x22, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x12,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x23, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0d, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x24,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x25, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x26, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x09,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x29, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x2a, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x2b,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10,
	0x2f, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x30, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x32, 0x12, 0x23, 0x0a, 0x0c,
	0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x33, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x34, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x10, 0x35, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x36, 0x12,
	0x1a, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x37, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x38, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0d, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x39, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59,
	0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x3a, 0x1a, 0x18,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x3b, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14,
	0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x3c, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x3d, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x3e, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x06,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x3f, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53,
	0x49, 0x54, 0x45, 0x10, 0x40, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10,
	0x41, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x33, 0x0a, 0x14, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x42, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x10, 0x43, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x10, 0x44, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x10, 0x45, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x46,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a,
	0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x47, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x48, 0x1a,
	0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x49, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0d,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4a, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x4b, 0x1a,
	0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4c, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x4d, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43,
	0x45, 0x50, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x4e, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4f, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x43,
	0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x50, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x10, 0x51, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x52, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x53, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x54, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x55, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10,
	0x56, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x57, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x27, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x58, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x59, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11,
	0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x5a, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54,
	0x10, 0x5b, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x5c, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x5d,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x5e, 0x1a,
	0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x45, 0x4c, 0x49,
	0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x5f, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x60, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x61, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12,
	0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x62, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x63, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43,
	0x41, 0x52, 0x45, 0x10, 0x64, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x58,
	0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x65, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e, 0x45,
	0x46, 0x49, 0x54, 0x10, 0x66, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x67, 0x1a, 0x19, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10,
	0x68, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x69, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x47,
	0x6f, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x6b, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x44,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6c, 0x1a,
	0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x6d, 0x1a,
	0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x6e, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x6f, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0c,
	0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x70, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1b, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x71, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x72, 0x1a,
	0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x73, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x47,
	0x45, 0x10, 0x74, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x75, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x76, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x10, 0x77, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x78, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x10, 0x79, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x7a, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x7b, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x7c, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x7d, 0x1a,
	0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x7e, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x7f, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x10, 0x80, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x81, 0x01, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x2a, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x82, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0b,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x83, 0x01, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x84, 0x01, 0x1a, 0x19, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x85, 0x01, 0x1a,
	0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x86, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x87, 0x01, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x88, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45,
	0x10, 0x89, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x8a, 0x01, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x8b, 0x01, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x0f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x8c, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x50, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x8d, 0x01, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x11, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x8e, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x8f, 0x01,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x12, 0x2e, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x91, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x92, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x93, 0x01, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x10,
	0x94, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x95, 0x01, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x96, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x97, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0d, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x98, 0x01, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x28, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x55, 0x44, 0x59, 0x10, 0x99, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x52,
	0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x9a, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x9b, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x9c, 0x01, 0x1a, 0x14,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x9d, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x9e, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x9f, 0x01,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x12, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa0, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0xa1, 0x01, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0xa2, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xa3, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0xa4, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa5, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xa6, 0x01, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x10, 0xa7, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0e, 0x53, 0x55,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xa8, 0x01, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0xa9, 0x01, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0b, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xaa, 0x01, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0xab,
	0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0xac, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xad, 0x01, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22,
	0xdb, 0x01, 0x0a, 0x16, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x23, 0x65, 0x78, 0x74, 0x22, 0xe4, 0x02,
	0x0a, 0x14, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52,
	0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x55,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53, 0x53, 0x45,
	0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x22, 0xe1, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x43, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa0, 0x03, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x14, 0x46,
	0x48, 0x49, 0x52, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x3a,
	0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x11, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x44,
	0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x44, 0x12, 0x10, 0x0a, 0x02,
	0x44, 0x44, 0x10, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x44, 0x44, 0x12, 0x10,
	0x0a, 0x02, 0x43, 0x43, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x43,
	0x12, 0x10, 0x0a, 0x02, 0x43, 0x4d, 0x10, 0x04, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x43, 0x4d, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0xda, 0x03, 0x0a, 0x1a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x3a, 0x41, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd3,
	0x02, 0x0a, 0x14, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x3e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x02,
	0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x1b, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x53, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x1c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x49, 0x47, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44,
	0x53, 0x10, 0x04, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x0f, 0x41, 0x64, 0x6d,
	0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x53, 0x50, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4d, 0x44, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x55, 0x54, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f,
	0x52, 0x4e, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x50, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02,
	0x4d, 0x50, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x53, 0x59, 0x43, 0x48, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x48, 0x41, 0x42, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x0a, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x2d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x08, 0x44, 0x69, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x52, 0x49,
	0x41, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x49, 0x52, 0x59, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x55, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x4c, 0x55, 0x54, 0x45, 0x4e, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x45, 0x47, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x41, 0x4c, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x4f, 0x53,
	0x48, 0x45, 0x52, 0x10, 0x07, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x69, 0x65, 0x74, 0x22, 0xb1,
	0x03, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x48, 0x43, 0x46, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x50,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x41, 0x44, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x58, 0x50,
	0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x53, 0x59, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x48, 0x41, 0x42, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4e, 0x46, 0x10, 0x09, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x54, 0x48, 0x10, 0x0a, 0x3a, 0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x69, 0x73,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xfd, 0x02, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x42,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xf7, 0x02, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x44, 0x44, 0x5f, 0x42, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f,
	0x47, 0x10, 0x05, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2d,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb4, 0x03, 0x0a,
	0x13, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa7,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x52, 0x49, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x4e, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x44, 0x4d, 0x53, 0x10, 0x01,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x41, 0x44, 0x4d, 0x53, 0x12, 0x20, 0x0a, 0x0a,
	0x42, 0x44, 0x5f, 0x42, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x42, 0x44, 0x2f, 0x42, 0x4d, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x05, 0x43, 0x43, 0x53, 0x36, 0x30, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x43, 0x43, 0x53, 0x36, 0x30, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x4b, 0x49, 0x10, 0x04, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x4b, 0x49, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x06, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x8c, 0x04, 0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x4c, 0x53, 0x10, 0x01, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x53, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x43, 0x10,
	0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x43, 0x12, 0x10, 0x0a, 0x02, 0x4e,
	0x42, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x42, 0x12, 0x10, 0x0a,
	0x02, 0x50, 0x52, 0x10, 0x04, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x52, 0x12,
	0x12, 0x0a, 0x03, 0x48, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x48, 0x4f, 0x4e, 0x12, 0x10, 0x0a, 0x02, 0x42, 0x52, 0x10, 0x06, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x42, 0x52, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x44, 0x10, 0x07, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x44, 0x12, 0x10, 0x0a, 0x02, 0x53, 0x50, 0x10, 0x08, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x53, 0x50, 0x12, 0x12, 0x0a, 0x03, 0x4d, 0x49, 0x44,
	0x10, 0x09, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x02, 0x43, 0x4c, 0x10, 0x0a, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x4c, 0x12,
	0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x0b, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x49,
	0x4e, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x2d, 0x70, 0x61, 0x72, 0x74, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x8f, 0x03, 0x0a, 0x22, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x62, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x50, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x41, 0x52, 0x42, 0x4f, 0x48, 0x59, 0x44, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x49, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x41, 0x54, 0x45,
	0x52, 0x10, 0x05, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x22, 0xa3, 0x03, 0x0a, 0x17, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x57, 0x41, 0x49, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x48, 0x4f, 0x4c,
	0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2d, 0x6f, 0x66, 0x2d, 0x63, 0x61, 0x72, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x15, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x43, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x41, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x41, 0x42, 0x10, 0x03, 0x12, 0x06,
	0x0a, 0x02, 0x44, 0x41, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x43, 0x50, 0x10, 0x05,
	0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x6f, 0x66, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x02,
	0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x92, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x07, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x1a,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x04, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x78,
	0x2d, 0x70, 0x61, 0x79, 0x65, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0x44, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6f, 0x66, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xa8, 0x03, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3d, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x53, 0x5f, 0x41, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10,
	0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x53, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x09, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xda, 0x02, 0x0a,
	0x10, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x49, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x55, 0x47, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x42, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10,
	0x05, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x67,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xf7, 0x02, 0x0a, 0x15, 0x46, 0x6c,
	0x61, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x6a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x50, 0x4e, 0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x50, 0x4e, 0x12, 0x10, 0x0a, 0x02, 0x50, 0x4c, 0x10, 0x02, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x4c, 0x12, 0x10, 0x0a, 0x02, 0x50, 0x4d, 0x10, 0x03, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x4d, 0x12, 0x10, 0x0a, 0x02, 0x50, 0x48, 0x10,
	0x04, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x48, 0x3a, 0x36, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0xcf, 0x02, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a,
	0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x66, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x18,
	0x47, 0x6f, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x47, 0x52,
	0x45, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x10, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x6f, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x45, 0x54, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x55, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x59, 0x53,
	0x49, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x41, 0x50, 0x59, 0x10, 0x05, 0x3a, 0x36, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0xdf, 0x02, 0x0a, 0x10, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x5c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x4f, 0x57, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x3a, 0x36, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x89, 0x03, 0x0a, 0x18, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x44, 0x45, 0x43, 0x45,
	0x53, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54,
	0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05,
	0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xef, 0x03, 0x0a, 0x0e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c,
	0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x48, 0x45, 0x41, 0x44,
	0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x45, 0x48, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x3a, 0x34, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xf9, 0x03, 0x0a, 0x14, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x52, 0x47, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x46,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x54, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x49, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x49, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4f,
	0x46, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x09, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61,
	0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xf6, 0x02, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x77,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x03, 0x0a,
	0x1a, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x02, 0x0a,
	0x17, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x43,
	0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x11, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4f, 0x43, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x08, 0x3a,
	0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x2d,
	0x70, 0x61, 0x67, 0x65, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x92, 0x03, 0x0a, 0x1e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x69, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49,
	0x54, 0x48, 0x48, 0x45, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x42, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x40, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x6e,
	0x6f, 0x74, 0x2d, 0x64, 0x6f, 0x6e, 0x65, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xfa,
	0x02, 0x0a, 0x17, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x04, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf5, 0x03, 0x0a, 0x10,
	0x48, 0x4c, 0x37, 0x57, 0x6f, 0x72, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x4c, 0x37, 0x57, 0x6f, 0x72, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x42, 0x43, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x44, 0x53, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x51, 0x49, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x47, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x56, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x48, 0x52,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x48, 0x49, 0x52, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02,
	0x46, 0x4d, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x53, 0x49, 0x10, 0x09, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x49, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x4d, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4f, 0x10, 0x0d, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x41, 0x10, 0x0e, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x0f, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x48, 0x45, 0x52, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x58,
	0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x43, 0x52, 0x49, 0x4d, 0x10, 0x12, 0x12, 0x06, 0x0a,
	0x02, 0x53, 0x44, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x43, 0x10, 0x14, 0x12, 0x06,
	0x0a, 0x02, 0x55, 0x53, 0x10, 0x15, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x43, 0x41, 0x42, 0x10,
	0x16, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x49, 0x44, 0x10, 0x17, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x6c, 0x37, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x85, 0x03, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10,
	0x06, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x0c,
	0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x62, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x47, 0x45, 0x54, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x12, 0x0a,
	0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x55,
	0x54, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x3a, 0x32, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x76, 0x65, 0x72, 0x62, 0x22,
	0xf3, 0x02, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x31, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x34, 0x10, 0x04, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf3, 0x02, 0x0a, 0x1b, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x3a, 0x3c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xc3, 0x03, 0x0a, 0x30,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x64, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x55, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x45, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x56, 0x45, 0x52, 0x44, 0x55, 0x45, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0x05, 0x3a, 0x53, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x22, 0x82, 0x03, 0x0a, 0x29, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x38, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x56, 0x45, 0x52, 0x44, 0x55, 0x45, 0x10, 0x02, 0x3a, 0x4b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x1b, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe7, 0x02, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04,
	0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x18, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x12, 0x22,
	0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xdc, 0x02, 0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xcf, 0x05, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e,
	0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x10, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x4c, 0x59,
	0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43,
	0x54, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x19,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x1d, 0x3a, 0x33,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8b, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x52, 0x4c, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10,
	0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45,
	0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x10, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x11, 0x3a,
	0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xf8, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcd,
	0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd0,
	0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x46, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x45, 0x41, 0x4c, 0x53, 0x4f, 0x10, 0x04, 0x3a, 0x32, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x88, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x4c,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x41, 0x53,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x48, 0x45, 0x4c,
	0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x06,
	0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbf, 0x03, 0x0a,
	0x1a, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x66, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x45, 0x52, 0x58, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x53, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x4e, 0x53, 0x10,
	0x09, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc1,
	0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x03, 0x3a, 0x32,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x49, 0x43, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd, 0x02,
	0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x49, 0x4e, 0x44, 0x10, 0x02, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa3, 0x03,
	0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x53, 0x49, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x55, 0x10, 0x02, 0x12, 0x06,
	0x0a, 0x02, 0x57, 0x49, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x41, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x56, 0x4c, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x4f, 0x10, 0x06, 0x12,
	0x06, 0x0a, 0x02, 0x52, 0x4f, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x44, 0x10, 0x08, 0x12,
	0x06, 0x0a, 0x02, 0x56, 0x45, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x4f, 0x10, 0x0a, 0x12,
	0x06, 0x0a, 0x02, 0x43, 0x41, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x44, 0x10, 0x0c, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x52, 0x45, 0x41, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x44, 0x4e,
	0x10, 0x0e, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe8, 0x03, 0x0a, 0x1f, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x42, 0x10, 0x01,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x01, 0x45, 0x10, 0x02,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0x12, 0x0e, 0x0a, 0x01, 0x46, 0x10, 0x03,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x46, 0x12, 0x0e, 0x0a, 0x01, 0x47, 0x10, 0x04,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x47, 0x12, 0x10, 0x0a, 0x02, 0x4c, 0x4e, 0x10,
	0x05, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x4e,
	0x10, 0x06, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x54,
	0x10, 0x07, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x54, 0x12, 0x0e, 0x0a, 0x01, 0x55,
	0x10, 0x08, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x10, 0x0a, 0x02, 0x58,
	0x32, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x58, 0x32, 0x3a, 0x46, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x61,
	0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xee,
	0x02, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10,
	0x03, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x70, 0x2d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xd0, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x55, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xba, 0x03, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e,
	0x6f, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x08, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x3a, 0x3d,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf5, 0x02,
	0x0a, 0x1e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4c,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x04, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x04, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x07,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x10, 0x09, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02,
	0x43, 0x43, 0x10, 0x0d, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x51,
	0x54, 0x59, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x10, 0x12, 0x06, 0x0a, 0x02,
	0x43, 0x50, 0x10, 0x11, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d,
	0x61, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xdb, 0x02, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x52, 0x54,
	0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4c, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x10, 0x04, 0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x14, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x02, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x14, 0x4d, 0x65, 0x61, 0x73, 0x6d, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x6d, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x50, 0x45, 0x44, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49,
	0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45,
	0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43,
	0x4f, 0x55, 0x53, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x10, 0x0b, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x19, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58,
	0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4e,
	0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45,
	0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x09, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe1, 0x02, 0x0a, 0x17, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x15, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x3a, 0x3c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x12,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x3a,
	0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x2d, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xf8, 0x02, 0x0a, 0x0f, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x05, 0x3a, 0x35, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x24, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x55, 0x54, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb0,
	0x03, 0x0a, 0x22, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7f,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x3a,
	0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xfe, 0x02, 0x0a, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x4e, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x55, 0x54, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x3a, 0x45, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0xac, 0x03, 0x0a, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x3a, 0x43, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa0, 0x03, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x50, 0x4f, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x58,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x54, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x55, 0x42, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e,
	0x49, 0x54, 0x44, 0x4f, 0x53, 0x45, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49, 0x41, 0x4c,
	0x10, 0x08, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2d,
	0x66, 0x6f, 0x72, 0x6d, 0x22, 0xfb, 0x02, 0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x4e, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4f, 0x55, 0x54, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x3a, 0x44, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0xfe, 0x02, 0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x3a,
	0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x52,
	0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x54, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x53, 0x41, 0x50, 0x10, 0x04, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0xba, 0x03, 0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x03,
	0x0a, 0x1f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4e, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x55,
	0x54, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x54,
	0x49, 0x45, 0x4e, 0x54, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x3a,
	0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xa6, 0x03, 0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe9, 0x02, 0x0a, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x59, 0x10, 0x01, 0x12,
	0x05, 0x0a, 0x01, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x4e, 0x4b, 0x10, 0x03, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x04, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x02, 0x0a,
	0x14, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc3, 0x06, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x04, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2f, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x22, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x27, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x21, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x27, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x1a, 0x2c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x26, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x23, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x1a, 0x28, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x22, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x4b, 0x0a, 0x20, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x1a, 0x25, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1f, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x10, 0x0c, 0x3a, 0x37, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x0a, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x47, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x1d, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x42,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x44, 0x49, 0x54, 0x10, 0x06, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xbc, 0x03, 0x0a, 0x1f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xce, 0x02, 0x0a, 0x14, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x46,
	0x54, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4c, 0x4c, 0x50, 0x10, 0x03, 0x3a, 0x3a,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x20, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x03, 0x0a,
	0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x49, 0x4e, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04,
	0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x2d, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x04, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x85, 0x03, 0x0a,
	0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x41, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x59, 0x41, 0x4e,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x08, 0x3a, 0x35, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x87, 0x03, 0x0a, 0x21, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x42, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f,
	0x03, 0x0a, 0x1a, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x4c, 0x31, 0x10, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x31, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x4c, 0x32, 0x10, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x4c,
	0x33, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x33, 0x12, 0x12,
	0x0a, 0x03, 0x4e, 0x4c, 0x34, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e,
	0x4c, 0x34, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0xfc, 0x02, 0x0a, 0x19, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x42, 0x43, 0x10, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x41, 0x42, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x44, 0x45, 0x10, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x44, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x59,
	0x4c, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x59, 0x4c, 0x3a, 0x3f,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x76, 0x33,
	0x2d, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf7, 0x02, 0x0a, 0x1e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x04, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x14, 0x4e, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x1e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x0c, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x31, 0x12,
	0x17, 0x0a, 0x0a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a,
	0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x32, 0x12, 0x1d, 0x0a, 0x10, 0x54, 0x45, 0x4c, 0x45,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x33, 0x12, 0x1a, 0x0a, 0x0d, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x35, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x02, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x49, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x03, 0x3a, 0x32, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xf8, 0x04, 0x0a, 0x0e, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02,
	0x4e, 0x49, 0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x49, 0x12, 0x12,
	0x0a, 0x03, 0x49, 0x4e, 0x56, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49,
	0x4e, 0x56, 0x12, 0x12, 0x0a, 0x03, 0x44, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x44, 0x45, 0x52, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x54, 0x48, 0x10, 0x04, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x54, 0x48, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x49,
	0x4e, 0x46, 0x10, 0x05, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x49, 0x4e, 0x46,
	0x12, 0x14, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x46, 0x10, 0x06, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x50, 0x49, 0x4e, 0x46, 0x12, 0x12, 0x0a, 0x03, 0x55, 0x4e, 0x43, 0x10, 0x07, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x4e, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x4d, 0x53,
	0x4b, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x53, 0x4b, 0x12, 0x10,
	0x0a, 0x02, 0x4e, 0x41, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x41,
	0x12, 0x12, 0x0a, 0x03, 0x55, 0x4e, 0x4b, 0x10, 0x0a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x55, 0x4e, 0x4b, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x53, 0x4b, 0x55, 0x10, 0x0b, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x41, 0x53, 0x4b, 0x55, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x41,
	0x56, 0x10, 0x0c, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x41, 0x56, 0x12, 0x14,
	0x0a, 0x04, 0x4e, 0x41, 0x53, 0x4b, 0x10, 0x0d, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x4e, 0x41, 0x53, 0x4b, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x41, 0x56, 0x55, 0x10, 0x0e, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x41, 0x56, 0x55, 0x12, 0x10, 0x0a, 0x02, 0x51, 0x53,
	0x10, 0x0f, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x51, 0x53, 0x12, 0x12, 0x0a, 0x03,
	0x54, 0x52, 0x43, 0x10, 0x10, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x54, 0x52, 0x43,
	0x12, 0x10, 0x0a, 0x02, 0x4e, 0x50, 0x10, 0x11, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x4e, 0x50, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x33, 0x2d,
	0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0xc3, 0x03, 0x0a, 0x18, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x3a, 0x41, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb9, 0x03, 0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x56, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55,
	0x52, 0x56, 0x45, 0x59, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x41, 0x4d, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x48, 0x45, 0x52, 0x41, 0x50, 0x59, 0x10, 0x08, 0x3a, 0x3d, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb8, 0x03, 0x0a,
	0x1f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48,
	0x41, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x06, 0x3a,
	0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd9, 0x05, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x58,
	0x49, 0x4d, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x24,
	0x0a, 0x0e, 0x54, 0x57, 0x45, 0x4e, 0x54, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x0a, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x32, 0x30, 0x2d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x45, 0x49, 0x47, 0x48, 0x54, 0x59, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x38, 0x30, 0x2d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x4f,
	0x55, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x0c, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x34, 0x2d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x4f, 0x55,
	0x52, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0x0d, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x34, 0x2d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x46, 0x4f, 0x55, 0x52,
	0x5f, 0x44, 0x45, 0x56, 0x10, 0x0e, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2d,
	0x64, 0x65, 0x76, 0x12, 0x17, 0x0a, 0x08, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x10,
	0x0f, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x35, 0x2d, 0x31, 0x12, 0x17, 0x0a, 0x08,
	0x46, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x10, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x35, 0x2d, 0x32, 0x12, 0x19, 0x0a, 0x0a, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x10, 0x11, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x35, 0x2d, 0x33,
	0x12, 0x18, 0x0a, 0x09, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x12, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x35, 0x2d, 0x34, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b,
	0x45, 0x57, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x55, 0x52, 0x54, 0x4f, 0x53, 0x49, 0x53,
	0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x15, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x22, 0xaf, 0x03, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xba, 0x03, 0x0a, 0x24, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x44, 0x55, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x57, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x07, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x3c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x3a, 0x37,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xfe, 0x15, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x13, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x53,
	0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x53,
	0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x1a, 0x14,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x10, 0x03, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e,
	0x4d, 0x53, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x12, 0x38,
	0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x12, 0x32, 0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f,
	0x43, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10,
	0x05, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x41, 0x4e,
	0x54, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x12, 0x22, 0x0a, 0x0b,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x12, 0x2a, 0x0a, 0x0f, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x07, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x53, 0x47,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x12, 0x22, 0x0a, 0x0b,
	0x4d, 0x53, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x12, 0x2c, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f,
	0x44, 0x4f, 0x4e, 0x45, 0x10, 0x09, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4d, 0x53,
	0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x12, 0x28,
	0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x44,
	0x10, 0x0a, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x1a, 0x17, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50,
	0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0d, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x0f, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c,
	0x4f, 0x4e, 0x47, 0x10, 0x0e, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x53, 0x47,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x12, 0x28, 0x0a, 0x0e,
	0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x0f,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x0f, 0x4d, 0x53, 0x47, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x10, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x4d, 0x53, 0x47, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x11, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4d, 0x53,
	0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x12, 0x24, 0x0a, 0x0c,
	0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x12, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x12, 0x24, 0x0a, 0x0c, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0x13, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4d, 0x53, 0x47, 0x5f,
	0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x12, 0x26, 0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x5f,
	0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x14, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x12, 0x28, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x15, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4d, 0x53, 0x47, 0x5f,
	0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x12, 0x30, 0x0a, 0x12, 0x4d, 0x53,
	0x47, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x16, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x53, 0x47, 0x5f, 0x4f, 0x50,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x11,
	0x4d, 0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x17, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x12, 0x32, 0x0a, 0x13,
	0x4d, 0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x10, 0x18, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x53, 0x47,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x19, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d,
	0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1a, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d,
	0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x12, 0x40, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1b,
	0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x12, 0x48, 0x0a, 0x1e, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x1c, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x4d, 0x53,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x34, 0x0a, 0x14,
	0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x1d, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x4d, 0x53,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x12, 0x3c, 0x0a, 0x18, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x1e,
	0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x12, 0x36, 0x0a, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x1f, 0x1a, 0x1b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x12, 0x3c, 0x0a, 0x18, 0x4d, 0x53, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x20, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x53,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x12, 0x3a, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x21, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x12, 0x40, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x22, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x12, 0x2c, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x23, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x12, 0x44, 0x0a, 0x1c, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x24, 0x1a, 0x22, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x4d, 0x53, 0x47, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x10, 0x25, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x17, 0x4d, 0x53,
	0x47, 0x5f, 0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x26, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x4d,
	0x53, 0x47, 0x5f, 0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x27, 0x1a,
	0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x12, 0x36, 0x0a, 0x15, 0x4d, 0x53,
	0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x28, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x4d, 0x53, 0x47,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x12, 0x2c, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x29, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10,
	0x4d, 0x53, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x22, 0x0a, 0x0b, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x2a, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x12, 0x2e, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x10, 0x2b, 0x1a, 0x17, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x45, 0x12, 0x40, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49,
	0x43, 0x54, 0x10, 0x2c, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x53, 0x47, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x12, 0x36, 0x0a, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10,
	0x2d, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x12, 0x24,
	0x0a, 0x0c, 0x4d, 0x53, 0x47, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4e, 0x53, 0x10, 0x2e,
	0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4d, 0x53, 0x47, 0x5f, 0x57, 0x52, 0x4f, 0x4e,
	0x47, 0x5f, 0x4e, 0x53, 0x12, 0x2a, 0x0a, 0x0f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x2f, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45,
	0x12, 0x3a, 0x0a, 0x17, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x30, 0x1a, 0x1d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x17, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x12, 0x3a, 0x0a, 0x17,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x31, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x17, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x12, 0x22, 0x0a, 0x0b, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x32, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x3a, 0x3a, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x13, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x33, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x14, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x56, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x50, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x4f, 0x56, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x53,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x44, 0x55, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x45, 0x4c, 0x49, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x52, 0x53, 0x10, 0x08, 0x12, 0x06,
	0x0a, 0x02, 0x43, 0x47, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x53, 0x10, 0x0a, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x21, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x41, 0x45,
	0x4d, 0x4f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x43, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x50, 0x49, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x55, 0x52, 0x4f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x52, 0x55, 0x47,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x4c, 0x55, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x53, 0x43, 0x45, 0x4c, 0x4c,
	0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x09, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0xeb, 0x02, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x03, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0xf6, 0x02, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x45,
	0x44, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x16, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43, 0x41, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x03,
	0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2d,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xab, 0x04, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x42, 0x41, 0x44, 0x12, 0x24, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x4f,
	0x4e, 0x46, 0x12, 0x1a, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x48, 0x4f,
	0x4d, 0x45, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x50, 0x12, 0x1b,
	0x0a, 0x0d, 0x56, 0x41, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10,
	0x04, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x56, 0x12, 0x15, 0x0a, 0x06, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44,
	0x49, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x06, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x55, 0x42, 0x12, 0x26, 0x0a, 0x16, 0x50, 0x48, 0x59,
	0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x07, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x48, 0x59,
	0x53, 0x12, 0x1d, 0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x53, 0x54,
	0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xfe, 0x02,
	0x0a, 0x14, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x55, 0x52, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x48, 0x41, 0x52, 0x4d, 0x41, 0x43, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x43, 0x54,
	0x10, 0x06, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xfa,
	0x02, 0x0a, 0x19, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x45, 0x54, 0x41, 0x52,
	0x59, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x44, 0x57, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x59, 0x53, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x22, 0xd3, 0x03, 0x0a, 0x20,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e, 0x45, 0x53, 0x54, 0x48, 0x45, 0x53, 0x49, 0x41, 0x5f,
	0x49, 0x4e, 0x44, 0x55, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x06, 0x3a, 0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x84, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x05, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2d, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x15, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x04, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc3, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4e, 0x50,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x3a,
	0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x78, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x01, 0x2a, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x78, 0x2d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,
	0x22, 0xa2, 0x03, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x3a, 0x45,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x42, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x02, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xca, 0x04, 0x0a,
	0x23, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x49,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x4e, 0x49, 0x54,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x59, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x55, 0x54, 0x4f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0d,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x0e, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x4c, 0x49, 0x44, 0x45, 0x52, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x49,
	0x4e, 0x4e, 0x45, 0x52, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x42,
	0x4f, 0x58, 0x10, 0x13, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x69, 0x74, 0x65,
	0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xb2, 0x03, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x05, 0x3a, 0x41, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x84,
	0x03, 0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x4e, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49,
	0x4b, 0x45, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x04, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0xef, 0x02, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x45, 0x10, 0x03, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xe6, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x76, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x37, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10,
	0x02, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x03, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x88, 0x03, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc3, 0x03, 0x0a, 0x17,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x52, 0x45, 0x44, 0x45, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x06,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x10,
	0x08, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xff, 0x03, 0x0a, 0x29, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x5d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xc0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x45, 0x52, 0x41, 0x50, 0x45, 0x55, 0x54, 0x49, 0x43, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x52, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x45,
	0x52, 0x54, 0x59, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x4c, 0x4c, 0x49, 0x43, 0x55,
	0x4c, 0x41, 0x52, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x44, 0x43, 0x59, 0x43, 0x4c,
	0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x55, 0x54, 0x45, 0x41, 0x4c, 0x10, 0x0a, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x53, 0x54, 0x4d, 0x45, 0x4f, 0x50, 0x41, 0x55, 0x53, 0x41, 0x4c,
	0x10, 0x0b, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x6d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x22, 0xfc, 0x02, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x3a, 0x43, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x1d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x03, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x83,
	0x03, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e,
	0x41, 0x50, 0x49, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xa4, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x49, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x3a, 0x37,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x52,
	0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x53, 0x41, 0x50, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x54, 0x10, 0x04, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x90, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x3a,
	0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x06, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x78, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x3a, 0x40, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8, 0x02,
	0x0a, 0x15, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x04, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xb1, 0x27, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x25, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x18,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x4c,
	0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06,
	0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x08, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59,
	0x10, 0x09, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x0a, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x0b, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x0c, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x0d, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a,
	0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x0e, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0b,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0f, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x16, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x10, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x11, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x13, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x15, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x16, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0x18, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x19, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x1a, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x1b, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x1c, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1d, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x1e, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x1f, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x20, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x10, 0x21, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x22, 0x1a, 0x13, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x23, 0x1a, 0x18, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f,
	0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x24, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x25, 0x1a, 0x16, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x26, 0x1a, 0x17, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x27, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x13, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x28, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x29, 0x1a, 0x19, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x13, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x2a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x2b, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x2c, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x2d,
	0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50,
	0x49, 0x53, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x2e, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x2f, 0x1a, 0x16, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x10, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x10, 0x30, 0x1a,
	0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46,
	0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x31, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x32, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10,
	0x33, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x34, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x35, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2d, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x36, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41, 0x52, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x37, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41,
	0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x38, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f,
	0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59,
	0x10, 0x39, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3a, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1b,
	0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x1a, 0x20, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x3c, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10,
	0x3d, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x3e, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x3f, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x40,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x41, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0e,
	0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x42,
	0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x43,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x0a,
	0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x44, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x45, 0x1a, 0x1e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x46, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x47, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x48, 0x1a, 0x19, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x49, 0x1a,
	0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x4a, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x4b, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x4c, 0x1a, 0x14, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x4d, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x4e, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x11,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x10, 0x4f, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10,
	0x51, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x52,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43,
	0x45, 0x10, 0x53, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x54, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x55, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x56,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x57, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x11,
	0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x58, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x59, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x5a, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x5b, 0x1a,
	0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x5c, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x5d, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x4e, 0x41, 0x49, 0x52, 0x45, 0x10, 0x5e, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x16,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x5f, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x60, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x10, 0x61, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x62, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x55, 0x44, 0x59, 0x10, 0x63, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x52,
	0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x64, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x65, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x66, 0x1a, 0x14, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x67, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x10, 0x68, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08,
	0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x69, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x6a, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x53,
	0x4c, 0x4f, 0x54, 0x10, 0x6b, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0x6c, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12,
	0x33, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6d, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x6e, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0c, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6f, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x70,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x71, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0e,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x72,
	0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x73, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0b, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x74, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21,
	0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x75, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x76,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x31, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x77, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe8, 0x02, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd9, 0x02,
	0x0a, 0x19, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf7, 0x03, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x74, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x05, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0d, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f,
	0x4f, 0x4e, 0x5f, 0x46, 0x48, 0x49, 0x52, 0x10, 0x02, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0d, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x2d, 0x6f, 0x6e, 0x2d, 0x46, 0x48, 0x49, 0x52, 0x12, 0x14,
	0x0a, 0x04, 0x4e, 0x54, 0x4c, 0x4d, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x4e, 0x54, 0x4c, 0x4d, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x04, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x08,
	0x4b, 0x45, 0x52, 0x42, 0x45, 0x52, 0x4f, 0x53, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x4b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x53, 0x10, 0x06, 0x1a, 0x12, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66,
	0x75, 0x6c, 0x2d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x47,
	0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45,
	0x52, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x05, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54,
	0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45,
	0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x41,
	0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x42, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x50,
	0x10, 0x09, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xd4,
	0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x47, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42,
	0x4f, 0x56, 0x45, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x3a,
	0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x92,
	0x03, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x08, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x12, 0x58, 0x50, 0x61, 0x74, 0x68, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x58, 0x50, 0x61, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x54, 0x49, 0x43, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x41, 0x52, 0x42, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x78, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x4e, 0x41, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4e, 0x41, 0x10, 0x03, 0x3a, 0x36, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x49, 0x53, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x3a,
	0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41,
	0x58, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x45, 0x4c, 0x45, 0x43, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x3a, 0x40,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0xf2, 0x02, 0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x54,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44,
	0x52, 0x41, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x49, 0x4c, 0x5f, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x06, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe4,
	0x03, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x4d, 0x44, 0x4e, 0x10, 0x08, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x53,
	0x41, 0x54, 0x49, 0x53, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x03,
	0x0a, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x04, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x86, 0x03, 0x0a, 0x1b, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x3a, 0x42, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe6, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x3a, 0x3c, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x3a, 0x39, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x74, 0x61, 0x67, 0x22, 0x96, 0x03, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49, 0x4f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x44, 0x59,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52,
	0x55, 0x47, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x07, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0xe6, 0x02, 0x0a, 0x17, 0x46, 0x48, 0x49, 0x52, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x39, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x18, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e,
	0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0x3e, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcb, 0x02,
	0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x3a, 0x3c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x0e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4e, 0x54, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x10, 0x02, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0xdc, 0x02, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x3a,
	0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa2,
	0x03, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x07, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x1c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x74, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x3a, 0x43,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x02, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x03, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xa9, 0x03, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49,
	0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x08, 0x3a, 0x3c,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x03, 0x0a,
	0x16, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x08, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x3a, 0x34, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x8d, 0x09, 0x0a, 0x1b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x06, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x0d, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x04, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x2e, 0x0a,
	0x12, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x07, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49,
	0x45, 0x53, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x0e, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x53, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x56, 0x45, 0x52, 0x59, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x19, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4e, 0x44, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x4f, 0x4b,
	0x55, 0x50, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x1e, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54,
	0x41, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x54, 0x41, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x50, 0x55,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41,
	0x54, 0x45, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x50, 0x55,
	0x4c, 0x41, 0x54, 0x45, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x25, 0x12,
	0x11, 0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45,
	0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x27, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x2b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x2c, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x2d, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x42, 0x53, 0x45,
	0x54, 0x10, 0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x53, 0x55, 0x4d, 0x45, 0x53, 0x10,
	0x30, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x31, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x32, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x33, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x35, 0x3a, 0x43, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xb1, 0x04, 0x0a, 0x24, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x46,
	0x48, 0x49, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0b, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x14, 0x46, 0x48, 0x49, 0x52, 0x5f, 0x53, 0x44, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x14, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x53, 0x44, 0x43, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x16, 0x46, 0x48, 0x49, 0x52, 0x5f, 0x53, 0x44,
	0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10,
	0x03, 0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x53, 0x44,
	0x43, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x36, 0x0a, 0x15, 0x46, 0x48, 0x49, 0x52, 0x5f, 0x53, 0x44, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x15, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x53, 0x44, 0x43, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x3a, 0x4d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x1f, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x46, 0x48, 0x49, 0x52, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x46, 0x48, 0x49,
	0x52, 0x2d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x46, 0x48, 0x49, 0x52,
	0x5f, 0x53, 0x44, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x52, 0x10,
	0x02, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x53, 0x44,
	0x43, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x3a, 0x48, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x2d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x54, 0x48, 0x10, 0x04, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xdc, 0x02, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x02,
	0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2d,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22,
	0xc2, 0x03, 0x0a, 0x1a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x66,
	0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x9f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x09, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2d, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x02, 0x0a, 0x10, 0x55, 0x44, 0x49, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x44, 0x49, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x46, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x06, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x64, 0x69, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x16, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x4f, 0x54, 0x48, 0x10, 0x04, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x45, 0x53, 0x10, 0x08, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x55, 0x10, 0x01, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x0e, 0x0a, 0x01, 0x4c, 0x10, 0x02, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4c, 0x12, 0x0e, 0x0a, 0x01, 0x4d, 0x10, 0x03, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4d, 0x12, 0x0e, 0x0a, 0x01, 0x4e, 0x10, 0x04, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10, 0x05, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x56, 0x10, 0x06, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x56, 0x3a, 0x49, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xfc, 0x02, 0x0a, 0x26, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x6f, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x3a, 0x49, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x64, 0x6f, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xc4, 0x03, 0x0a, 0x2c, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x63, 0x63, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x56,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4c,
	0x44, 0x43, 0x48, 0x42, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x4c,
	0x4f, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x52, 0x45,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x3a, 0x50, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x64, 0x6f, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x12, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x42, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x02, 0x0a,
	0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0xc8, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x3a, 0x3a,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x79, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x79, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x3a, 0x39, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x79, 0x65,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x6b, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_stu3_codes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_stu3_codes_proto_rawDescData = file_proto_google_fhir_proto_stu3_codes_proto_rawDesc
)

func file_proto_google_fhir_proto_stu3_codes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_stu3_codes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_stu3_codes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_stu3_codes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_stu3_codes_proto_rawDescData
}

var file_proto_google_fhir_proto_stu3_codes_proto_enumTypes = make([]protoimpl.EnumInfo, 298)
var file_proto_google_fhir_proto_stu3_codes_proto_msgTypes = make([]protoimpl.MessageInfo, 299)
var file_proto_google_fhir_proto_stu3_codes_proto_goTypes = []interface{}{
	(AbstractTypeCode_Value)(0),                                 // 0: google.fhir.stu3.proto.AbstractTypeCode.Value
	(AggregationModeCode_Value)(0),                              // 1: google.fhir.stu3.proto.AggregationModeCode.Value
	(BindingStrengthCode_Value)(0),                              // 2: google.fhir.stu3.proto.BindingStrengthCode.Value
	(ConstraintSeverityCode_Value)(0),                           // 3: google.fhir.stu3.proto.ConstraintSeverityCode.Value
	(SlicingRulesCode_Value)(0),                                 // 4: google.fhir.stu3.proto.SlicingRulesCode.Value
	(DiscriminatorTypeCode_Value)(0),                            // 5: google.fhir.stu3.proto.DiscriminatorTypeCode.Value
	(PropertyRepresentationCode_Value)(0),                       // 6: google.fhir.stu3.proto.PropertyRepresentationCode.Value
	(ReferenceVersionRulesCode_Value)(0),                        // 7: google.fhir.stu3.proto.ReferenceVersionRulesCode.Value
	(AccountStatusCode_Value)(0),                                // 8: google.fhir.stu3.proto.AccountStatusCode.Value
	(ActionCardinalityBehaviorCode_Value)(0),                    // 9: google.fhir.stu3.proto.ActionCardinalityBehaviorCode.Value
	(ActionConditionKindCode_Value)(0),                          // 10: google.fhir.stu3.proto.ActionConditionKindCode.Value
	(ActionGroupingBehaviorCode_Value)(0),                       // 11: google.fhir.stu3.proto.ActionGroupingBehaviorCode.Value
	(ActionListCode_Value)(0),                                   // 12: google.fhir.stu3.proto.ActionListCode.Value
	(ActionParticipantTypeCode_Value)(0),                        // 13: google.fhir.stu3.proto.ActionParticipantTypeCode.Value
	(ActionPrecheckBehaviorCode_Value)(0),                       // 14: google.fhir.stu3.proto.ActionPrecheckBehaviorCode.Value
	(ActionRelationshipTypeCode_Value)(0),                       // 15: google.fhir.stu3.proto.ActionRelationshipTypeCode.Value
	(ActionRequiredBehaviorCode_Value)(0),                       // 16: google.fhir.stu3.proto.ActionRequiredBehaviorCode.Value
	(ActionSelectionBehaviorCode_Value)(0),                      // 17: google.fhir.stu3.proto.ActionSelectionBehaviorCode.Value
	(ActionTypeCode_Value)(0),                                   // 18: google.fhir.stu3.proto.ActionTypeCode.Value
	(ActivityDefinitionCategoryCode_Value)(0),                   // 19: google.fhir.stu3.proto.ActivityDefinitionCategoryCode.Value
	(AdministrativeGenderCode_Value)(0),                         // 20: google.fhir.stu3.proto.AdministrativeGenderCode.Value
	(AdverseEventCategoryCode_Value)(0),                         // 21: google.fhir.stu3.proto.AdverseEventCategoryCode.Value
	(AdverseEventCausalityAssessmentCode_Value)(0),              // 22: google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode.Value
	(AdverseEventCausalityCode_Value)(0),                        // 23: google.fhir.stu3.proto.AdverseEventCausalityCode.Value
	(AdverseEventCausalityMethodCode_Value)(0),                  // 24: google.fhir.stu3.proto.AdverseEventCausalityMethodCode.Value
	(AdverseEventCausalityResultCode_Value)(0),                  // 25: google.fhir.stu3.proto.AdverseEventCausalityResultCode.Value
	(AdverseEventOutcomeCode_Value)(0),                          // 26: google.fhir.stu3.proto.AdverseEventOutcomeCode.Value
	(AdverseEventSeriousnessCode_Value)(0),                      // 27: google.fhir.stu3.proto.AdverseEventSeriousnessCode.Value
	(AllergyIntoleranceSubstanceExposureRiskCode_Value)(0),      // 28: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode.Value
	(AllergyIntoleranceClinicalStatusCode_Value)(0),             // 29: google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode.Value
	(AllergyIntoleranceCategoryCode_Value)(0),                   // 30: google.fhir.stu3.proto.AllergyIntoleranceCategoryCode.Value
	(AllergyIntoleranceCriticalityCode_Value)(0),                // 31: google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode.Value
	(AllergyIntoleranceTypeCode_Value)(0),                       // 32: google.fhir.stu3.proto.AllergyIntoleranceTypeCode.Value
	(AllergyIntoleranceVerificationStatusCode_Value)(0),         // 33: google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode.Value
	(GenderStatusCode_Value)(0),                                 // 34: google.fhir.stu3.proto.GenderStatusCode.Value
	(AppointmentStatusCode_Value)(0),                            // 35: google.fhir.stu3.proto.AppointmentStatusCode.Value
	(AssertionDirectionTypeCode_Value)(0),                       // 36: google.fhir.stu3.proto.AssertionDirectionTypeCode.Value
	(AssertionOperatorTypeCode_Value)(0),                        // 37: google.fhir.stu3.proto.AssertionOperatorTypeCode.Value
	(AssertionResponseTypesCode_Value)(0),                       // 38: google.fhir.stu3.proto.AssertionResponseTypesCode.Value
	(AuditEventActionCode_Value)(0),                             // 39: google.fhir.stu3.proto.AuditEventActionCode.Value
	(AuditEventOutcomeCode_Value)(0),                            // 40: google.fhir.stu3.proto.AuditEventOutcomeCode.Value
	(BasicResourceTypesCode_Value)(0),                           // 41: google.fhir.stu3.proto.BasicResourceTypesCode.Value
	(BundleTypeCode_Value)(0),                                   // 42: google.fhir.stu3.proto.BundleTypeCode.Value
	(CapabilityStatementKindCode_Value)(0),                      // 43: google.fhir.stu3.proto.CapabilityStatementKindCode.Value
	(CarePlanActivityCategoryCode_Value)(0),                     // 44: google.fhir.stu3.proto.CarePlanActivityCategoryCode.Value
	(CarePlanActivityStatusCode_Value)(0),                       // 45: google.fhir.stu3.proto.CarePlanActivityStatusCode.Value
	(CarePlanIntentCode_Value)(0),                               // 46: google.fhir.stu3.proto.CarePlanIntentCode.Value
	(CarePlanStatusCode_Value)(0),                               // 47: google.fhir.stu3.proto.CarePlanStatusCode.Value
	(CareTeamCategoryCode_Value)(0),                             // 48: google.fhir.stu3.proto.CareTeamCategoryCode.Value
	(CareTeamStatusCode_Value)(0),                               // 49: google.fhir.stu3.proto.CareTeamStatusCode.Value
	(ChargeItemStatusCode_Value)(0),                             // 50: google.fhir.stu3.proto.ChargeItemStatusCode.Value
	(ChoiceListOrientationCode_Value)(0),                        // 51: google.fhir.stu3.proto.ChoiceListOrientationCode.Value
	(UseCode_Value)(0),                                          // 52: google.fhir.stu3.proto.UseCode.Value
	(ClassificationOrContextCode_Value)(0),                      // 53: google.fhir.stu3.proto.ClassificationOrContextCode.Value
	(ClinicalImpressionStatusCode_Value)(0),                     // 54: google.fhir.stu3.proto.ClinicalImpressionStatusCode.Value
	(CodeSystemContentModeCode_Value)(0),                        // 55: google.fhir.stu3.proto.CodeSystemContentModeCode.Value
	(CodeSystemHierarchyMeaningCode_Value)(0),                   // 56: google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode.Value
	(CommonTagsCode_Value)(0),                                   // 57: google.fhir.stu3.proto.CommonTagsCode.Value
	(CommunicationCategoryCode_Value)(0),                        // 58: google.fhir.stu3.proto.CommunicationCategoryCode.Value
	(CommunicationNotDoneReasonCode_Value)(0),                   // 59: google.fhir.stu3.proto.CommunicationNotDoneReasonCode.Value
	(CompartmentTypeCode_Value)(0),                              // 60: google.fhir.stu3.proto.CompartmentTypeCode.Value
	(CompositeMeasureScoringCode_Value)(0),                      // 61: google.fhir.stu3.proto.CompositeMeasureScoringCode.Value
	(CompositionAttestationModeCode_Value)(0),                   // 62: google.fhir.stu3.proto.CompositionAttestationModeCode.Value
	(CompositionStatusCode_Value)(0),                            // 63: google.fhir.stu3.proto.CompositionStatusCode.Value
	(ConceptMapEquivalenceCode_Value)(0),                        // 64: google.fhir.stu3.proto.ConceptMapEquivalenceCode.Value
	(ConceptMapGroupUnmappedModeCode_Value)(0),                  // 65: google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode.Value
	(PropertyTypeCode_Value)(0),                                 // 66: google.fhir.stu3.proto.PropertyTypeCode.Value
	(ConditionalDeleteStatusCode_Value)(0),                      // 67: google.fhir.stu3.proto.ConditionalDeleteStatusCode.Value
	(ConditionalReadStatusCode_Value)(0),                        // 68: google.fhir.stu3.proto.ConditionalReadStatusCode.Value
	(ConditionCategoryCodesCode_Value)(0),                       // 69: google.fhir.stu3.proto.ConditionCategoryCodesCode.Value
	(ConditionClinicalStatusCodesCode_Value)(0),                 // 70: google.fhir.stu3.proto.ConditionClinicalStatusCodesCode.Value
	(ConditionStateCode_Value)(0),                               // 71: google.fhir.stu3.proto.ConditionStateCode.Value
	(ConditionVerificationStatusCode_Value)(0),                  // 72: google.fhir.stu3.proto.ConditionVerificationStatusCode.Value
	(ConformanceExpectationCode_Value)(0),                       // 73: google.fhir.stu3.proto.ConformanceExpectationCode.Value
	(ConsentDataMeaningCode_Value)(0),                           // 74: google.fhir.stu3.proto.ConsentDataMeaningCode.Value
	(ConsentExceptTypeCode_Value)(0),                            // 75: google.fhir.stu3.proto.ConsentExceptTypeCode.Value
	(ConsentStateCode_Value)(0),                                 // 76: google.fhir.stu3.proto.ConsentStateCode.Value
	(ContactEntityTypeCode_Value)(0),                            // 77: google.fhir.stu3.proto.ContactEntityTypeCode.Value
	(ContentTypeCode_Value)(0),                                  // 78: google.fhir.stu3.proto.ContentTypeCode.Value
	(ContractResourceStatusCode_Value)(0),                       // 79: google.fhir.stu3.proto.ContractResourceStatusCode.Value
	(ContributorTypeCode_Value)(0),                              // 80: google.fhir.stu3.proto.ContributorTypeCode.Value
	(CopyNumberEventCode_Value)(0),                              // 81: google.fhir.stu3.proto.CopyNumberEventCode.Value
	(DataAbsentReasonCode_Value)(0),                             // 82: google.fhir.stu3.proto.DataAbsentReasonCode.Value
	(DataElementStringencyCode_Value)(0),                        // 83: google.fhir.stu3.proto.DataElementStringencyCode.Value
	(TriggerTypeCode_Value)(0),                                  // 84: google.fhir.stu3.proto.TriggerTypeCode.Value
	(DataTypeCode_Value)(0),                                     // 85: google.fhir.stu3.proto.DataTypeCode.Value
	(FHIRAllTypesCode_Value)(0),                                 // 86: google.fhir.stu3.proto.FHIRAllTypesCode.Value
	(FHIRDefinedTypeCode_Value)(0),                              // 87: google.fhir.stu3.proto.FHIRDefinedTypeCode.Value
	(DefinitionStatusCode_Value)(0),                             // 88: google.fhir.stu3.proto.DefinitionStatusCode.Value
	(DefinitionTopicCode_Value)(0),                              // 89: google.fhir.stu3.proto.DefinitionTopicCode.Value
	(DetectedIssueSeverityCode_Value)(0),                        // 90: google.fhir.stu3.proto.DetectedIssueSeverityCode.Value
	(DeviceUseStatementStatusCode_Value)(0),                     // 91: google.fhir.stu3.proto.DeviceUseStatementStatusCode.Value
	(FHIRDeviceStatusCode_Value)(0),                             // 92: google.fhir.stu3.proto.FHIRDeviceStatusCode.Value
	(DiagnosisRoleCode_Value)(0),                                // 93: google.fhir.stu3.proto.DiagnosisRoleCode.Value
	(DiagnosticReportStatusCode_Value)(0),                       // 94: google.fhir.stu3.proto.DiagnosticReportStatusCode.Value
	(DigitalMediaTypeCode_Value)(0),                             // 95: google.fhir.stu3.proto.DigitalMediaTypeCode.Value
	(DocumentModeCode_Value)(0),                                 // 96: google.fhir.stu3.proto.DocumentModeCode.Value
	(DocumentReferenceStatusCode_Value)(0),                      // 97: google.fhir.stu3.proto.DocumentReferenceStatusCode.Value
	(DocumentRelationshipTypeCode_Value)(0),                     // 98: google.fhir.stu3.proto.DocumentRelationshipTypeCode.Value
	(AdmitSourceCode_Value)(0),                                  // 99: google.fhir.stu3.proto.AdmitSourceCode.Value
	(DietCode_Value)(0),                                         // 100: google.fhir.stu3.proto.DietCode.Value
	(DischargeDispositionCode_Value)(0),                         // 101: google.fhir.stu3.proto.DischargeDispositionCode.Value
	(EncounterLocationStatusCode_Value)(0),                      // 102: google.fhir.stu3.proto.EncounterLocationStatusCode.Value
	(SpecialArrangementsCode_Value)(0),                          // 103: google.fhir.stu3.proto.SpecialArrangementsCode.Value
	(EncounterStatusCode_Value)(0),                              // 104: google.fhir.stu3.proto.EncounterStatusCode.Value
	(EncounterTypeCode_Value)(0),                                // 105: google.fhir.stu3.proto.EncounterTypeCode.Value
	(EndpointStatusCode_Value)(0),                               // 106: google.fhir.stu3.proto.EndpointStatusCode.Value
	(EntityNamePartQualifierCode_Value)(0),                      // 107: google.fhir.stu3.proto.EntityNamePartQualifierCode.Value
	(EnteralFormulaAdditiveTypeCodeCode_Value)(0),               // 108: google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode.Value
	(EpisodeOfCareStatusCode_Value)(0),                          // 109: google.fhir.stu3.proto.EpisodeOfCareStatusCode.Value
	(EpisodeOfCareTypeCode_Value)(0),                            // 110: google.fhir.stu3.proto.EpisodeOfCareTypeCode.Value
	(EventCapabilityModeCode_Value)(0),                          // 111: google.fhir.stu3.proto.EventCapabilityModeCode.Value
	(EventStatusCode_Value)(0),                                  // 112: google.fhir.stu3.proto.EventStatusCode.Value
	(ClaimPayeeResourceTypeCode_Value)(0),                       // 113: google.fhir.stu3.proto.ClaimPayeeResourceTypeCode.Value
	(ExplanationOfBenefitStatusCode_Value)(0),                   // 114: google.fhir.stu3.proto.ExplanationOfBenefitStatusCode.Value
	(ExtensionContextCode_Value)(0),                             // 115: google.fhir.stu3.proto.ExtensionContextCode.Value
	(FilterOperatorCode_Value)(0),                               // 116: google.fhir.stu3.proto.FilterOperatorCode.Value
	(FlagCategoryCode_Value)(0),                                 // 117: google.fhir.stu3.proto.FlagCategoryCode.Value
	(FlagPriorityCodesCode_Value)(0),                            // 118: google.fhir.stu3.proto.FlagPriorityCodesCode.Value
	(FlagStatusCode_Value)(0),                                   // 119: google.fhir.stu3.proto.FlagStatusCode.Value
	(FinancialResourceStatusCode_Value)(0),                      // 120: google.fhir.stu3.proto.FinancialResourceStatusCode.Value
	(GoalAcceptanceStatusCode_Value)(0),                         // 121: google.fhir.stu3.proto.GoalAcceptanceStatusCode.Value
	(GoalCategoryCode_Value)(0),                                 // 122: google.fhir.stu3.proto.GoalCategoryCode.Value
	(GoalPriorityCode_Value)(0),                                 // 123: google.fhir.stu3.proto.GoalPriorityCode.Value
	(GoalRelationshipTypeCode_Value)(0),                         // 124: google.fhir.stu3.proto.GoalRelationshipTypeCode.Value
	(GoalStatusCode_Value)(0),                                   // 125: google.fhir.stu3.proto.GoalStatusCode.Value
	(GoalStatusReasonCode_Value)(0),                             // 126: google.fhir.stu3.proto.GoalStatusReasonCode.Value
	(GraphCompartmentRuleCode_Value)(0),                         // 127: google.fhir.stu3.proto.GraphCompartmentRuleCode.Value
	(GroupTypeCode_Value)(0),                                    // 128: google.fhir.stu3.proto.GroupTypeCode.Value
	(GuidanceResponseStatusCode_Value)(0),                       // 129: google.fhir.stu3.proto.GuidanceResponseStatusCode.Value
	(GuideDependencyTypeCode_Value)(0),                          // 130: google.fhir.stu3.proto.GuideDependencyTypeCode.Value
	(GuidePageKindCode_Value)(0),                                // 131: google.fhir.stu3.proto.GuidePageKindCode.Value
	(FamilyHistoryNotDoneReasonCode_Value)(0),                   // 132: google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode.Value
	(FamilyHistoryStatusCode_Value)(0),                          // 133: google.fhir.stu3.proto.FamilyHistoryStatusCode.Value
	(HL7WorkgroupCode_Value)(0),                                 // 134: google.fhir.stu3.proto.HL7WorkgroupCode.Value
	(TestScriptRequestMethodCodeCode_Value)(0),                  // 135: google.fhir.stu3.proto.TestScriptRequestMethodCodeCode.Value
	(HTTPVerbCode_Value)(0),                                     // 136: google.fhir.stu3.proto.HTTPVerbCode.Value
	(IdentityAssuranceLevelCode_Value)(0),                       // 137: google.fhir.stu3.proto.IdentityAssuranceLevelCode.Value
	(ImmunizationOriginCodesCode_Value)(0),                      // 138: google.fhir.stu3.proto.ImmunizationOriginCodesCode.Value
	(ImmunizationRecommendationDateCriterionCodesCode_Value)(0), // 139: google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode.Value
	(ImmunizationRecommendationStatusCodesCode_Value)(0),        // 140: google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode.Value
	(ImmunizationStatusCodesCode_Value)(0),                      // 141: google.fhir.stu3.proto.ImmunizationStatusCodesCode.Value
	(ImplantStatusCode_Value)(0),                                // 142: google.fhir.stu3.proto.ImplantStatusCode.Value
	(InstanceAvailabilityCode_Value)(0),                         // 143: google.fhir.stu3.proto.InstanceAvailabilityCode.Value
	(IssueSeverityCode_Value)(0),                                // 144: google.fhir.stu3.proto.IssueSeverityCode.Value
	(IssueTypeCode_Value)(0),                                    // 145: google.fhir.stu3.proto.IssueTypeCode.Value
	(QuestionnaireItemTypeCode_Value)(0),                        // 146: google.fhir.stu3.proto.QuestionnaireItemTypeCode.Value
	(LibraryTypeCode_Value)(0),                                  // 147: google.fhir.stu3.proto.LibraryTypeCode.Value
	(LinkageTypeCode_Value)(0),                                  // 148: google.fhir.stu3.proto.LinkageTypeCode.Value
	(LinkTypeCode_Value)(0),                                     // 149: google.fhir.stu3.proto.LinkTypeCode.Value
	(ListEmptyReasonsCode_Value)(0),                             // 150: google.fhir.stu3.proto.ListEmptyReasonsCode.Value
	(ExampleUseCodesforListCode_Value)(0),                       // 151: google.fhir.stu3.proto.ExampleUseCodesforListCode.Value
	(ListModeCode_Value)(0),                                     // 152: google.fhir.stu3.proto.ListModeCode.Value
	(ListOrderCodesCode_Value)(0),                               // 153: google.fhir.stu3.proto.ListOrderCodesCode.Value
	(ListStatusCode_Value)(0),                                   // 154: google.fhir.stu3.proto.ListStatusCode.Value
	(LocationModeCode_Value)(0),                                 // 155: google.fhir.stu3.proto.LocationModeCode.Value
	(LocationTypeCode_Value)(0),                                 // 156: google.fhir.stu3.proto.LocationTypeCode.Value
	(LocationStatusCode_Value)(0),                               // 157: google.fhir.stu3.proto.LocationStatusCode.Value
	(ProbabilityDistributionTypeCode_Value)(0),                  // 158: google.fhir.stu3.proto.ProbabilityDistributionTypeCode.Value
	(StructureMapContextTypeCode_Value)(0),                      // 159: google.fhir.stu3.proto.StructureMapContextTypeCode.Value
	(StructureMapGroupTypeModeCode_Value)(0),                    // 160: google.fhir.stu3.proto.StructureMapGroupTypeModeCode.Value
	(StructureMapInputModeCode_Value)(0),                        // 161: google.fhir.stu3.proto.StructureMapInputModeCode.Value
	(StructureMapModelModeCode_Value)(0),                        // 162: google.fhir.stu3.proto.StructureMapModelModeCode.Value
	(StructureMapSourceListModeCode_Value)(0),                   // 163: google.fhir.stu3.proto.StructureMapSourceListModeCode.Value
	(StructureMapTargetListModeCode_Value)(0),                   // 164: google.fhir.stu3.proto.StructureMapTargetListModeCode.Value
	(StructureMapTransformCode_Value)(0),                        // 165: google.fhir.stu3.proto.StructureMapTransformCode.Value
	(MatchGradeCode_Value)(0),                                   // 166: google.fhir.stu3.proto.MatchGradeCode.Value
	(MeasureDataUsageCode_Value)(0),                             // 167: google.fhir.stu3.proto.MeasureDataUsageCode.Value
	(MeasmntPrincipleCode_Value)(0),                             // 168: google.fhir.stu3.proto.MeasmntPrincipleCode.Value
	(MeasurePopulationTypeCode_Value)(0),                        // 169: google.fhir.stu3.proto.MeasurePopulationTypeCode.Value
	(MeasureReportStatusCode_Value)(0),                          // 170: google.fhir.stu3.proto.MeasureReportStatusCode.Value
	(MeasureReportTypeCode_Value)(0),                            // 171: google.fhir.stu3.proto.MeasureReportTypeCode.Value
	(MeasureScoringCode_Value)(0),                               // 172: google.fhir.stu3.proto.MeasureScoringCode.Value
	(MeasureTypeCode_Value)(0),                                  // 173: google.fhir.stu3.proto.MeasureTypeCode.Value
	(MedicationAdministrationCategoryCode_Value)(0),             // 174: google.fhir.stu3.proto.MedicationAdministrationCategoryCode.Value
	(MedicationAdministrationStatusCode_Value)(0),               // 175: google.fhir.stu3.proto.MedicationAdministrationStatusCode.Value
	(MedicationDispenseCategoryCode_Value)(0),                   // 176: google.fhir.stu3.proto.MedicationDispenseCategoryCode.Value
	(MedicationDispenseStatusCode_Value)(0),                     // 177: google.fhir.stu3.proto.MedicationDispenseStatusCode.Value
	(MedicationContainerCode_Value)(0),                          // 178: google.fhir.stu3.proto.MedicationContainerCode.Value
	(MedicationRequestCategoryCode_Value)(0),                    // 179: google.fhir.stu3.proto.MedicationRequestCategoryCode.Value
	(MedicationRequestIntentCode_Value)(0),                      // 180: google.fhir.stu3.proto.MedicationRequestIntentCode.Value
	(MedicationRequestPriorityCode_Value)(0),                    // 181: google.fhir.stu3.proto.MedicationRequestPriorityCode.Value
	(MedicationRequestStatusCode_Value)(0),                      // 182: google.fhir.stu3.proto.MedicationRequestStatusCode.Value
	(MedicationStatementCategoryCode_Value)(0),                  // 183: google.fhir.stu3.proto.MedicationStatementCategoryCode.Value
	(MedicationStatementStatusCode_Value)(0),                    // 184: google.fhir.stu3.proto.MedicationStatementStatusCode.Value
	(MedicationStatementTakenCode_Value)(0),                     // 185: google.fhir.stu3.proto.MedicationStatementTakenCode.Value
	(MedicationStatusCode_Value)(0),                             // 186: google.fhir.stu3.proto.MedicationStatusCode.Value
	(MessageEventCode_Value)(0),                                 // 187: google.fhir.stu3.proto.MessageEventCode.Value
	(MessageHeaderResponseRequestCode_Value)(0),                 // 188: google.fhir.stu3.proto.MessageHeaderResponseRequestCode.Value
	(ExampleMessageReasonCodesCode_Value)(0),                    // 189: google.fhir.stu3.proto.ExampleMessageReasonCodesCode.Value
	(MessageSignificanceCategoryCode_Value)(0),                  // 190: google.fhir.stu3.proto.MessageSignificanceCategoryCode.Value
	(MessageTransportCode_Value)(0),                             // 191: google.fhir.stu3.proto.MessageTransportCode.Value
	(DeviceMetricCalibrationStateCode_Value)(0),                 // 192: google.fhir.stu3.proto.DeviceMetricCalibrationStateCode.Value
	(DeviceMetricCalibrationTypeCode_Value)(0),                  // 193: google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode.Value
	(DeviceMetricCategoryCode_Value)(0),                         // 194: google.fhir.stu3.proto.DeviceMetricCategoryCode.Value
	(DeviceMetricColorCode_Value)(0),                            // 195: google.fhir.stu3.proto.DeviceMetricColorCode.Value
	(DeviceMetricOperationalStatusCode_Value)(0),                // 196: google.fhir.stu3.proto.DeviceMetricOperationalStatusCode.Value
	(HumanNameAssemblyOrderCode_Value)(0),                       // 197: google.fhir.stu3.proto.HumanNameAssemblyOrderCode.Value
	(NameRepresentationUseCode_Value)(0),                        // 198: google.fhir.stu3.proto.NameRepresentationUseCode.Value
	(NamingSystemIdentifierTypeCode_Value)(0),                   // 199: google.fhir.stu3.proto.NamingSystemIdentifierTypeCode.Value
	(NamingSystemTypeCode_Value)(0),                             // 200: google.fhir.stu3.proto.NamingSystemTypeCode.Value
	(AuditEventAgentNetworkTypeCode_Value)(0),                   // 201: google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode.Value
	(NoteTypeCode_Value)(0),                                     // 202: google.fhir.stu3.proto.NoteTypeCode.Value
	(NullFlavorCode_Value)(0),                                   // 203: google.fhir.stu3.proto.NullFlavorCode.Value
	(NutritionOrderStatusCode_Value)(0),                         // 204: google.fhir.stu3.proto.NutritionOrderStatusCode.Value
	(ObservationCategoryCodesCode_Value)(0),                     // 205: google.fhir.stu3.proto.ObservationCategoryCodesCode.Value
	(ObservationRelationshipTypeCode_Value)(0),                  // 206: google.fhir.stu3.proto.ObservationRelationshipTypeCode.Value
	(StatisticsCodeCode_Value)(0),                               // 207: google.fhir.stu3.proto.StatisticsCodeCode.Value
	(ObservationStatusCode_Value)(0),                            // 208: google.fhir.stu3.proto.ObservationStatusCode.Value
	(DeviceComponentOperationalStatusCode_Value)(0),             // 209: google.fhir.stu3.proto.DeviceComponentOperationalStatusCode.Value
	(OperationKindCode_Value)(0),                                // 210: google.fhir.stu3.proto.OperationKindCode.Value
	(OperationOutcomeCodesCode_Value)(0),                        // 211: google.fhir.stu3.proto.OperationOutcomeCodesCode.Value
	(NarrativeStatusCode_Value)(0),                              // 212: google.fhir.stu3.proto.NarrativeStatusCode.Value
	(OperationParameterUseCode_Value)(0),                        // 213: google.fhir.stu3.proto.OperationParameterUseCode.Value
	(OrganizationTypeCode_Value)(0),                             // 214: google.fhir.stu3.proto.OrganizationTypeCode.Value
	(DeviceComponentParameterGroupCode_Value)(0),                // 215: google.fhir.stu3.proto.DeviceComponentParameterGroupCode.Value
	(ParticipantRequiredCode_Value)(0),                          // 216: google.fhir.stu3.proto.ParticipantRequiredCode.Value
	(ParticipationStatusCode_Value)(0),                          // 217: google.fhir.stu3.proto.ParticipationStatusCode.Value
	(PlanDefinitionTypeCode_Value)(0),                           // 218: google.fhir.stu3.proto.PlanDefinitionTypeCode.Value
	(PostalAddressUseTypeCode_Value)(0),                         // 219: google.fhir.stu3.proto.PostalAddressUseTypeCode.Value
	(PractitionerRoleCode_Value)(0),                             // 220: google.fhir.stu3.proto.PractitionerRoleCode.Value
	(PractitionerSpecialtyCode_Value)(0),                        // 221: google.fhir.stu3.proto.PractitionerSpecialtyCode.Value
	(ProcedureProgressStatusCodesCode_Value)(0),                 // 222: google.fhir.stu3.proto.ProcedureProgressStatusCodesCode.Value
	(ProvenanceEntityRoleCode_Value)(0),                         // 223: google.fhir.stu3.proto.ProvenanceEntityRoleCode.Value
	(PublicationStatusCode_Value)(0),                            // 224: google.fhir.stu3.proto.PublicationStatusCode.Value
	(QualityTypeCode_Value)(0),                                  // 225: google.fhir.stu3.proto.QualityTypeCode.Value
	(MaxOccursCode_Value)(0),                                    // 226: google.fhir.stu3.proto.MaxOccursCode.Value
	(QuestionnaireResponseStatusCode_Value)(0),                  // 227: google.fhir.stu3.proto.QuestionnaireResponseStatusCode.Value
	(QuestionnaireTextCategoriesCode_Value)(0),                  // 228: google.fhir.stu3.proto.QuestionnaireTextCategoriesCode.Value
	(QuestionnaireItemUIControlCodesCode_Value)(0),              // 229: google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode.Value
	(QuestionnaireItemUsageModeCode_Value)(0),                   // 230: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode.Value
	(AllergyIntoleranceCertaintyCode_Value)(0),                  // 231: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode.Value
	(AllergyIntoleranceSeverityCode_Value)(0),                   // 232: google.fhir.stu3.proto.AllergyIntoleranceSeverityCode.Value
	(ReasonMedicationGivenCodesCode_Value)(0),                   // 233: google.fhir.stu3.proto.ReasonMedicationGivenCodesCode.Value
	(ReferenceHandlingPolicyCode_Value)(0),                      // 234: google.fhir.stu3.proto.ReferenceHandlingPolicyCode.Value
	(RelatedArtifactTypeCode_Value)(0),                          // 235: google.fhir.stu3.proto.RelatedArtifactTypeCode.Value
	(ObservationReferenceRangeMeaningCodesCode_Value)(0),        // 236: google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode.Value
	(TestReportActionResultCode_Value)(0),                       // 237: google.fhir.stu3.proto.TestReportActionResultCode.Value
	(TestReportParticipantTypeCode_Value)(0),                    // 238: google.fhir.stu3.proto.TestReportParticipantTypeCode.Value
	(TestReportResultCode_Value)(0),                             // 239: google.fhir.stu3.proto.TestReportResultCode.Value
	(TestReportStatusCode_Value)(0),                             // 240: google.fhir.stu3.proto.TestReportStatusCode.Value
	(RepositoryTypeCode_Value)(0),                               // 241: google.fhir.stu3.proto.RepositoryTypeCode.Value
	(RequestIntentCode_Value)(0),                                // 242: google.fhir.stu3.proto.RequestIntentCode.Value
	(RequestPriorityCode_Value)(0),                              // 243: google.fhir.stu3.proto.RequestPriorityCode.Value
	(RequestStatusCode_Value)(0),                                // 244: google.fhir.stu3.proto.RequestStatusCode.Value
	(ResearchStudyStatusCode_Value)(0),                          // 245: google.fhir.stu3.proto.ResearchStudyStatusCode.Value
	(ResearchSubjectStatusCode_Value)(0),                        // 246: google.fhir.stu3.proto.ResearchSubjectStatusCode.Value
	(PayeeResourceTypeCode_Value)(0),                            // 247: google.fhir.stu3.proto.PayeeResourceTypeCode.Value
	(ResourceTypeCode_Value)(0),                                 // 248: google.fhir.stu3.proto.ResourceTypeCode.Value
	(ResourceValidationModeCode_Value)(0),                       // 249: google.fhir.stu3.proto.ResourceValidationModeCode.Value
	(ResponseTypeCode_Value)(0),                                 // 250: google.fhir.stu3.proto.ResponseTypeCode.Value
	(RestfulCapabilityModeCode_Value)(0),                        // 251: google.fhir.stu3.proto.RestfulCapabilityModeCode.Value
	(RestfulSecurityServiceCode_Value)(0),                       // 252: google.fhir.stu3.proto.RestfulSecurityServiceCode.Value
	(RiskProbabilityCode_Value)(0),                              // 253: google.fhir.stu3.proto.RiskProbabilityCode.Value
	(SearchComparatorCode_Value)(0),                             // 254: google.fhir.stu3.proto.SearchComparatorCode.Value
	(SearchEntryModeCode_Value)(0),                              // 255: google.fhir.stu3.proto.SearchEntryModeCode.Value
	(SearchModifierCodeCode_Value)(0),                           // 256: google.fhir.stu3.proto.SearchModifierCodeCode.Value
	(SearchParamTypeCode_Value)(0),                              // 257: google.fhir.stu3.proto.SearchParamTypeCode.Value
	(XPathUsageTypeCode_Value)(0),                               // 258: google.fhir.stu3.proto.XPathUsageTypeCode.Value
	(SequenceTypeCode_Value)(0),                                 // 259: google.fhir.stu3.proto.SequenceTypeCode.Value
	(ServiceProvisionConditionsCode_Value)(0),                   // 260: google.fhir.stu3.proto.ServiceProvisionConditionsCode.Value
	(ReferralMethodCode_Value)(0),                               // 261: google.fhir.stu3.proto.ReferralMethodCode.Value
	(SlotStatusCode_Value)(0),                                   // 262: google.fhir.stu3.proto.SlotStatusCode.Value
	(SpecialValuesCode_Value)(0),                                // 263: google.fhir.stu3.proto.SpecialValuesCode.Value
	(DeviceSpecificationSpecTypeCode_Value)(0),                  // 264: google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode.Value
	(SpecimenStatusCode_Value)(0),                               // 265: google.fhir.stu3.proto.SpecimenStatusCode.Value
	(StructureDefinitionKindCode_Value)(0),                      // 266: google.fhir.stu3.proto.StructureDefinitionKindCode.Value
	(SubscriptionChannelTypeCode_Value)(0),                      // 267: google.fhir.stu3.proto.SubscriptionChannelTypeCode.Value
	(SubscriptionStatusCode_Value)(0),                           // 268: google.fhir.stu3.proto.SubscriptionStatusCode.Value
	(SubscriptionTagCode_Value)(0),                              // 269: google.fhir.stu3.proto.SubscriptionTagCode.Value
	(SubstanceCategoryCodesCode_Value)(0),                       // 270: google.fhir.stu3.proto.SubstanceCategoryCodesCode.Value
	(FHIRSubstanceStatusCode_Value)(0),                          // 271: google.fhir.stu3.proto.FHIRSubstanceStatusCode.Value
	(SupplyDeliveryStatusCode_Value)(0),                         // 272: google.fhir.stu3.proto.SupplyDeliveryStatusCode.Value
	(SupplyItemTypeCode_Value)(0),                               // 273: google.fhir.stu3.proto.SupplyItemTypeCode.Value
	(SupplyTypeCode_Value)(0),                                   // 274: google.fhir.stu3.proto.SupplyTypeCode.Value
	(SupplyRequestReasonCode_Value)(0),                          // 275: google.fhir.stu3.proto.SupplyRequestReasonCode.Value
	(SupplyRequestStatusCode_Value)(0),                          // 276: google.fhir.stu3.proto.SupplyRequestStatusCode.Value
	(SystemRestfulInteractionCode_Value)(0),                     // 277: google.fhir.stu3.proto.SystemRestfulInteractionCode.Value
	(SystemVersionProcessingModeCode_Value)(0),                  // 278: google.fhir.stu3.proto.SystemVersionProcessingModeCode.Value
	(TaskPerformerTypeCode_Value)(0),                            // 279: google.fhir.stu3.proto.TaskPerformerTypeCode.Value
	(TemplateStatusCodeCode_Value)(0),                           // 280: google.fhir.stu3.proto.TemplateStatusCodeCode.Value
	(TaskStatusCode_Value)(0),                                   // 281: google.fhir.stu3.proto.TaskStatusCode.Value
	(TestScriptOperationCodeCode_Value)(0),                      // 282: google.fhir.stu3.proto.TestScriptOperationCodeCode.Value
	(TestScriptProfileDestinationTypeCode_Value)(0),             // 283: google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode.Value
	(TestScriptProfileOriginTypeCode_Value)(0),                  // 284: google.fhir.stu3.proto.TestScriptProfileOriginTypeCode.Value
	(TransactionModeCode_Value)(0),                              // 285: google.fhir.stu3.proto.TransactionModeCode.Value
	(TypeDerivationRuleCode_Value)(0),                           // 286: google.fhir.stu3.proto.TypeDerivationRuleCode.Value
	(TypeRestfulInteractionCode_Value)(0),                       // 287: google.fhir.stu3.proto.TypeRestfulInteractionCode.Value
	(UDIEntryTypeCode_Value)(0),                                 // 288: google.fhir.stu3.proto.UDIEntryTypeCode.Value
	(UnknownContentCodeCode_Value)(0),                           // 289: google.fhir.stu3.proto.UnknownContentCodeCode.Value
	(UsageContextTypeCode_Value)(0),                             // 290: google.fhir.stu3.proto.UsageContextTypeCode.Value
	(ConfidentialityClassificationCode_Value)(0),                // 291: google.fhir.stu3.proto.ConfidentialityClassificationCode.Value
	(VaccinationProtocolDoseStatuscodesCode_Value)(0),           // 292: google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode.Value
	(VaccinationProtocolDoseStatusReasoncodesCode_Value)(0),     // 293: google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode.Value
	(SequenceStatusCode_Value)(0),                               // 294: google.fhir.stu3.proto.sequenceStatusCode.Value
	(ResourceVersionPolicyCode_Value)(0),                        // 295: google.fhir.stu3.proto.ResourceVersionPolicyCode.Value
	(VisionBaseCode_Value)(0),                                   // 296: google.fhir.stu3.proto.VisionBaseCode.Value
	(VisionEyesCode_Value)(0),                                   // 297: google.fhir.stu3.proto.VisionEyesCode.Value
	(*AbstractTypeCode)(nil),                                    // 298: google.fhir.stu3.proto.AbstractTypeCode
	(*AggregationModeCode)(nil),                                 // 299: google.fhir.stu3.proto.AggregationModeCode
	(*BindingStrengthCode)(nil),                                 // 300: google.fhir.stu3.proto.BindingStrengthCode
	(*ConstraintSeverityCode)(nil),                              // 301: google.fhir.stu3.proto.ConstraintSeverityCode
	(*SlicingRulesCode)(nil),                                    // 302: google.fhir.stu3.proto.SlicingRulesCode
	(*DiscriminatorTypeCode)(nil),                               // 303: google.fhir.stu3.proto.DiscriminatorTypeCode
	(*PropertyRepresentationCode)(nil),                          // 304: google.fhir.stu3.proto.PropertyRepresentationCode
	(*ReferenceVersionRulesCode)(nil),                           // 305: google.fhir.stu3.proto.ReferenceVersionRulesCode
	(*AccountStatusCode)(nil),                                   // 306: google.fhir.stu3.proto.AccountStatusCode
	(*ActionCardinalityBehaviorCode)(nil),                       // 307: google.fhir.stu3.proto.ActionCardinalityBehaviorCode
	(*ActionConditionKindCode)(nil),                             // 308: google.fhir.stu3.proto.ActionConditionKindCode
	(*ActionGroupingBehaviorCode)(nil),                          // 309: google.fhir.stu3.proto.ActionGroupingBehaviorCode
	(*ActionListCode)(nil),                                      // 310: google.fhir.stu3.proto.ActionListCode
	(*ActionParticipantTypeCode)(nil),                           // 311: google.fhir.stu3.proto.ActionParticipantTypeCode
	(*ActionPrecheckBehaviorCode)(nil),                          // 312: google.fhir.stu3.proto.ActionPrecheckBehaviorCode
	(*ActionRelationshipTypeCode)(nil),                          // 313: google.fhir.stu3.proto.ActionRelationshipTypeCode
	(*ActionRequiredBehaviorCode)(nil),                          // 314: google.fhir.stu3.proto.ActionRequiredBehaviorCode
	(*ActionSelectionBehaviorCode)(nil),                         // 315: google.fhir.stu3.proto.ActionSelectionBehaviorCode
	(*ActionTypeCode)(nil),                                      // 316: google.fhir.stu3.proto.ActionTypeCode
	(*ActivityDefinitionCategoryCode)(nil),                      // 317: google.fhir.stu3.proto.ActivityDefinitionCategoryCode
	(*AdministrativeGenderCode)(nil),                            // 318: google.fhir.stu3.proto.AdministrativeGenderCode
	(*AdverseEventCategoryCode)(nil),                            // 319: google.fhir.stu3.proto.AdverseEventCategoryCode
	(*AdverseEventCausalityAssessmentCode)(nil),                 // 320: google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode
	(*AdverseEventCausalityCode)(nil),                           // 321: google.fhir.stu3.proto.AdverseEventCausalityCode
	(*AdverseEventCausalityMethodCode)(nil),                     // 322: google.fhir.stu3.proto.AdverseEventCausalityMethodCode
	(*AdverseEventCausalityResultCode)(nil),                     // 323: google.fhir.stu3.proto.AdverseEventCausalityResultCode
	(*AdverseEventOutcomeCode)(nil),                             // 324: google.fhir.stu3.proto.AdverseEventOutcomeCode
	(*AdverseEventSeriousnessCode)(nil),                         // 325: google.fhir.stu3.proto.AdverseEventSeriousnessCode
	(*AllergyIntoleranceSubstanceExposureRiskCode)(nil),         // 326: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode
	(*AllergyIntoleranceClinicalStatusCode)(nil),                // 327: google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode
	(*AllergyIntoleranceCategoryCode)(nil),                      // 328: google.fhir.stu3.proto.AllergyIntoleranceCategoryCode
	(*AllergyIntoleranceCriticalityCode)(nil),                   // 329: google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode
	(*AllergyIntoleranceTypeCode)(nil),                          // 330: google.fhir.stu3.proto.AllergyIntoleranceTypeCode
	(*AllergyIntoleranceVerificationStatusCode)(nil),            // 331: google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode
	(*GenderStatusCode)(nil),                                    // 332: google.fhir.stu3.proto.GenderStatusCode
	(*AppointmentStatusCode)(nil),                               // 333: google.fhir.stu3.proto.AppointmentStatusCode
	(*AssertionDirectionTypeCode)(nil),                          // 334: google.fhir.stu3.proto.AssertionDirectionTypeCode
	(*AssertionOperatorTypeCode)(nil),                           // 335: google.fhir.stu3.proto.AssertionOperatorTypeCode
	(*AssertionResponseTypesCode)(nil),                          // 336: google.fhir.stu3.proto.AssertionResponseTypesCode
	(*AuditEventActionCode)(nil),                                // 337: google.fhir.stu3.proto.AuditEventActionCode
	(*AuditEventOutcomeCode)(nil),                               // 338: google.fhir.stu3.proto.AuditEventOutcomeCode
	(*BasicResourceTypesCode)(nil),                              // 339: google.fhir.stu3.proto.BasicResourceTypesCode
	(*BundleTypeCode)(nil),                                      // 340: google.fhir.stu3.proto.BundleTypeCode
	(*CapabilityStatementKindCode)(nil),                         // 341: google.fhir.stu3.proto.CapabilityStatementKindCode
	(*CarePlanActivityCategoryCode)(nil),                        // 342: google.fhir.stu3.proto.CarePlanActivityCategoryCode
	(*CarePlanActivityStatusCode)(nil),                          // 343: google.fhir.stu3.proto.CarePlanActivityStatusCode
	(*CarePlanIntentCode)(nil),                                  // 344: google.fhir.stu3.proto.CarePlanIntentCode
	(*CarePlanStatusCode)(nil),                                  // 345: google.fhir.stu3.proto.CarePlanStatusCode
	(*CareTeamCategoryCode)(nil),                                // 346: google.fhir.stu3.proto.CareTeamCategoryCode
	(*CareTeamStatusCode)(nil),                                  // 347: google.fhir.stu3.proto.CareTeamStatusCode
	(*ChargeItemStatusCode)(nil),                                // 348: google.fhir.stu3.proto.ChargeItemStatusCode
	(*ChoiceListOrientationCode)(nil),                           // 349: google.fhir.stu3.proto.ChoiceListOrientationCode
	(*UseCode)(nil),                                             // 350: google.fhir.stu3.proto.UseCode
	(*ClassificationOrContextCode)(nil),                         // 351: google.fhir.stu3.proto.ClassificationOrContextCode
	(*ClinicalImpressionStatusCode)(nil),                        // 352: google.fhir.stu3.proto.ClinicalImpressionStatusCode
	(*CodeSystemContentModeCode)(nil),                           // 353: google.fhir.stu3.proto.CodeSystemContentModeCode
	(*CodeSystemHierarchyMeaningCode)(nil),                      // 354: google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode
	(*CommonTagsCode)(nil),                                      // 355: google.fhir.stu3.proto.CommonTagsCode
	(*CommunicationCategoryCode)(nil),                           // 356: google.fhir.stu3.proto.CommunicationCategoryCode
	(*CommunicationNotDoneReasonCode)(nil),                      // 357: google.fhir.stu3.proto.CommunicationNotDoneReasonCode
	(*CompartmentTypeCode)(nil),                                 // 358: google.fhir.stu3.proto.CompartmentTypeCode
	(*CompositeMeasureScoringCode)(nil),                         // 359: google.fhir.stu3.proto.CompositeMeasureScoringCode
	(*CompositionAttestationModeCode)(nil),                      // 360: google.fhir.stu3.proto.CompositionAttestationModeCode
	(*CompositionStatusCode)(nil),                               // 361: google.fhir.stu3.proto.CompositionStatusCode
	(*ConceptMapEquivalenceCode)(nil),                           // 362: google.fhir.stu3.proto.ConceptMapEquivalenceCode
	(*ConceptMapGroupUnmappedModeCode)(nil),                     // 363: google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode
	(*PropertyTypeCode)(nil),                                    // 364: google.fhir.stu3.proto.PropertyTypeCode
	(*ConditionalDeleteStatusCode)(nil),                         // 365: google.fhir.stu3.proto.ConditionalDeleteStatusCode
	(*ConditionalReadStatusCode)(nil),                           // 366: google.fhir.stu3.proto.ConditionalReadStatusCode
	(*ConditionCategoryCodesCode)(nil),                          // 367: google.fhir.stu3.proto.ConditionCategoryCodesCode
	(*ConditionClinicalStatusCodesCode)(nil),                    // 368: google.fhir.stu3.proto.ConditionClinicalStatusCodesCode
	(*ConditionStateCode)(nil),                                  // 369: google.fhir.stu3.proto.ConditionStateCode
	(*ConditionVerificationStatusCode)(nil),                     // 370: google.fhir.stu3.proto.ConditionVerificationStatusCode
	(*ConformanceExpectationCode)(nil),                          // 371: google.fhir.stu3.proto.ConformanceExpectationCode
	(*ConsentDataMeaningCode)(nil),                              // 372: google.fhir.stu3.proto.ConsentDataMeaningCode
	(*ConsentExceptTypeCode)(nil),                               // 373: google.fhir.stu3.proto.ConsentExceptTypeCode
	(*ConsentStateCode)(nil),                                    // 374: google.fhir.stu3.proto.ConsentStateCode
	(*ContactEntityTypeCode)(nil),                               // 375: google.fhir.stu3.proto.ContactEntityTypeCode
	(*ContentTypeCode)(nil),                                     // 376: google.fhir.stu3.proto.ContentTypeCode
	(*ContractResourceStatusCode)(nil),                          // 377: google.fhir.stu3.proto.ContractResourceStatusCode
	(*ContributorTypeCode)(nil),                                 // 378: google.fhir.stu3.proto.ContributorTypeCode
	(*CopyNumberEventCode)(nil),                                 // 379: google.fhir.stu3.proto.CopyNumberEventCode
	(*DataAbsentReasonCode)(nil),                                // 380: google.fhir.stu3.proto.DataAbsentReasonCode
	(*DataElementStringencyCode)(nil),                           // 381: google.fhir.stu3.proto.DataElementStringencyCode
	(*TriggerTypeCode)(nil),                                     // 382: google.fhir.stu3.proto.TriggerTypeCode
	(*DataTypeCode)(nil),                                        // 383: google.fhir.stu3.proto.DataTypeCode
	(*FHIRAllTypesCode)(nil),                                    // 384: google.fhir.stu3.proto.FHIRAllTypesCode
	(*FHIRDefinedTypeCode)(nil),                                 // 385: google.fhir.stu3.proto.FHIRDefinedTypeCode
	(*FHIRDefinedTypeExtCode)(nil),                              // 386: google.fhir.stu3.proto.FHIRDefinedTypeExtCode
	(*DefinitionStatusCode)(nil),                                // 387: google.fhir.stu3.proto.DefinitionStatusCode
	(*DefinitionTopicCode)(nil),                                 // 388: google.fhir.stu3.proto.DefinitionTopicCode
	(*DetectedIssueSeverityCode)(nil),                           // 389: google.fhir.stu3.proto.DetectedIssueSeverityCode
	(*DeviceUseStatementStatusCode)(nil),                        // 390: google.fhir.stu3.proto.DeviceUseStatementStatusCode
	(*FHIRDeviceStatusCode)(nil),                                // 391: google.fhir.stu3.proto.FHIRDeviceStatusCode
	(*DiagnosisRoleCode)(nil),                                   // 392: google.fhir.stu3.proto.DiagnosisRoleCode
	(*DiagnosticReportStatusCode)(nil),                          // 393: google.fhir.stu3.proto.DiagnosticReportStatusCode
	(*DigitalMediaTypeCode)(nil),                                // 394: google.fhir.stu3.proto.DigitalMediaTypeCode
	(*DocumentModeCode)(nil),                                    // 395: google.fhir.stu3.proto.DocumentModeCode
	(*DocumentReferenceStatusCode)(nil),                         // 396: google.fhir.stu3.proto.DocumentReferenceStatusCode
	(*DocumentRelationshipTypeCode)(nil),                        // 397: google.fhir.stu3.proto.DocumentRelationshipTypeCode
	(*AdmitSourceCode)(nil),                                     // 398: google.fhir.stu3.proto.AdmitSourceCode
	(*DietCode)(nil),                                            // 399: google.fhir.stu3.proto.DietCode
	(*DischargeDispositionCode)(nil),                            // 400: google.fhir.stu3.proto.DischargeDispositionCode
	(*EncounterLocationStatusCode)(nil),                         // 401: google.fhir.stu3.proto.EncounterLocationStatusCode
	(*SpecialArrangementsCode)(nil),                             // 402: google.fhir.stu3.proto.SpecialArrangementsCode
	(*EncounterStatusCode)(nil),                                 // 403: google.fhir.stu3.proto.EncounterStatusCode
	(*EncounterTypeCode)(nil),                                   // 404: google.fhir.stu3.proto.EncounterTypeCode
	(*EndpointStatusCode)(nil),                                  // 405: google.fhir.stu3.proto.EndpointStatusCode
	(*EntityNamePartQualifierCode)(nil),                         // 406: google.fhir.stu3.proto.EntityNamePartQualifierCode
	(*EnteralFormulaAdditiveTypeCodeCode)(nil),                  // 407: google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode
	(*EpisodeOfCareStatusCode)(nil),                             // 408: google.fhir.stu3.proto.EpisodeOfCareStatusCode
	(*EpisodeOfCareTypeCode)(nil),                               // 409: google.fhir.stu3.proto.EpisodeOfCareTypeCode
	(*EventCapabilityModeCode)(nil),                             // 410: google.fhir.stu3.proto.EventCapabilityModeCode
	(*EventStatusCode)(nil),                                     // 411: google.fhir.stu3.proto.EventStatusCode
	(*ClaimPayeeResourceTypeCode)(nil),                          // 412: google.fhir.stu3.proto.ClaimPayeeResourceTypeCode
	(*ExplanationOfBenefitStatusCode)(nil),                      // 413: google.fhir.stu3.proto.ExplanationOfBenefitStatusCode
	(*ExtensionContextCode)(nil),                                // 414: google.fhir.stu3.proto.ExtensionContextCode
	(*FilterOperatorCode)(nil),                                  // 415: google.fhir.stu3.proto.FilterOperatorCode
	(*FlagCategoryCode)(nil),                                    // 416: google.fhir.stu3.proto.FlagCategoryCode
	(*FlagPriorityCodesCode)(nil),                               // 417: google.fhir.stu3.proto.FlagPriorityCodesCode
	(*FlagStatusCode)(nil),                                      // 418: google.fhir.stu3.proto.FlagStatusCode
	(*FinancialResourceStatusCode)(nil),                         // 419: google.fhir.stu3.proto.FinancialResourceStatusCode
	(*GoalAcceptanceStatusCode)(nil),                            // 420: google.fhir.stu3.proto.GoalAcceptanceStatusCode
	(*GoalCategoryCode)(nil),                                    // 421: google.fhir.stu3.proto.GoalCategoryCode
	(*GoalPriorityCode)(nil),                                    // 422: google.fhir.stu3.proto.GoalPriorityCode
	(*GoalRelationshipTypeCode)(nil),                            // 423: google.fhir.stu3.proto.GoalRelationshipTypeCode
	(*GoalStatusCode)(nil),                                      // 424: google.fhir.stu3.proto.GoalStatusCode
	(*GoalStatusReasonCode)(nil),                                // 425: google.fhir.stu3.proto.GoalStatusReasonCode
	(*GraphCompartmentRuleCode)(nil),                            // 426: google.fhir.stu3.proto.GraphCompartmentRuleCode
	(*GroupTypeCode)(nil),                                       // 427: google.fhir.stu3.proto.GroupTypeCode
	(*GuidanceResponseStatusCode)(nil),                          // 428: google.fhir.stu3.proto.GuidanceResponseStatusCode
	(*GuideDependencyTypeCode)(nil),                             // 429: google.fhir.stu3.proto.GuideDependencyTypeCode
	(*GuidePageKindCode)(nil),                                   // 430: google.fhir.stu3.proto.GuidePageKindCode
	(*FamilyHistoryNotDoneReasonCode)(nil),                      // 431: google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode
	(*FamilyHistoryStatusCode)(nil),                             // 432: google.fhir.stu3.proto.FamilyHistoryStatusCode
	(*HL7WorkgroupCode)(nil),                                    // 433: google.fhir.stu3.proto.HL7WorkgroupCode
	(*TestScriptRequestMethodCodeCode)(nil),                     // 434: google.fhir.stu3.proto.TestScriptRequestMethodCodeCode
	(*HTTPVerbCode)(nil),                                        // 435: google.fhir.stu3.proto.HTTPVerbCode
	(*IdentityAssuranceLevelCode)(nil),                          // 436: google.fhir.stu3.proto.IdentityAssuranceLevelCode
	(*ImmunizationOriginCodesCode)(nil),                         // 437: google.fhir.stu3.proto.ImmunizationOriginCodesCode
	(*ImmunizationRecommendationDateCriterionCodesCode)(nil),    // 438: google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode
	(*ImmunizationRecommendationStatusCodesCode)(nil),           // 439: google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode
	(*ImmunizationStatusCodesCode)(nil),                         // 440: google.fhir.stu3.proto.ImmunizationStatusCodesCode
	(*ImplantStatusCode)(nil),                                   // 441: google.fhir.stu3.proto.ImplantStatusCode
	(*InstanceAvailabilityCode)(nil),                            // 442: google.fhir.stu3.proto.InstanceAvailabilityCode
	(*IssueSeverityCode)(nil),                                   // 443: google.fhir.stu3.proto.IssueSeverityCode
	(*IssueTypeCode)(nil),                                       // 444: google.fhir.stu3.proto.IssueTypeCode
	(*QuestionnaireItemTypeCode)(nil),                           // 445: google.fhir.stu3.proto.QuestionnaireItemTypeCode
	(*LibraryTypeCode)(nil),                                     // 446: google.fhir.stu3.proto.LibraryTypeCode
	(*LinkageTypeCode)(nil),                                     // 447: google.fhir.stu3.proto.LinkageTypeCode
	(*LinkTypeCode)(nil),                                        // 448: google.fhir.stu3.proto.LinkTypeCode
	(*ListEmptyReasonsCode)(nil),                                // 449: google.fhir.stu3.proto.ListEmptyReasonsCode
	(*ExampleUseCodesforListCode)(nil),                          // 450: google.fhir.stu3.proto.ExampleUseCodesforListCode
	(*ListModeCode)(nil),                                        // 451: google.fhir.stu3.proto.ListModeCode
	(*ListOrderCodesCode)(nil),                                  // 452: google.fhir.stu3.proto.ListOrderCodesCode
	(*ListStatusCode)(nil),                                      // 453: google.fhir.stu3.proto.ListStatusCode
	(*LocationModeCode)(nil),                                    // 454: google.fhir.stu3.proto.LocationModeCode
	(*LocationTypeCode)(nil),                                    // 455: google.fhir.stu3.proto.LocationTypeCode
	(*LocationStatusCode)(nil),                                  // 456: google.fhir.stu3.proto.LocationStatusCode
	(*ProbabilityDistributionTypeCode)(nil),                     // 457: google.fhir.stu3.proto.ProbabilityDistributionTypeCode
	(*StructureMapContextTypeCode)(nil),                         // 458: google.fhir.stu3.proto.StructureMapContextTypeCode
	(*StructureMapGroupTypeModeCode)(nil),                       // 459: google.fhir.stu3.proto.StructureMapGroupTypeModeCode
	(*StructureMapInputModeCode)(nil),                           // 460: google.fhir.stu3.proto.StructureMapInputModeCode
	(*StructureMapModelModeCode)(nil),                           // 461: google.fhir.stu3.proto.StructureMapModelModeCode
	(*StructureMapSourceListModeCode)(nil),                      // 462: google.fhir.stu3.proto.StructureMapSourceListModeCode
	(*StructureMapTargetListModeCode)(nil),                      // 463: google.fhir.stu3.proto.StructureMapTargetListModeCode
	(*StructureMapTransformCode)(nil),                           // 464: google.fhir.stu3.proto.StructureMapTransformCode
	(*MatchGradeCode)(nil),                                      // 465: google.fhir.stu3.proto.MatchGradeCode
	(*MeasureDataUsageCode)(nil),                                // 466: google.fhir.stu3.proto.MeasureDataUsageCode
	(*MeasmntPrincipleCode)(nil),                                // 467: google.fhir.stu3.proto.MeasmntPrincipleCode
	(*MeasurePopulationTypeCode)(nil),                           // 468: google.fhir.stu3.proto.MeasurePopulationTypeCode
	(*MeasureReportStatusCode)(nil),                             // 469: google.fhir.stu3.proto.MeasureReportStatusCode
	(*MeasureReportTypeCode)(nil),                               // 470: google.fhir.stu3.proto.MeasureReportTypeCode
	(*MeasureScoringCode)(nil),                                  // 471: google.fhir.stu3.proto.MeasureScoringCode
	(*MeasureTypeCode)(nil),                                     // 472: google.fhir.stu3.proto.MeasureTypeCode
	(*MedicationAdministrationCategoryCode)(nil),                // 473: google.fhir.stu3.proto.MedicationAdministrationCategoryCode
	(*MedicationAdministrationStatusCode)(nil),                  // 474: google.fhir.stu3.proto.MedicationAdministrationStatusCode
	(*MedicationDispenseCategoryCode)(nil),                      // 475: google.fhir.stu3.proto.MedicationDispenseCategoryCode
	(*MedicationDispenseStatusCode)(nil),                        // 476: google.fhir.stu3.proto.MedicationDispenseStatusCode
	(*MedicationContainerCode)(nil),                             // 477: google.fhir.stu3.proto.MedicationContainerCode
	(*MedicationRequestCategoryCode)(nil),                       // 478: google.fhir.stu3.proto.MedicationRequestCategoryCode
	(*MedicationRequestIntentCode)(nil),                         // 479: google.fhir.stu3.proto.MedicationRequestIntentCode
	(*MedicationRequestPriorityCode)(nil),                       // 480: google.fhir.stu3.proto.MedicationRequestPriorityCode
	(*MedicationRequestStatusCode)(nil),                         // 481: google.fhir.stu3.proto.MedicationRequestStatusCode
	(*MedicationStatementCategoryCode)(nil),                     // 482: google.fhir.stu3.proto.MedicationStatementCategoryCode
	(*MedicationStatementStatusCode)(nil),                       // 483: google.fhir.stu3.proto.MedicationStatementStatusCode
	(*MedicationStatementTakenCode)(nil),                        // 484: google.fhir.stu3.proto.MedicationStatementTakenCode
	(*MedicationStatusCode)(nil),                                // 485: google.fhir.stu3.proto.MedicationStatusCode
	(*MessageEventCode)(nil),                                    // 486: google.fhir.stu3.proto.MessageEventCode
	(*MessageHeaderResponseRequestCode)(nil),                    // 487: google.fhir.stu3.proto.MessageHeaderResponseRequestCode
	(*ExampleMessageReasonCodesCode)(nil),                       // 488: google.fhir.stu3.proto.ExampleMessageReasonCodesCode
	(*MessageSignificanceCategoryCode)(nil),                     // 489: google.fhir.stu3.proto.MessageSignificanceCategoryCode
	(*MessageTransportCode)(nil),                                // 490: google.fhir.stu3.proto.MessageTransportCode
	(*DeviceMetricCalibrationStateCode)(nil),                    // 491: google.fhir.stu3.proto.DeviceMetricCalibrationStateCode
	(*DeviceMetricCalibrationTypeCode)(nil),                     // 492: google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode
	(*DeviceMetricCategoryCode)(nil),                            // 493: google.fhir.stu3.proto.DeviceMetricCategoryCode
	(*DeviceMetricColorCode)(nil),                               // 494: google.fhir.stu3.proto.DeviceMetricColorCode
	(*DeviceMetricOperationalStatusCode)(nil),                   // 495: google.fhir.stu3.proto.DeviceMetricOperationalStatusCode
	(*HumanNameAssemblyOrderCode)(nil),                          // 496: google.fhir.stu3.proto.HumanNameAssemblyOrderCode
	(*NameRepresentationUseCode)(nil),                           // 497: google.fhir.stu3.proto.NameRepresentationUseCode
	(*NamingSystemIdentifierTypeCode)(nil),                      // 498: google.fhir.stu3.proto.NamingSystemIdentifierTypeCode
	(*NamingSystemTypeCode)(nil),                                // 499: google.fhir.stu3.proto.NamingSystemTypeCode
	(*AuditEventAgentNetworkTypeCode)(nil),                      // 500: google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode
	(*NoteTypeCode)(nil),                                        // 501: google.fhir.stu3.proto.NoteTypeCode
	(*NullFlavorCode)(nil),                                      // 502: google.fhir.stu3.proto.NullFlavorCode
	(*NutritionOrderStatusCode)(nil),                            // 503: google.fhir.stu3.proto.NutritionOrderStatusCode
	(*ObservationCategoryCodesCode)(nil),                        // 504: google.fhir.stu3.proto.ObservationCategoryCodesCode
	(*ObservationRelationshipTypeCode)(nil),                     // 505: google.fhir.stu3.proto.ObservationRelationshipTypeCode
	(*StatisticsCodeCode)(nil),                                  // 506: google.fhir.stu3.proto.StatisticsCodeCode
	(*ObservationStatusCode)(nil),                               // 507: google.fhir.stu3.proto.ObservationStatusCode
	(*DeviceComponentOperationalStatusCode)(nil),                // 508: google.fhir.stu3.proto.DeviceComponentOperationalStatusCode
	(*OperationKindCode)(nil),                                   // 509: google.fhir.stu3.proto.OperationKindCode
	(*OperationOutcomeCodesCode)(nil),                           // 510: google.fhir.stu3.proto.OperationOutcomeCodesCode
	(*NarrativeStatusCode)(nil),                                 // 511: google.fhir.stu3.proto.NarrativeStatusCode
	(*OperationParameterUseCode)(nil),                           // 512: google.fhir.stu3.proto.OperationParameterUseCode
	(*OrganizationTypeCode)(nil),                                // 513: google.fhir.stu3.proto.OrganizationTypeCode
	(*DeviceComponentParameterGroupCode)(nil),                   // 514: google.fhir.stu3.proto.DeviceComponentParameterGroupCode
	(*ParticipantRequiredCode)(nil),                             // 515: google.fhir.stu3.proto.ParticipantRequiredCode
	(*ParticipationStatusCode)(nil),                             // 516: google.fhir.stu3.proto.ParticipationStatusCode
	(*PlanDefinitionTypeCode)(nil),                              // 517: google.fhir.stu3.proto.PlanDefinitionTypeCode
	(*PostalAddressUseTypeCode)(nil),                            // 518: google.fhir.stu3.proto.PostalAddressUseTypeCode
	(*PractitionerRoleCode)(nil),                                // 519: google.fhir.stu3.proto.PractitionerRoleCode
	(*PractitionerSpecialtyCode)(nil),                           // 520: google.fhir.stu3.proto.PractitionerSpecialtyCode
	(*ProcedureProgressStatusCodesCode)(nil),                    // 521: google.fhir.stu3.proto.ProcedureProgressStatusCodesCode
	(*ProvenanceEntityRoleCode)(nil),                            // 522: google.fhir.stu3.proto.ProvenanceEntityRoleCode
	(*PublicationStatusCode)(nil),                               // 523: google.fhir.stu3.proto.PublicationStatusCode
	(*QualityTypeCode)(nil),                                     // 524: google.fhir.stu3.proto.QualityTypeCode
	(*MaxOccursCode)(nil),                                       // 525: google.fhir.stu3.proto.MaxOccursCode
	(*QuestionnaireResponseStatusCode)(nil),                     // 526: google.fhir.stu3.proto.QuestionnaireResponseStatusCode
	(*QuestionnaireTextCategoriesCode)(nil),                     // 527: google.fhir.stu3.proto.QuestionnaireTextCategoriesCode
	(*QuestionnaireItemUIControlCodesCode)(nil),                 // 528: google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode
	(*QuestionnaireItemUsageModeCode)(nil),                      // 529: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode
	(*AllergyIntoleranceCertaintyCode)(nil),                     // 530: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode
	(*AllergyIntoleranceSeverityCode)(nil),                      // 531: google.fhir.stu3.proto.AllergyIntoleranceSeverityCode
	(*ReasonMedicationGivenCodesCode)(nil),                      // 532: google.fhir.stu3.proto.ReasonMedicationGivenCodesCode
	(*ReferenceHandlingPolicyCode)(nil),                         // 533: google.fhir.stu3.proto.ReferenceHandlingPolicyCode
	(*RelatedArtifactTypeCode)(nil),                             // 534: google.fhir.stu3.proto.RelatedArtifactTypeCode
	(*ObservationReferenceRangeMeaningCodesCode)(nil),           // 535: google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode
	(*TestReportActionResultCode)(nil),                          // 536: google.fhir.stu3.proto.TestReportActionResultCode
	(*TestReportParticipantTypeCode)(nil),                       // 537: google.fhir.stu3.proto.TestReportParticipantTypeCode
	(*TestReportResultCode)(nil),                                // 538: google.fhir.stu3.proto.TestReportResultCode
	(*TestReportStatusCode)(nil),                                // 539: google.fhir.stu3.proto.TestReportStatusCode
	(*RepositoryTypeCode)(nil),                                  // 540: google.fhir.stu3.proto.RepositoryTypeCode
	(*RequestIntentCode)(nil),                                   // 541: google.fhir.stu3.proto.RequestIntentCode
	(*RequestPriorityCode)(nil),                                 // 542: google.fhir.stu3.proto.RequestPriorityCode
	(*RequestStatusCode)(nil),                                   // 543: google.fhir.stu3.proto.RequestStatusCode
	(*ResearchStudyStatusCode)(nil),                             // 544: google.fhir.stu3.proto.ResearchStudyStatusCode
	(*ResearchSubjectStatusCode)(nil),                           // 545: google.fhir.stu3.proto.ResearchSubjectStatusCode
	(*PayeeResourceTypeCode)(nil),                               // 546: google.fhir.stu3.proto.PayeeResourceTypeCode
	(*ResourceTypeCode)(nil),                                    // 547: google.fhir.stu3.proto.ResourceTypeCode
	(*ResourceValidationModeCode)(nil),                          // 548: google.fhir.stu3.proto.ResourceValidationModeCode
	(*ResponseTypeCode)(nil),                                    // 549: google.fhir.stu3.proto.ResponseTypeCode
	(*RestfulCapabilityModeCode)(nil),                           // 550: google.fhir.stu3.proto.RestfulCapabilityModeCode
	(*RestfulSecurityServiceCode)(nil),                          // 551: google.fhir.stu3.proto.RestfulSecurityServiceCode
	(*RiskProbabilityCode)(nil),                                 // 552: google.fhir.stu3.proto.RiskProbabilityCode
	(*SearchComparatorCode)(nil),                                // 553: google.fhir.stu3.proto.SearchComparatorCode
	(*SearchEntryModeCode)(nil),                                 // 554: google.fhir.stu3.proto.SearchEntryModeCode
	(*SearchModifierCodeCode)(nil),                              // 555: google.fhir.stu3.proto.SearchModifierCodeCode
	(*SearchParamTypeCode)(nil),                                 // 556: google.fhir.stu3.proto.SearchParamTypeCode
	(*XPathUsageTypeCode)(nil),                                  // 557: google.fhir.stu3.proto.XPathUsageTypeCode
	(*SequenceTypeCode)(nil),                                    // 558: google.fhir.stu3.proto.SequenceTypeCode
	(*ServiceProvisionConditionsCode)(nil),                      // 559: google.fhir.stu3.proto.ServiceProvisionConditionsCode
	(*ReferralMethodCode)(nil),                                  // 560: google.fhir.stu3.proto.ReferralMethodCode
	(*SlotStatusCode)(nil),                                      // 561: google.fhir.stu3.proto.SlotStatusCode
	(*SpecialValuesCode)(nil),                                   // 562: google.fhir.stu3.proto.SpecialValuesCode
	(*DeviceSpecificationSpecTypeCode)(nil),                     // 563: google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode
	(*SpecimenStatusCode)(nil),                                  // 564: google.fhir.stu3.proto.SpecimenStatusCode
	(*StructureDefinitionKindCode)(nil),                         // 565: google.fhir.stu3.proto.StructureDefinitionKindCode
	(*SubscriptionChannelTypeCode)(nil),                         // 566: google.fhir.stu3.proto.SubscriptionChannelTypeCode
	(*SubscriptionStatusCode)(nil),                              // 567: google.fhir.stu3.proto.SubscriptionStatusCode
	(*SubscriptionTagCode)(nil),                                 // 568: google.fhir.stu3.proto.SubscriptionTagCode
	(*SubstanceCategoryCodesCode)(nil),                          // 569: google.fhir.stu3.proto.SubstanceCategoryCodesCode
	(*FHIRSubstanceStatusCode)(nil),                             // 570: google.fhir.stu3.proto.FHIRSubstanceStatusCode
	(*SupplyDeliveryStatusCode)(nil),                            // 571: google.fhir.stu3.proto.SupplyDeliveryStatusCode
	(*SupplyItemTypeCode)(nil),                                  // 572: google.fhir.stu3.proto.SupplyItemTypeCode
	(*SupplyTypeCode)(nil),                                      // 573: google.fhir.stu3.proto.SupplyTypeCode
	(*SupplyRequestReasonCode)(nil),                             // 574: google.fhir.stu3.proto.SupplyRequestReasonCode
	(*SupplyRequestStatusCode)(nil),                             // 575: google.fhir.stu3.proto.SupplyRequestStatusCode
	(*SystemRestfulInteractionCode)(nil),                        // 576: google.fhir.stu3.proto.SystemRestfulInteractionCode
	(*SystemVersionProcessingModeCode)(nil),                     // 577: google.fhir.stu3.proto.SystemVersionProcessingModeCode
	(*TaskPerformerTypeCode)(nil),                               // 578: google.fhir.stu3.proto.TaskPerformerTypeCode
	(*TemplateStatusCodeCode)(nil),                              // 579: google.fhir.stu3.proto.TemplateStatusCodeCode
	(*TaskStatusCode)(nil),                                      // 580: google.fhir.stu3.proto.TaskStatusCode
	(*TestScriptOperationCodeCode)(nil),                         // 581: google.fhir.stu3.proto.TestScriptOperationCodeCode
	(*TestScriptProfileDestinationTypeCode)(nil),                // 582: google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode
	(*TestScriptProfileOriginTypeCode)(nil),                     // 583: google.fhir.stu3.proto.TestScriptProfileOriginTypeCode
	(*TransactionModeCode)(nil),                                 // 584: google.fhir.stu3.proto.TransactionModeCode
	(*TypeDerivationRuleCode)(nil),                              // 585: google.fhir.stu3.proto.TypeDerivationRuleCode
	(*TypeRestfulInteractionCode)(nil),                          // 586: google.fhir.stu3.proto.TypeRestfulInteractionCode
	(*UDIEntryTypeCode)(nil),                                    // 587: google.fhir.stu3.proto.UDIEntryTypeCode
	(*UnknownContentCodeCode)(nil),                              // 588: google.fhir.stu3.proto.UnknownContentCodeCode
	(*UsageContextTypeCode)(nil),                                // 589: google.fhir.stu3.proto.UsageContextTypeCode
	(*ConfidentialityClassificationCode)(nil),                   // 590: google.fhir.stu3.proto.ConfidentialityClassificationCode
	(*VaccinationProtocolDoseStatuscodesCode)(nil),              // 591: google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode
	(*VaccinationProtocolDoseStatusReasoncodesCode)(nil),        // 592: google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode
	(*SequenceStatusCode)(nil),                                  // 593: google.fhir.stu3.proto.sequenceStatusCode
	(*ResourceVersionPolicyCode)(nil),                           // 594: google.fhir.stu3.proto.ResourceVersionPolicyCode
	(*VisionBaseCode)(nil),                                      // 595: google.fhir.stu3.proto.VisionBaseCode
	(*VisionEyesCode)(nil),                                      // 596: google.fhir.stu3.proto.VisionEyesCode
	(*datatypes_go_proto.String)(nil),                           // 597: google.fhir.stu3.proto.String
	(*datatypes_go_proto.Extension)(nil),                        // 598: google.fhir.stu3.proto.Extension
}
var file_proto_google_fhir_proto_stu3_codes_proto_depIdxs = []int32{
	0,   // 0: google.fhir.stu3.proto.AbstractTypeCode.value:type_name -> google.fhir.stu3.proto.AbstractTypeCode.Value
	597, // 1: google.fhir.stu3.proto.AbstractTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 2: google.fhir.stu3.proto.AbstractTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	1,   // 3: google.fhir.stu3.proto.AggregationModeCode.value:type_name -> google.fhir.stu3.proto.AggregationModeCode.Value
	597, // 4: google.fhir.stu3.proto.AggregationModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 5: google.fhir.stu3.proto.AggregationModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	2,   // 6: google.fhir.stu3.proto.BindingStrengthCode.value:type_name -> google.fhir.stu3.proto.BindingStrengthCode.Value
	597, // 7: google.fhir.stu3.proto.BindingStrengthCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 8: google.fhir.stu3.proto.BindingStrengthCode.extension:type_name -> google.fhir.stu3.proto.Extension
	3,   // 9: google.fhir.stu3.proto.ConstraintSeverityCode.value:type_name -> google.fhir.stu3.proto.ConstraintSeverityCode.Value
	597, // 10: google.fhir.stu3.proto.ConstraintSeverityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 11: google.fhir.stu3.proto.ConstraintSeverityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	4,   // 12: google.fhir.stu3.proto.SlicingRulesCode.value:type_name -> google.fhir.stu3.proto.SlicingRulesCode.Value
	597, // 13: google.fhir.stu3.proto.SlicingRulesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 14: google.fhir.stu3.proto.SlicingRulesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	5,   // 15: google.fhir.stu3.proto.DiscriminatorTypeCode.value:type_name -> google.fhir.stu3.proto.DiscriminatorTypeCode.Value
	597, // 16: google.fhir.stu3.proto.DiscriminatorTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 17: google.fhir.stu3.proto.DiscriminatorTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	6,   // 18: google.fhir.stu3.proto.PropertyRepresentationCode.value:type_name -> google.fhir.stu3.proto.PropertyRepresentationCode.Value
	597, // 19: google.fhir.stu3.proto.PropertyRepresentationCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 20: google.fhir.stu3.proto.PropertyRepresentationCode.extension:type_name -> google.fhir.stu3.proto.Extension
	7,   // 21: google.fhir.stu3.proto.ReferenceVersionRulesCode.value:type_name -> google.fhir.stu3.proto.ReferenceVersionRulesCode.Value
	597, // 22: google.fhir.stu3.proto.ReferenceVersionRulesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 23: google.fhir.stu3.proto.ReferenceVersionRulesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	8,   // 24: google.fhir.stu3.proto.AccountStatusCode.value:type_name -> google.fhir.stu3.proto.AccountStatusCode.Value
	597, // 25: google.fhir.stu3.proto.AccountStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 26: google.fhir.stu3.proto.AccountStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	9,   // 27: google.fhir.stu3.proto.ActionCardinalityBehaviorCode.value:type_name -> google.fhir.stu3.proto.ActionCardinalityBehaviorCode.Value
	597, // 28: google.fhir.stu3.proto.ActionCardinalityBehaviorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 29: google.fhir.stu3.proto.ActionCardinalityBehaviorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	10,  // 30: google.fhir.stu3.proto.ActionConditionKindCode.value:type_name -> google.fhir.stu3.proto.ActionConditionKindCode.Value
	597, // 31: google.fhir.stu3.proto.ActionConditionKindCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 32: google.fhir.stu3.proto.ActionConditionKindCode.extension:type_name -> google.fhir.stu3.proto.Extension
	11,  // 33: google.fhir.stu3.proto.ActionGroupingBehaviorCode.value:type_name -> google.fhir.stu3.proto.ActionGroupingBehaviorCode.Value
	597, // 34: google.fhir.stu3.proto.ActionGroupingBehaviorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 35: google.fhir.stu3.proto.ActionGroupingBehaviorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	12,  // 36: google.fhir.stu3.proto.ActionListCode.value:type_name -> google.fhir.stu3.proto.ActionListCode.Value
	597, // 37: google.fhir.stu3.proto.ActionListCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 38: google.fhir.stu3.proto.ActionListCode.extension:type_name -> google.fhir.stu3.proto.Extension
	13,  // 39: google.fhir.stu3.proto.ActionParticipantTypeCode.value:type_name -> google.fhir.stu3.proto.ActionParticipantTypeCode.Value
	597, // 40: google.fhir.stu3.proto.ActionParticipantTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 41: google.fhir.stu3.proto.ActionParticipantTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	14,  // 42: google.fhir.stu3.proto.ActionPrecheckBehaviorCode.value:type_name -> google.fhir.stu3.proto.ActionPrecheckBehaviorCode.Value
	597, // 43: google.fhir.stu3.proto.ActionPrecheckBehaviorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 44: google.fhir.stu3.proto.ActionPrecheckBehaviorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	15,  // 45: google.fhir.stu3.proto.ActionRelationshipTypeCode.value:type_name -> google.fhir.stu3.proto.ActionRelationshipTypeCode.Value
	597, // 46: google.fhir.stu3.proto.ActionRelationshipTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 47: google.fhir.stu3.proto.ActionRelationshipTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	16,  // 48: google.fhir.stu3.proto.ActionRequiredBehaviorCode.value:type_name -> google.fhir.stu3.proto.ActionRequiredBehaviorCode.Value
	597, // 49: google.fhir.stu3.proto.ActionRequiredBehaviorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 50: google.fhir.stu3.proto.ActionRequiredBehaviorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	17,  // 51: google.fhir.stu3.proto.ActionSelectionBehaviorCode.value:type_name -> google.fhir.stu3.proto.ActionSelectionBehaviorCode.Value
	597, // 52: google.fhir.stu3.proto.ActionSelectionBehaviorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 53: google.fhir.stu3.proto.ActionSelectionBehaviorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	18,  // 54: google.fhir.stu3.proto.ActionTypeCode.value:type_name -> google.fhir.stu3.proto.ActionTypeCode.Value
	597, // 55: google.fhir.stu3.proto.ActionTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 56: google.fhir.stu3.proto.ActionTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 57: google.fhir.stu3.proto.ActivityDefinitionCategoryCode.value:type_name -> google.fhir.stu3.proto.ActivityDefinitionCategoryCode.Value
	597, // 58: google.fhir.stu3.proto.ActivityDefinitionCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 59: google.fhir.stu3.proto.ActivityDefinitionCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	20,  // 60: google.fhir.stu3.proto.AdministrativeGenderCode.value:type_name -> google.fhir.stu3.proto.AdministrativeGenderCode.Value
	597, // 61: google.fhir.stu3.proto.AdministrativeGenderCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 62: google.fhir.stu3.proto.AdministrativeGenderCode.extension:type_name -> google.fhir.stu3.proto.Extension
	21,  // 63: google.fhir.stu3.proto.AdverseEventCategoryCode.value:type_name -> google.fhir.stu3.proto.AdverseEventCategoryCode.Value
	597, // 64: google.fhir.stu3.proto.AdverseEventCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 65: google.fhir.stu3.proto.AdverseEventCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	22,  // 66: google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode.value:type_name -> google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode.Value
	597, // 67: google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 68: google.fhir.stu3.proto.AdverseEventCausalityAssessmentCode.extension:type_name -> google.fhir.stu3.proto.Extension
	23,  // 69: google.fhir.stu3.proto.AdverseEventCausalityCode.value:type_name -> google.fhir.stu3.proto.AdverseEventCausalityCode.Value
	597, // 70: google.fhir.stu3.proto.AdverseEventCausalityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 71: google.fhir.stu3.proto.AdverseEventCausalityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	24,  // 72: google.fhir.stu3.proto.AdverseEventCausalityMethodCode.value:type_name -> google.fhir.stu3.proto.AdverseEventCausalityMethodCode.Value
	597, // 73: google.fhir.stu3.proto.AdverseEventCausalityMethodCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 74: google.fhir.stu3.proto.AdverseEventCausalityMethodCode.extension:type_name -> google.fhir.stu3.proto.Extension
	25,  // 75: google.fhir.stu3.proto.AdverseEventCausalityResultCode.value:type_name -> google.fhir.stu3.proto.AdverseEventCausalityResultCode.Value
	597, // 76: google.fhir.stu3.proto.AdverseEventCausalityResultCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 77: google.fhir.stu3.proto.AdverseEventCausalityResultCode.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 78: google.fhir.stu3.proto.AdverseEventOutcomeCode.value:type_name -> google.fhir.stu3.proto.AdverseEventOutcomeCode.Value
	597, // 79: google.fhir.stu3.proto.AdverseEventOutcomeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 80: google.fhir.stu3.proto.AdverseEventOutcomeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	27,  // 81: google.fhir.stu3.proto.AdverseEventSeriousnessCode.value:type_name -> google.fhir.stu3.proto.AdverseEventSeriousnessCode.Value
	597, // 82: google.fhir.stu3.proto.AdverseEventSeriousnessCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 83: google.fhir.stu3.proto.AdverseEventSeriousnessCode.extension:type_name -> google.fhir.stu3.proto.Extension
	28,  // 84: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode.Value
	597, // 85: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 86: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRiskCode.extension:type_name -> google.fhir.stu3.proto.Extension
	29,  // 87: google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode.Value
	597, // 88: google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 89: google.fhir.stu3.proto.AllergyIntoleranceClinicalStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	30,  // 90: google.fhir.stu3.proto.AllergyIntoleranceCategoryCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceCategoryCode.Value
	597, // 91: google.fhir.stu3.proto.AllergyIntoleranceCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 92: google.fhir.stu3.proto.AllergyIntoleranceCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	31,  // 93: google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode.Value
	597, // 94: google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 95: google.fhir.stu3.proto.AllergyIntoleranceCriticalityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 96: google.fhir.stu3.proto.AllergyIntoleranceTypeCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceTypeCode.Value
	597, // 97: google.fhir.stu3.proto.AllergyIntoleranceTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 98: google.fhir.stu3.proto.AllergyIntoleranceTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	33,  // 99: google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode.Value
	597, // 100: google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 101: google.fhir.stu3.proto.AllergyIntoleranceVerificationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	34,  // 102: google.fhir.stu3.proto.GenderStatusCode.value:type_name -> google.fhir.stu3.proto.GenderStatusCode.Value
	597, // 103: google.fhir.stu3.proto.GenderStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 104: google.fhir.stu3.proto.GenderStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	35,  // 105: google.fhir.stu3.proto.AppointmentStatusCode.value:type_name -> google.fhir.stu3.proto.AppointmentStatusCode.Value
	597, // 106: google.fhir.stu3.proto.AppointmentStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 107: google.fhir.stu3.proto.AppointmentStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	36,  // 108: google.fhir.stu3.proto.AssertionDirectionTypeCode.value:type_name -> google.fhir.stu3.proto.AssertionDirectionTypeCode.Value
	597, // 109: google.fhir.stu3.proto.AssertionDirectionTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 110: google.fhir.stu3.proto.AssertionDirectionTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	37,  // 111: google.fhir.stu3.proto.AssertionOperatorTypeCode.value:type_name -> google.fhir.stu3.proto.AssertionOperatorTypeCode.Value
	597, // 112: google.fhir.stu3.proto.AssertionOperatorTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 113: google.fhir.stu3.proto.AssertionOperatorTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	38,  // 114: google.fhir.stu3.proto.AssertionResponseTypesCode.value:type_name -> google.fhir.stu3.proto.AssertionResponseTypesCode.Value
	597, // 115: google.fhir.stu3.proto.AssertionResponseTypesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 116: google.fhir.stu3.proto.AssertionResponseTypesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	39,  // 117: google.fhir.stu3.proto.AuditEventActionCode.value:type_name -> google.fhir.stu3.proto.AuditEventActionCode.Value
	597, // 118: google.fhir.stu3.proto.AuditEventActionCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 119: google.fhir.stu3.proto.AuditEventActionCode.extension:type_name -> google.fhir.stu3.proto.Extension
	40,  // 120: google.fhir.stu3.proto.AuditEventOutcomeCode.value:type_name -> google.fhir.stu3.proto.AuditEventOutcomeCode.Value
	597, // 121: google.fhir.stu3.proto.AuditEventOutcomeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 122: google.fhir.stu3.proto.AuditEventOutcomeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	41,  // 123: google.fhir.stu3.proto.BasicResourceTypesCode.value:type_name -> google.fhir.stu3.proto.BasicResourceTypesCode.Value
	597, // 124: google.fhir.stu3.proto.BasicResourceTypesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 125: google.fhir.stu3.proto.BasicResourceTypesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	42,  // 126: google.fhir.stu3.proto.BundleTypeCode.value:type_name -> google.fhir.stu3.proto.BundleTypeCode.Value
	597, // 127: google.fhir.stu3.proto.BundleTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 128: google.fhir.stu3.proto.BundleTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	43,  // 129: google.fhir.stu3.proto.CapabilityStatementKindCode.value:type_name -> google.fhir.stu3.proto.CapabilityStatementKindCode.Value
	597, // 130: google.fhir.stu3.proto.CapabilityStatementKindCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 131: google.fhir.stu3.proto.CapabilityStatementKindCode.extension:type_name -> google.fhir.stu3.proto.Extension
	44,  // 132: google.fhir.stu3.proto.CarePlanActivityCategoryCode.value:type_name -> google.fhir.stu3.proto.CarePlanActivityCategoryCode.Value
	597, // 133: google.fhir.stu3.proto.CarePlanActivityCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 134: google.fhir.stu3.proto.CarePlanActivityCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	45,  // 135: google.fhir.stu3.proto.CarePlanActivityStatusCode.value:type_name -> google.fhir.stu3.proto.CarePlanActivityStatusCode.Value
	597, // 136: google.fhir.stu3.proto.CarePlanActivityStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 137: google.fhir.stu3.proto.CarePlanActivityStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	46,  // 138: google.fhir.stu3.proto.CarePlanIntentCode.value:type_name -> google.fhir.stu3.proto.CarePlanIntentCode.Value
	597, // 139: google.fhir.stu3.proto.CarePlanIntentCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 140: google.fhir.stu3.proto.CarePlanIntentCode.extension:type_name -> google.fhir.stu3.proto.Extension
	47,  // 141: google.fhir.stu3.proto.CarePlanStatusCode.value:type_name -> google.fhir.stu3.proto.CarePlanStatusCode.Value
	597, // 142: google.fhir.stu3.proto.CarePlanStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 143: google.fhir.stu3.proto.CarePlanStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	48,  // 144: google.fhir.stu3.proto.CareTeamCategoryCode.value:type_name -> google.fhir.stu3.proto.CareTeamCategoryCode.Value
	597, // 145: google.fhir.stu3.proto.CareTeamCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 146: google.fhir.stu3.proto.CareTeamCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	49,  // 147: google.fhir.stu3.proto.CareTeamStatusCode.value:type_name -> google.fhir.stu3.proto.CareTeamStatusCode.Value
	597, // 148: google.fhir.stu3.proto.CareTeamStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 149: google.fhir.stu3.proto.CareTeamStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	50,  // 150: google.fhir.stu3.proto.ChargeItemStatusCode.value:type_name -> google.fhir.stu3.proto.ChargeItemStatusCode.Value
	597, // 151: google.fhir.stu3.proto.ChargeItemStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 152: google.fhir.stu3.proto.ChargeItemStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	51,  // 153: google.fhir.stu3.proto.ChoiceListOrientationCode.value:type_name -> google.fhir.stu3.proto.ChoiceListOrientationCode.Value
	597, // 154: google.fhir.stu3.proto.ChoiceListOrientationCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 155: google.fhir.stu3.proto.ChoiceListOrientationCode.extension:type_name -> google.fhir.stu3.proto.Extension
	52,  // 156: google.fhir.stu3.proto.UseCode.value:type_name -> google.fhir.stu3.proto.UseCode.Value
	597, // 157: google.fhir.stu3.proto.UseCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 158: google.fhir.stu3.proto.UseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	53,  // 159: google.fhir.stu3.proto.ClassificationOrContextCode.value:type_name -> google.fhir.stu3.proto.ClassificationOrContextCode.Value
	597, // 160: google.fhir.stu3.proto.ClassificationOrContextCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 161: google.fhir.stu3.proto.ClassificationOrContextCode.extension:type_name -> google.fhir.stu3.proto.Extension
	54,  // 162: google.fhir.stu3.proto.ClinicalImpressionStatusCode.value:type_name -> google.fhir.stu3.proto.ClinicalImpressionStatusCode.Value
	597, // 163: google.fhir.stu3.proto.ClinicalImpressionStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 164: google.fhir.stu3.proto.ClinicalImpressionStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	55,  // 165: google.fhir.stu3.proto.CodeSystemContentModeCode.value:type_name -> google.fhir.stu3.proto.CodeSystemContentModeCode.Value
	597, // 166: google.fhir.stu3.proto.CodeSystemContentModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 167: google.fhir.stu3.proto.CodeSystemContentModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	56,  // 168: google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode.value:type_name -> google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode.Value
	597, // 169: google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 170: google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode.extension:type_name -> google.fhir.stu3.proto.Extension
	57,  // 171: google.fhir.stu3.proto.CommonTagsCode.value:type_name -> google.fhir.stu3.proto.CommonTagsCode.Value
	597, // 172: google.fhir.stu3.proto.CommonTagsCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 173: google.fhir.stu3.proto.CommonTagsCode.extension:type_name -> google.fhir.stu3.proto.Extension
	58,  // 174: google.fhir.stu3.proto.CommunicationCategoryCode.value:type_name -> google.fhir.stu3.proto.CommunicationCategoryCode.Value
	597, // 175: google.fhir.stu3.proto.CommunicationCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 176: google.fhir.stu3.proto.CommunicationCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	59,  // 177: google.fhir.stu3.proto.CommunicationNotDoneReasonCode.value:type_name -> google.fhir.stu3.proto.CommunicationNotDoneReasonCode.Value
	597, // 178: google.fhir.stu3.proto.CommunicationNotDoneReasonCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 179: google.fhir.stu3.proto.CommunicationNotDoneReasonCode.extension:type_name -> google.fhir.stu3.proto.Extension
	60,  // 180: google.fhir.stu3.proto.CompartmentTypeCode.value:type_name -> google.fhir.stu3.proto.CompartmentTypeCode.Value
	597, // 181: google.fhir.stu3.proto.CompartmentTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 182: google.fhir.stu3.proto.CompartmentTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	61,  // 183: google.fhir.stu3.proto.CompositeMeasureScoringCode.value:type_name -> google.fhir.stu3.proto.CompositeMeasureScoringCode.Value
	597, // 184: google.fhir.stu3.proto.CompositeMeasureScoringCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 185: google.fhir.stu3.proto.CompositeMeasureScoringCode.extension:type_name -> google.fhir.stu3.proto.Extension
	62,  // 186: google.fhir.stu3.proto.CompositionAttestationModeCode.value:type_name -> google.fhir.stu3.proto.CompositionAttestationModeCode.Value
	597, // 187: google.fhir.stu3.proto.CompositionAttestationModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 188: google.fhir.stu3.proto.CompositionAttestationModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	63,  // 189: google.fhir.stu3.proto.CompositionStatusCode.value:type_name -> google.fhir.stu3.proto.CompositionStatusCode.Value
	597, // 190: google.fhir.stu3.proto.CompositionStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 191: google.fhir.stu3.proto.CompositionStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	64,  // 192: google.fhir.stu3.proto.ConceptMapEquivalenceCode.value:type_name -> google.fhir.stu3.proto.ConceptMapEquivalenceCode.Value
	597, // 193: google.fhir.stu3.proto.ConceptMapEquivalenceCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 194: google.fhir.stu3.proto.ConceptMapEquivalenceCode.extension:type_name -> google.fhir.stu3.proto.Extension
	65,  // 195: google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode.value:type_name -> google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode.Value
	597, // 196: google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 197: google.fhir.stu3.proto.ConceptMapGroupUnmappedModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	66,  // 198: google.fhir.stu3.proto.PropertyTypeCode.value:type_name -> google.fhir.stu3.proto.PropertyTypeCode.Value
	597, // 199: google.fhir.stu3.proto.PropertyTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 200: google.fhir.stu3.proto.PropertyTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	67,  // 201: google.fhir.stu3.proto.ConditionalDeleteStatusCode.value:type_name -> google.fhir.stu3.proto.ConditionalDeleteStatusCode.Value
	597, // 202: google.fhir.stu3.proto.ConditionalDeleteStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 203: google.fhir.stu3.proto.ConditionalDeleteStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	68,  // 204: google.fhir.stu3.proto.ConditionalReadStatusCode.value:type_name -> google.fhir.stu3.proto.ConditionalReadStatusCode.Value
	597, // 205: google.fhir.stu3.proto.ConditionalReadStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 206: google.fhir.stu3.proto.ConditionalReadStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	69,  // 207: google.fhir.stu3.proto.ConditionCategoryCodesCode.value:type_name -> google.fhir.stu3.proto.ConditionCategoryCodesCode.Value
	597, // 208: google.fhir.stu3.proto.ConditionCategoryCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 209: google.fhir.stu3.proto.ConditionCategoryCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	70,  // 210: google.fhir.stu3.proto.ConditionClinicalStatusCodesCode.value:type_name -> google.fhir.stu3.proto.ConditionClinicalStatusCodesCode.Value
	597, // 211: google.fhir.stu3.proto.ConditionClinicalStatusCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 212: google.fhir.stu3.proto.ConditionClinicalStatusCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	71,  // 213: google.fhir.stu3.proto.ConditionStateCode.value:type_name -> google.fhir.stu3.proto.ConditionStateCode.Value
	597, // 214: google.fhir.stu3.proto.ConditionStateCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 215: google.fhir.stu3.proto.ConditionStateCode.extension:type_name -> google.fhir.stu3.proto.Extension
	72,  // 216: google.fhir.stu3.proto.ConditionVerificationStatusCode.value:type_name -> google.fhir.stu3.proto.ConditionVerificationStatusCode.Value
	597, // 217: google.fhir.stu3.proto.ConditionVerificationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 218: google.fhir.stu3.proto.ConditionVerificationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	73,  // 219: google.fhir.stu3.proto.ConformanceExpectationCode.value:type_name -> google.fhir.stu3.proto.ConformanceExpectationCode.Value
	597, // 220: google.fhir.stu3.proto.ConformanceExpectationCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 221: google.fhir.stu3.proto.ConformanceExpectationCode.extension:type_name -> google.fhir.stu3.proto.Extension
	74,  // 222: google.fhir.stu3.proto.ConsentDataMeaningCode.value:type_name -> google.fhir.stu3.proto.ConsentDataMeaningCode.Value
	597, // 223: google.fhir.stu3.proto.ConsentDataMeaningCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 224: google.fhir.stu3.proto.ConsentDataMeaningCode.extension:type_name -> google.fhir.stu3.proto.Extension
	75,  // 225: google.fhir.stu3.proto.ConsentExceptTypeCode.value:type_name -> google.fhir.stu3.proto.ConsentExceptTypeCode.Value
	597, // 226: google.fhir.stu3.proto.ConsentExceptTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 227: google.fhir.stu3.proto.ConsentExceptTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	76,  // 228: google.fhir.stu3.proto.ConsentStateCode.value:type_name -> google.fhir.stu3.proto.ConsentStateCode.Value
	597, // 229: google.fhir.stu3.proto.ConsentStateCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 230: google.fhir.stu3.proto.ConsentStateCode.extension:type_name -> google.fhir.stu3.proto.Extension
	77,  // 231: google.fhir.stu3.proto.ContactEntityTypeCode.value:type_name -> google.fhir.stu3.proto.ContactEntityTypeCode.Value
	597, // 232: google.fhir.stu3.proto.ContactEntityTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 233: google.fhir.stu3.proto.ContactEntityTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	78,  // 234: google.fhir.stu3.proto.ContentTypeCode.value:type_name -> google.fhir.stu3.proto.ContentTypeCode.Value
	597, // 235: google.fhir.stu3.proto.ContentTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 236: google.fhir.stu3.proto.ContentTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	79,  // 237: google.fhir.stu3.proto.ContractResourceStatusCode.value:type_name -> google.fhir.stu3.proto.ContractResourceStatusCode.Value
	597, // 238: google.fhir.stu3.proto.ContractResourceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 239: google.fhir.stu3.proto.ContractResourceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	80,  // 240: google.fhir.stu3.proto.ContributorTypeCode.value:type_name -> google.fhir.stu3.proto.ContributorTypeCode.Value
	597, // 241: google.fhir.stu3.proto.ContributorTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 242: google.fhir.stu3.proto.ContributorTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	81,  // 243: google.fhir.stu3.proto.CopyNumberEventCode.value:type_name -> google.fhir.stu3.proto.CopyNumberEventCode.Value
	597, // 244: google.fhir.stu3.proto.CopyNumberEventCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 245: google.fhir.stu3.proto.CopyNumberEventCode.extension:type_name -> google.fhir.stu3.proto.Extension
	82,  // 246: google.fhir.stu3.proto.DataAbsentReasonCode.value:type_name -> google.fhir.stu3.proto.DataAbsentReasonCode.Value
	597, // 247: google.fhir.stu3.proto.DataAbsentReasonCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 248: google.fhir.stu3.proto.DataAbsentReasonCode.extension:type_name -> google.fhir.stu3.proto.Extension
	83,  // 249: google.fhir.stu3.proto.DataElementStringencyCode.value:type_name -> google.fhir.stu3.proto.DataElementStringencyCode.Value
	597, // 250: google.fhir.stu3.proto.DataElementStringencyCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 251: google.fhir.stu3.proto.DataElementStringencyCode.extension:type_name -> google.fhir.stu3.proto.Extension
	84,  // 252: google.fhir.stu3.proto.TriggerTypeCode.value:type_name -> google.fhir.stu3.proto.TriggerTypeCode.Value
	597, // 253: google.fhir.stu3.proto.TriggerTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 254: google.fhir.stu3.proto.TriggerTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	85,  // 255: google.fhir.stu3.proto.DataTypeCode.value:type_name -> google.fhir.stu3.proto.DataTypeCode.Value
	597, // 256: google.fhir.stu3.proto.DataTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 257: google.fhir.stu3.proto.DataTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	86,  // 258: google.fhir.stu3.proto.FHIRAllTypesCode.value:type_name -> google.fhir.stu3.proto.FHIRAllTypesCode.Value
	597, // 259: google.fhir.stu3.proto.FHIRAllTypesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 260: google.fhir.stu3.proto.FHIRAllTypesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	87,  // 261: google.fhir.stu3.proto.FHIRDefinedTypeCode.value:type_name -> google.fhir.stu3.proto.FHIRDefinedTypeCode.Value
	597, // 262: google.fhir.stu3.proto.FHIRDefinedTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 263: google.fhir.stu3.proto.FHIRDefinedTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	597, // 264: google.fhir.stu3.proto.FHIRDefinedTypeExtCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 265: google.fhir.stu3.proto.FHIRDefinedTypeExtCode.extension:type_name -> google.fhir.stu3.proto.Extension
	88,  // 266: google.fhir.stu3.proto.DefinitionStatusCode.value:type_name -> google.fhir.stu3.proto.DefinitionStatusCode.Value
	597, // 267: google.fhir.stu3.proto.DefinitionStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 268: google.fhir.stu3.proto.DefinitionStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	89,  // 269: google.fhir.stu3.proto.DefinitionTopicCode.value:type_name -> google.fhir.stu3.proto.DefinitionTopicCode.Value
	597, // 270: google.fhir.stu3.proto.DefinitionTopicCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 271: google.fhir.stu3.proto.DefinitionTopicCode.extension:type_name -> google.fhir.stu3.proto.Extension
	90,  // 272: google.fhir.stu3.proto.DetectedIssueSeverityCode.value:type_name -> google.fhir.stu3.proto.DetectedIssueSeverityCode.Value
	597, // 273: google.fhir.stu3.proto.DetectedIssueSeverityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 274: google.fhir.stu3.proto.DetectedIssueSeverityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	91,  // 275: google.fhir.stu3.proto.DeviceUseStatementStatusCode.value:type_name -> google.fhir.stu3.proto.DeviceUseStatementStatusCode.Value
	597, // 276: google.fhir.stu3.proto.DeviceUseStatementStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 277: google.fhir.stu3.proto.DeviceUseStatementStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	92,  // 278: google.fhir.stu3.proto.FHIRDeviceStatusCode.value:type_name -> google.fhir.stu3.proto.FHIRDeviceStatusCode.Value
	597, // 279: google.fhir.stu3.proto.FHIRDeviceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 280: google.fhir.stu3.proto.FHIRDeviceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	93,  // 281: google.fhir.stu3.proto.DiagnosisRoleCode.value:type_name -> google.fhir.stu3.proto.DiagnosisRoleCode.Value
	597, // 282: google.fhir.stu3.proto.DiagnosisRoleCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 283: google.fhir.stu3.proto.DiagnosisRoleCode.extension:type_name -> google.fhir.stu3.proto.Extension
	94,  // 284: google.fhir.stu3.proto.DiagnosticReportStatusCode.value:type_name -> google.fhir.stu3.proto.DiagnosticReportStatusCode.Value
	597, // 285: google.fhir.stu3.proto.DiagnosticReportStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 286: google.fhir.stu3.proto.DiagnosticReportStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	95,  // 287: google.fhir.stu3.proto.DigitalMediaTypeCode.value:type_name -> google.fhir.stu3.proto.DigitalMediaTypeCode.Value
	597, // 288: google.fhir.stu3.proto.DigitalMediaTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 289: google.fhir.stu3.proto.DigitalMediaTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	96,  // 290: google.fhir.stu3.proto.DocumentModeCode.value:type_name -> google.fhir.stu3.proto.DocumentModeCode.Value
	597, // 291: google.fhir.stu3.proto.DocumentModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 292: google.fhir.stu3.proto.DocumentModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	97,  // 293: google.fhir.stu3.proto.DocumentReferenceStatusCode.value:type_name -> google.fhir.stu3.proto.DocumentReferenceStatusCode.Value
	597, // 294: google.fhir.stu3.proto.DocumentReferenceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 295: google.fhir.stu3.proto.DocumentReferenceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	98,  // 296: google.fhir.stu3.proto.DocumentRelationshipTypeCode.value:type_name -> google.fhir.stu3.proto.DocumentRelationshipTypeCode.Value
	597, // 297: google.fhir.stu3.proto.DocumentRelationshipTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 298: google.fhir.stu3.proto.DocumentRelationshipTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	99,  // 299: google.fhir.stu3.proto.AdmitSourceCode.value:type_name -> google.fhir.stu3.proto.AdmitSourceCode.Value
	597, // 300: google.fhir.stu3.proto.AdmitSourceCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 301: google.fhir.stu3.proto.AdmitSourceCode.extension:type_name -> google.fhir.stu3.proto.Extension
	100, // 302: google.fhir.stu3.proto.DietCode.value:type_name -> google.fhir.stu3.proto.DietCode.Value
	597, // 303: google.fhir.stu3.proto.DietCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 304: google.fhir.stu3.proto.DietCode.extension:type_name -> google.fhir.stu3.proto.Extension
	101, // 305: google.fhir.stu3.proto.DischargeDispositionCode.value:type_name -> google.fhir.stu3.proto.DischargeDispositionCode.Value
	597, // 306: google.fhir.stu3.proto.DischargeDispositionCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 307: google.fhir.stu3.proto.DischargeDispositionCode.extension:type_name -> google.fhir.stu3.proto.Extension
	102, // 308: google.fhir.stu3.proto.EncounterLocationStatusCode.value:type_name -> google.fhir.stu3.proto.EncounterLocationStatusCode.Value
	597, // 309: google.fhir.stu3.proto.EncounterLocationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 310: google.fhir.stu3.proto.EncounterLocationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	103, // 311: google.fhir.stu3.proto.SpecialArrangementsCode.value:type_name -> google.fhir.stu3.proto.SpecialArrangementsCode.Value
	597, // 312: google.fhir.stu3.proto.SpecialArrangementsCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 313: google.fhir.stu3.proto.SpecialArrangementsCode.extension:type_name -> google.fhir.stu3.proto.Extension
	104, // 314: google.fhir.stu3.proto.EncounterStatusCode.value:type_name -> google.fhir.stu3.proto.EncounterStatusCode.Value
	597, // 315: google.fhir.stu3.proto.EncounterStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 316: google.fhir.stu3.proto.EncounterStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	105, // 317: google.fhir.stu3.proto.EncounterTypeCode.value:type_name -> google.fhir.stu3.proto.EncounterTypeCode.Value
	597, // 318: google.fhir.stu3.proto.EncounterTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 319: google.fhir.stu3.proto.EncounterTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	106, // 320: google.fhir.stu3.proto.EndpointStatusCode.value:type_name -> google.fhir.stu3.proto.EndpointStatusCode.Value
	597, // 321: google.fhir.stu3.proto.EndpointStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 322: google.fhir.stu3.proto.EndpointStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	107, // 323: google.fhir.stu3.proto.EntityNamePartQualifierCode.value:type_name -> google.fhir.stu3.proto.EntityNamePartQualifierCode.Value
	597, // 324: google.fhir.stu3.proto.EntityNamePartQualifierCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 325: google.fhir.stu3.proto.EntityNamePartQualifierCode.extension:type_name -> google.fhir.stu3.proto.Extension
	108, // 326: google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode.value:type_name -> google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode.Value
	597, // 327: google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 328: google.fhir.stu3.proto.EnteralFormulaAdditiveTypeCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	109, // 329: google.fhir.stu3.proto.EpisodeOfCareStatusCode.value:type_name -> google.fhir.stu3.proto.EpisodeOfCareStatusCode.Value
	597, // 330: google.fhir.stu3.proto.EpisodeOfCareStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 331: google.fhir.stu3.proto.EpisodeOfCareStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	110, // 332: google.fhir.stu3.proto.EpisodeOfCareTypeCode.value:type_name -> google.fhir.stu3.proto.EpisodeOfCareTypeCode.Value
	597, // 333: google.fhir.stu3.proto.EpisodeOfCareTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 334: google.fhir.stu3.proto.EpisodeOfCareTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	111, // 335: google.fhir.stu3.proto.EventCapabilityModeCode.value:type_name -> google.fhir.stu3.proto.EventCapabilityModeCode.Value
	597, // 336: google.fhir.stu3.proto.EventCapabilityModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 337: google.fhir.stu3.proto.EventCapabilityModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	112, // 338: google.fhir.stu3.proto.EventStatusCode.value:type_name -> google.fhir.stu3.proto.EventStatusCode.Value
	597, // 339: google.fhir.stu3.proto.EventStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 340: google.fhir.stu3.proto.EventStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	113, // 341: google.fhir.stu3.proto.ClaimPayeeResourceTypeCode.value:type_name -> google.fhir.stu3.proto.ClaimPayeeResourceTypeCode.Value
	597, // 342: google.fhir.stu3.proto.ClaimPayeeResourceTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 343: google.fhir.stu3.proto.ClaimPayeeResourceTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	114, // 344: google.fhir.stu3.proto.ExplanationOfBenefitStatusCode.value:type_name -> google.fhir.stu3.proto.ExplanationOfBenefitStatusCode.Value
	597, // 345: google.fhir.stu3.proto.ExplanationOfBenefitStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 346: google.fhir.stu3.proto.ExplanationOfBenefitStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	115, // 347: google.fhir.stu3.proto.ExtensionContextCode.value:type_name -> google.fhir.stu3.proto.ExtensionContextCode.Value
	597, // 348: google.fhir.stu3.proto.ExtensionContextCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 349: google.fhir.stu3.proto.ExtensionContextCode.extension:type_name -> google.fhir.stu3.proto.Extension
	116, // 350: google.fhir.stu3.proto.FilterOperatorCode.value:type_name -> google.fhir.stu3.proto.FilterOperatorCode.Value
	597, // 351: google.fhir.stu3.proto.FilterOperatorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 352: google.fhir.stu3.proto.FilterOperatorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	117, // 353: google.fhir.stu3.proto.FlagCategoryCode.value:type_name -> google.fhir.stu3.proto.FlagCategoryCode.Value
	597, // 354: google.fhir.stu3.proto.FlagCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 355: google.fhir.stu3.proto.FlagCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	118, // 356: google.fhir.stu3.proto.FlagPriorityCodesCode.value:type_name -> google.fhir.stu3.proto.FlagPriorityCodesCode.Value
	597, // 357: google.fhir.stu3.proto.FlagPriorityCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 358: google.fhir.stu3.proto.FlagPriorityCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	119, // 359: google.fhir.stu3.proto.FlagStatusCode.value:type_name -> google.fhir.stu3.proto.FlagStatusCode.Value
	597, // 360: google.fhir.stu3.proto.FlagStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 361: google.fhir.stu3.proto.FlagStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	120, // 362: google.fhir.stu3.proto.FinancialResourceStatusCode.value:type_name -> google.fhir.stu3.proto.FinancialResourceStatusCode.Value
	597, // 363: google.fhir.stu3.proto.FinancialResourceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 364: google.fhir.stu3.proto.FinancialResourceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	121, // 365: google.fhir.stu3.proto.GoalAcceptanceStatusCode.value:type_name -> google.fhir.stu3.proto.GoalAcceptanceStatusCode.Value
	597, // 366: google.fhir.stu3.proto.GoalAcceptanceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 367: google.fhir.stu3.proto.GoalAcceptanceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	122, // 368: google.fhir.stu3.proto.GoalCategoryCode.value:type_name -> google.fhir.stu3.proto.GoalCategoryCode.Value
	597, // 369: google.fhir.stu3.proto.GoalCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 370: google.fhir.stu3.proto.GoalCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	123, // 371: google.fhir.stu3.proto.GoalPriorityCode.value:type_name -> google.fhir.stu3.proto.GoalPriorityCode.Value
	597, // 372: google.fhir.stu3.proto.GoalPriorityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 373: google.fhir.stu3.proto.GoalPriorityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	124, // 374: google.fhir.stu3.proto.GoalRelationshipTypeCode.value:type_name -> google.fhir.stu3.proto.GoalRelationshipTypeCode.Value
	597, // 375: google.fhir.stu3.proto.GoalRelationshipTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 376: google.fhir.stu3.proto.GoalRelationshipTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	125, // 377: google.fhir.stu3.proto.GoalStatusCode.value:type_name -> google.fhir.stu3.proto.GoalStatusCode.Value
	597, // 378: google.fhir.stu3.proto.GoalStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 379: google.fhir.stu3.proto.GoalStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	126, // 380: google.fhir.stu3.proto.GoalStatusReasonCode.value:type_name -> google.fhir.stu3.proto.GoalStatusReasonCode.Value
	597, // 381: google.fhir.stu3.proto.GoalStatusReasonCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 382: google.fhir.stu3.proto.GoalStatusReasonCode.extension:type_name -> google.fhir.stu3.proto.Extension
	127, // 383: google.fhir.stu3.proto.GraphCompartmentRuleCode.value:type_name -> google.fhir.stu3.proto.GraphCompartmentRuleCode.Value
	597, // 384: google.fhir.stu3.proto.GraphCompartmentRuleCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 385: google.fhir.stu3.proto.GraphCompartmentRuleCode.extension:type_name -> google.fhir.stu3.proto.Extension
	128, // 386: google.fhir.stu3.proto.GroupTypeCode.value:type_name -> google.fhir.stu3.proto.GroupTypeCode.Value
	597, // 387: google.fhir.stu3.proto.GroupTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 388: google.fhir.stu3.proto.GroupTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	129, // 389: google.fhir.stu3.proto.GuidanceResponseStatusCode.value:type_name -> google.fhir.stu3.proto.GuidanceResponseStatusCode.Value
	597, // 390: google.fhir.stu3.proto.GuidanceResponseStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 391: google.fhir.stu3.proto.GuidanceResponseStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	130, // 392: google.fhir.stu3.proto.GuideDependencyTypeCode.value:type_name -> google.fhir.stu3.proto.GuideDependencyTypeCode.Value
	597, // 393: google.fhir.stu3.proto.GuideDependencyTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 394: google.fhir.stu3.proto.GuideDependencyTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	131, // 395: google.fhir.stu3.proto.GuidePageKindCode.value:type_name -> google.fhir.stu3.proto.GuidePageKindCode.Value
	597, // 396: google.fhir.stu3.proto.GuidePageKindCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 397: google.fhir.stu3.proto.GuidePageKindCode.extension:type_name -> google.fhir.stu3.proto.Extension
	132, // 398: google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode.value:type_name -> google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode.Value
	597, // 399: google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 400: google.fhir.stu3.proto.FamilyHistoryNotDoneReasonCode.extension:type_name -> google.fhir.stu3.proto.Extension
	133, // 401: google.fhir.stu3.proto.FamilyHistoryStatusCode.value:type_name -> google.fhir.stu3.proto.FamilyHistoryStatusCode.Value
	597, // 402: google.fhir.stu3.proto.FamilyHistoryStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 403: google.fhir.stu3.proto.FamilyHistoryStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	134, // 404: google.fhir.stu3.proto.HL7WorkgroupCode.value:type_name -> google.fhir.stu3.proto.HL7WorkgroupCode.Value
	597, // 405: google.fhir.stu3.proto.HL7WorkgroupCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 406: google.fhir.stu3.proto.HL7WorkgroupCode.extension:type_name -> google.fhir.stu3.proto.Extension
	135, // 407: google.fhir.stu3.proto.TestScriptRequestMethodCodeCode.value:type_name -> google.fhir.stu3.proto.TestScriptRequestMethodCodeCode.Value
	597, // 408: google.fhir.stu3.proto.TestScriptRequestMethodCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 409: google.fhir.stu3.proto.TestScriptRequestMethodCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	136, // 410: google.fhir.stu3.proto.HTTPVerbCode.value:type_name -> google.fhir.stu3.proto.HTTPVerbCode.Value
	597, // 411: google.fhir.stu3.proto.HTTPVerbCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 412: google.fhir.stu3.proto.HTTPVerbCode.extension:type_name -> google.fhir.stu3.proto.Extension
	137, // 413: google.fhir.stu3.proto.IdentityAssuranceLevelCode.value:type_name -> google.fhir.stu3.proto.IdentityAssuranceLevelCode.Value
	597, // 414: google.fhir.stu3.proto.IdentityAssuranceLevelCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 415: google.fhir.stu3.proto.IdentityAssuranceLevelCode.extension:type_name -> google.fhir.stu3.proto.Extension
	138, // 416: google.fhir.stu3.proto.ImmunizationOriginCodesCode.value:type_name -> google.fhir.stu3.proto.ImmunizationOriginCodesCode.Value
	597, // 417: google.fhir.stu3.proto.ImmunizationOriginCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 418: google.fhir.stu3.proto.ImmunizationOriginCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	139, // 419: google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode.value:type_name -> google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode.Value
	597, // 420: google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 421: google.fhir.stu3.proto.ImmunizationRecommendationDateCriterionCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	140, // 422: google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode.value:type_name -> google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode.Value
	597, // 423: google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 424: google.fhir.stu3.proto.ImmunizationRecommendationStatusCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	141, // 425: google.fhir.stu3.proto.ImmunizationStatusCodesCode.value:type_name -> google.fhir.stu3.proto.ImmunizationStatusCodesCode.Value
	597, // 426: google.fhir.stu3.proto.ImmunizationStatusCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 427: google.fhir.stu3.proto.ImmunizationStatusCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	142, // 428: google.fhir.stu3.proto.ImplantStatusCode.value:type_name -> google.fhir.stu3.proto.ImplantStatusCode.Value
	597, // 429: google.fhir.stu3.proto.ImplantStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 430: google.fhir.stu3.proto.ImplantStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	143, // 431: google.fhir.stu3.proto.InstanceAvailabilityCode.value:type_name -> google.fhir.stu3.proto.InstanceAvailabilityCode.Value
	597, // 432: google.fhir.stu3.proto.InstanceAvailabilityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 433: google.fhir.stu3.proto.InstanceAvailabilityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	144, // 434: google.fhir.stu3.proto.IssueSeverityCode.value:type_name -> google.fhir.stu3.proto.IssueSeverityCode.Value
	597, // 435: google.fhir.stu3.proto.IssueSeverityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 436: google.fhir.stu3.proto.IssueSeverityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	145, // 437: google.fhir.stu3.proto.IssueTypeCode.value:type_name -> google.fhir.stu3.proto.IssueTypeCode.Value
	597, // 438: google.fhir.stu3.proto.IssueTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 439: google.fhir.stu3.proto.IssueTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	146, // 440: google.fhir.stu3.proto.QuestionnaireItemTypeCode.value:type_name -> google.fhir.stu3.proto.QuestionnaireItemTypeCode.Value
	597, // 441: google.fhir.stu3.proto.QuestionnaireItemTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 442: google.fhir.stu3.proto.QuestionnaireItemTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	147, // 443: google.fhir.stu3.proto.LibraryTypeCode.value:type_name -> google.fhir.stu3.proto.LibraryTypeCode.Value
	597, // 444: google.fhir.stu3.proto.LibraryTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 445: google.fhir.stu3.proto.LibraryTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	148, // 446: google.fhir.stu3.proto.LinkageTypeCode.value:type_name -> google.fhir.stu3.proto.LinkageTypeCode.Value
	597, // 447: google.fhir.stu3.proto.LinkageTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 448: google.fhir.stu3.proto.LinkageTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	149, // 449: google.fhir.stu3.proto.LinkTypeCode.value:type_name -> google.fhir.stu3.proto.LinkTypeCode.Value
	597, // 450: google.fhir.stu3.proto.LinkTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 451: google.fhir.stu3.proto.LinkTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	150, // 452: google.fhir.stu3.proto.ListEmptyReasonsCode.value:type_name -> google.fhir.stu3.proto.ListEmptyReasonsCode.Value
	597, // 453: google.fhir.stu3.proto.ListEmptyReasonsCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 454: google.fhir.stu3.proto.ListEmptyReasonsCode.extension:type_name -> google.fhir.stu3.proto.Extension
	151, // 455: google.fhir.stu3.proto.ExampleUseCodesforListCode.value:type_name -> google.fhir.stu3.proto.ExampleUseCodesforListCode.Value
	597, // 456: google.fhir.stu3.proto.ExampleUseCodesforListCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 457: google.fhir.stu3.proto.ExampleUseCodesforListCode.extension:type_name -> google.fhir.stu3.proto.Extension
	152, // 458: google.fhir.stu3.proto.ListModeCode.value:type_name -> google.fhir.stu3.proto.ListModeCode.Value
	597, // 459: google.fhir.stu3.proto.ListModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 460: google.fhir.stu3.proto.ListModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	153, // 461: google.fhir.stu3.proto.ListOrderCodesCode.value:type_name -> google.fhir.stu3.proto.ListOrderCodesCode.Value
	597, // 462: google.fhir.stu3.proto.ListOrderCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 463: google.fhir.stu3.proto.ListOrderCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	154, // 464: google.fhir.stu3.proto.ListStatusCode.value:type_name -> google.fhir.stu3.proto.ListStatusCode.Value
	597, // 465: google.fhir.stu3.proto.ListStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 466: google.fhir.stu3.proto.ListStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	155, // 467: google.fhir.stu3.proto.LocationModeCode.value:type_name -> google.fhir.stu3.proto.LocationModeCode.Value
	597, // 468: google.fhir.stu3.proto.LocationModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 469: google.fhir.stu3.proto.LocationModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	156, // 470: google.fhir.stu3.proto.LocationTypeCode.value:type_name -> google.fhir.stu3.proto.LocationTypeCode.Value
	597, // 471: google.fhir.stu3.proto.LocationTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 472: google.fhir.stu3.proto.LocationTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	157, // 473: google.fhir.stu3.proto.LocationStatusCode.value:type_name -> google.fhir.stu3.proto.LocationStatusCode.Value
	597, // 474: google.fhir.stu3.proto.LocationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 475: google.fhir.stu3.proto.LocationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	158, // 476: google.fhir.stu3.proto.ProbabilityDistributionTypeCode.value:type_name -> google.fhir.stu3.proto.ProbabilityDistributionTypeCode.Value
	597, // 477: google.fhir.stu3.proto.ProbabilityDistributionTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 478: google.fhir.stu3.proto.ProbabilityDistributionTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	159, // 479: google.fhir.stu3.proto.StructureMapContextTypeCode.value:type_name -> google.fhir.stu3.proto.StructureMapContextTypeCode.Value
	597, // 480: google.fhir.stu3.proto.StructureMapContextTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 481: google.fhir.stu3.proto.StructureMapContextTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	160, // 482: google.fhir.stu3.proto.StructureMapGroupTypeModeCode.value:type_name -> google.fhir.stu3.proto.StructureMapGroupTypeModeCode.Value
	597, // 483: google.fhir.stu3.proto.StructureMapGroupTypeModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 484: google.fhir.stu3.proto.StructureMapGroupTypeModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	161, // 485: google.fhir.stu3.proto.StructureMapInputModeCode.value:type_name -> google.fhir.stu3.proto.StructureMapInputModeCode.Value
	597, // 486: google.fhir.stu3.proto.StructureMapInputModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 487: google.fhir.stu3.proto.StructureMapInputModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	162, // 488: google.fhir.stu3.proto.StructureMapModelModeCode.value:type_name -> google.fhir.stu3.proto.StructureMapModelModeCode.Value
	597, // 489: google.fhir.stu3.proto.StructureMapModelModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 490: google.fhir.stu3.proto.StructureMapModelModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	163, // 491: google.fhir.stu3.proto.StructureMapSourceListModeCode.value:type_name -> google.fhir.stu3.proto.StructureMapSourceListModeCode.Value
	597, // 492: google.fhir.stu3.proto.StructureMapSourceListModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 493: google.fhir.stu3.proto.StructureMapSourceListModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	164, // 494: google.fhir.stu3.proto.StructureMapTargetListModeCode.value:type_name -> google.fhir.stu3.proto.StructureMapTargetListModeCode.Value
	597, // 495: google.fhir.stu3.proto.StructureMapTargetListModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 496: google.fhir.stu3.proto.StructureMapTargetListModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	165, // 497: google.fhir.stu3.proto.StructureMapTransformCode.value:type_name -> google.fhir.stu3.proto.StructureMapTransformCode.Value
	597, // 498: google.fhir.stu3.proto.StructureMapTransformCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 499: google.fhir.stu3.proto.StructureMapTransformCode.extension:type_name -> google.fhir.stu3.proto.Extension
	166, // 500: google.fhir.stu3.proto.MatchGradeCode.value:type_name -> google.fhir.stu3.proto.MatchGradeCode.Value
	597, // 501: google.fhir.stu3.proto.MatchGradeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 502: google.fhir.stu3.proto.MatchGradeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	167, // 503: google.fhir.stu3.proto.MeasureDataUsageCode.value:type_name -> google.fhir.stu3.proto.MeasureDataUsageCode.Value
	597, // 504: google.fhir.stu3.proto.MeasureDataUsageCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 505: google.fhir.stu3.proto.MeasureDataUsageCode.extension:type_name -> google.fhir.stu3.proto.Extension
	168, // 506: google.fhir.stu3.proto.MeasmntPrincipleCode.value:type_name -> google.fhir.stu3.proto.MeasmntPrincipleCode.Value
	597, // 507: google.fhir.stu3.proto.MeasmntPrincipleCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 508: google.fhir.stu3.proto.MeasmntPrincipleCode.extension:type_name -> google.fhir.stu3.proto.Extension
	169, // 509: google.fhir.stu3.proto.MeasurePopulationTypeCode.value:type_name -> google.fhir.stu3.proto.MeasurePopulationTypeCode.Value
	597, // 510: google.fhir.stu3.proto.MeasurePopulationTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 511: google.fhir.stu3.proto.MeasurePopulationTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	170, // 512: google.fhir.stu3.proto.MeasureReportStatusCode.value:type_name -> google.fhir.stu3.proto.MeasureReportStatusCode.Value
	597, // 513: google.fhir.stu3.proto.MeasureReportStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 514: google.fhir.stu3.proto.MeasureReportStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	171, // 515: google.fhir.stu3.proto.MeasureReportTypeCode.value:type_name -> google.fhir.stu3.proto.MeasureReportTypeCode.Value
	597, // 516: google.fhir.stu3.proto.MeasureReportTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 517: google.fhir.stu3.proto.MeasureReportTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	172, // 518: google.fhir.stu3.proto.MeasureScoringCode.value:type_name -> google.fhir.stu3.proto.MeasureScoringCode.Value
	597, // 519: google.fhir.stu3.proto.MeasureScoringCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 520: google.fhir.stu3.proto.MeasureScoringCode.extension:type_name -> google.fhir.stu3.proto.Extension
	173, // 521: google.fhir.stu3.proto.MeasureTypeCode.value:type_name -> google.fhir.stu3.proto.MeasureTypeCode.Value
	597, // 522: google.fhir.stu3.proto.MeasureTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 523: google.fhir.stu3.proto.MeasureTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	174, // 524: google.fhir.stu3.proto.MedicationAdministrationCategoryCode.value:type_name -> google.fhir.stu3.proto.MedicationAdministrationCategoryCode.Value
	597, // 525: google.fhir.stu3.proto.MedicationAdministrationCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 526: google.fhir.stu3.proto.MedicationAdministrationCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	175, // 527: google.fhir.stu3.proto.MedicationAdministrationStatusCode.value:type_name -> google.fhir.stu3.proto.MedicationAdministrationStatusCode.Value
	597, // 528: google.fhir.stu3.proto.MedicationAdministrationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 529: google.fhir.stu3.proto.MedicationAdministrationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	176, // 530: google.fhir.stu3.proto.MedicationDispenseCategoryCode.value:type_name -> google.fhir.stu3.proto.MedicationDispenseCategoryCode.Value
	597, // 531: google.fhir.stu3.proto.MedicationDispenseCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 532: google.fhir.stu3.proto.MedicationDispenseCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	177, // 533: google.fhir.stu3.proto.MedicationDispenseStatusCode.value:type_name -> google.fhir.stu3.proto.MedicationDispenseStatusCode.Value
	597, // 534: google.fhir.stu3.proto.MedicationDispenseStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 535: google.fhir.stu3.proto.MedicationDispenseStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	178, // 536: google.fhir.stu3.proto.MedicationContainerCode.value:type_name -> google.fhir.stu3.proto.MedicationContainerCode.Value
	597, // 537: google.fhir.stu3.proto.MedicationContainerCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 538: google.fhir.stu3.proto.MedicationContainerCode.extension:type_name -> google.fhir.stu3.proto.Extension
	179, // 539: google.fhir.stu3.proto.MedicationRequestCategoryCode.value:type_name -> google.fhir.stu3.proto.MedicationRequestCategoryCode.Value
	597, // 540: google.fhir.stu3.proto.MedicationRequestCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 541: google.fhir.stu3.proto.MedicationRequestCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	180, // 542: google.fhir.stu3.proto.MedicationRequestIntentCode.value:type_name -> google.fhir.stu3.proto.MedicationRequestIntentCode.Value
	597, // 543: google.fhir.stu3.proto.MedicationRequestIntentCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 544: google.fhir.stu3.proto.MedicationRequestIntentCode.extension:type_name -> google.fhir.stu3.proto.Extension
	181, // 545: google.fhir.stu3.proto.MedicationRequestPriorityCode.value:type_name -> google.fhir.stu3.proto.MedicationRequestPriorityCode.Value
	597, // 546: google.fhir.stu3.proto.MedicationRequestPriorityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 547: google.fhir.stu3.proto.MedicationRequestPriorityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	182, // 548: google.fhir.stu3.proto.MedicationRequestStatusCode.value:type_name -> google.fhir.stu3.proto.MedicationRequestStatusCode.Value
	597, // 549: google.fhir.stu3.proto.MedicationRequestStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 550: google.fhir.stu3.proto.MedicationRequestStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	183, // 551: google.fhir.stu3.proto.MedicationStatementCategoryCode.value:type_name -> google.fhir.stu3.proto.MedicationStatementCategoryCode.Value
	597, // 552: google.fhir.stu3.proto.MedicationStatementCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 553: google.fhir.stu3.proto.MedicationStatementCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	184, // 554: google.fhir.stu3.proto.MedicationStatementStatusCode.value:type_name -> google.fhir.stu3.proto.MedicationStatementStatusCode.Value
	597, // 555: google.fhir.stu3.proto.MedicationStatementStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 556: google.fhir.stu3.proto.MedicationStatementStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	185, // 557: google.fhir.stu3.proto.MedicationStatementTakenCode.value:type_name -> google.fhir.stu3.proto.MedicationStatementTakenCode.Value
	597, // 558: google.fhir.stu3.proto.MedicationStatementTakenCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 559: google.fhir.stu3.proto.MedicationStatementTakenCode.extension:type_name -> google.fhir.stu3.proto.Extension
	186, // 560: google.fhir.stu3.proto.MedicationStatusCode.value:type_name -> google.fhir.stu3.proto.MedicationStatusCode.Value
	597, // 561: google.fhir.stu3.proto.MedicationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 562: google.fhir.stu3.proto.MedicationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	187, // 563: google.fhir.stu3.proto.MessageEventCode.value:type_name -> google.fhir.stu3.proto.MessageEventCode.Value
	597, // 564: google.fhir.stu3.proto.MessageEventCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 565: google.fhir.stu3.proto.MessageEventCode.extension:type_name -> google.fhir.stu3.proto.Extension
	188, // 566: google.fhir.stu3.proto.MessageHeaderResponseRequestCode.value:type_name -> google.fhir.stu3.proto.MessageHeaderResponseRequestCode.Value
	597, // 567: google.fhir.stu3.proto.MessageHeaderResponseRequestCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 568: google.fhir.stu3.proto.MessageHeaderResponseRequestCode.extension:type_name -> google.fhir.stu3.proto.Extension
	189, // 569: google.fhir.stu3.proto.ExampleMessageReasonCodesCode.value:type_name -> google.fhir.stu3.proto.ExampleMessageReasonCodesCode.Value
	597, // 570: google.fhir.stu3.proto.ExampleMessageReasonCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 571: google.fhir.stu3.proto.ExampleMessageReasonCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	190, // 572: google.fhir.stu3.proto.MessageSignificanceCategoryCode.value:type_name -> google.fhir.stu3.proto.MessageSignificanceCategoryCode.Value
	597, // 573: google.fhir.stu3.proto.MessageSignificanceCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 574: google.fhir.stu3.proto.MessageSignificanceCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	191, // 575: google.fhir.stu3.proto.MessageTransportCode.value:type_name -> google.fhir.stu3.proto.MessageTransportCode.Value
	597, // 576: google.fhir.stu3.proto.MessageTransportCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 577: google.fhir.stu3.proto.MessageTransportCode.extension:type_name -> google.fhir.stu3.proto.Extension
	192, // 578: google.fhir.stu3.proto.DeviceMetricCalibrationStateCode.value:type_name -> google.fhir.stu3.proto.DeviceMetricCalibrationStateCode.Value
	597, // 579: google.fhir.stu3.proto.DeviceMetricCalibrationStateCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 580: google.fhir.stu3.proto.DeviceMetricCalibrationStateCode.extension:type_name -> google.fhir.stu3.proto.Extension
	193, // 581: google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode.value:type_name -> google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode.Value
	597, // 582: google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 583: google.fhir.stu3.proto.DeviceMetricCalibrationTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	194, // 584: google.fhir.stu3.proto.DeviceMetricCategoryCode.value:type_name -> google.fhir.stu3.proto.DeviceMetricCategoryCode.Value
	597, // 585: google.fhir.stu3.proto.DeviceMetricCategoryCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 586: google.fhir.stu3.proto.DeviceMetricCategoryCode.extension:type_name -> google.fhir.stu3.proto.Extension
	195, // 587: google.fhir.stu3.proto.DeviceMetricColorCode.value:type_name -> google.fhir.stu3.proto.DeviceMetricColorCode.Value
	597, // 588: google.fhir.stu3.proto.DeviceMetricColorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 589: google.fhir.stu3.proto.DeviceMetricColorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	196, // 590: google.fhir.stu3.proto.DeviceMetricOperationalStatusCode.value:type_name -> google.fhir.stu3.proto.DeviceMetricOperationalStatusCode.Value
	597, // 591: google.fhir.stu3.proto.DeviceMetricOperationalStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 592: google.fhir.stu3.proto.DeviceMetricOperationalStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	197, // 593: google.fhir.stu3.proto.HumanNameAssemblyOrderCode.value:type_name -> google.fhir.stu3.proto.HumanNameAssemblyOrderCode.Value
	597, // 594: google.fhir.stu3.proto.HumanNameAssemblyOrderCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 595: google.fhir.stu3.proto.HumanNameAssemblyOrderCode.extension:type_name -> google.fhir.stu3.proto.Extension
	198, // 596: google.fhir.stu3.proto.NameRepresentationUseCode.value:type_name -> google.fhir.stu3.proto.NameRepresentationUseCode.Value
	597, // 597: google.fhir.stu3.proto.NameRepresentationUseCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 598: google.fhir.stu3.proto.NameRepresentationUseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	199, // 599: google.fhir.stu3.proto.NamingSystemIdentifierTypeCode.value:type_name -> google.fhir.stu3.proto.NamingSystemIdentifierTypeCode.Value
	597, // 600: google.fhir.stu3.proto.NamingSystemIdentifierTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 601: google.fhir.stu3.proto.NamingSystemIdentifierTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	200, // 602: google.fhir.stu3.proto.NamingSystemTypeCode.value:type_name -> google.fhir.stu3.proto.NamingSystemTypeCode.Value
	597, // 603: google.fhir.stu3.proto.NamingSystemTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 604: google.fhir.stu3.proto.NamingSystemTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	201, // 605: google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode.value:type_name -> google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode.Value
	597, // 606: google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 607: google.fhir.stu3.proto.AuditEventAgentNetworkTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	202, // 608: google.fhir.stu3.proto.NoteTypeCode.value:type_name -> google.fhir.stu3.proto.NoteTypeCode.Value
	597, // 609: google.fhir.stu3.proto.NoteTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 610: google.fhir.stu3.proto.NoteTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	203, // 611: google.fhir.stu3.proto.NullFlavorCode.value:type_name -> google.fhir.stu3.proto.NullFlavorCode.Value
	597, // 612: google.fhir.stu3.proto.NullFlavorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 613: google.fhir.stu3.proto.NullFlavorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	204, // 614: google.fhir.stu3.proto.NutritionOrderStatusCode.value:type_name -> google.fhir.stu3.proto.NutritionOrderStatusCode.Value
	597, // 615: google.fhir.stu3.proto.NutritionOrderStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 616: google.fhir.stu3.proto.NutritionOrderStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	205, // 617: google.fhir.stu3.proto.ObservationCategoryCodesCode.value:type_name -> google.fhir.stu3.proto.ObservationCategoryCodesCode.Value
	597, // 618: google.fhir.stu3.proto.ObservationCategoryCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 619: google.fhir.stu3.proto.ObservationCategoryCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	206, // 620: google.fhir.stu3.proto.ObservationRelationshipTypeCode.value:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode.Value
	597, // 621: google.fhir.stu3.proto.ObservationRelationshipTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 622: google.fhir.stu3.proto.ObservationRelationshipTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207, // 623: google.fhir.stu3.proto.StatisticsCodeCode.value:type_name -> google.fhir.stu3.proto.StatisticsCodeCode.Value
	597, // 624: google.fhir.stu3.proto.StatisticsCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 625: google.fhir.stu3.proto.StatisticsCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	208, // 626: google.fhir.stu3.proto.ObservationStatusCode.value:type_name -> google.fhir.stu3.proto.ObservationStatusCode.Value
	597, // 627: google.fhir.stu3.proto.ObservationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 628: google.fhir.stu3.proto.ObservationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	209, // 629: google.fhir.stu3.proto.DeviceComponentOperationalStatusCode.value:type_name -> google.fhir.stu3.proto.DeviceComponentOperationalStatusCode.Value
	597, // 630: google.fhir.stu3.proto.DeviceComponentOperationalStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 631: google.fhir.stu3.proto.DeviceComponentOperationalStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	210, // 632: google.fhir.stu3.proto.OperationKindCode.value:type_name -> google.fhir.stu3.proto.OperationKindCode.Value
	597, // 633: google.fhir.stu3.proto.OperationKindCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 634: google.fhir.stu3.proto.OperationKindCode.extension:type_name -> google.fhir.stu3.proto.Extension
	211, // 635: google.fhir.stu3.proto.OperationOutcomeCodesCode.value:type_name -> google.fhir.stu3.proto.OperationOutcomeCodesCode.Value
	597, // 636: google.fhir.stu3.proto.OperationOutcomeCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 637: google.fhir.stu3.proto.OperationOutcomeCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	212, // 638: google.fhir.stu3.proto.NarrativeStatusCode.value:type_name -> google.fhir.stu3.proto.NarrativeStatusCode.Value
	597, // 639: google.fhir.stu3.proto.NarrativeStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 640: google.fhir.stu3.proto.NarrativeStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	213, // 641: google.fhir.stu3.proto.OperationParameterUseCode.value:type_name -> google.fhir.stu3.proto.OperationParameterUseCode.Value
	597, // 642: google.fhir.stu3.proto.OperationParameterUseCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 643: google.fhir.stu3.proto.OperationParameterUseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	214, // 644: google.fhir.stu3.proto.OrganizationTypeCode.value:type_name -> google.fhir.stu3.proto.OrganizationTypeCode.Value
	597, // 645: google.fhir.stu3.proto.OrganizationTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 646: google.fhir.stu3.proto.OrganizationTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	215, // 647: google.fhir.stu3.proto.DeviceComponentParameterGroupCode.value:type_name -> google.fhir.stu3.proto.DeviceComponentParameterGroupCode.Value
	597, // 648: google.fhir.stu3.proto.DeviceComponentParameterGroupCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 649: google.fhir.stu3.proto.DeviceComponentParameterGroupCode.extension:type_name -> google.fhir.stu3.proto.Extension
	216, // 650: google.fhir.stu3.proto.ParticipantRequiredCode.value:type_name -> google.fhir.stu3.proto.ParticipantRequiredCode.Value
	597, // 651: google.fhir.stu3.proto.ParticipantRequiredCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 652: google.fhir.stu3.proto.ParticipantRequiredCode.extension:type_name -> google.fhir.stu3.proto.Extension
	217, // 653: google.fhir.stu3.proto.ParticipationStatusCode.value:type_name -> google.fhir.stu3.proto.ParticipationStatusCode.Value
	597, // 654: google.fhir.stu3.proto.ParticipationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 655: google.fhir.stu3.proto.ParticipationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	218, // 656: google.fhir.stu3.proto.PlanDefinitionTypeCode.value:type_name -> google.fhir.stu3.proto.PlanDefinitionTypeCode.Value
	597, // 657: google.fhir.stu3.proto.PlanDefinitionTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 658: google.fhir.stu3.proto.PlanDefinitionTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	219, // 659: google.fhir.stu3.proto.PostalAddressUseTypeCode.value:type_name -> google.fhir.stu3.proto.PostalAddressUseTypeCode.Value
	597, // 660: google.fhir.stu3.proto.PostalAddressUseTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 661: google.fhir.stu3.proto.PostalAddressUseTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	220, // 662: google.fhir.stu3.proto.PractitionerRoleCode.value:type_name -> google.fhir.stu3.proto.PractitionerRoleCode.Value
	597, // 663: google.fhir.stu3.proto.PractitionerRoleCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 664: google.fhir.stu3.proto.PractitionerRoleCode.extension:type_name -> google.fhir.stu3.proto.Extension
	221, // 665: google.fhir.stu3.proto.PractitionerSpecialtyCode.value:type_name -> google.fhir.stu3.proto.PractitionerSpecialtyCode.Value
	597, // 666: google.fhir.stu3.proto.PractitionerSpecialtyCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 667: google.fhir.stu3.proto.PractitionerSpecialtyCode.extension:type_name -> google.fhir.stu3.proto.Extension
	222, // 668: google.fhir.stu3.proto.ProcedureProgressStatusCodesCode.value:type_name -> google.fhir.stu3.proto.ProcedureProgressStatusCodesCode.Value
	597, // 669: google.fhir.stu3.proto.ProcedureProgressStatusCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 670: google.fhir.stu3.proto.ProcedureProgressStatusCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	223, // 671: google.fhir.stu3.proto.ProvenanceEntityRoleCode.value:type_name -> google.fhir.stu3.proto.ProvenanceEntityRoleCode.Value
	597, // 672: google.fhir.stu3.proto.ProvenanceEntityRoleCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 673: google.fhir.stu3.proto.ProvenanceEntityRoleCode.extension:type_name -> google.fhir.stu3.proto.Extension
	224, // 674: google.fhir.stu3.proto.PublicationStatusCode.value:type_name -> google.fhir.stu3.proto.PublicationStatusCode.Value
	597, // 675: google.fhir.stu3.proto.PublicationStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 676: google.fhir.stu3.proto.PublicationStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	225, // 677: google.fhir.stu3.proto.QualityTypeCode.value:type_name -> google.fhir.stu3.proto.QualityTypeCode.Value
	597, // 678: google.fhir.stu3.proto.QualityTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 679: google.fhir.stu3.proto.QualityTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	226, // 680: google.fhir.stu3.proto.MaxOccursCode.value:type_name -> google.fhir.stu3.proto.MaxOccursCode.Value
	597, // 681: google.fhir.stu3.proto.MaxOccursCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 682: google.fhir.stu3.proto.MaxOccursCode.extension:type_name -> google.fhir.stu3.proto.Extension
	227, // 683: google.fhir.stu3.proto.QuestionnaireResponseStatusCode.value:type_name -> google.fhir.stu3.proto.QuestionnaireResponseStatusCode.Value
	597, // 684: google.fhir.stu3.proto.QuestionnaireResponseStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 685: google.fhir.stu3.proto.QuestionnaireResponseStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	228, // 686: google.fhir.stu3.proto.QuestionnaireTextCategoriesCode.value:type_name -> google.fhir.stu3.proto.QuestionnaireTextCategoriesCode.Value
	597, // 687: google.fhir.stu3.proto.QuestionnaireTextCategoriesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 688: google.fhir.stu3.proto.QuestionnaireTextCategoriesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	229, // 689: google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode.value:type_name -> google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode.Value
	597, // 690: google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 691: google.fhir.stu3.proto.QuestionnaireItemUIControlCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	230, // 692: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode.value:type_name -> google.fhir.stu3.proto.QuestionnaireItemUsageModeCode.Value
	597, // 693: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 694: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	231, // 695: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode.Value
	597, // 696: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 697: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode.extension:type_name -> google.fhir.stu3.proto.Extension
	232, // 698: google.fhir.stu3.proto.AllergyIntoleranceSeverityCode.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceSeverityCode.Value
	597, // 699: google.fhir.stu3.proto.AllergyIntoleranceSeverityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 700: google.fhir.stu3.proto.AllergyIntoleranceSeverityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	233, // 701: google.fhir.stu3.proto.ReasonMedicationGivenCodesCode.value:type_name -> google.fhir.stu3.proto.ReasonMedicationGivenCodesCode.Value
	597, // 702: google.fhir.stu3.proto.ReasonMedicationGivenCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 703: google.fhir.stu3.proto.ReasonMedicationGivenCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	234, // 704: google.fhir.stu3.proto.ReferenceHandlingPolicyCode.value:type_name -> google.fhir.stu3.proto.ReferenceHandlingPolicyCode.Value
	597, // 705: google.fhir.stu3.proto.ReferenceHandlingPolicyCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 706: google.fhir.stu3.proto.ReferenceHandlingPolicyCode.extension:type_name -> google.fhir.stu3.proto.Extension
	235, // 707: google.fhir.stu3.proto.RelatedArtifactTypeCode.value:type_name -> google.fhir.stu3.proto.RelatedArtifactTypeCode.Value
	597, // 708: google.fhir.stu3.proto.RelatedArtifactTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 709: google.fhir.stu3.proto.RelatedArtifactTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	236, // 710: google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode.value:type_name -> google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode.Value
	597, // 711: google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 712: google.fhir.stu3.proto.ObservationReferenceRangeMeaningCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	237, // 713: google.fhir.stu3.proto.TestReportActionResultCode.value:type_name -> google.fhir.stu3.proto.TestReportActionResultCode.Value
	597, // 714: google.fhir.stu3.proto.TestReportActionResultCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 715: google.fhir.stu3.proto.TestReportActionResultCode.extension:type_name -> google.fhir.stu3.proto.Extension
	238, // 716: google.fhir.stu3.proto.TestReportParticipantTypeCode.value:type_name -> google.fhir.stu3.proto.TestReportParticipantTypeCode.Value
	597, // 717: google.fhir.stu3.proto.TestReportParticipantTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 718: google.fhir.stu3.proto.TestReportParticipantTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	239, // 719: google.fhir.stu3.proto.TestReportResultCode.value:type_name -> google.fhir.stu3.proto.TestReportResultCode.Value
	597, // 720: google.fhir.stu3.proto.TestReportResultCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 721: google.fhir.stu3.proto.TestReportResultCode.extension:type_name -> google.fhir.stu3.proto.Extension
	240, // 722: google.fhir.stu3.proto.TestReportStatusCode.value:type_name -> google.fhir.stu3.proto.TestReportStatusCode.Value
	597, // 723: google.fhir.stu3.proto.TestReportStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 724: google.fhir.stu3.proto.TestReportStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	241, // 725: google.fhir.stu3.proto.RepositoryTypeCode.value:type_name -> google.fhir.stu3.proto.RepositoryTypeCode.Value
	597, // 726: google.fhir.stu3.proto.RepositoryTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 727: google.fhir.stu3.proto.RepositoryTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	242, // 728: google.fhir.stu3.proto.RequestIntentCode.value:type_name -> google.fhir.stu3.proto.RequestIntentCode.Value
	597, // 729: google.fhir.stu3.proto.RequestIntentCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 730: google.fhir.stu3.proto.RequestIntentCode.extension:type_name -> google.fhir.stu3.proto.Extension
	243, // 731: google.fhir.stu3.proto.RequestPriorityCode.value:type_name -> google.fhir.stu3.proto.RequestPriorityCode.Value
	597, // 732: google.fhir.stu3.proto.RequestPriorityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 733: google.fhir.stu3.proto.RequestPriorityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	244, // 734: google.fhir.stu3.proto.RequestStatusCode.value:type_name -> google.fhir.stu3.proto.RequestStatusCode.Value
	597, // 735: google.fhir.stu3.proto.RequestStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 736: google.fhir.stu3.proto.RequestStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	245, // 737: google.fhir.stu3.proto.ResearchStudyStatusCode.value:type_name -> google.fhir.stu3.proto.ResearchStudyStatusCode.Value
	597, // 738: google.fhir.stu3.proto.ResearchStudyStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 739: google.fhir.stu3.proto.ResearchStudyStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	246, // 740: google.fhir.stu3.proto.ResearchSubjectStatusCode.value:type_name -> google.fhir.stu3.proto.ResearchSubjectStatusCode.Value
	597, // 741: google.fhir.stu3.proto.ResearchSubjectStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 742: google.fhir.stu3.proto.ResearchSubjectStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	247, // 743: google.fhir.stu3.proto.PayeeResourceTypeCode.value:type_name -> google.fhir.stu3.proto.PayeeResourceTypeCode.Value
	597, // 744: google.fhir.stu3.proto.PayeeResourceTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 745: google.fhir.stu3.proto.PayeeResourceTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	248, // 746: google.fhir.stu3.proto.ResourceTypeCode.value:type_name -> google.fhir.stu3.proto.ResourceTypeCode.Value
	597, // 747: google.fhir.stu3.proto.ResourceTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 748: google.fhir.stu3.proto.ResourceTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	249, // 749: google.fhir.stu3.proto.ResourceValidationModeCode.value:type_name -> google.fhir.stu3.proto.ResourceValidationModeCode.Value
	597, // 750: google.fhir.stu3.proto.ResourceValidationModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 751: google.fhir.stu3.proto.ResourceValidationModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	250, // 752: google.fhir.stu3.proto.ResponseTypeCode.value:type_name -> google.fhir.stu3.proto.ResponseTypeCode.Value
	597, // 753: google.fhir.stu3.proto.ResponseTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 754: google.fhir.stu3.proto.ResponseTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	251, // 755: google.fhir.stu3.proto.RestfulCapabilityModeCode.value:type_name -> google.fhir.stu3.proto.RestfulCapabilityModeCode.Value
	597, // 756: google.fhir.stu3.proto.RestfulCapabilityModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 757: google.fhir.stu3.proto.RestfulCapabilityModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	252, // 758: google.fhir.stu3.proto.RestfulSecurityServiceCode.value:type_name -> google.fhir.stu3.proto.RestfulSecurityServiceCode.Value
	597, // 759: google.fhir.stu3.proto.RestfulSecurityServiceCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 760: google.fhir.stu3.proto.RestfulSecurityServiceCode.extension:type_name -> google.fhir.stu3.proto.Extension
	253, // 761: google.fhir.stu3.proto.RiskProbabilityCode.value:type_name -> google.fhir.stu3.proto.RiskProbabilityCode.Value
	597, // 762: google.fhir.stu3.proto.RiskProbabilityCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 763: google.fhir.stu3.proto.RiskProbabilityCode.extension:type_name -> google.fhir.stu3.proto.Extension
	254, // 764: google.fhir.stu3.proto.SearchComparatorCode.value:type_name -> google.fhir.stu3.proto.SearchComparatorCode.Value
	597, // 765: google.fhir.stu3.proto.SearchComparatorCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 766: google.fhir.stu3.proto.SearchComparatorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	255, // 767: google.fhir.stu3.proto.SearchEntryModeCode.value:type_name -> google.fhir.stu3.proto.SearchEntryModeCode.Value
	597, // 768: google.fhir.stu3.proto.SearchEntryModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 769: google.fhir.stu3.proto.SearchEntryModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	256, // 770: google.fhir.stu3.proto.SearchModifierCodeCode.value:type_name -> google.fhir.stu3.proto.SearchModifierCodeCode.Value
	597, // 771: google.fhir.stu3.proto.SearchModifierCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 772: google.fhir.stu3.proto.SearchModifierCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	257, // 773: google.fhir.stu3.proto.SearchParamTypeCode.value:type_name -> google.fhir.stu3.proto.SearchParamTypeCode.Value
	597, // 774: google.fhir.stu3.proto.SearchParamTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 775: google.fhir.stu3.proto.SearchParamTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	258, // 776: google.fhir.stu3.proto.XPathUsageTypeCode.value:type_name -> google.fhir.stu3.proto.XPathUsageTypeCode.Value
	597, // 777: google.fhir.stu3.proto.XPathUsageTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 778: google.fhir.stu3.proto.XPathUsageTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	259, // 779: google.fhir.stu3.proto.SequenceTypeCode.value:type_name -> google.fhir.stu3.proto.SequenceTypeCode.Value
	597, // 780: google.fhir.stu3.proto.SequenceTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 781: google.fhir.stu3.proto.SequenceTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	260, // 782: google.fhir.stu3.proto.ServiceProvisionConditionsCode.value:type_name -> google.fhir.stu3.proto.ServiceProvisionConditionsCode.Value
	597, // 783: google.fhir.stu3.proto.ServiceProvisionConditionsCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 784: google.fhir.stu3.proto.ServiceProvisionConditionsCode.extension:type_name -> google.fhir.stu3.proto.Extension
	261, // 785: google.fhir.stu3.proto.ReferralMethodCode.value:type_name -> google.fhir.stu3.proto.ReferralMethodCode.Value
	597, // 786: google.fhir.stu3.proto.ReferralMethodCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 787: google.fhir.stu3.proto.ReferralMethodCode.extension:type_name -> google.fhir.stu3.proto.Extension
	262, // 788: google.fhir.stu3.proto.SlotStatusCode.value:type_name -> google.fhir.stu3.proto.SlotStatusCode.Value
	597, // 789: google.fhir.stu3.proto.SlotStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 790: google.fhir.stu3.proto.SlotStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	263, // 791: google.fhir.stu3.proto.SpecialValuesCode.value:type_name -> google.fhir.stu3.proto.SpecialValuesCode.Value
	597, // 792: google.fhir.stu3.proto.SpecialValuesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 793: google.fhir.stu3.proto.SpecialValuesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	264, // 794: google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode.value:type_name -> google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode.Value
	597, // 795: google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 796: google.fhir.stu3.proto.DeviceSpecificationSpecTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	265, // 797: google.fhir.stu3.proto.SpecimenStatusCode.value:type_name -> google.fhir.stu3.proto.SpecimenStatusCode.Value
	597, // 798: google.fhir.stu3.proto.SpecimenStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 799: google.fhir.stu3.proto.SpecimenStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	266, // 800: google.fhir.stu3.proto.StructureDefinitionKindCode.value:type_name -> google.fhir.stu3.proto.StructureDefinitionKindCode.Value
	597, // 801: google.fhir.stu3.proto.StructureDefinitionKindCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 802: google.fhir.stu3.proto.StructureDefinitionKindCode.extension:type_name -> google.fhir.stu3.proto.Extension
	267, // 803: google.fhir.stu3.proto.SubscriptionChannelTypeCode.value:type_name -> google.fhir.stu3.proto.SubscriptionChannelTypeCode.Value
	597, // 804: google.fhir.stu3.proto.SubscriptionChannelTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 805: google.fhir.stu3.proto.SubscriptionChannelTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	268, // 806: google.fhir.stu3.proto.SubscriptionStatusCode.value:type_name -> google.fhir.stu3.proto.SubscriptionStatusCode.Value
	597, // 807: google.fhir.stu3.proto.SubscriptionStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 808: google.fhir.stu3.proto.SubscriptionStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	269, // 809: google.fhir.stu3.proto.SubscriptionTagCode.value:type_name -> google.fhir.stu3.proto.SubscriptionTagCode.Value
	597, // 810: google.fhir.stu3.proto.SubscriptionTagCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 811: google.fhir.stu3.proto.SubscriptionTagCode.extension:type_name -> google.fhir.stu3.proto.Extension
	270, // 812: google.fhir.stu3.proto.SubstanceCategoryCodesCode.value:type_name -> google.fhir.stu3.proto.SubstanceCategoryCodesCode.Value
	597, // 813: google.fhir.stu3.proto.SubstanceCategoryCodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 814: google.fhir.stu3.proto.SubstanceCategoryCodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	271, // 815: google.fhir.stu3.proto.FHIRSubstanceStatusCode.value:type_name -> google.fhir.stu3.proto.FHIRSubstanceStatusCode.Value
	597, // 816: google.fhir.stu3.proto.FHIRSubstanceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 817: google.fhir.stu3.proto.FHIRSubstanceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	272, // 818: google.fhir.stu3.proto.SupplyDeliveryStatusCode.value:type_name -> google.fhir.stu3.proto.SupplyDeliveryStatusCode.Value
	597, // 819: google.fhir.stu3.proto.SupplyDeliveryStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 820: google.fhir.stu3.proto.SupplyDeliveryStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	273, // 821: google.fhir.stu3.proto.SupplyItemTypeCode.value:type_name -> google.fhir.stu3.proto.SupplyItemTypeCode.Value
	597, // 822: google.fhir.stu3.proto.SupplyItemTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 823: google.fhir.stu3.proto.SupplyItemTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	274, // 824: google.fhir.stu3.proto.SupplyTypeCode.value:type_name -> google.fhir.stu3.proto.SupplyTypeCode.Value
	597, // 825: google.fhir.stu3.proto.SupplyTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 826: google.fhir.stu3.proto.SupplyTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	275, // 827: google.fhir.stu3.proto.SupplyRequestReasonCode.value:type_name -> google.fhir.stu3.proto.SupplyRequestReasonCode.Value
	597, // 828: google.fhir.stu3.proto.SupplyRequestReasonCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 829: google.fhir.stu3.proto.SupplyRequestReasonCode.extension:type_name -> google.fhir.stu3.proto.Extension
	276, // 830: google.fhir.stu3.proto.SupplyRequestStatusCode.value:type_name -> google.fhir.stu3.proto.SupplyRequestStatusCode.Value
	597, // 831: google.fhir.stu3.proto.SupplyRequestStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 832: google.fhir.stu3.proto.SupplyRequestStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	277, // 833: google.fhir.stu3.proto.SystemRestfulInteractionCode.value:type_name -> google.fhir.stu3.proto.SystemRestfulInteractionCode.Value
	597, // 834: google.fhir.stu3.proto.SystemRestfulInteractionCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 835: google.fhir.stu3.proto.SystemRestfulInteractionCode.extension:type_name -> google.fhir.stu3.proto.Extension
	278, // 836: google.fhir.stu3.proto.SystemVersionProcessingModeCode.value:type_name -> google.fhir.stu3.proto.SystemVersionProcessingModeCode.Value
	597, // 837: google.fhir.stu3.proto.SystemVersionProcessingModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 838: google.fhir.stu3.proto.SystemVersionProcessingModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	279, // 839: google.fhir.stu3.proto.TaskPerformerTypeCode.value:type_name -> google.fhir.stu3.proto.TaskPerformerTypeCode.Value
	597, // 840: google.fhir.stu3.proto.TaskPerformerTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 841: google.fhir.stu3.proto.TaskPerformerTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	280, // 842: google.fhir.stu3.proto.TemplateStatusCodeCode.value:type_name -> google.fhir.stu3.proto.TemplateStatusCodeCode.Value
	597, // 843: google.fhir.stu3.proto.TemplateStatusCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 844: google.fhir.stu3.proto.TemplateStatusCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	281, // 845: google.fhir.stu3.proto.TaskStatusCode.value:type_name -> google.fhir.stu3.proto.TaskStatusCode.Value
	597, // 846: google.fhir.stu3.proto.TaskStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 847: google.fhir.stu3.proto.TaskStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	282, // 848: google.fhir.stu3.proto.TestScriptOperationCodeCode.value:type_name -> google.fhir.stu3.proto.TestScriptOperationCodeCode.Value
	597, // 849: google.fhir.stu3.proto.TestScriptOperationCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 850: google.fhir.stu3.proto.TestScriptOperationCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	283, // 851: google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode.value:type_name -> google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode.Value
	597, // 852: google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 853: google.fhir.stu3.proto.TestScriptProfileDestinationTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	284, // 854: google.fhir.stu3.proto.TestScriptProfileOriginTypeCode.value:type_name -> google.fhir.stu3.proto.TestScriptProfileOriginTypeCode.Value
	597, // 855: google.fhir.stu3.proto.TestScriptProfileOriginTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 856: google.fhir.stu3.proto.TestScriptProfileOriginTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	285, // 857: google.fhir.stu3.proto.TransactionModeCode.value:type_name -> google.fhir.stu3.proto.TransactionModeCode.Value
	597, // 858: google.fhir.stu3.proto.TransactionModeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 859: google.fhir.stu3.proto.TransactionModeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	286, // 860: google.fhir.stu3.proto.TypeDerivationRuleCode.value:type_name -> google.fhir.stu3.proto.TypeDerivationRuleCode.Value
	597, // 861: google.fhir.stu3.proto.TypeDerivationRuleCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 862: google.fhir.stu3.proto.TypeDerivationRuleCode.extension:type_name -> google.fhir.stu3.proto.Extension
	287, // 863: google.fhir.stu3.proto.TypeRestfulInteractionCode.value:type_name -> google.fhir.stu3.proto.TypeRestfulInteractionCode.Value
	597, // 864: google.fhir.stu3.proto.TypeRestfulInteractionCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 865: google.fhir.stu3.proto.TypeRestfulInteractionCode.extension:type_name -> google.fhir.stu3.proto.Extension
	288, // 866: google.fhir.stu3.proto.UDIEntryTypeCode.value:type_name -> google.fhir.stu3.proto.UDIEntryTypeCode.Value
	597, // 867: google.fhir.stu3.proto.UDIEntryTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 868: google.fhir.stu3.proto.UDIEntryTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	289, // 869: google.fhir.stu3.proto.UnknownContentCodeCode.value:type_name -> google.fhir.stu3.proto.UnknownContentCodeCode.Value
	597, // 870: google.fhir.stu3.proto.UnknownContentCodeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 871: google.fhir.stu3.proto.UnknownContentCodeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	290, // 872: google.fhir.stu3.proto.UsageContextTypeCode.value:type_name -> google.fhir.stu3.proto.UsageContextTypeCode.Value
	597, // 873: google.fhir.stu3.proto.UsageContextTypeCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 874: google.fhir.stu3.proto.UsageContextTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	291, // 875: google.fhir.stu3.proto.ConfidentialityClassificationCode.value:type_name -> google.fhir.stu3.proto.ConfidentialityClassificationCode.Value
	597, // 876: google.fhir.stu3.proto.ConfidentialityClassificationCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 877: google.fhir.stu3.proto.ConfidentialityClassificationCode.extension:type_name -> google.fhir.stu3.proto.Extension
	292, // 878: google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode.value:type_name -> google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode.Value
	597, // 879: google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 880: google.fhir.stu3.proto.VaccinationProtocolDoseStatuscodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	293, // 881: google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode.value:type_name -> google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode.Value
	597, // 882: google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 883: google.fhir.stu3.proto.VaccinationProtocolDoseStatusReasoncodesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	294, // 884: google.fhir.stu3.proto.sequenceStatusCode.value:type_name -> google.fhir.stu3.proto.sequenceStatusCode.Value
	597, // 885: google.fhir.stu3.proto.sequenceStatusCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 886: google.fhir.stu3.proto.sequenceStatusCode.extension:type_name -> google.fhir.stu3.proto.Extension
	295, // 887: google.fhir.stu3.proto.ResourceVersionPolicyCode.value:type_name -> google.fhir.stu3.proto.ResourceVersionPolicyCode.Value
	597, // 888: google.fhir.stu3.proto.ResourceVersionPolicyCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 889: google.fhir.stu3.proto.ResourceVersionPolicyCode.extension:type_name -> google.fhir.stu3.proto.Extension
	296, // 890: google.fhir.stu3.proto.VisionBaseCode.value:type_name -> google.fhir.stu3.proto.VisionBaseCode.Value
	597, // 891: google.fhir.stu3.proto.VisionBaseCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 892: google.fhir.stu3.proto.VisionBaseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	297, // 893: google.fhir.stu3.proto.VisionEyesCode.value:type_name -> google.fhir.stu3.proto.VisionEyesCode.Value
	597, // 894: google.fhir.stu3.proto.VisionEyesCode.id:type_name -> google.fhir.stu3.proto.String
	598, // 895: google.fhir.stu3.proto.VisionEyesCode.extension:type_name -> google.fhir.stu3.proto.Extension
	896, // [896:896] is the sub-list for method output_type
	896, // [896:896] is the sub-list for method input_type
	896, // [896:896] is the sub-list for extension type_name
	896, // [896:896] is the sub-list for extension extendee
	0,   // [0:896] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_stu3_codes_proto_init() }
func file_proto_google_fhir_proto_stu3_codes_proto_init() {
	if File_proto_google_fhir_proto_stu3_codes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingStrengthCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlicingRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscriminatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyRepresentationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceVersionRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCardinalityBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionConditionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGroupingBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionListCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPrecheckBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequiredBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSelectionBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDefinitionCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministrativeGenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventCausalityAssessmentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventCausalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventCausalityMethodCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventCausalityResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventSeriousnessCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSubstanceExposureRiskCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceClinicalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceVerificationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenderStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionDirectionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionOperatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionResponseTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicResourceTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanActivityCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanActivityStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CareTeamCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CareTeamStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeItemStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoiceListOrientationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassificationOrContextCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpressionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemContentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemHierarchyMeaningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonTagsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationNotDoneReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompartmentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeMeasureScoringCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionAttestationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapEquivalenceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapGroupUnmappedModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalDeleteStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalReadStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionCategoryCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionClinicalStatusCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionVerificationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformanceExpectationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentDataMeaningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentExceptTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactEntityTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractResourceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyNumberEventCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAbsentReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementStringencyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRAllTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDefinedTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDefinedTypeExtCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionTopicCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatementStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDeviceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosisRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalMediaTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReferenceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdmitSourceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DietCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DischargeDispositionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterLocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialArrangementsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityNamePartQualifierCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnteralFormulaAdditiveTypeCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCareStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCareTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCapabilityModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimPayeeResourceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplanationOfBenefitStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionContextCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagPriorityCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialResourceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalAcceptanceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalStatusReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphCompartmentRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideDependencyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidePageKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyHistoryNotDoneReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyHistoryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HL7WorkgroupCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScriptRequestMethodCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPVerbCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAssuranceLevelCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationOriginCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationRecommendationDateCriterionCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationRecommendationStatusCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationStatusCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAvailabilityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkageTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEmptyReasonsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleUseCodesforListCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrderCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbabilityDistributionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapContextTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapGroupTypeModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapInputModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapModelModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapSourceListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapTargetListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapTransformCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchGradeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureDataUsageCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasmntPrincipleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurePopulationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReportTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureScoringCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministrationCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministrationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispenseCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispenseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationContainerCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementTakenCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEventCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeaderResponseRequestCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleMessageReasonCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSignificanceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTransportCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricColorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricOperationalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameAssemblyOrderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameRepresentationUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemIdentifierTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventAgentNetworkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullFlavorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrderStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationCategoryCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceComponentOperationalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcomeCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NarrativeStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationParameterUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceComponentParameterGroupCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantRequiredCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDefinitionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostalAddressUseTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PractitionerRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PractitionerSpecialtyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureProgressStatusCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceEntityRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxOccursCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireTextCategoriesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemUIControlCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemUsageModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCertaintyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonMedicationGivenCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceHandlingPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifactTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationReferenceRangeMeaningCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportActionResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResearchStudyStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResearchSubjectStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayeeResourceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceValidationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestfulCapabilityModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestfulSecurityServiceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskProbabilityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntryModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchModifierCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParamTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XPathUsageTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceProvisionConditionsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralMethodCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialValuesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSpecificationSpecTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionChannelTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionTagCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceCategoryCodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRSubstanceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDeliveryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyItemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequestReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemRestfulInteractionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemVersionProcessingModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskPerformerTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateStatusCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScriptOperationCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScriptProfileDestinationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScriptProfileOriginTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDerivationRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRestfulInteractionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDIEntryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownContentCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageContextTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfidentialityClassificationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaccinationProtocolDoseStatuscodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaccinationProtocolDoseStatusReasoncodesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceVersionPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionBaseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_codes_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionEyesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_stu3_codes_proto_rawDesc,
			NumEnums:      298,
			NumMessages:   299,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_stu3_codes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_stu3_codes_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_stu3_codes_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_stu3_codes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_stu3_codes_proto = out.File
	file_proto_google_fhir_proto_stu3_codes_proto_rawDesc = nil
	file_proto_google_fhir_proto_stu3_codes_proto_goTypes = nil
	file_proto_google_fhir_proto_stu3_codes_proto_depIdxs = nil
}
