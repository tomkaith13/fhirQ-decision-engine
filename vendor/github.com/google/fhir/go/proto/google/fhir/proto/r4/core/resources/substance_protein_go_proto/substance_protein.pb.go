//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/substance_protein.proto

package substance_protein_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SubstanceProtein, last updated
// 2019-11-01T09:29:23.356+11:00. A SubstanceProtein is defined as a single unit
// of a linear amino acid sequence, or a combination of subunits that are either
// covalently linked or have a defined invariant stoichiometric relationship.
// This includes all synthetic, recombinant and purified SubstanceProteins of
// defined sequence, whether the use is therapeutic or prophylactic. This set of
// elements will be used to describe albumins, coagulation factors, cytokines,
// growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids,
// recombinant vaccines, and immunomodulators. See
// http://hl7.org/fhir/StructureDefinition/SubstanceProtein
type SubstanceProtein struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The SubstanceProtein descriptive elements will only be used when a complete
	// or partial amino acid sequence is available or derivable from a nucleic
	// acid sequence
	SequenceType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=sequence_type,json=sequenceType,proto3" json:"sequence_type,omitempty"`
	// Number of linear sequences of amino acids linked through peptide bonds. The
	// number of subunits constituting the SubstanceProtein shall be described. It
	// is possible that the number of subunits can be variable
	NumberOfSubunits *datatypes_go_proto.Integer `protobuf:"bytes,11,opt,name=number_of_subunits,json=numberOfSubunits,proto3" json:"number_of_subunits,omitempty"`
	// The disulphide bond between two cysteine residues either on the same
	// subunit or on two different subunits shall be described. The position of
	// the disulfide bonds in the SubstanceProtein shall be listed in increasing
	// order of subunit number and position within subunit followed by the
	// abbreviation of the amino acids involved. The disulfide linkage positions
	// shall actually contain the amino acid Cysteine at the respective positions
	DisulfideLinkage []*datatypes_go_proto.String `protobuf:"bytes,12,rep,name=disulfide_linkage,json=disulfideLinkage,proto3" json:"disulfide_linkage,omitempty"`
	Subunit          []*SubstanceProtein_Subunit  `protobuf:"bytes,13,rep,name=subunit,proto3" json:"subunit,omitempty"`
}

func (x *SubstanceProtein) Reset() {
	*x = SubstanceProtein{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceProtein) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceProtein) ProtoMessage() {}

func (x *SubstanceProtein) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceProtein.ProtoReflect.Descriptor instead.
func (*SubstanceProtein) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescGZIP(), []int{0}
}

func (x *SubstanceProtein) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceProtein) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubstanceProtein) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SubstanceProtein) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceProtein) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SubstanceProtein) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SubstanceProtein) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceProtein) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceProtein) GetSequenceType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SequenceType
	}
	return nil
}

func (x *SubstanceProtein) GetNumberOfSubunits() *datatypes_go_proto.Integer {
	if x != nil {
		return x.NumberOfSubunits
	}
	return nil
}

func (x *SubstanceProtein) GetDisulfideLinkage() []*datatypes_go_proto.String {
	if x != nil {
		return x.DisulfideLinkage
	}
	return nil
}

func (x *SubstanceProtein) GetSubunit() []*SubstanceProtein_Subunit {
	if x != nil {
		return x.Subunit
	}
	return nil
}

// This subclause refers to the description of each subunit constituting the
// SubstanceProtein. A subunit is a linear sequence of amino acids linked
// through peptide bonds. The Subunit information shall be provided when the
// finished SubstanceProtein is a complex of multiple sequences; subunits are
// not used to delineate domains within a single sequence. Subunits are listed
// in order of decreasing length; sequences of the same length will be ordered
// by decreasing molecular weight; subunits that have identical sequences will
// be repeated multiple times
type SubstanceProtein_Subunit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Index of primary sequences of amino acids linked through peptide bonds in
	// order of decreasing length. Sequences of the same length will be ordered
	// by molecular weight. Subunits that have identical sequences will be
	// repeated and have sequential subscripts
	Subunit *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=subunit,proto3" json:"subunit,omitempty"`
	// The sequence information shall be provided enumerating the amino acids
	// from N- to C-terminal end using standard single-letter amino acid codes.
	// Uppercase shall be used for L-amino acids and lowercase for D-amino
	// acids. Transcribed SubstanceProteins will always be described using the
	// translated sequence; for synthetic peptide containing amino acids that
	// are not represented with a single letter code an X should be used within
	// the sequence. The modified amino acids will be distinguished by their
	// position in the sequence
	Sequence *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Length of linear sequences of amino acids contained in the subunit
	Length *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=length,proto3" json:"length,omitempty"`
	// The sequence information shall be provided enumerating the amino acids
	// from N- to C-terminal end using standard single-letter amino acid codes.
	// Uppercase shall be used for L-amino acids and lowercase for D-amino
	// acids. Transcribed SubstanceProteins will always be described using the
	// translated sequence; for synthetic peptide containing amino acids that
	// are not represented with a single letter code an X should be used within
	// the sequence. The modified amino acids will be distinguished by their
	// position in the sequence
	SequenceAttachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=sequence_attachment,json=sequenceAttachment,proto3" json:"sequence_attachment,omitempty"`
	// Unique identifier for molecular fragment modification based on the ISO
	// 11238 Substance ID
	NTerminalModificationId *datatypes_go_proto.Identifier `protobuf:"bytes,8,opt,name=n_terminal_modification_id,json=nTerminalModificationId,proto3" json:"n_terminal_modification_id,omitempty"`
	// The name of the fragment modified at the N-terminal of the
	// SubstanceProtein shall be specified
	NTerminalModification *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=n_terminal_modification,json=nTerminalModification,proto3" json:"n_terminal_modification,omitempty"`
	// Unique identifier for molecular fragment modification based on the ISO
	// 11238 Substance ID
	CTerminalModificationId *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=c_terminal_modification_id,json=cTerminalModificationId,proto3" json:"c_terminal_modification_id,omitempty"`
	// The modification at the C-terminal shall be specified
	CTerminalModification *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=c_terminal_modification,json=cTerminalModification,proto3" json:"c_terminal_modification,omitempty"`
}

func (x *SubstanceProtein_Subunit) Reset() {
	*x = SubstanceProtein_Subunit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceProtein_Subunit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceProtein_Subunit) ProtoMessage() {}

func (x *SubstanceProtein_Subunit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceProtein_Subunit.ProtoReflect.Descriptor instead.
func (*SubstanceProtein_Subunit) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubstanceProtein_Subunit) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetSubunit() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Subunit
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetSequence() *datatypes_go_proto.String {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetSequenceAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.SequenceAttachment
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetNTerminalModificationId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.NTerminalModificationId
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetNTerminalModification() *datatypes_go_proto.String {
	if x != nil {
		return x.NTerminalModification
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetCTerminalModificationId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.CTerminalModificationId
	}
	return nil
}

func (x *SubstanceProtein_Subunit) GetCTerminalModification() *datatypes_go_proto.String {
	if x != nil {
		return x.CTerminalModification
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_substance_protein_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDesc = []byte{
	0x0a, 0x41, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf2, 0x0c, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x10,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x48, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x75, 0x6c, 0x66, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x64, 0x69, 0x73, 0x75, 0x6c, 0x66,
	0x69, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x75,
	0x6e, 0x69, 0x74, 0x1a, 0xa2, 0x06, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x07, 0x73, 0x75, 0x62, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x1a, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x17, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x53, 0x0a, 0x17, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15,
	0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x1a, 0x63, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x17, 0x63, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x17, 0x63, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x81, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_goTypes = []interface{}{
	(*SubstanceProtein)(nil),                   // 0: google.fhir.r4.core.SubstanceProtein
	(*SubstanceProtein_Subunit)(nil),           // 1: google.fhir.r4.core.SubstanceProtein.Subunit
	(*datatypes_go_proto.Id)(nil),              // 2: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),            // 3: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),             // 4: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),            // 5: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),       // 6: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                            // 7: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),       // 8: google.fhir.r4.core.Extension
	(*datatypes_go_proto.CodeableConcept)(nil), // 9: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Integer)(nil),         // 10: google.fhir.r4.core.Integer
	(*datatypes_go_proto.String)(nil),          // 11: google.fhir.r4.core.String
	(*datatypes_go_proto.Attachment)(nil),      // 12: google.fhir.r4.core.Attachment
	(*datatypes_go_proto.Identifier)(nil),      // 13: google.fhir.r4.core.Identifier
}
var file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_depIdxs = []int32{
	2,  // 0: google.fhir.r4.core.SubstanceProtein.id:type_name -> google.fhir.r4.core.Id
	3,  // 1: google.fhir.r4.core.SubstanceProtein.meta:type_name -> google.fhir.r4.core.Meta
	4,  // 2: google.fhir.r4.core.SubstanceProtein.implicit_rules:type_name -> google.fhir.r4.core.Uri
	5,  // 3: google.fhir.r4.core.SubstanceProtein.language:type_name -> google.fhir.r4.core.Code
	6,  // 4: google.fhir.r4.core.SubstanceProtein.text:type_name -> google.fhir.r4.core.Narrative
	7,  // 5: google.fhir.r4.core.SubstanceProtein.contained:type_name -> google.protobuf.Any
	8,  // 6: google.fhir.r4.core.SubstanceProtein.extension:type_name -> google.fhir.r4.core.Extension
	8,  // 7: google.fhir.r4.core.SubstanceProtein.modifier_extension:type_name -> google.fhir.r4.core.Extension
	9,  // 8: google.fhir.r4.core.SubstanceProtein.sequence_type:type_name -> google.fhir.r4.core.CodeableConcept
	10, // 9: google.fhir.r4.core.SubstanceProtein.number_of_subunits:type_name -> google.fhir.r4.core.Integer
	11, // 10: google.fhir.r4.core.SubstanceProtein.disulfide_linkage:type_name -> google.fhir.r4.core.String
	1,  // 11: google.fhir.r4.core.SubstanceProtein.subunit:type_name -> google.fhir.r4.core.SubstanceProtein.Subunit
	11, // 12: google.fhir.r4.core.SubstanceProtein.Subunit.id:type_name -> google.fhir.r4.core.String
	8,  // 13: google.fhir.r4.core.SubstanceProtein.Subunit.extension:type_name -> google.fhir.r4.core.Extension
	8,  // 14: google.fhir.r4.core.SubstanceProtein.Subunit.modifier_extension:type_name -> google.fhir.r4.core.Extension
	10, // 15: google.fhir.r4.core.SubstanceProtein.Subunit.subunit:type_name -> google.fhir.r4.core.Integer
	11, // 16: google.fhir.r4.core.SubstanceProtein.Subunit.sequence:type_name -> google.fhir.r4.core.String
	10, // 17: google.fhir.r4.core.SubstanceProtein.Subunit.length:type_name -> google.fhir.r4.core.Integer
	12, // 18: google.fhir.r4.core.SubstanceProtein.Subunit.sequence_attachment:type_name -> google.fhir.r4.core.Attachment
	13, // 19: google.fhir.r4.core.SubstanceProtein.Subunit.n_terminal_modification_id:type_name -> google.fhir.r4.core.Identifier
	11, // 20: google.fhir.r4.core.SubstanceProtein.Subunit.n_terminal_modification:type_name -> google.fhir.r4.core.String
	13, // 21: google.fhir.r4.core.SubstanceProtein.Subunit.c_terminal_modification_id:type_name -> google.fhir.r4.core.Identifier
	11, // 22: google.fhir.r4.core.SubstanceProtein.Subunit.c_terminal_modification:type_name -> google.fhir.r4.core.String
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_substance_protein_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceProtein); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceProtein_Subunit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_substance_protein_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_protein_proto_depIdxs = nil
}
