//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/substance_specification.proto

package substance_specification_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SubstanceSpecification, last
// updated 2019-11-01T09:29:23.356+11:00. The detailed description of a
// substance, typically at a level beyond what is used for prescribing. See
// http://hl7.org/fhir/StructureDefinition/SubstanceSpecification
type SubstanceSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier by which this substance is known
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// High level categorization, e.g. polymer or nucleic acid
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Status of substance within the catalogue e.g. approved
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// If the substance applies to only human or veterinary use
	Domain *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=domain,proto3" json:"domain,omitempty"`
	// Textual description of the substance
	Description *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=source,proto3" json:"source,omitempty"`
	// Textual comment about this record of a substance
	Comment  *datatypes_go_proto.String         `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`
	Moiety   []*SubstanceSpecification_Moiety   `protobuf:"bytes,17,rep,name=moiety,proto3" json:"moiety,omitempty"`
	Property []*SubstanceSpecification_Property `protobuf:"bytes,18,rep,name=property,proto3" json:"property,omitempty"`
	// General information detailing this substance
	ReferenceInformation *datatypes_go_proto.Reference      `protobuf:"bytes,19,opt,name=reference_information,json=referenceInformation,proto3" json:"reference_information,omitempty"`
	Structure            *SubstanceSpecification_Structure  `protobuf:"bytes,20,opt,name=structure,proto3" json:"structure,omitempty"`
	Code                 []*SubstanceSpecification_CodeType `protobuf:"bytes,21,rep,name=code,proto3" json:"code,omitempty"`
	Name                 []*SubstanceSpecification_Name     `protobuf:"bytes,22,rep,name=name,proto3" json:"name,omitempty"`
	// The molecular weight or weight range (for proteins, polymers or nucleic
	// acids)
	MolecularWeight []*SubstanceSpecification_Structure_Isotope_MolecularWeight `protobuf:"bytes,23,rep,name=molecular_weight,json=molecularWeight,proto3" json:"molecular_weight,omitempty"`
	Relationship    []*SubstanceSpecification_Relationship                      `protobuf:"bytes,24,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// Data items specific to nucleic acids
	NucleicAcid *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=nucleic_acid,json=nucleicAcid,proto3" json:"nucleic_acid,omitempty"`
	// Data items specific to polymers
	Polymer *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=polymer,proto3" json:"polymer,omitempty"`
	// Data items specific to proteins
	Protein *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=protein,proto3" json:"protein,omitempty"`
	// Material or taxonomic/anatomical source for the substance
	SourceMaterial *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=source_material,json=sourceMaterial,proto3" json:"source_material,omitempty"`
}

func (x *SubstanceSpecification) Reset() {
	*x = SubstanceSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification) ProtoMessage() {}

func (x *SubstanceSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0}
}

func (x *SubstanceSpecification) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubstanceSpecification) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SubstanceSpecification) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceSpecification) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SubstanceSpecification) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SubstanceSpecification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceSpecification) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceSpecification) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceSpecification) GetDomain() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *SubstanceSpecification) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SubstanceSpecification) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SubstanceSpecification) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *SubstanceSpecification) GetMoiety() []*SubstanceSpecification_Moiety {
	if x != nil {
		return x.Moiety
	}
	return nil
}

func (x *SubstanceSpecification) GetProperty() []*SubstanceSpecification_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *SubstanceSpecification) GetReferenceInformation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ReferenceInformation
	}
	return nil
}

func (x *SubstanceSpecification) GetStructure() *SubstanceSpecification_Structure {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *SubstanceSpecification) GetCode() []*SubstanceSpecification_CodeType {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SubstanceSpecification) GetName() []*SubstanceSpecification_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceSpecification) GetMolecularWeight() []*SubstanceSpecification_Structure_Isotope_MolecularWeight {
	if x != nil {
		return x.MolecularWeight
	}
	return nil
}

func (x *SubstanceSpecification) GetRelationship() []*SubstanceSpecification_Relationship {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *SubstanceSpecification) GetNucleicAcid() *datatypes_go_proto.Reference {
	if x != nil {
		return x.NucleicAcid
	}
	return nil
}

func (x *SubstanceSpecification) GetPolymer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Polymer
	}
	return nil
}

func (x *SubstanceSpecification) GetProtein() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *SubstanceSpecification) GetSourceMaterial() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SourceMaterial
	}
	return nil
}

// Moiety, for structural modifications
type SubstanceSpecification_Moiety struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role that the moiety is playing
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Identifier by which this moiety substance is known
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Textual name for this moiety substance
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Stereochemistry type
	Stereochemistry *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=stereochemistry,proto3" json:"stereochemistry,omitempty"`
	// Optical activity type
	OpticalActivity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=optical_activity,json=opticalActivity,proto3" json:"optical_activity,omitempty"`
	// Molecular formula
	MolecularFormula *datatypes_go_proto.String             `protobuf:"bytes,9,opt,name=molecular_formula,json=molecularFormula,proto3" json:"molecular_formula,omitempty"`
	Amount           *SubstanceSpecification_Moiety_AmountX `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SubstanceSpecification_Moiety) Reset() {
	*x = SubstanceSpecification_Moiety{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Moiety) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Moiety) ProtoMessage() {}

func (x *SubstanceSpecification_Moiety) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Moiety.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Moiety) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubstanceSpecification_Moiety) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetStereochemistry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Stereochemistry
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetOpticalActivity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OpticalActivity
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetMolecularFormula() *datatypes_go_proto.String {
	if x != nil {
		return x.MolecularFormula
	}
	return nil
}

func (x *SubstanceSpecification_Moiety) GetAmount() *SubstanceSpecification_Moiety_AmountX {
	if x != nil {
		return x.Amount
	}
	return nil
}

// General specifications for this substance, including how it is related to
// other substances
type SubstanceSpecification_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A category for this property, e.g. Physical, Chemical, Enzymatic
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Property type e.g. viscosity, pH, isoelectric point
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Parameters that were used in the measurement of a property (e.g. for
	// viscosity: measured at 20C with a pH of 7.1)
	Parameters        *datatypes_go_proto.String                          `protobuf:"bytes,6,opt,name=parameters,proto3" json:"parameters,omitempty"`
	DefiningSubstance *SubstanceSpecification_Property_DefiningSubstanceX `protobuf:"bytes,7,opt,name=defining_substance,json=definingSubstance,proto3" json:"defining_substance,omitempty"`
	Amount            *SubstanceSpecification_Property_AmountX            `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SubstanceSpecification_Property) Reset() {
	*x = SubstanceSpecification_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Property) ProtoMessage() {}

func (x *SubstanceSpecification_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Property.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubstanceSpecification_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetParameters() *datatypes_go_proto.String {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetDefiningSubstance() *SubstanceSpecification_Property_DefiningSubstanceX {
	if x != nil {
		return x.DefiningSubstance
	}
	return nil
}

func (x *SubstanceSpecification_Property) GetAmount() *SubstanceSpecification_Property_AmountX {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Structural information
type SubstanceSpecification_Structure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Stereochemistry type
	Stereochemistry *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=stereochemistry,proto3" json:"stereochemistry,omitempty"`
	// Optical activity type
	OpticalActivity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=optical_activity,json=opticalActivity,proto3" json:"optical_activity,omitempty"`
	// Molecular formula
	MolecularFormula *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=molecular_formula,json=molecularFormula,proto3" json:"molecular_formula,omitempty"`
	// Specified per moiety according to the Hill system, i.e. first C, then H,
	// then alphabetical, each moiety separated by a dot
	MolecularFormulaByMoiety *datatypes_go_proto.String                  `protobuf:"bytes,7,opt,name=molecular_formula_by_moiety,json=molecularFormulaByMoiety,proto3" json:"molecular_formula_by_moiety,omitempty"`
	Isotope                  []*SubstanceSpecification_Structure_Isotope `protobuf:"bytes,8,rep,name=isotope,proto3" json:"isotope,omitempty"`
	// The molecular weight or weight range (for proteins, polymers or nucleic
	// acids)
	MolecularWeight *SubstanceSpecification_Structure_Isotope_MolecularWeight `protobuf:"bytes,9,opt,name=molecular_weight,json=molecularWeight,proto3" json:"molecular_weight,omitempty"`
	// Supporting literature
	Source         []*datatypes_go_proto.Reference                    `protobuf:"bytes,10,rep,name=source,proto3" json:"source,omitempty"`
	Representation []*SubstanceSpecification_Structure_Representation `protobuf:"bytes,11,rep,name=representation,proto3" json:"representation,omitempty"`
}

func (x *SubstanceSpecification_Structure) Reset() {
	*x = SubstanceSpecification_Structure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Structure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Structure) ProtoMessage() {}

func (x *SubstanceSpecification_Structure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Structure.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Structure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SubstanceSpecification_Structure) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetStereochemistry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Stereochemistry
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetOpticalActivity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OpticalActivity
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetMolecularFormula() *datatypes_go_proto.String {
	if x != nil {
		return x.MolecularFormula
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetMolecularFormulaByMoiety() *datatypes_go_proto.String {
	if x != nil {
		return x.MolecularFormulaByMoiety
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetIsotope() []*SubstanceSpecification_Structure_Isotope {
	if x != nil {
		return x.Isotope
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetMolecularWeight() *SubstanceSpecification_Structure_Isotope_MolecularWeight {
	if x != nil {
		return x.MolecularWeight
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SubstanceSpecification_Structure) GetRepresentation() []*SubstanceSpecification_Structure_Representation {
	if x != nil {
		return x.Representation
	}
	return nil
}

// Codes associated with the substance
type SubstanceSpecification_CodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The specific code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Status of the code assignment
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// The date at which the code status is changed as part of the terminology
	// maintenance
	StatusDate *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// Any comment can be provided in this field, if necessary
	Comment *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *SubstanceSpecification_CodeType) Reset() {
	*x = SubstanceSpecification_CodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_CodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_CodeType) ProtoMessage() {}

func (x *SubstanceSpecification_CodeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_CodeType.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_CodeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SubstanceSpecification_CodeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetStatusDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *SubstanceSpecification_CodeType) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// Names applicable to this substance
type SubstanceSpecification_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The actual name
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Name type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The status of the name
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// If this is the preferred name for this substance
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,7,opt,name=preferred,proto3" json:"preferred,omitempty"`
	// Language of the name
	Language []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=language,proto3" json:"language,omitempty"`
	// The use context of this name for example if there is a different name a
	// drug active ingredient as opposed to a food colour additive
	Domain []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=domain,proto3" json:"domain,omitempty"`
	// The jurisdiction where this name applies
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// A synonym of this name
	Synonym []*SubstanceSpecification_Name `protobuf:"bytes,11,rep,name=synonym,proto3" json:"synonym,omitempty"`
	// A translation for this name
	Translation []*SubstanceSpecification_Name          `protobuf:"bytes,12,rep,name=translation,proto3" json:"translation,omitempty"`
	Official    []*SubstanceSpecification_Name_Official `protobuf:"bytes,13,rep,name=official,proto3" json:"official,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *SubstanceSpecification_Name) Reset() {
	*x = SubstanceSpecification_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Name) ProtoMessage() {}

func (x *SubstanceSpecification_Name) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Name.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Name) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SubstanceSpecification_Name) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetLanguage() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetDomain() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetSynonym() []*SubstanceSpecification_Name {
	if x != nil {
		return x.Synonym
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetTranslation() []*SubstanceSpecification_Name {
	if x != nil {
		return x.Translation
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetOfficial() []*SubstanceSpecification_Name_Official {
	if x != nil {
		return x.Official
	}
	return nil
}

func (x *SubstanceSpecification_Name) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// A link between this substance and another, with details of the relationship
type SubstanceSpecification_Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Substance         *SubstanceSpecification_Relationship_SubstanceX `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// For example "salt to parent", "active moiety", "starting material"
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// For example where an enzyme strongly bonds with a particular substance,
	// this is a defining relationship for that enzyme, out of several possible
	// substance relationships
	IsDefining *datatypes_go_proto.Boolean                  `protobuf:"bytes,6,opt,name=is_defining,json=isDefining,proto3" json:"is_defining,omitempty"`
	Amount     *SubstanceSpecification_Relationship_AmountX `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// For use when the numeric
	AmountRatioLowLimit *datatypes_go_proto.Ratio `protobuf:"bytes,8,opt,name=amount_ratio_low_limit,json=amountRatioLowLimit,proto3" json:"amount_ratio_low_limit,omitempty"`
	// An operator for the amount, for example "average", "approximately", "less
	// than"
	AmountType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`
	// Supporting literature
	Source []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *SubstanceSpecification_Relationship) Reset() {
	*x = SubstanceSpecification_Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Relationship) ProtoMessage() {}

func (x *SubstanceSpecification_Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Relationship.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Relationship) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SubstanceSpecification_Relationship) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetSubstance() *SubstanceSpecification_Relationship_SubstanceX {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetIsDefining() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsDefining
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetAmount() *SubstanceSpecification_Relationship_AmountX {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetAmountRatioLowLimit() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.AmountRatioLowLimit
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetAmountType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AmountType
	}
	return nil
}

func (x *SubstanceSpecification_Relationship) GetSource() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

// Quantitative value for this moiety
type SubstanceSpecification_Moiety_AmountX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SubstanceSpecification_Moiety_AmountX_Quantity
	//	*SubstanceSpecification_Moiety_AmountX_StringValue
	Choice isSubstanceSpecification_Moiety_AmountX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceSpecification_Moiety_AmountX) Reset() {
	*x = SubstanceSpecification_Moiety_AmountX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Moiety_AmountX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Moiety_AmountX) ProtoMessage() {}

func (x *SubstanceSpecification_Moiety_AmountX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Moiety_AmountX.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Moiety_AmountX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *SubstanceSpecification_Moiety_AmountX) GetChoice() isSubstanceSpecification_Moiety_AmountX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceSpecification_Moiety_AmountX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Moiety_AmountX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SubstanceSpecification_Moiety_AmountX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Moiety_AmountX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isSubstanceSpecification_Moiety_AmountX_Choice interface {
	isSubstanceSpecification_Moiety_AmountX_Choice()
}

type SubstanceSpecification_Moiety_AmountX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type SubstanceSpecification_Moiety_AmountX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*SubstanceSpecification_Moiety_AmountX_Quantity) isSubstanceSpecification_Moiety_AmountX_Choice() {
}

func (*SubstanceSpecification_Moiety_AmountX_StringValue) isSubstanceSpecification_Moiety_AmountX_Choice() {
}

// A substance upon which a defining property depends (e.g. for solubility:
// in water, in alcohol)
type SubstanceSpecification_Property_DefiningSubstanceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SubstanceSpecification_Property_DefiningSubstanceX_Reference
	//	*SubstanceSpecification_Property_DefiningSubstanceX_CodeableConcept
	Choice isSubstanceSpecification_Property_DefiningSubstanceX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceSpecification_Property_DefiningSubstanceX) Reset() {
	*x = SubstanceSpecification_Property_DefiningSubstanceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Property_DefiningSubstanceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Property_DefiningSubstanceX) ProtoMessage() {}

func (x *SubstanceSpecification_Property_DefiningSubstanceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Property_DefiningSubstanceX.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Property_DefiningSubstanceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *SubstanceSpecification_Property_DefiningSubstanceX) GetChoice() isSubstanceSpecification_Property_DefiningSubstanceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceSpecification_Property_DefiningSubstanceX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Property_DefiningSubstanceX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *SubstanceSpecification_Property_DefiningSubstanceX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Property_DefiningSubstanceX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isSubstanceSpecification_Property_DefiningSubstanceX_Choice interface {
	isSubstanceSpecification_Property_DefiningSubstanceX_Choice()
}

type SubstanceSpecification_Property_DefiningSubstanceX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type SubstanceSpecification_Property_DefiningSubstanceX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*SubstanceSpecification_Property_DefiningSubstanceX_Reference) isSubstanceSpecification_Property_DefiningSubstanceX_Choice() {
}

func (*SubstanceSpecification_Property_DefiningSubstanceX_CodeableConcept) isSubstanceSpecification_Property_DefiningSubstanceX_Choice() {
}

// Quantitative value for this property
type SubstanceSpecification_Property_AmountX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SubstanceSpecification_Property_AmountX_Quantity
	//	*SubstanceSpecification_Property_AmountX_StringValue
	Choice isSubstanceSpecification_Property_AmountX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceSpecification_Property_AmountX) Reset() {
	*x = SubstanceSpecification_Property_AmountX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Property_AmountX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Property_AmountX) ProtoMessage() {}

func (x *SubstanceSpecification_Property_AmountX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Property_AmountX.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Property_AmountX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *SubstanceSpecification_Property_AmountX) GetChoice() isSubstanceSpecification_Property_AmountX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceSpecification_Property_AmountX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Property_AmountX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SubstanceSpecification_Property_AmountX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Property_AmountX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isSubstanceSpecification_Property_AmountX_Choice interface {
	isSubstanceSpecification_Property_AmountX_Choice()
}

type SubstanceSpecification_Property_AmountX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type SubstanceSpecification_Property_AmountX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*SubstanceSpecification_Property_AmountX_Quantity) isSubstanceSpecification_Property_AmountX_Choice() {
}

func (*SubstanceSpecification_Property_AmountX_StringValue) isSubstanceSpecification_Property_AmountX_Choice() {
}

// Applicable for single substances that contain a radionuclide or a
// non-natural isotopic ratio
type SubstanceSpecification_Structure_Isotope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Substance identifier for each non-natural or radioisotope
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Substance name for each non-natural or radioisotope
	Name *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The type of isotopic substitution present in a single substance
	Substitution *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// Half life - for a non-natural nuclide
	HalfLife        *datatypes_go_proto.Quantity                              `protobuf:"bytes,7,opt,name=half_life,json=halfLife,proto3" json:"half_life,omitempty"`
	MolecularWeight *SubstanceSpecification_Structure_Isotope_MolecularWeight `protobuf:"bytes,8,opt,name=molecular_weight,json=molecularWeight,proto3" json:"molecular_weight,omitempty"`
}

func (x *SubstanceSpecification_Structure_Isotope) Reset() {
	*x = SubstanceSpecification_Structure_Isotope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Structure_Isotope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Structure_Isotope) ProtoMessage() {}

func (x *SubstanceSpecification_Structure_Isotope) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Structure_Isotope.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Structure_Isotope) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *SubstanceSpecification_Structure_Isotope) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetName() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetSubstitution() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetHalfLife() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.HalfLife
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope) GetMolecularWeight() *SubstanceSpecification_Structure_Isotope_MolecularWeight {
	if x != nil {
		return x.MolecularWeight
	}
	return nil
}

// Molecular structural representation
type SubstanceSpecification_Structure_Representation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of structure (e.g. Full, Partial, Representative)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The structural representation as text string in a format e.g. InChI,
	// SMILES, MOLFILE, CDX
	Representation *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=representation,proto3" json:"representation,omitempty"`
	// An attached file with the structural representation
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,6,opt,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *SubstanceSpecification_Structure_Representation) Reset() {
	*x = SubstanceSpecification_Structure_Representation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Structure_Representation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Structure_Representation) ProtoMessage() {}

func (x *SubstanceSpecification_Structure_Representation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Structure_Representation.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Structure_Representation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *SubstanceSpecification_Structure_Representation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Representation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Representation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Representation) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Representation) GetRepresentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Representation) GetAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

// The molecular weight or weight range (for proteins, polymers or nucleic
// acids)
type SubstanceSpecification_Structure_Isotope_MolecularWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The method by which the molecular weight was determined
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// Type of molecular weight such as exact, average (also known as.
	// number average), weight average
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Used to capture quantitative values for a variety of elements. If
	// only limits are given, the arithmetic mean would be the average. If
	// only a single definite value for a given element is given, it would
	// be captured in this field
	Amount *datatypes_go_proto.Quantity `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) Reset() {
	*x = SubstanceSpecification_Structure_Isotope_MolecularWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Structure_Isotope_MolecularWeight) ProtoMessage() {}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Structure_Isotope_MolecularWeight.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Structure_Isotope_MolecularWeight) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SubstanceSpecification_Structure_Isotope_MolecularWeight) GetAmount() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Details of the official nature of this name
type SubstanceSpecification_Name_Official struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Which authority uses this official name
	Authority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The status of the official name
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Date of official name change
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *SubstanceSpecification_Name_Official) Reset() {
	*x = SubstanceSpecification_Name_Official{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Name_Official) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Name_Official) ProtoMessage() {}

func (x *SubstanceSpecification_Name_Official) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Name_Official.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Name_Official) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *SubstanceSpecification_Name_Official) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSpecification_Name_Official) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSpecification_Name_Official) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSpecification_Name_Official) GetAuthority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *SubstanceSpecification_Name_Official) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SubstanceSpecification_Name_Official) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

// A pointer to another substance, as a resource or just a representational
// code
type SubstanceSpecification_Relationship_SubstanceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SubstanceSpecification_Relationship_SubstanceX_Reference
	//	*SubstanceSpecification_Relationship_SubstanceX_CodeableConcept
	Choice isSubstanceSpecification_Relationship_SubstanceX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceSpecification_Relationship_SubstanceX) Reset() {
	*x = SubstanceSpecification_Relationship_SubstanceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Relationship_SubstanceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Relationship_SubstanceX) ProtoMessage() {}

func (x *SubstanceSpecification_Relationship_SubstanceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Relationship_SubstanceX.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Relationship_SubstanceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (m *SubstanceSpecification_Relationship_SubstanceX) GetChoice() isSubstanceSpecification_Relationship_SubstanceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceSpecification_Relationship_SubstanceX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Relationship_SubstanceX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *SubstanceSpecification_Relationship_SubstanceX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Relationship_SubstanceX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isSubstanceSpecification_Relationship_SubstanceX_Choice interface {
	isSubstanceSpecification_Relationship_SubstanceX_Choice()
}

type SubstanceSpecification_Relationship_SubstanceX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type SubstanceSpecification_Relationship_SubstanceX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*SubstanceSpecification_Relationship_SubstanceX_Reference) isSubstanceSpecification_Relationship_SubstanceX_Choice() {
}

func (*SubstanceSpecification_Relationship_SubstanceX_CodeableConcept) isSubstanceSpecification_Relationship_SubstanceX_Choice() {
}

// A numeric factor for the relationship, for instance to express that the
// salt of a substance has some percentage of the active substance in
// relation to some other
type SubstanceSpecification_Relationship_AmountX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SubstanceSpecification_Relationship_AmountX_Quantity
	//	*SubstanceSpecification_Relationship_AmountX_Range
	//	*SubstanceSpecification_Relationship_AmountX_Ratio
	//	*SubstanceSpecification_Relationship_AmountX_StringValue
	Choice isSubstanceSpecification_Relationship_AmountX_Choice `protobuf_oneof:"choice"`
}

func (x *SubstanceSpecification_Relationship_AmountX) Reset() {
	*x = SubstanceSpecification_Relationship_AmountX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSpecification_Relationship_AmountX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSpecification_Relationship_AmountX) ProtoMessage() {}

func (x *SubstanceSpecification_Relationship_AmountX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSpecification_Relationship_AmountX.ProtoReflect.Descriptor instead.
func (*SubstanceSpecification_Relationship_AmountX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (m *SubstanceSpecification_Relationship_AmountX) GetChoice() isSubstanceSpecification_Relationship_AmountX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SubstanceSpecification_Relationship_AmountX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Relationship_AmountX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SubstanceSpecification_Relationship_AmountX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Relationship_AmountX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *SubstanceSpecification_Relationship_AmountX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Relationship_AmountX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *SubstanceSpecification_Relationship_AmountX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SubstanceSpecification_Relationship_AmountX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isSubstanceSpecification_Relationship_AmountX_Choice interface {
	isSubstanceSpecification_Relationship_AmountX_Choice()
}

type SubstanceSpecification_Relationship_AmountX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type SubstanceSpecification_Relationship_AmountX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type SubstanceSpecification_Relationship_AmountX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,3,opt,name=ratio,proto3,oneof"`
}

type SubstanceSpecification_Relationship_AmountX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

func (*SubstanceSpecification_Relationship_AmountX_Quantity) isSubstanceSpecification_Relationship_AmountX_Choice() {
}

func (*SubstanceSpecification_Relationship_AmountX_Range) isSubstanceSpecification_Relationship_AmountX_Choice() {
}

func (*SubstanceSpecification_Relationship_AmountX_Ratio) isSubstanceSpecification_Relationship_AmountX_Choice() {
}

func (*SubstanceSpecification_Relationship_AmountX_StringValue) isSubstanceSpecification_Relationship_AmountX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_substance_specification_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDesc = []byte{
	0x0a, 0x47, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x48, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x6d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x52, 0x06, 0x6d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x78, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x23, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x78, 0x0a, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x6d, 0x6f, 0x6c, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5d, 0x0a, 0x0c, 0x6e, 0x75, 0x63, 0x6c,
	0x65, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1a,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x52, 0x0b, 0x6e, 0x75, 0x63, 0x6c,
	0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x6d,
	0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x1d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x17, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x1a, 0xc5, 0x06, 0x0a, 0x06, 0x4d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68,
	0x65, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68, 0x65, 0x6d, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12,
	0x52, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x69,
	0x65, 0x74, 0x79, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x95, 0x01, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x12,
	0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xcc, 0x07, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x12, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x58,
	0x52, 0x11, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x58, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xe6, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x58,
	0x12, 0x6b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x2b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x16, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x12, 0x3b,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe9, 0x11, 0x0a, 0x09, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68, 0x65, 0x6d,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x6d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x5a, 0x0a,
	0x1b, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x18, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x42, 0x79, 0x4d, 0x6f, 0x69, 0x65, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x07, 0x69, 0x73, 0x6f,
	0x74, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x65, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x74, 0x6f,
	0x70, 0x65, 0x12, 0x78, 0x0a, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x6d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6c, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbb, 0x07, 0x0a, 0x07,
	0x49, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x4c, 0x69,
	0x66, 0x65, 0x12, 0x78, 0x0a, 0x10, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x6f, 0x74, 0x6f, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x6c, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x6d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xfa, 0x02, 0x0a,
	0x0f, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x8a, 0x03, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x84, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xbb, 0x0a,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x48, 0x0a,
	0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x12, 0x52, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x4f,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0xf9, 0x02, 0x0a, 0x08, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xc9, 0x09, 0x0a, 0x0c,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x58, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x58, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x58, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x16,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x58, 0x12, 0x5c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x16, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xfd, 0x01, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x4a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x87, 0x01, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x64, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_goTypes = []interface{}{
	(*SubstanceSpecification)(nil),                                   // 0: google.fhir.r4.core.SubstanceSpecification
	(*SubstanceSpecification_Moiety)(nil),                            // 1: google.fhir.r4.core.SubstanceSpecification.Moiety
	(*SubstanceSpecification_Property)(nil),                          // 2: google.fhir.r4.core.SubstanceSpecification.Property
	(*SubstanceSpecification_Structure)(nil),                         // 3: google.fhir.r4.core.SubstanceSpecification.Structure
	(*SubstanceSpecification_CodeType)(nil),                          // 4: google.fhir.r4.core.SubstanceSpecification.CodeType
	(*SubstanceSpecification_Name)(nil),                              // 5: google.fhir.r4.core.SubstanceSpecification.Name
	(*SubstanceSpecification_Relationship)(nil),                      // 6: google.fhir.r4.core.SubstanceSpecification.Relationship
	(*SubstanceSpecification_Moiety_AmountX)(nil),                    // 7: google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX
	(*SubstanceSpecification_Property_DefiningSubstanceX)(nil),       // 8: google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX
	(*SubstanceSpecification_Property_AmountX)(nil),                  // 9: google.fhir.r4.core.SubstanceSpecification.Property.AmountX
	(*SubstanceSpecification_Structure_Isotope)(nil),                 // 10: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope
	(*SubstanceSpecification_Structure_Representation)(nil),          // 11: google.fhir.r4.core.SubstanceSpecification.Structure.Representation
	(*SubstanceSpecification_Structure_Isotope_MolecularWeight)(nil), // 12: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight
	(*SubstanceSpecification_Name_Official)(nil),                     // 13: google.fhir.r4.core.SubstanceSpecification.Name.Official
	(*SubstanceSpecification_Relationship_SubstanceX)(nil),           // 14: google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX
	(*SubstanceSpecification_Relationship_AmountX)(nil),              // 15: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX
	(*datatypes_go_proto.Id)(nil),                                    // 16: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                  // 17: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                   // 18: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                  // 19: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                             // 20: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                  // 21: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                             // 22: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                            // 23: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                       // 24: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.String)(nil),                                // 25: google.fhir.r4.core.String
	(*datatypes_go_proto.Reference)(nil),                             // 26: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                              // 27: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.Boolean)(nil),                               // 28: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.Ratio)(nil),                                 // 29: google.fhir.r4.core.Ratio
	(*datatypes_go_proto.Quantity)(nil),                              // 30: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.Attachment)(nil),                            // 31: google.fhir.r4.core.Attachment
	(*datatypes_go_proto.Range)(nil),                                 // 32: google.fhir.r4.core.Range
}
var file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_depIdxs = []int32{
	16,  // 0: google.fhir.r4.core.SubstanceSpecification.id:type_name -> google.fhir.r4.core.Id
	17,  // 1: google.fhir.r4.core.SubstanceSpecification.meta:type_name -> google.fhir.r4.core.Meta
	18,  // 2: google.fhir.r4.core.SubstanceSpecification.implicit_rules:type_name -> google.fhir.r4.core.Uri
	19,  // 3: google.fhir.r4.core.SubstanceSpecification.language:type_name -> google.fhir.r4.core.Code
	20,  // 4: google.fhir.r4.core.SubstanceSpecification.text:type_name -> google.fhir.r4.core.Narrative
	21,  // 5: google.fhir.r4.core.SubstanceSpecification.contained:type_name -> google.protobuf.Any
	22,  // 6: google.fhir.r4.core.SubstanceSpecification.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 7: google.fhir.r4.core.SubstanceSpecification.modifier_extension:type_name -> google.fhir.r4.core.Extension
	23,  // 8: google.fhir.r4.core.SubstanceSpecification.identifier:type_name -> google.fhir.r4.core.Identifier
	24,  // 9: google.fhir.r4.core.SubstanceSpecification.type:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 10: google.fhir.r4.core.SubstanceSpecification.status:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 11: google.fhir.r4.core.SubstanceSpecification.domain:type_name -> google.fhir.r4.core.CodeableConcept
	25,  // 12: google.fhir.r4.core.SubstanceSpecification.description:type_name -> google.fhir.r4.core.String
	26,  // 13: google.fhir.r4.core.SubstanceSpecification.source:type_name -> google.fhir.r4.core.Reference
	25,  // 14: google.fhir.r4.core.SubstanceSpecification.comment:type_name -> google.fhir.r4.core.String
	1,   // 15: google.fhir.r4.core.SubstanceSpecification.moiety:type_name -> google.fhir.r4.core.SubstanceSpecification.Moiety
	2,   // 16: google.fhir.r4.core.SubstanceSpecification.property:type_name -> google.fhir.r4.core.SubstanceSpecification.Property
	26,  // 17: google.fhir.r4.core.SubstanceSpecification.reference_information:type_name -> google.fhir.r4.core.Reference
	3,   // 18: google.fhir.r4.core.SubstanceSpecification.structure:type_name -> google.fhir.r4.core.SubstanceSpecification.Structure
	4,   // 19: google.fhir.r4.core.SubstanceSpecification.code:type_name -> google.fhir.r4.core.SubstanceSpecification.CodeType
	5,   // 20: google.fhir.r4.core.SubstanceSpecification.name:type_name -> google.fhir.r4.core.SubstanceSpecification.Name
	12,  // 21: google.fhir.r4.core.SubstanceSpecification.molecular_weight:type_name -> google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight
	6,   // 22: google.fhir.r4.core.SubstanceSpecification.relationship:type_name -> google.fhir.r4.core.SubstanceSpecification.Relationship
	26,  // 23: google.fhir.r4.core.SubstanceSpecification.nucleic_acid:type_name -> google.fhir.r4.core.Reference
	26,  // 24: google.fhir.r4.core.SubstanceSpecification.polymer:type_name -> google.fhir.r4.core.Reference
	26,  // 25: google.fhir.r4.core.SubstanceSpecification.protein:type_name -> google.fhir.r4.core.Reference
	26,  // 26: google.fhir.r4.core.SubstanceSpecification.source_material:type_name -> google.fhir.r4.core.Reference
	25,  // 27: google.fhir.r4.core.SubstanceSpecification.Moiety.id:type_name -> google.fhir.r4.core.String
	22,  // 28: google.fhir.r4.core.SubstanceSpecification.Moiety.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 29: google.fhir.r4.core.SubstanceSpecification.Moiety.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 30: google.fhir.r4.core.SubstanceSpecification.Moiety.role:type_name -> google.fhir.r4.core.CodeableConcept
	23,  // 31: google.fhir.r4.core.SubstanceSpecification.Moiety.identifier:type_name -> google.fhir.r4.core.Identifier
	25,  // 32: google.fhir.r4.core.SubstanceSpecification.Moiety.name:type_name -> google.fhir.r4.core.String
	24,  // 33: google.fhir.r4.core.SubstanceSpecification.Moiety.stereochemistry:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 34: google.fhir.r4.core.SubstanceSpecification.Moiety.optical_activity:type_name -> google.fhir.r4.core.CodeableConcept
	25,  // 35: google.fhir.r4.core.SubstanceSpecification.Moiety.molecular_formula:type_name -> google.fhir.r4.core.String
	7,   // 36: google.fhir.r4.core.SubstanceSpecification.Moiety.amount:type_name -> google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX
	25,  // 37: google.fhir.r4.core.SubstanceSpecification.Property.id:type_name -> google.fhir.r4.core.String
	22,  // 38: google.fhir.r4.core.SubstanceSpecification.Property.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 39: google.fhir.r4.core.SubstanceSpecification.Property.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 40: google.fhir.r4.core.SubstanceSpecification.Property.category:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 41: google.fhir.r4.core.SubstanceSpecification.Property.code:type_name -> google.fhir.r4.core.CodeableConcept
	25,  // 42: google.fhir.r4.core.SubstanceSpecification.Property.parameters:type_name -> google.fhir.r4.core.String
	8,   // 43: google.fhir.r4.core.SubstanceSpecification.Property.defining_substance:type_name -> google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX
	9,   // 44: google.fhir.r4.core.SubstanceSpecification.Property.amount:type_name -> google.fhir.r4.core.SubstanceSpecification.Property.AmountX
	25,  // 45: google.fhir.r4.core.SubstanceSpecification.Structure.id:type_name -> google.fhir.r4.core.String
	22,  // 46: google.fhir.r4.core.SubstanceSpecification.Structure.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 47: google.fhir.r4.core.SubstanceSpecification.Structure.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 48: google.fhir.r4.core.SubstanceSpecification.Structure.stereochemistry:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 49: google.fhir.r4.core.SubstanceSpecification.Structure.optical_activity:type_name -> google.fhir.r4.core.CodeableConcept
	25,  // 50: google.fhir.r4.core.SubstanceSpecification.Structure.molecular_formula:type_name -> google.fhir.r4.core.String
	25,  // 51: google.fhir.r4.core.SubstanceSpecification.Structure.molecular_formula_by_moiety:type_name -> google.fhir.r4.core.String
	10,  // 52: google.fhir.r4.core.SubstanceSpecification.Structure.isotope:type_name -> google.fhir.r4.core.SubstanceSpecification.Structure.Isotope
	12,  // 53: google.fhir.r4.core.SubstanceSpecification.Structure.molecular_weight:type_name -> google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight
	26,  // 54: google.fhir.r4.core.SubstanceSpecification.Structure.source:type_name -> google.fhir.r4.core.Reference
	11,  // 55: google.fhir.r4.core.SubstanceSpecification.Structure.representation:type_name -> google.fhir.r4.core.SubstanceSpecification.Structure.Representation
	25,  // 56: google.fhir.r4.core.SubstanceSpecification.CodeType.id:type_name -> google.fhir.r4.core.String
	22,  // 57: google.fhir.r4.core.SubstanceSpecification.CodeType.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 58: google.fhir.r4.core.SubstanceSpecification.CodeType.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 59: google.fhir.r4.core.SubstanceSpecification.CodeType.code:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 60: google.fhir.r4.core.SubstanceSpecification.CodeType.status:type_name -> google.fhir.r4.core.CodeableConcept
	27,  // 61: google.fhir.r4.core.SubstanceSpecification.CodeType.status_date:type_name -> google.fhir.r4.core.DateTime
	25,  // 62: google.fhir.r4.core.SubstanceSpecification.CodeType.comment:type_name -> google.fhir.r4.core.String
	26,  // 63: google.fhir.r4.core.SubstanceSpecification.CodeType.source:type_name -> google.fhir.r4.core.Reference
	25,  // 64: google.fhir.r4.core.SubstanceSpecification.Name.id:type_name -> google.fhir.r4.core.String
	22,  // 65: google.fhir.r4.core.SubstanceSpecification.Name.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 66: google.fhir.r4.core.SubstanceSpecification.Name.modifier_extension:type_name -> google.fhir.r4.core.Extension
	25,  // 67: google.fhir.r4.core.SubstanceSpecification.Name.name:type_name -> google.fhir.r4.core.String
	24,  // 68: google.fhir.r4.core.SubstanceSpecification.Name.type:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 69: google.fhir.r4.core.SubstanceSpecification.Name.status:type_name -> google.fhir.r4.core.CodeableConcept
	28,  // 70: google.fhir.r4.core.SubstanceSpecification.Name.preferred:type_name -> google.fhir.r4.core.Boolean
	24,  // 71: google.fhir.r4.core.SubstanceSpecification.Name.language:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 72: google.fhir.r4.core.SubstanceSpecification.Name.domain:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 73: google.fhir.r4.core.SubstanceSpecification.Name.jurisdiction:type_name -> google.fhir.r4.core.CodeableConcept
	5,   // 74: google.fhir.r4.core.SubstanceSpecification.Name.synonym:type_name -> google.fhir.r4.core.SubstanceSpecification.Name
	5,   // 75: google.fhir.r4.core.SubstanceSpecification.Name.translation:type_name -> google.fhir.r4.core.SubstanceSpecification.Name
	13,  // 76: google.fhir.r4.core.SubstanceSpecification.Name.official:type_name -> google.fhir.r4.core.SubstanceSpecification.Name.Official
	26,  // 77: google.fhir.r4.core.SubstanceSpecification.Name.source:type_name -> google.fhir.r4.core.Reference
	25,  // 78: google.fhir.r4.core.SubstanceSpecification.Relationship.id:type_name -> google.fhir.r4.core.String
	22,  // 79: google.fhir.r4.core.SubstanceSpecification.Relationship.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 80: google.fhir.r4.core.SubstanceSpecification.Relationship.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14,  // 81: google.fhir.r4.core.SubstanceSpecification.Relationship.substance:type_name -> google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX
	24,  // 82: google.fhir.r4.core.SubstanceSpecification.Relationship.relationship:type_name -> google.fhir.r4.core.CodeableConcept
	28,  // 83: google.fhir.r4.core.SubstanceSpecification.Relationship.is_defining:type_name -> google.fhir.r4.core.Boolean
	15,  // 84: google.fhir.r4.core.SubstanceSpecification.Relationship.amount:type_name -> google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX
	29,  // 85: google.fhir.r4.core.SubstanceSpecification.Relationship.amount_ratio_low_limit:type_name -> google.fhir.r4.core.Ratio
	24,  // 86: google.fhir.r4.core.SubstanceSpecification.Relationship.amount_type:type_name -> google.fhir.r4.core.CodeableConcept
	26,  // 87: google.fhir.r4.core.SubstanceSpecification.Relationship.source:type_name -> google.fhir.r4.core.Reference
	30,  // 88: google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX.quantity:type_name -> google.fhir.r4.core.Quantity
	25,  // 89: google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX.string_value:type_name -> google.fhir.r4.core.String
	26,  // 90: google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX.reference:type_name -> google.fhir.r4.core.Reference
	24,  // 91: google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	30,  // 92: google.fhir.r4.core.SubstanceSpecification.Property.AmountX.quantity:type_name -> google.fhir.r4.core.Quantity
	25,  // 93: google.fhir.r4.core.SubstanceSpecification.Property.AmountX.string_value:type_name -> google.fhir.r4.core.String
	25,  // 94: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.id:type_name -> google.fhir.r4.core.String
	22,  // 95: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 96: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.modifier_extension:type_name -> google.fhir.r4.core.Extension
	23,  // 97: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.identifier:type_name -> google.fhir.r4.core.Identifier
	24,  // 98: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.name:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 99: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.substitution:type_name -> google.fhir.r4.core.CodeableConcept
	30,  // 100: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.half_life:type_name -> google.fhir.r4.core.Quantity
	12,  // 101: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.molecular_weight:type_name -> google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight
	25,  // 102: google.fhir.r4.core.SubstanceSpecification.Structure.Representation.id:type_name -> google.fhir.r4.core.String
	22,  // 103: google.fhir.r4.core.SubstanceSpecification.Structure.Representation.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 104: google.fhir.r4.core.SubstanceSpecification.Structure.Representation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 105: google.fhir.r4.core.SubstanceSpecification.Structure.Representation.type:type_name -> google.fhir.r4.core.CodeableConcept
	25,  // 106: google.fhir.r4.core.SubstanceSpecification.Structure.Representation.representation:type_name -> google.fhir.r4.core.String
	31,  // 107: google.fhir.r4.core.SubstanceSpecification.Structure.Representation.attachment:type_name -> google.fhir.r4.core.Attachment
	25,  // 108: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.id:type_name -> google.fhir.r4.core.String
	22,  // 109: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 110: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 111: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.method:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 112: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.type:type_name -> google.fhir.r4.core.CodeableConcept
	30,  // 113: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.amount:type_name -> google.fhir.r4.core.Quantity
	25,  // 114: google.fhir.r4.core.SubstanceSpecification.Name.Official.id:type_name -> google.fhir.r4.core.String
	22,  // 115: google.fhir.r4.core.SubstanceSpecification.Name.Official.extension:type_name -> google.fhir.r4.core.Extension
	22,  // 116: google.fhir.r4.core.SubstanceSpecification.Name.Official.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 117: google.fhir.r4.core.SubstanceSpecification.Name.Official.authority:type_name -> google.fhir.r4.core.CodeableConcept
	24,  // 118: google.fhir.r4.core.SubstanceSpecification.Name.Official.status:type_name -> google.fhir.r4.core.CodeableConcept
	27,  // 119: google.fhir.r4.core.SubstanceSpecification.Name.Official.date:type_name -> google.fhir.r4.core.DateTime
	26,  // 120: google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX.reference:type_name -> google.fhir.r4.core.Reference
	24,  // 121: google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	30,  // 122: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.quantity:type_name -> google.fhir.r4.core.Quantity
	32,  // 123: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.range:type_name -> google.fhir.r4.core.Range
	29,  // 124: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.ratio:type_name -> google.fhir.r4.core.Ratio
	25,  // 125: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.string_value:type_name -> google.fhir.r4.core.String
	126, // [126:126] is the sub-list for method output_type
	126, // [126:126] is the sub-list for method input_type
	126, // [126:126] is the sub-list for extension type_name
	126, // [126:126] is the sub-list for extension extendee
	0,   // [0:126] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_substance_specification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Moiety); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Structure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_CodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Moiety_AmountX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Property_DefiningSubstanceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Property_AmountX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Structure_Isotope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Structure_Representation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Structure_Isotope_MolecularWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Name_Official); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Relationship_SubstanceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSpecification_Relationship_AmountX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SubstanceSpecification_Moiety_AmountX_Quantity)(nil),
		(*SubstanceSpecification_Moiety_AmountX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SubstanceSpecification_Property_DefiningSubstanceX_Reference)(nil),
		(*SubstanceSpecification_Property_DefiningSubstanceX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SubstanceSpecification_Property_AmountX_Quantity)(nil),
		(*SubstanceSpecification_Property_AmountX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SubstanceSpecification_Relationship_SubstanceX_Reference)(nil),
		(*SubstanceSpecification_Relationship_SubstanceX_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*SubstanceSpecification_Relationship_AmountX_Quantity)(nil),
		(*SubstanceSpecification_Relationship_AmountX_Range)(nil),
		(*SubstanceSpecification_Relationship_AmountX_Ratio)(nil),
		(*SubstanceSpecification_Relationship_AmountX_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_substance_specification_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_specification_proto_depIdxs = nil
}
