//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/specimen.proto

package specimen_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Specimen, last updated
// 2019-11-01T09:29:23.356+11:00. Sample for analysis. See
// http://hl7.org/fhir/StructureDefinition/Specimen
type Specimen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Identifier assigned by the lab
	AccessionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,11,opt,name=accession_identifier,json=accessionIdentifier,proto3" json:"accession_identifier,omitempty"`
	Status              *Specimen_StatusCode           `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Kind of material that forms the specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Where the specimen came from. This may be from patient(s), from a location
	// (e.g., the source of an environmental sample), or a sampling of a substance
	// or a device
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// The time when specimen was received for processing
	ReceivedTime *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	// Specimen from which this specimen originated
	Parent []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=parent,proto3" json:"parent,omitempty"`
	// Why the specimen was collected
	Request    []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=request,proto3" json:"request,omitempty"`
	Collection *Specimen_Collection            `protobuf:"bytes,18,opt,name=collection,proto3" json:"collection,omitempty"`
	Processing []*Specimen_Processing          `protobuf:"bytes,19,rep,name=processing,proto3" json:"processing,omitempty"`
	Container  []*Specimen_Container           `protobuf:"bytes,20,rep,name=container,proto3" json:"container,omitempty"`
	// State of the specimen
	Condition []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=condition,proto3" json:"condition,omitempty"`
	// Comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,22,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *Specimen) Reset() {
	*x = Specimen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen) ProtoMessage() {}

func (x *Specimen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen.ProtoReflect.Descriptor instead.
func (*Specimen) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0}
}

func (x *Specimen) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Specimen) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Specimen) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Specimen) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Specimen) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Specimen) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Specimen) GetAccessionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.AccessionIdentifier
	}
	return nil
}

func (x *Specimen) GetStatus() *Specimen_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Specimen) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Specimen) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Specimen) GetReceivedTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *Specimen) GetParent() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Specimen) GetRequest() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Specimen) GetCollection() *Specimen_Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *Specimen) GetProcessing() []*Specimen_Processing {
	if x != nil {
		return x.Processing
	}
	return nil
}

func (x *Specimen) GetContainer() []*Specimen_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Specimen) GetCondition() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Specimen) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// available | unavailable | unsatisfactory | entered-in-error
type Specimen_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SpecimenStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.SpecimenStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Specimen_StatusCode) Reset() {
	*x = Specimen_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_StatusCode) ProtoMessage() {}

func (x *Specimen_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_StatusCode.ProtoReflect.Descriptor instead.
func (*Specimen_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Specimen_StatusCode) GetValue() codes_go_proto.SpecimenStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SpecimenStatusCode_INVALID_UNINITIALIZED
}

func (x *Specimen_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Collection details
type Specimen_Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who collected the specimen
	Collector *datatypes_go_proto.Reference   `protobuf:"bytes,4,opt,name=collector,proto3" json:"collector,omitempty"`
	Collected *Specimen_Collection_CollectedX `protobuf:"bytes,5,opt,name=collected,proto3" json:"collected,omitempty"`
	// How long it took to collect specimen
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// The quantity of specimen collected
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Technique used to perform collection
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"`
	// Anatomical collection site
	BodySite      *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	FastingStatus *Specimen_Collection_FastingStatusX `protobuf:"bytes,10,opt,name=fasting_status,json=fastingStatus,proto3" json:"fasting_status,omitempty"`
}

func (x *Specimen_Collection) Reset() {
	*x = Specimen_Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Collection) ProtoMessage() {}

func (x *Specimen_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Collection.ProtoReflect.Descriptor instead.
func (*Specimen_Collection) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Specimen_Collection) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_Collection) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen_Collection) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen_Collection) GetCollector() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Collector
	}
	return nil
}

func (x *Specimen_Collection) GetCollected() *Specimen_Collection_CollectedX {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *Specimen_Collection) GetDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Specimen_Collection) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Specimen_Collection) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Specimen_Collection) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Specimen_Collection) GetFastingStatus() *Specimen_Collection_FastingStatusX {
	if x != nil {
		return x.FastingStatus
	}
	return nil
}

// Processing and processing step details
type Specimen_Processing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Textual description of procedure
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates the treatment step  applied to the specimen
	Procedure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=procedure,proto3" json:"procedure,omitempty"`
	// Material used in the processing step
	Additive []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=additive,proto3" json:"additive,omitempty"`
	Time     *Specimen_Processing_TimeX      `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Specimen_Processing) Reset() {
	*x = Specimen_Processing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Processing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Processing) ProtoMessage() {}

func (x *Specimen_Processing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Processing.ProtoReflect.Descriptor instead.
func (*Specimen_Processing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Specimen_Processing) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_Processing) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen_Processing) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen_Processing) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Specimen_Processing) GetProcedure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *Specimen_Processing) GetAdditive() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Additive
	}
	return nil
}

func (x *Specimen_Processing) GetTime() *Specimen_Processing_TimeX {
	if x != nil {
		return x.Time
	}
	return nil
}

// Direct container of specimen (tube/slide, etc.)
type Specimen_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Id for the container
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Textual description of the container
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Kind of container directly associated with specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Container volume or size
	Capacity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Quantity of specimen within container
	SpecimenQuantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=specimen_quantity,json=specimenQuantity,proto3" json:"specimen_quantity,omitempty"`
	Additive         *Specimen_Container_AdditiveX      `protobuf:"bytes,9,opt,name=additive,proto3" json:"additive,omitempty"`
}

func (x *Specimen_Container) Reset() {
	*x = Specimen_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Container) ProtoMessage() {}

func (x *Specimen_Container) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Container.ProtoReflect.Descriptor instead.
func (*Specimen_Container) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Specimen_Container) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_Container) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen_Container) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen_Container) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Specimen_Container) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Specimen_Container) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Specimen_Container) GetCapacity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *Specimen_Container) GetSpecimenQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.SpecimenQuantity
	}
	return nil
}

func (x *Specimen_Container) GetAdditive() *Specimen_Container_AdditiveX {
	if x != nil {
		return x.Additive
	}
	return nil
}

// Collection time
type Specimen_Collection_CollectedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Specimen_Collection_CollectedX_DateTime
	//	*Specimen_Collection_CollectedX_Period
	Choice isSpecimen_Collection_CollectedX_Choice `protobuf_oneof:"choice"`
}

func (x *Specimen_Collection_CollectedX) Reset() {
	*x = Specimen_Collection_CollectedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Collection_CollectedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Collection_CollectedX) ProtoMessage() {}

func (x *Specimen_Collection_CollectedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Collection_CollectedX.ProtoReflect.Descriptor instead.
func (*Specimen_Collection_CollectedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Specimen_Collection_CollectedX) GetChoice() isSpecimen_Collection_CollectedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Specimen_Collection_CollectedX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Specimen_Collection_CollectedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Specimen_Collection_CollectedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Specimen_Collection_CollectedX_Period); ok {
		return x.Period
	}
	return nil
}

type isSpecimen_Collection_CollectedX_Choice interface {
	isSpecimen_Collection_CollectedX_Choice()
}

type Specimen_Collection_CollectedX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Specimen_Collection_CollectedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Specimen_Collection_CollectedX_DateTime) isSpecimen_Collection_CollectedX_Choice() {}

func (*Specimen_Collection_CollectedX_Period) isSpecimen_Collection_CollectedX_Choice() {}

// Whether or how long patient abstained from food and/or drink
type Specimen_Collection_FastingStatusX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Specimen_Collection_FastingStatusX_CodeableConcept
	//	*Specimen_Collection_FastingStatusX_Duration
	Choice isSpecimen_Collection_FastingStatusX_Choice `protobuf_oneof:"choice"`
}

func (x *Specimen_Collection_FastingStatusX) Reset() {
	*x = Specimen_Collection_FastingStatusX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Collection_FastingStatusX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Collection_FastingStatusX) ProtoMessage() {}

func (x *Specimen_Collection_FastingStatusX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Collection_FastingStatusX.ProtoReflect.Descriptor instead.
func (*Specimen_Collection_FastingStatusX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Specimen_Collection_FastingStatusX) GetChoice() isSpecimen_Collection_FastingStatusX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Specimen_Collection_FastingStatusX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Specimen_Collection_FastingStatusX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Specimen_Collection_FastingStatusX) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetChoice().(*Specimen_Collection_FastingStatusX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isSpecimen_Collection_FastingStatusX_Choice interface {
	isSpecimen_Collection_FastingStatusX_Choice()
}

type Specimen_Collection_FastingStatusX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Specimen_Collection_FastingStatusX_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*Specimen_Collection_FastingStatusX_CodeableConcept) isSpecimen_Collection_FastingStatusX_Choice() {
}

func (*Specimen_Collection_FastingStatusX_Duration) isSpecimen_Collection_FastingStatusX_Choice() {}

// Date and time of specimen processing
type Specimen_Processing_TimeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Specimen_Processing_TimeX_DateTime
	//	*Specimen_Processing_TimeX_Period
	Choice isSpecimen_Processing_TimeX_Choice `protobuf_oneof:"choice"`
}

func (x *Specimen_Processing_TimeX) Reset() {
	*x = Specimen_Processing_TimeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Processing_TimeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Processing_TimeX) ProtoMessage() {}

func (x *Specimen_Processing_TimeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Processing_TimeX.ProtoReflect.Descriptor instead.
func (*Specimen_Processing_TimeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *Specimen_Processing_TimeX) GetChoice() isSpecimen_Processing_TimeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Specimen_Processing_TimeX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Specimen_Processing_TimeX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Specimen_Processing_TimeX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Specimen_Processing_TimeX_Period); ok {
		return x.Period
	}
	return nil
}

type isSpecimen_Processing_TimeX_Choice interface {
	isSpecimen_Processing_TimeX_Choice()
}

type Specimen_Processing_TimeX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Specimen_Processing_TimeX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Specimen_Processing_TimeX_DateTime) isSpecimen_Processing_TimeX_Choice() {}

func (*Specimen_Processing_TimeX_Period) isSpecimen_Processing_TimeX_Choice() {}

// Additive associated with container
type Specimen_Container_AdditiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Specimen_Container_AdditiveX_CodeableConcept
	//	*Specimen_Container_AdditiveX_Reference
	Choice isSpecimen_Container_AdditiveX_Choice `protobuf_oneof:"choice"`
}

func (x *Specimen_Container_AdditiveX) Reset() {
	*x = Specimen_Container_AdditiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Container_AdditiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Container_AdditiveX) ProtoMessage() {}

func (x *Specimen_Container_AdditiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Container_AdditiveX.ProtoReflect.Descriptor instead.
func (*Specimen_Container_AdditiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *Specimen_Container_AdditiveX) GetChoice() isSpecimen_Container_AdditiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Specimen_Container_AdditiveX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Specimen_Container_AdditiveX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Specimen_Container_AdditiveX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Specimen_Container_AdditiveX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isSpecimen_Container_AdditiveX_Choice interface {
	isSpecimen_Container_AdditiveX_Choice()
}

type Specimen_Container_AdditiveX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Specimen_Container_AdditiveX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Specimen_Container_AdditiveX_CodeableConcept) isSpecimen_Container_AdditiveX_Choice() {}

func (*Specimen_Container_AdditiveX_Reference) isSpecimen_Container_AdditiveX_Choice() {}

var File_proto_google_fhir_proto_r4_core_resources_specimen_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDesc = []byte{
	0x0a, 0x38, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x21, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x41, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x14, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa9,
	0x08, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x58, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x5e, 0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58,
	0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x93, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x58, 0x12, 0x3c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x0e, 0x46, 0x61, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xeb, 0x04, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x58, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65,
	0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa5, 0x06, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x58, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xc1, 0x01, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x78, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_google_fhir_proto_r4_core_resources_specimen_proto_goTypes = []interface{}{
	(*Specimen)(nil),                             // 0: google.fhir.r4.core.Specimen
	(*Specimen_StatusCode)(nil),                  // 1: google.fhir.r4.core.Specimen.StatusCode
	(*Specimen_Collection)(nil),                  // 2: google.fhir.r4.core.Specimen.Collection
	(*Specimen_Processing)(nil),                  // 3: google.fhir.r4.core.Specimen.Processing
	(*Specimen_Container)(nil),                   // 4: google.fhir.r4.core.Specimen.Container
	(*Specimen_Collection_CollectedX)(nil),       // 5: google.fhir.r4.core.Specimen.Collection.CollectedX
	(*Specimen_Collection_FastingStatusX)(nil),   // 6: google.fhir.r4.core.Specimen.Collection.FastingStatusX
	(*Specimen_Processing_TimeX)(nil),            // 7: google.fhir.r4.core.Specimen.Processing.TimeX
	(*Specimen_Container_AdditiveX)(nil),         // 8: google.fhir.r4.core.Specimen.Container.AdditiveX
	(*datatypes_go_proto.Id)(nil),                // 9: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),              // 10: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),               // 11: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),              // 12: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),         // 13: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                              // 14: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),         // 15: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),        // 16: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),   // 17: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),         // 18: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),          // 19: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.Annotation)(nil),        // 20: google.fhir.r4.core.Annotation
	(codes_go_proto.SpecimenStatusCode_Value)(0), // 21: google.fhir.r4.core.SpecimenStatusCode.Value
	(*datatypes_go_proto.String)(nil),            // 22: google.fhir.r4.core.String
	(*datatypes_go_proto.Duration)(nil),          // 23: google.fhir.r4.core.Duration
	(*datatypes_go_proto.SimpleQuantity)(nil),    // 24: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Period)(nil),            // 25: google.fhir.r4.core.Period
}
var file_proto_google_fhir_proto_r4_core_resources_specimen_proto_depIdxs = []int32{
	9,  // 0: google.fhir.r4.core.Specimen.id:type_name -> google.fhir.r4.core.Id
	10, // 1: google.fhir.r4.core.Specimen.meta:type_name -> google.fhir.r4.core.Meta
	11, // 2: google.fhir.r4.core.Specimen.implicit_rules:type_name -> google.fhir.r4.core.Uri
	12, // 3: google.fhir.r4.core.Specimen.language:type_name -> google.fhir.r4.core.Code
	13, // 4: google.fhir.r4.core.Specimen.text:type_name -> google.fhir.r4.core.Narrative
	14, // 5: google.fhir.r4.core.Specimen.contained:type_name -> google.protobuf.Any
	15, // 6: google.fhir.r4.core.Specimen.extension:type_name -> google.fhir.r4.core.Extension
	15, // 7: google.fhir.r4.core.Specimen.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 8: google.fhir.r4.core.Specimen.identifier:type_name -> google.fhir.r4.core.Identifier
	16, // 9: google.fhir.r4.core.Specimen.accession_identifier:type_name -> google.fhir.r4.core.Identifier
	1,  // 10: google.fhir.r4.core.Specimen.status:type_name -> google.fhir.r4.core.Specimen.StatusCode
	17, // 11: google.fhir.r4.core.Specimen.type:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 12: google.fhir.r4.core.Specimen.subject:type_name -> google.fhir.r4.core.Reference
	19, // 13: google.fhir.r4.core.Specimen.received_time:type_name -> google.fhir.r4.core.DateTime
	18, // 14: google.fhir.r4.core.Specimen.parent:type_name -> google.fhir.r4.core.Reference
	18, // 15: google.fhir.r4.core.Specimen.request:type_name -> google.fhir.r4.core.Reference
	2,  // 16: google.fhir.r4.core.Specimen.collection:type_name -> google.fhir.r4.core.Specimen.Collection
	3,  // 17: google.fhir.r4.core.Specimen.processing:type_name -> google.fhir.r4.core.Specimen.Processing
	4,  // 18: google.fhir.r4.core.Specimen.container:type_name -> google.fhir.r4.core.Specimen.Container
	17, // 19: google.fhir.r4.core.Specimen.condition:type_name -> google.fhir.r4.core.CodeableConcept
	20, // 20: google.fhir.r4.core.Specimen.note:type_name -> google.fhir.r4.core.Annotation
	21, // 21: google.fhir.r4.core.Specimen.StatusCode.value:type_name -> google.fhir.r4.core.SpecimenStatusCode.Value
	22, // 22: google.fhir.r4.core.Specimen.StatusCode.id:type_name -> google.fhir.r4.core.String
	15, // 23: google.fhir.r4.core.Specimen.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	22, // 24: google.fhir.r4.core.Specimen.Collection.id:type_name -> google.fhir.r4.core.String
	15, // 25: google.fhir.r4.core.Specimen.Collection.extension:type_name -> google.fhir.r4.core.Extension
	15, // 26: google.fhir.r4.core.Specimen.Collection.modifier_extension:type_name -> google.fhir.r4.core.Extension
	18, // 27: google.fhir.r4.core.Specimen.Collection.collector:type_name -> google.fhir.r4.core.Reference
	5,  // 28: google.fhir.r4.core.Specimen.Collection.collected:type_name -> google.fhir.r4.core.Specimen.Collection.CollectedX
	23, // 29: google.fhir.r4.core.Specimen.Collection.duration:type_name -> google.fhir.r4.core.Duration
	24, // 30: google.fhir.r4.core.Specimen.Collection.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	17, // 31: google.fhir.r4.core.Specimen.Collection.method:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 32: google.fhir.r4.core.Specimen.Collection.body_site:type_name -> google.fhir.r4.core.CodeableConcept
	6,  // 33: google.fhir.r4.core.Specimen.Collection.fasting_status:type_name -> google.fhir.r4.core.Specimen.Collection.FastingStatusX
	22, // 34: google.fhir.r4.core.Specimen.Processing.id:type_name -> google.fhir.r4.core.String
	15, // 35: google.fhir.r4.core.Specimen.Processing.extension:type_name -> google.fhir.r4.core.Extension
	15, // 36: google.fhir.r4.core.Specimen.Processing.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22, // 37: google.fhir.r4.core.Specimen.Processing.description:type_name -> google.fhir.r4.core.String
	17, // 38: google.fhir.r4.core.Specimen.Processing.procedure:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 39: google.fhir.r4.core.Specimen.Processing.additive:type_name -> google.fhir.r4.core.Reference
	7,  // 40: google.fhir.r4.core.Specimen.Processing.time:type_name -> google.fhir.r4.core.Specimen.Processing.TimeX
	22, // 41: google.fhir.r4.core.Specimen.Container.id:type_name -> google.fhir.r4.core.String
	15, // 42: google.fhir.r4.core.Specimen.Container.extension:type_name -> google.fhir.r4.core.Extension
	15, // 43: google.fhir.r4.core.Specimen.Container.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 44: google.fhir.r4.core.Specimen.Container.identifier:type_name -> google.fhir.r4.core.Identifier
	22, // 45: google.fhir.r4.core.Specimen.Container.description:type_name -> google.fhir.r4.core.String
	17, // 46: google.fhir.r4.core.Specimen.Container.type:type_name -> google.fhir.r4.core.CodeableConcept
	24, // 47: google.fhir.r4.core.Specimen.Container.capacity:type_name -> google.fhir.r4.core.SimpleQuantity
	24, // 48: google.fhir.r4.core.Specimen.Container.specimen_quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	8,  // 49: google.fhir.r4.core.Specimen.Container.additive:type_name -> google.fhir.r4.core.Specimen.Container.AdditiveX
	19, // 50: google.fhir.r4.core.Specimen.Collection.CollectedX.date_time:type_name -> google.fhir.r4.core.DateTime
	25, // 51: google.fhir.r4.core.Specimen.Collection.CollectedX.period:type_name -> google.fhir.r4.core.Period
	17, // 52: google.fhir.r4.core.Specimen.Collection.FastingStatusX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	23, // 53: google.fhir.r4.core.Specimen.Collection.FastingStatusX.duration:type_name -> google.fhir.r4.core.Duration
	19, // 54: google.fhir.r4.core.Specimen.Processing.TimeX.date_time:type_name -> google.fhir.r4.core.DateTime
	25, // 55: google.fhir.r4.core.Specimen.Processing.TimeX.period:type_name -> google.fhir.r4.core.Period
	17, // 56: google.fhir.r4.core.Specimen.Container.AdditiveX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 57: google.fhir.r4.core.Specimen.Container.AdditiveX.reference:type_name -> google.fhir.r4.core.Reference
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_specimen_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_specimen_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_specimen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Processing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Collection_CollectedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Collection_FastingStatusX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Processing_TimeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Container_AdditiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Specimen_Collection_CollectedX_DateTime)(nil),
		(*Specimen_Collection_CollectedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Specimen_Collection_FastingStatusX_CodeableConcept)(nil),
		(*Specimen_Collection_FastingStatusX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Specimen_Processing_TimeX_DateTime)(nil),
		(*Specimen_Processing_TimeX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Specimen_Container_AdditiveX_CodeableConcept)(nil),
		(*Specimen_Container_AdditiveX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_specimen_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_specimen_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_specimen_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_specimen_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_specimen_proto_depIdxs = nil
}
