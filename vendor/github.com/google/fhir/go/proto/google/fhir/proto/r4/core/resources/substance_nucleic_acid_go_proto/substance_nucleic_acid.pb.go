//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/substance_nucleic_acid.proto

package substance_nucleic_acid_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SubstanceNucleicAcid, last
// updated 2019-11-01T09:29:23.356+11:00. Nucleic acids are defined by three
// distinct elements: the base, sugar and linkage. Individual substance/moiety
// IDs will be created for each of these elements. The nucleotide sequence will
// be always entered in the 5’-3’ direction. See
// http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid
type SubstanceNucleicAcid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of the sequence shall be specified based on a controlled
	// vocabulary
	SequenceType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=sequence_type,json=sequenceType,proto3" json:"sequence_type,omitempty"`
	// The number of linear sequences of nucleotides linked through phosphodiester
	// bonds shall be described. Subunits would be strands of nucleic acids that
	// are tightly associated typically through Watson-Crick base pairing. NOTE:
	// If not specified in the reference source, the assumption is that there is 1
	// subunit
	NumberOfSubunits *datatypes_go_proto.Integer `protobuf:"bytes,11,opt,name=number_of_subunits,json=numberOfSubunits,proto3" json:"number_of_subunits,omitempty"`
	// The area of hybridisation shall be described if applicable for double
	// stranded RNA or DNA. The number associated with the subunit followed by the
	// number associated to the residue shall be specified in increasing order.
	// The underscore “” shall be used as separator as follows: “Subunitnumber
	// Residue”
	AreaOfHybridisation *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=area_of_hybridisation,json=areaOfHybridisation,proto3" json:"area_of_hybridisation,omitempty"`
	// (TBC)
	OligoNucleotideType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=oligo_nucleotide_type,json=oligoNucleotideType,proto3" json:"oligo_nucleotide_type,omitempty"`
	Subunit             []*SubstanceNucleicAcid_Subunit     `protobuf:"bytes,14,rep,name=subunit,proto3" json:"subunit,omitempty"`
}

func (x *SubstanceNucleicAcid) Reset() {
	*x = SubstanceNucleicAcid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceNucleicAcid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceNucleicAcid) ProtoMessage() {}

func (x *SubstanceNucleicAcid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceNucleicAcid.ProtoReflect.Descriptor instead.
func (*SubstanceNucleicAcid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescGZIP(), []int{0}
}

func (x *SubstanceNucleicAcid) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetSequenceType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SequenceType
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetNumberOfSubunits() *datatypes_go_proto.Integer {
	if x != nil {
		return x.NumberOfSubunits
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetAreaOfHybridisation() *datatypes_go_proto.String {
	if x != nil {
		return x.AreaOfHybridisation
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetOligoNucleotideType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OligoNucleotideType
	}
	return nil
}

func (x *SubstanceNucleicAcid) GetSubunit() []*SubstanceNucleicAcid_Subunit {
	if x != nil {
		return x.Subunit
	}
	return nil
}

// Subunits are listed in order of decreasing length; sequences of the same
// length will be ordered by molecular weight; subunits that have identical
// sequences will be repeated multiple times
type SubstanceNucleicAcid_Subunit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Index of linear sequences of nucleic acids in order of decreasing length.
	// Sequences of the same length will be ordered by molecular weight.
	// Subunits that have identical sequences will be repeated and have
	// sequential subscripts
	Subunit *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=subunit,proto3" json:"subunit,omitempty"`
	// Actual nucleotide sequence notation from 5' to 3' end using standard
	// single letter codes. In addition to the base sequence, sugar and type of
	// phosphate or non-phosphate linkage should also be captured
	Sequence *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The length of the sequence shall be captured
	Length *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=length,proto3" json:"length,omitempty"`
	// (TBC)
	SequenceAttachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=sequence_attachment,json=sequenceAttachment,proto3" json:"sequence_attachment,omitempty"`
	// The nucleotide present at the 5’ terminal shall be specified based on a
	// controlled vocabulary. Since the sequence is represented from the 5' to
	// the 3' end, the 5’ prime nucleotide is the letter at the first position
	// in the sequence. A separate representation would be redundant
	FivePrime *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=five_prime,json=fivePrime,proto3" json:"five_prime,omitempty"`
	// The nucleotide present at the 3’ terminal shall be specified based on a
	// controlled vocabulary. Since the sequence is represented from the 5' to
	// the 3' end, the 5’ prime nucleotide is the letter at the last position in
	// the sequence. A separate representation would be redundant
	ThreePrime *datatypes_go_proto.CodeableConcept     `protobuf:"bytes,9,opt,name=three_prime,json=threePrime,proto3" json:"three_prime,omitempty"`
	Linkage    []*SubstanceNucleicAcid_Subunit_Linkage `protobuf:"bytes,10,rep,name=linkage,proto3" json:"linkage,omitempty"`
	Sugar      []*SubstanceNucleicAcid_Subunit_Sugar   `protobuf:"bytes,11,rep,name=sugar,proto3" json:"sugar,omitempty"`
}

func (x *SubstanceNucleicAcid_Subunit) Reset() {
	*x = SubstanceNucleicAcid_Subunit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceNucleicAcid_Subunit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceNucleicAcid_Subunit) ProtoMessage() {}

func (x *SubstanceNucleicAcid_Subunit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceNucleicAcid_Subunit.ProtoReflect.Descriptor instead.
func (*SubstanceNucleicAcid_Subunit) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubstanceNucleicAcid_Subunit) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetSubunit() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Subunit
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetSequence() *datatypes_go_proto.String {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetSequenceAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.SequenceAttachment
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetFivePrime() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FivePrime
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetThreePrime() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ThreePrime
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetLinkage() []*SubstanceNucleicAcid_Subunit_Linkage {
	if x != nil {
		return x.Linkage
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit) GetSugar() []*SubstanceNucleicAcid_Subunit_Sugar {
	if x != nil {
		return x.Sugar
	}
	return nil
}

// The linkages between sugar residues will also be captured
type SubstanceNucleicAcid_Subunit_Linkage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The entity that links the sugar residues together should also be
	// captured for nearly all naturally occurring nucleic acid the linkage is
	// a phosphate group. For many synthetic oligonucleotides phosphorothioate
	// linkages are often seen. Linkage connectivity is assumed to be 3’-5’.
	// If the linkage is either 3’-3’ or 5’-5’ this should be specified
	Connectivity *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=connectivity,proto3" json:"connectivity,omitempty"`
	// Each linkage will be registered as a fragment and have an ID
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Each linkage will be registered as a fragment and have at least one
	// name. A single name shall be assigned to each linkage
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Residues shall be captured as described in 5.3.6.8.3
	ResidueSite *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=residue_site,json=residueSite,proto3" json:"residue_site,omitempty"`
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) Reset() {
	*x = SubstanceNucleicAcid_Subunit_Linkage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceNucleicAcid_Subunit_Linkage) ProtoMessage() {}

func (x *SubstanceNucleicAcid_Subunit_Linkage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceNucleicAcid_Subunit_Linkage.ProtoReflect.Descriptor instead.
func (*SubstanceNucleicAcid_Subunit_Linkage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetConnectivity() *datatypes_go_proto.String {
	if x != nil {
		return x.Connectivity
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Linkage) GetResidueSite() *datatypes_go_proto.String {
	if x != nil {
		return x.ResidueSite
	}
	return nil
}

// 5.3.6.8.1 Sugar ID (Mandatory)
type SubstanceNucleicAcid_Subunit_Sugar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The Substance ID of the sugar or sugar-like component that make up the
	// nucleotide
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The name of the sugar or sugar-like component that make up the
	// nucleotide
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The residues that contain a given sugar will be captured. The order of
	// given residues will be captured in the 5‘-3‘direction consistent with
	// the base sequences listed above
	ResidueSite *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=residue_site,json=residueSite,proto3" json:"residue_site,omitempty"`
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) Reset() {
	*x = SubstanceNucleicAcid_Subunit_Sugar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceNucleicAcid_Subunit_Sugar) ProtoMessage() {}

func (x *SubstanceNucleicAcid_Subunit_Sugar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceNucleicAcid_Subunit_Sugar.ProtoReflect.Descriptor instead.
func (*SubstanceNucleicAcid_Subunit_Sugar) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubstanceNucleicAcid_Subunit_Sugar) GetResidueSite() *datatypes_go_proto.String {
	if x != nil {
		return x.ResidueSite
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDesc = []byte{
	0x0a, 0x46, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x5f, 0x61, 0x63,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x13, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x61, 0x72, 0x65, 0x61, 0x4f, 0x66, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x6f, 0x6c,
	0x69, 0x67, 0x6f, 0x5f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x13, 0x6f, 0x6c, 0x69, 0x67, 0x6f, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64,
	0x2e, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x75, 0x6e, 0x69,
	0x74, 0x1a, 0x9b, 0x0c, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x07, 0x73, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x50,
	0x0a, 0x13, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x66, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x07,
	0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x75,
	0x6e, 0x69, 0x74, 0x2e, 0x53, 0x75, 0x67, 0x61, 0x72, 0x52, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72,
	0x1a, 0xb6, 0x03, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x75, 0x65, 0x53, 0x69, 0x74, 0x65, 0x1a, 0xf3, 0x02, 0x0a, 0x05, 0x53, 0x75,
	0x67, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65, 0x53, 0x69, 0x74, 0x65, 0x3a,
	0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42,
	0x86, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x63, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_goTypes = []interface{}{
	(*SubstanceNucleicAcid)(nil),                 // 0: google.fhir.r4.core.SubstanceNucleicAcid
	(*SubstanceNucleicAcid_Subunit)(nil),         // 1: google.fhir.r4.core.SubstanceNucleicAcid.Subunit
	(*SubstanceNucleicAcid_Subunit_Linkage)(nil), // 2: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage
	(*SubstanceNucleicAcid_Subunit_Sugar)(nil),   // 3: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar
	(*datatypes_go_proto.Id)(nil),                // 4: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),              // 5: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),               // 6: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),              // 7: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),         // 8: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                              // 9: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),         // 10: google.fhir.r4.core.Extension
	(*datatypes_go_proto.CodeableConcept)(nil),   // 11: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Integer)(nil),           // 12: google.fhir.r4.core.Integer
	(*datatypes_go_proto.String)(nil),            // 13: google.fhir.r4.core.String
	(*datatypes_go_proto.Attachment)(nil),        // 14: google.fhir.r4.core.Attachment
	(*datatypes_go_proto.Identifier)(nil),        // 15: google.fhir.r4.core.Identifier
}
var file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_depIdxs = []int32{
	4,  // 0: google.fhir.r4.core.SubstanceNucleicAcid.id:type_name -> google.fhir.r4.core.Id
	5,  // 1: google.fhir.r4.core.SubstanceNucleicAcid.meta:type_name -> google.fhir.r4.core.Meta
	6,  // 2: google.fhir.r4.core.SubstanceNucleicAcid.implicit_rules:type_name -> google.fhir.r4.core.Uri
	7,  // 3: google.fhir.r4.core.SubstanceNucleicAcid.language:type_name -> google.fhir.r4.core.Code
	8,  // 4: google.fhir.r4.core.SubstanceNucleicAcid.text:type_name -> google.fhir.r4.core.Narrative
	9,  // 5: google.fhir.r4.core.SubstanceNucleicAcid.contained:type_name -> google.protobuf.Any
	10, // 6: google.fhir.r4.core.SubstanceNucleicAcid.extension:type_name -> google.fhir.r4.core.Extension
	10, // 7: google.fhir.r4.core.SubstanceNucleicAcid.modifier_extension:type_name -> google.fhir.r4.core.Extension
	11, // 8: google.fhir.r4.core.SubstanceNucleicAcid.sequence_type:type_name -> google.fhir.r4.core.CodeableConcept
	12, // 9: google.fhir.r4.core.SubstanceNucleicAcid.number_of_subunits:type_name -> google.fhir.r4.core.Integer
	13, // 10: google.fhir.r4.core.SubstanceNucleicAcid.area_of_hybridisation:type_name -> google.fhir.r4.core.String
	11, // 11: google.fhir.r4.core.SubstanceNucleicAcid.oligo_nucleotide_type:type_name -> google.fhir.r4.core.CodeableConcept
	1,  // 12: google.fhir.r4.core.SubstanceNucleicAcid.subunit:type_name -> google.fhir.r4.core.SubstanceNucleicAcid.Subunit
	13, // 13: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.id:type_name -> google.fhir.r4.core.String
	10, // 14: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.extension:type_name -> google.fhir.r4.core.Extension
	10, // 15: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.modifier_extension:type_name -> google.fhir.r4.core.Extension
	12, // 16: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.subunit:type_name -> google.fhir.r4.core.Integer
	13, // 17: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.sequence:type_name -> google.fhir.r4.core.String
	12, // 18: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.length:type_name -> google.fhir.r4.core.Integer
	14, // 19: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.sequence_attachment:type_name -> google.fhir.r4.core.Attachment
	11, // 20: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.five_prime:type_name -> google.fhir.r4.core.CodeableConcept
	11, // 21: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.three_prime:type_name -> google.fhir.r4.core.CodeableConcept
	2,  // 22: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.linkage:type_name -> google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage
	3,  // 23: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.sugar:type_name -> google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar
	13, // 24: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.id:type_name -> google.fhir.r4.core.String
	10, // 25: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.extension:type_name -> google.fhir.r4.core.Extension
	10, // 26: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	13, // 27: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.connectivity:type_name -> google.fhir.r4.core.String
	15, // 28: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.identifier:type_name -> google.fhir.r4.core.Identifier
	13, // 29: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.name:type_name -> google.fhir.r4.core.String
	13, // 30: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage.residue_site:type_name -> google.fhir.r4.core.String
	13, // 31: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar.id:type_name -> google.fhir.r4.core.String
	10, // 32: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar.extension:type_name -> google.fhir.r4.core.Extension
	10, // 33: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar.modifier_extension:type_name -> google.fhir.r4.core.Extension
	15, // 34: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar.identifier:type_name -> google.fhir.r4.core.Identifier
	13, // 35: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar.name:type_name -> google.fhir.r4.core.String
	13, // 36: google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar.residue_site:type_name -> google.fhir.r4.core.String
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceNucleicAcid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceNucleicAcid_Subunit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceNucleicAcid_Subunit_Linkage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceNucleicAcid_Subunit_Sugar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_nucleic_acid_proto_depIdxs = nil
}
