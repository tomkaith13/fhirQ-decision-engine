//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/stu3/datatypes.proto

package datatypes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Date_Precision int32

const (
	Date_PRECISION_UNSPECIFIED Date_Precision = 0
	Date_YEAR                  Date_Precision = 1
	Date_MONTH                 Date_Precision = 2
	Date_DAY                   Date_Precision = 3
)

// Enum value maps for Date_Precision.
var (
	Date_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "YEAR",
		2: "MONTH",
		3: "DAY",
	}
	Date_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"YEAR":                  1,
		"MONTH":                 2,
		"DAY":                   3,
	}
)

func (x Date_Precision) Enum() *Date_Precision {
	p := new(Date_Precision)
	*p = x
	return p
}

func (x Date_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Date_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[0].Descriptor()
}

func (Date_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[0]
}

func (x Date_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Date_Precision.Descriptor instead.
func (Date_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{3, 0}
}

type DateTime_Precision int32

const (
	DateTime_PRECISION_UNSPECIFIED DateTime_Precision = 0
	DateTime_YEAR                  DateTime_Precision = 1
	DateTime_MONTH                 DateTime_Precision = 2
	DateTime_DAY                   DateTime_Precision = 3
	DateTime_SECOND                DateTime_Precision = 4
	DateTime_MILLISECOND           DateTime_Precision = 5
	DateTime_MICROSECOND           DateTime_Precision = 6
)

// Enum value maps for DateTime_Precision.
var (
	DateTime_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "YEAR",
		2: "MONTH",
		3: "DAY",
		4: "SECOND",
		5: "MILLISECOND",
		6: "MICROSECOND",
	}
	DateTime_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"YEAR":                  1,
		"MONTH":                 2,
		"DAY":                   3,
		"SECOND":                4,
		"MILLISECOND":           5,
		"MICROSECOND":           6,
	}
)

func (x DateTime_Precision) Enum() *DateTime_Precision {
	p := new(DateTime_Precision)
	*p = x
	return p
}

func (x DateTime_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTime_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[1].Descriptor()
}

func (DateTime_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[1]
}

func (x DateTime_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTime_Precision.Descriptor instead.
func (DateTime_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{4, 0}
}

type Instant_Precision int32

const (
	Instant_PRECISION_UNSPECIFIED Instant_Precision = 0
	Instant_SECOND                Instant_Precision = 1
	Instant_MILLISECOND           Instant_Precision = 2
	Instant_MICROSECOND           Instant_Precision = 3
)

// Enum value maps for Instant_Precision.
var (
	Instant_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "SECOND",
		2: "MILLISECOND",
		3: "MICROSECOND",
	}
	Instant_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"SECOND":                1,
		"MILLISECOND":           2,
		"MICROSECOND":           3,
	}
)

func (x Instant_Precision) Enum() *Instant_Precision {
	p := new(Instant_Precision)
	*p = x
	return p
}

func (x Instant_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instant_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[2].Descriptor()
}

func (Instant_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[2]
}

func (x Instant_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instant_Precision.Descriptor instead.
func (Instant_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{7, 0}
}

type Time_Precision int32

const (
	Time_PRECISION_UNSPECIFIED Time_Precision = 0
	Time_SECOND                Time_Precision = 1
	Time_MILLISECOND           Time_Precision = 2
	Time_MICROSECOND           Time_Precision = 3
)

// Enum value maps for Time_Precision.
var (
	Time_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "SECOND",
		2: "MILLISECOND",
		3: "MICROSECOND",
	}
	Time_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"SECOND":                1,
		"MILLISECOND":           2,
		"MICROSECOND":           3,
	}
)

func (x Time_Precision) Enum() *Time_Precision {
	p := new(Time_Precision)
	*p = x
	return p
}

func (x Time_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Time_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[3].Descriptor()
}

func (Time_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[3]
}

func (x Time_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Time_Precision.Descriptor instead.
func (Time_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{13, 0}
}

// Primitive value for code
type AddressTypeCode_Value int32

const (
	AddressTypeCode_INVALID_UNINITIALIZED AddressTypeCode_Value = 0
	AddressTypeCode_POSTAL                AddressTypeCode_Value = 1
	AddressTypeCode_PHYSICAL              AddressTypeCode_Value = 2
	AddressTypeCode_BOTH                  AddressTypeCode_Value = 3
)

// Enum value maps for AddressTypeCode_Value.
var (
	AddressTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POSTAL",
		2: "PHYSICAL",
		3: "BOTH",
	}
	AddressTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POSTAL":                1,
		"PHYSICAL":              2,
		"BOTH":                  3,
	}
)

func (x AddressTypeCode_Value) Enum() *AddressTypeCode_Value {
	p := new(AddressTypeCode_Value)
	*p = x
	return p
}

func (x AddressTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[4].Descriptor()
}

func (AddressTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[4]
}

func (x AddressTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressTypeCode_Value.Descriptor instead.
func (AddressTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{46, 0}
}

// Primitive value for code
type AddressUseCode_Value int32

const (
	AddressUseCode_INVALID_UNINITIALIZED AddressUseCode_Value = 0
	AddressUseCode_HOME                  AddressUseCode_Value = 1
	AddressUseCode_WORK                  AddressUseCode_Value = 2
	AddressUseCode_TEMP                  AddressUseCode_Value = 3
	AddressUseCode_OLD                   AddressUseCode_Value = 4
)

// Enum value maps for AddressUseCode_Value.
var (
	AddressUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HOME",
		2: "WORK",
		3: "TEMP",
		4: "OLD",
	}
	AddressUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"WORK":                  2,
		"TEMP":                  3,
		"OLD":                   4,
	}
)

func (x AddressUseCode_Value) Enum() *AddressUseCode_Value {
	p := new(AddressUseCode_Value)
	*p = x
	return p
}

func (x AddressUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[5].Descriptor()
}

func (AddressUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[5]
}

func (x AddressUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressUseCode_Value.Descriptor instead.
func (AddressUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{47, 0}
}

// Primitive value for code
type ContactPointSystemCode_Value int32

const (
	ContactPointSystemCode_INVALID_UNINITIALIZED ContactPointSystemCode_Value = 0
	ContactPointSystemCode_PHONE                 ContactPointSystemCode_Value = 1
	ContactPointSystemCode_FAX                   ContactPointSystemCode_Value = 2
	ContactPointSystemCode_EMAIL                 ContactPointSystemCode_Value = 3
	ContactPointSystemCode_PAGER                 ContactPointSystemCode_Value = 4
	ContactPointSystemCode_URL                   ContactPointSystemCode_Value = 5
	ContactPointSystemCode_SMS                   ContactPointSystemCode_Value = 6
	ContactPointSystemCode_OTHER                 ContactPointSystemCode_Value = 7
)

// Enum value maps for ContactPointSystemCode_Value.
var (
	ContactPointSystemCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PHONE",
		2: "FAX",
		3: "EMAIL",
		4: "PAGER",
		5: "URL",
		6: "SMS",
		7: "OTHER",
	}
	ContactPointSystemCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PHONE":                 1,
		"FAX":                   2,
		"EMAIL":                 3,
		"PAGER":                 4,
		"URL":                   5,
		"SMS":                   6,
		"OTHER":                 7,
	}
)

func (x ContactPointSystemCode_Value) Enum() *ContactPointSystemCode_Value {
	p := new(ContactPointSystemCode_Value)
	*p = x
	return p
}

func (x ContactPointSystemCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPointSystemCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[6].Descriptor()
}

func (ContactPointSystemCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[6]
}

func (x ContactPointSystemCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactPointSystemCode_Value.Descriptor instead.
func (ContactPointSystemCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{48, 0}
}

// Primitive value for code
type ContactPointUseCode_Value int32

const (
	ContactPointUseCode_INVALID_UNINITIALIZED ContactPointUseCode_Value = 0
	ContactPointUseCode_HOME                  ContactPointUseCode_Value = 1
	ContactPointUseCode_WORK                  ContactPointUseCode_Value = 2
	ContactPointUseCode_TEMP                  ContactPointUseCode_Value = 3
	ContactPointUseCode_OLD                   ContactPointUseCode_Value = 4
	ContactPointUseCode_MOBILE                ContactPointUseCode_Value = 5
)

// Enum value maps for ContactPointUseCode_Value.
var (
	ContactPointUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HOME",
		2: "WORK",
		3: "TEMP",
		4: "OLD",
		5: "MOBILE",
	}
	ContactPointUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"WORK":                  2,
		"TEMP":                  3,
		"OLD":                   4,
		"MOBILE":                5,
	}
)

func (x ContactPointUseCode_Value) Enum() *ContactPointUseCode_Value {
	p := new(ContactPointUseCode_Value)
	*p = x
	return p
}

func (x ContactPointUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPointUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[7].Descriptor()
}

func (ContactPointUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[7]
}

func (x ContactPointUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactPointUseCode_Value.Descriptor instead.
func (ContactPointUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{49, 0}
}

// Primitive value for code
type DaysOfWeekCode_Value int32

const (
	DaysOfWeekCode_INVALID_UNINITIALIZED DaysOfWeekCode_Value = 0
	DaysOfWeekCode_MON                   DaysOfWeekCode_Value = 1
	DaysOfWeekCode_TUE                   DaysOfWeekCode_Value = 2
	DaysOfWeekCode_WED                   DaysOfWeekCode_Value = 3
	DaysOfWeekCode_THU                   DaysOfWeekCode_Value = 4
	DaysOfWeekCode_FRI                   DaysOfWeekCode_Value = 5
	DaysOfWeekCode_SAT                   DaysOfWeekCode_Value = 6
	DaysOfWeekCode_SUN                   DaysOfWeekCode_Value = 7
)

// Enum value maps for DaysOfWeekCode_Value.
var (
	DaysOfWeekCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	DaysOfWeekCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MON":                   1,
		"TUE":                   2,
		"WED":                   3,
		"THU":                   4,
		"FRI":                   5,
		"SAT":                   6,
		"SUN":                   7,
	}
)

func (x DaysOfWeekCode_Value) Enum() *DaysOfWeekCode_Value {
	p := new(DaysOfWeekCode_Value)
	*p = x
	return p
}

func (x DaysOfWeekCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaysOfWeekCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[8].Descriptor()
}

func (DaysOfWeekCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[8]
}

func (x DaysOfWeekCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaysOfWeekCode_Value.Descriptor instead.
func (DaysOfWeekCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{50, 0}
}

// Primitive value for code
type EventTimingCode_Value int32

const (
	EventTimingCode_INVALID_UNINITIALIZED EventTimingCode_Value = 0
	EventTimingCode_MORN                  EventTimingCode_Value = 1
	EventTimingCode_AFT                   EventTimingCode_Value = 2
	EventTimingCode_EVE                   EventTimingCode_Value = 3
	EventTimingCode_NIGHT                 EventTimingCode_Value = 4
	EventTimingCode_PHS                   EventTimingCode_Value = 5
	EventTimingCode_HS                    EventTimingCode_Value = 6
	EventTimingCode_WAKE                  EventTimingCode_Value = 7
	EventTimingCode_C                     EventTimingCode_Value = 8
	EventTimingCode_CM                    EventTimingCode_Value = 9
	EventTimingCode_CD                    EventTimingCode_Value = 10
	EventTimingCode_CV                    EventTimingCode_Value = 11
	EventTimingCode_AC                    EventTimingCode_Value = 12
	EventTimingCode_ACM                   EventTimingCode_Value = 13
	EventTimingCode_ACD                   EventTimingCode_Value = 14
	EventTimingCode_ACV                   EventTimingCode_Value = 15
	EventTimingCode_PC                    EventTimingCode_Value = 16
	EventTimingCode_PCM                   EventTimingCode_Value = 17
	EventTimingCode_PCD                   EventTimingCode_Value = 18
	EventTimingCode_PCV                   EventTimingCode_Value = 19
)

// Enum value maps for EventTimingCode_Value.
var (
	EventTimingCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MORN",
		2:  "AFT",
		3:  "EVE",
		4:  "NIGHT",
		5:  "PHS",
		6:  "HS",
		7:  "WAKE",
		8:  "C",
		9:  "CM",
		10: "CD",
		11: "CV",
		12: "AC",
		13: "ACM",
		14: "ACD",
		15: "ACV",
		16: "PC",
		17: "PCM",
		18: "PCD",
		19: "PCV",
	}
	EventTimingCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MORN":                  1,
		"AFT":                   2,
		"EVE":                   3,
		"NIGHT":                 4,
		"PHS":                   5,
		"HS":                    6,
		"WAKE":                  7,
		"C":                     8,
		"CM":                    9,
		"CD":                    10,
		"CV":                    11,
		"AC":                    12,
		"ACM":                   13,
		"ACD":                   14,
		"ACV":                   15,
		"PC":                    16,
		"PCM":                   17,
		"PCD":                   18,
		"PCV":                   19,
	}
)

func (x EventTimingCode_Value) Enum() *EventTimingCode_Value {
	p := new(EventTimingCode_Value)
	*p = x
	return p
}

func (x EventTimingCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTimingCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[9].Descriptor()
}

func (EventTimingCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[9]
}

func (x EventTimingCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTimingCode_Value.Descriptor instead.
func (EventTimingCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{51, 0}
}

// Primitive value for code
type IdentifierUseCode_Value int32

const (
	IdentifierUseCode_INVALID_UNINITIALIZED IdentifierUseCode_Value = 0
	IdentifierUseCode_USUAL                 IdentifierUseCode_Value = 1
	IdentifierUseCode_OFFICIAL              IdentifierUseCode_Value = 2
	IdentifierUseCode_TEMP                  IdentifierUseCode_Value = 3
	IdentifierUseCode_SECONDARY             IdentifierUseCode_Value = 4
)

// Enum value maps for IdentifierUseCode_Value.
var (
	IdentifierUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USUAL",
		2: "OFFICIAL",
		3: "TEMP",
		4: "SECONDARY",
	}
	IdentifierUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USUAL":                 1,
		"OFFICIAL":              2,
		"TEMP":                  3,
		"SECONDARY":             4,
	}
)

func (x IdentifierUseCode_Value) Enum() *IdentifierUseCode_Value {
	p := new(IdentifierUseCode_Value)
	*p = x
	return p
}

func (x IdentifierUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[10].Descriptor()
}

func (IdentifierUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[10]
}

func (x IdentifierUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierUseCode_Value.Descriptor instead.
func (IdentifierUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{52, 0}
}

// Primitive value for code
type NameUseCode_Value int32

const (
	NameUseCode_INVALID_UNINITIALIZED NameUseCode_Value = 0
	NameUseCode_USUAL                 NameUseCode_Value = 1
	NameUseCode_OFFICIAL              NameUseCode_Value = 2
	NameUseCode_TEMP                  NameUseCode_Value = 3
	NameUseCode_NICKNAME              NameUseCode_Value = 4
	NameUseCode_ANONYMOUS             NameUseCode_Value = 5
	NameUseCode_OLD                   NameUseCode_Value = 6
	NameUseCode_MAIDEN                NameUseCode_Value = 7
)

// Enum value maps for NameUseCode_Value.
var (
	NameUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USUAL",
		2: "OFFICIAL",
		3: "TEMP",
		4: "NICKNAME",
		5: "ANONYMOUS",
		6: "OLD",
		7: "MAIDEN",
	}
	NameUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USUAL":                 1,
		"OFFICIAL":              2,
		"TEMP":                  3,
		"NICKNAME":              4,
		"ANONYMOUS":             5,
		"OLD":                   6,
		"MAIDEN":                7,
	}
)

func (x NameUseCode_Value) Enum() *NameUseCode_Value {
	p := new(NameUseCode_Value)
	*p = x
	return p
}

func (x NameUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[11].Descriptor()
}

func (NameUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[11]
}

func (x NameUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameUseCode_Value.Descriptor instead.
func (NameUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{56, 0}
}

// Primitive value for code
type QuantityComparatorCode_Value int32

const (
	QuantityComparatorCode_INVALID_UNINITIALIZED QuantityComparatorCode_Value = 0
	QuantityComparatorCode_LT                    QuantityComparatorCode_Value = 1
	QuantityComparatorCode_LE                    QuantityComparatorCode_Value = 2
	QuantityComparatorCode_GE                    QuantityComparatorCode_Value = 3
	QuantityComparatorCode_GT                    QuantityComparatorCode_Value = 4
)

// Enum value maps for QuantityComparatorCode_Value.
var (
	QuantityComparatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LT",
		2: "LE",
		3: "GE",
		4: "GT",
	}
	QuantityComparatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LT":                    1,
		"LE":                    2,
		"GE":                    3,
		"GT":                    4,
	}
)

func (x QuantityComparatorCode_Value) Enum() *QuantityComparatorCode_Value {
	p := new(QuantityComparatorCode_Value)
	*p = x
	return p
}

func (x QuantityComparatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantityComparatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[12].Descriptor()
}

func (QuantityComparatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[12]
}

func (x QuantityComparatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantityComparatorCode_Value.Descriptor instead.
func (QuantityComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{57, 0}
}

// Primitive value for code
type UnitsOfTimeCode_Value int32

const (
	UnitsOfTimeCode_INVALID_UNINITIALIZED UnitsOfTimeCode_Value = 0
	UnitsOfTimeCode_S                     UnitsOfTimeCode_Value = 1
	UnitsOfTimeCode_MIN                   UnitsOfTimeCode_Value = 2
	UnitsOfTimeCode_H                     UnitsOfTimeCode_Value = 3
	UnitsOfTimeCode_D                     UnitsOfTimeCode_Value = 4
	UnitsOfTimeCode_WK                    UnitsOfTimeCode_Value = 5
	UnitsOfTimeCode_MO                    UnitsOfTimeCode_Value = 6
	UnitsOfTimeCode_A                     UnitsOfTimeCode_Value = 7
)

// Enum value maps for UnitsOfTimeCode_Value.
var (
	UnitsOfTimeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "S",
		2: "MIN",
		3: "H",
		4: "D",
		5: "WK",
		6: "MO",
		7: "A",
	}
	UnitsOfTimeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"S":                     1,
		"MIN":                   2,
		"H":                     3,
		"D":                     4,
		"WK":                    5,
		"MO":                    6,
		"A":                     7,
	}
)

func (x UnitsOfTimeCode_Value) Enum() *UnitsOfTimeCode_Value {
	p := new(UnitsOfTimeCode_Value)
	*p = x
	return p
}

func (x UnitsOfTimeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitsOfTimeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[13].Descriptor()
}

func (UnitsOfTimeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes[13]
}

func (x UnitsOfTimeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitsOfTimeCode_Value.Descriptor instead.
func (UnitsOfTimeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{58, 0}
}

// Auto-generated from StructureDefinition for base64Binary, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type base64Binary. See
// http://hl7.org/fhir/StructureDefinition/base64Binary
type Base64Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for base64Binary
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Base64Binary) Reset() {
	*x = Base64Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base64Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base64Binary) ProtoMessage() {}

func (x *Base64Binary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base64Binary.ProtoReflect.Descriptor instead.
func (*Base64Binary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{0}
}

func (x *Base64Binary) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Base64Binary) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Base64Binary) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for boolean, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type boolean. See
// http://hl7.org/fhir/StructureDefinition/boolean
type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for boolean
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{1}
}

func (x *Boolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *Boolean) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Boolean) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for code, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type code. See
// http://hl7.org/fhir/StructureDefinition/code
type Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Code) Reset() {
	*x = Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{2}
}

func (x *Code) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Code) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Code) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for date, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type date. See
// http://hl7.org/fhir/StructureDefinition/date
type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for date
	ValueUs   int64          `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Timezone  string         `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision Date_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.stu3.proto.Date_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{3}
}

func (x *Date) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *Date) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Date) GetPrecision() Date_Precision {
	if x != nil {
		return x.Precision
	}
	return Date_PRECISION_UNSPECIFIED
}

func (x *Date) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Date) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for dateTime, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type dateTime. See
// http://hl7.org/fhir/StructureDefinition/dateTime
type DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for dateTime
	ValueUs   int64              `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Timezone  string             `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision DateTime_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.stu3.proto.DateTime_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{4}
}

func (x *DateTime) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *DateTime) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *DateTime) GetPrecision() DateTime_Precision {
	if x != nil {
		return x.Precision
	}
	return DateTime_PRECISION_UNSPECIFIED
}

func (x *DateTime) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DateTime) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for decimal, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type decimal. See
// http://hl7.org/fhir/StructureDefinition/decimal
type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for decimal
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{5}
}

func (x *Decimal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Decimal) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Decimal) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for id, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type id. See
// http://hl7.org/fhir/StructureDefinition/id
type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for id
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{6}
}

func (x *Id) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Id) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Id) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for instant, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type instant. See
// http://hl7.org/fhir/StructureDefinition/instant
type Instant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for instant
	ValueUs   int64             `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Timezone  string            `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision Instant_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.stu3.proto.Instant_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Instant) Reset() {
	*x = Instant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instant) ProtoMessage() {}

func (x *Instant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instant.ProtoReflect.Descriptor instead.
func (*Instant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{7}
}

func (x *Instant) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *Instant) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Instant) GetPrecision() Instant_Precision {
	if x != nil {
		return x.Precision
	}
	return Instant_PRECISION_UNSPECIFIED
}

func (x *Instant) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Instant) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for integer, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type integer. See
// http://hl7.org/fhir/StructureDefinition/integer
type Integer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for integer
	Value int32 `protobuf:"zigzag32,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Integer) Reset() {
	*x = Integer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integer) ProtoMessage() {}

func (x *Integer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integer.ProtoReflect.Descriptor instead.
func (*Integer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{8}
}

func (x *Integer) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Integer) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Integer) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for markdown, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type markdown. See
// http://hl7.org/fhir/StructureDefinition/markdown
type Markdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for markdown
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Markdown) Reset() {
	*x = Markdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Markdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Markdown) ProtoMessage() {}

func (x *Markdown) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Markdown.ProtoReflect.Descriptor instead.
func (*Markdown) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{9}
}

func (x *Markdown) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Markdown) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Markdown) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for oid, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type oid. See
// http://hl7.org/fhir/StructureDefinition/oid
type Oid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for oid
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Oid) Reset() {
	*x = Oid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oid) ProtoMessage() {}

func (x *Oid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oid.ProtoReflect.Descriptor instead.
func (*Oid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{10}
}

func (x *Oid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Oid) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oid) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for positiveInt, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type positiveInt. See
// http://hl7.org/fhir/StructureDefinition/positiveInt
type PositiveInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for positiveInt
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PositiveInt) Reset() {
	*x = PositiveInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositiveInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositiveInt) ProtoMessage() {}

func (x *PositiveInt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositiveInt.ProtoReflect.Descriptor instead.
func (*PositiveInt) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{11}
}

func (x *PositiveInt) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PositiveInt) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PositiveInt) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for string, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type string. See
// http://hl7.org/fhir/StructureDefinition/string
type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for string
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{12}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *String) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *String) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for time, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type time. See
// http://hl7.org/fhir/StructureDefinition/time
type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for time
	ValueUs   int64          `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Precision Time_Precision `protobuf:"varint,2,opt,name=precision,proto3,enum=google.fhir.stu3.proto.Time_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{13}
}

func (x *Time) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *Time) GetPrecision() Time_Precision {
	if x != nil {
		return x.Precision
	}
	return Time_PRECISION_UNSPECIFIED
}

func (x *Time) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Time) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for unsignedInt, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type unsignedInt. See
// http://hl7.org/fhir/StructureDefinition/unsignedInt
type UnsignedInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for unsignedInt
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UnsignedInt) Reset() {
	*x = UnsignedInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedInt) ProtoMessage() {}

func (x *UnsignedInt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedInt.ProtoReflect.Descriptor instead.
func (*UnsignedInt) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{14}
}

func (x *UnsignedInt) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnsignedInt) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UnsignedInt) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for uri, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type uri. See
// http://hl7.org/fhir/StructureDefinition/uri
type Uri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for uri
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Uri) Reset() {
	*x = Uri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uri) ProtoMessage() {}

func (x *Uri) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uri.ProtoReflect.Descriptor instead.
func (*Uri) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{15}
}

func (x *Uri) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Uri) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Uri) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for uuid, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type uuid. See
// http://hl7.org/fhir/StructureDefinition/uuid
type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for uuid
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{16}
}

func (x *Uuid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Uuid) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Uuid) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for xhtml, last updated
// 2017-04-19T07:44:43.294+10:00. Primitive Type xhtml. See
// http://hl7.org/fhir/StructureDefinition/xhtml
type Xhtml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual xhtml
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Xhtml) Reset() {
	*x = Xhtml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xhtml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xhtml) ProtoMessage() {}

func (x *Xhtml) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xhtml.ProtoReflect.Descriptor instead.
func (*Xhtml) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{17}
}

func (x *Xhtml) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Xhtml) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

// Auto-generated from StructureDefinition for Address, last updated
// 2017-04-19T07:44:43.294+10:00. An address expressed using postal conventions
// (as opposed to GPS or other location definition formats). See
// http://hl7.org/fhir/StructureDefinition/Address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// home | work | temp | old - purpose of this address
	Use *AddressUseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// postal | physical | both
	Type *AddressTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Text representation of the address
	Text *String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Street name, number, direction & P.O. Box etc.
	Line []*String `protobuf:"bytes,6,rep,name=line,proto3" json:"line,omitempty"`
	// Name of city, town etc.
	City *String `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	// District name (aka county)
	District *String `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// Sub-unit of country (abbreviations ok)
	State *String `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// Postal code for area
	PostalCode *String `protobuf:"bytes,10,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// Country (e.g. can be ISO 3166 2 or 3 letter code)
	Country *String `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	// Time period when address was/is in use
	Period *Period `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{18}
}

func (x *Address) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Address) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Address) GetUse() *AddressUseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Address) GetType() *AddressTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Address) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Address) GetLine() []*String {
	if x != nil {
		return x.Line
	}
	return nil
}

func (x *Address) GetCity() *String {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *Address) GetDistrict() *String {
	if x != nil {
		return x.District
	}
	return nil
}

func (x *Address) GetState() *String {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Address) GetPostalCode() *String {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *Address) GetCountry() *String {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Address) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Age, last updated
// 2017-04-19T07:44:43.294+10:00. A duration of time during which an organism
// (or a process) has existed. See http://hl7.org/fhir/StructureDefinition/Age
type Age struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Age) Reset() {
	*x = Age{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Age) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Age) ProtoMessage() {}

func (x *Age) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Age.ProtoReflect.Descriptor instead.
func (*Age) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{19}
}

func (x *Age) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Age) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Age) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Age) GetComparator() *QuantityComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Age) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Age) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Age) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Annotation, last updated
// 2017-04-19T07:44:43.294+10:00. Text node with attribution. See
// http://hl7.org/fhir/StructureDefinition/Annotation
type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension       `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Author    *Annotation_Author `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// When the annotation was made
	Time *DateTime `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The annotation  - text content
	Text *String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{20}
}

func (x *Annotation) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Annotation) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Annotation) GetAuthor() *Annotation_Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Annotation) GetTime() *DateTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Annotation) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for Attachment, last updated
// 2017-04-19T07:44:43.294+10:00. Content in a format defined elsewhere. See
// http://hl7.org/fhir/StructureDefinition/Attachment
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Mime type of the content, with charset etc.
	ContentType *MimeTypeCode `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Human language of the content (BCP-47)
	Language *LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Data inline, base64ed
	Data *Base64Binary `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Uri where the data can be found
	Url *Uri `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// Number of bytes of content (if url provided)
	Size *UnsignedInt `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	// Hash of the data (sha-1, base64ed)
	Hash *Base64Binary `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	// Label to display in place of the data
	Title *String `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	// Date attachment was first created
	Creation *DateTime `protobuf:"bytes,10,opt,name=creation,proto3" json:"creation,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{21}
}

func (x *Attachment) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Attachment) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Attachment) GetContentType() *MimeTypeCode {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *Attachment) GetLanguage() *LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Attachment) GetData() *Base64Binary {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Attachment) GetUrl() *Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Attachment) GetSize() *UnsignedInt {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Attachment) GetHash() *Base64Binary {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Attachment) GetTitle() *String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Attachment) GetCreation() *DateTime {
	if x != nil {
		return x.Creation
	}
	return nil
}

// Auto-generated from StructureDefinition for CodeableConcept, last updated
// 2017-04-19T07:44:43.294+10:00. Concept - reference to a terminology or just
// text. See http://hl7.org/fhir/StructureDefinition/CodeableConcept
type CodeableConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CodeableConcept) Reset() {
	*x = CodeableConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeableConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeableConcept) ProtoMessage() {}

func (x *CodeableConcept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeableConcept.ProtoReflect.Descriptor instead.
func (*CodeableConcept) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{22}
}

func (x *CodeableConcept) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeableConcept) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeableConcept) GetCoding() []*Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *CodeableConcept) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for Coding, last updated
// 2017-04-19T07:44:43.294+10:00. A reference to a code defined by a terminology
// system. See http://hl7.org/fhir/StructureDefinition/Coding
type Coding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Identity of the terminology system
	System *Uri `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Symbol in syntax defined by the system
	Code *Code `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *Coding) Reset() {
	*x = Coding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coding) ProtoMessage() {}

func (x *Coding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coding.ProtoReflect.Descriptor instead.
func (*Coding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{23}
}

func (x *Coding) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Coding) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Coding) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Coding) GetVersion() *String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Coding) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Coding) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Coding) GetUserSelected() *Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

// Auto-generated from StructureDefinition for ContactPoint, last updated
// 2017-04-19T07:44:43.294+10:00. Details of a Technology mediated contact point
// (phone, fax, email, etc.). See
// http://hl7.org/fhir/StructureDefinition/ContactPoint
type ContactPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// phone | fax | email | pager | url | sms | other
	System *ContactPointSystemCode `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// The actual contact point details
	Value *String `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// home | work | temp | old | mobile - purpose of this contact point
	Use *ContactPointUseCode `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Specify preferred order of use (1 = highest)
	Rank *PositiveInt `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	// Time period when the contact point was/is in use
	Period *Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *ContactPoint) Reset() {
	*x = ContactPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPoint) ProtoMessage() {}

func (x *ContactPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPoint.ProtoReflect.Descriptor instead.
func (*ContactPoint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{24}
}

func (x *ContactPoint) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPoint) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ContactPoint) GetSystem() *ContactPointSystemCode {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ContactPoint) GetValue() *String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ContactPoint) GetUse() *ContactPointUseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *ContactPoint) GetRank() *PositiveInt {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *ContactPoint) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Count, last updated
// 2017-04-19T07:44:43.294+10:00. A measured or measurable amount. See
// http://hl7.org/fhir/StructureDefinition/Count
type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{25}
}

func (x *Count) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Count) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Count) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Count) GetComparator() *QuantityComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Count) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Count) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Count) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Distance, last updated
// 2017-04-19T07:44:43.294+10:00. A length - a value with a unit that is a
// physical distance. See http://hl7.org/fhir/StructureDefinition/Distance
type Distance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Distance) Reset() {
	*x = Distance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distance) ProtoMessage() {}

func (x *Distance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distance.ProtoReflect.Descriptor instead.
func (*Distance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{26}
}

func (x *Distance) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Distance) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Distance) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Distance) GetComparator() *QuantityComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Distance) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Distance) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Distance) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Dosage, last updated
// 2017-04-19T07:44:43.294+10:00. How the medication is/was taken or should be
// taken. See http://hl7.org/fhir/StructureDefinition/Dosage
type Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The order of the dosage instructions
	Sequence *Integer `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Free text dosage instructions e.g. SIG
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Supplemental instruction - e.g. "with meals"
	AdditionalInstruction []*CodeableConcept `protobuf:"bytes,5,rep,name=additional_instruction,json=additionalInstruction,proto3" json:"additional_instruction,omitempty"`
	// Patient or consumer oriented instructions
	PatientInstruction *String `protobuf:"bytes,6,opt,name=patient_instruction,json=patientInstruction,proto3" json:"patient_instruction,omitempty"`
	// When medication should be administered
	Timing   *Timing          `protobuf:"bytes,7,opt,name=timing,proto3" json:"timing,omitempty"`
	AsNeeded *Dosage_AsNeeded `protobuf:"bytes,8,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	// Body site to administer to
	Site *CodeableConcept `protobuf:"bytes,9,opt,name=site,proto3" json:"site,omitempty"`
	// How drug should enter body
	Route *CodeableConcept `protobuf:"bytes,10,opt,name=route,proto3" json:"route,omitempty"`
	// Technique for administering medication
	Method *CodeableConcept `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"`
	Dose   *Dosage_Dose     `protobuf:"bytes,12,opt,name=dose,proto3" json:"dose,omitempty"`
	// Upper limit on medication per unit of time
	MaxDosePerPeriod *Ratio `protobuf:"bytes,13,opt,name=max_dose_per_period,json=maxDosePerPeriod,proto3" json:"max_dose_per_period,omitempty"`
	// Upper limit on medication per administration
	MaxDosePerAdministration *SimpleQuantity `protobuf:"bytes,14,opt,name=max_dose_per_administration,json=maxDosePerAdministration,proto3" json:"max_dose_per_administration,omitempty"`
	// Upper limit on medication per lifetime of the patient
	MaxDosePerLifetime *SimpleQuantity `protobuf:"bytes,15,opt,name=max_dose_per_lifetime,json=maxDosePerLifetime,proto3" json:"max_dose_per_lifetime,omitempty"`
	Rate               *Dosage_Rate    `protobuf:"bytes,16,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *Dosage) Reset() {
	*x = Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage) ProtoMessage() {}

func (x *Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage.ProtoReflect.Descriptor instead.
func (*Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{27}
}

func (x *Dosage) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Dosage) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Dosage) GetSequence() *Integer {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Dosage) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Dosage) GetAdditionalInstruction() []*CodeableConcept {
	if x != nil {
		return x.AdditionalInstruction
	}
	return nil
}

func (x *Dosage) GetPatientInstruction() *String {
	if x != nil {
		return x.PatientInstruction
	}
	return nil
}

func (x *Dosage) GetTiming() *Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Dosage) GetAsNeeded() *Dosage_AsNeeded {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *Dosage) GetSite() *CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Dosage) GetRoute() *CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Dosage) GetMethod() *CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Dosage) GetDose() *Dosage_Dose {
	if x != nil {
		return x.Dose
	}
	return nil
}

func (x *Dosage) GetMaxDosePerPeriod() *Ratio {
	if x != nil {
		return x.MaxDosePerPeriod
	}
	return nil
}

func (x *Dosage) GetMaxDosePerAdministration() *SimpleQuantity {
	if x != nil {
		return x.MaxDosePerAdministration
	}
	return nil
}

func (x *Dosage) GetMaxDosePerLifetime() *SimpleQuantity {
	if x != nil {
		return x.MaxDosePerLifetime
	}
	return nil
}

func (x *Dosage) GetRate() *Dosage_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Auto-generated from StructureDefinition for Duration, last updated
// 2017-04-19T07:44:43.294+10:00. A length of time. See
// http://hl7.org/fhir/StructureDefinition/Duration
type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{28}
}

func (x *Duration) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Duration) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Duration) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Duration) GetComparator() *QuantityComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Duration) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Duration) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Duration) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for HumanName, last updated
// 2017-04-19T07:44:43.294+10:00. Name of a human - parts and usage. See
// http://hl7.org/fhir/StructureDefinition/HumanName
type HumanName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// usual | official | temp | nickname | anonymous | old | maiden
	Use *NameUseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// Text representation of the full name
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Family name (often called 'Surname')
	Family *String `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given []*String `protobuf:"bytes,6,rep,name=given,proto3" json:"given,omitempty"`
	// Parts that come before the name
	Prefix []*String `protobuf:"bytes,7,rep,name=prefix,proto3" json:"prefix,omitempty"`
	// Parts that come after the name
	Suffix []*String `protobuf:"bytes,8,rep,name=suffix,proto3" json:"suffix,omitempty"`
	// Time period when name was/is in use
	Period *Period `protobuf:"bytes,9,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *HumanName) Reset() {
	*x = HumanName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanName) ProtoMessage() {}

func (x *HumanName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanName.ProtoReflect.Descriptor instead.
func (*HumanName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{29}
}

func (x *HumanName) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanName) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HumanName) GetUse() *NameUseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *HumanName) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *HumanName) GetFamily() *String {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *HumanName) GetGiven() []*String {
	if x != nil {
		return x.Given
	}
	return nil
}

func (x *HumanName) GetPrefix() []*String {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *HumanName) GetSuffix() []*String {
	if x != nil {
		return x.Suffix
	}
	return nil
}

func (x *HumanName) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Identifier, last updated
// 2017-04-19T07:44:43.294+10:00. An identifier intended for computation. See
// http://hl7.org/fhir/StructureDefinition/Identifier
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// usual | official | temp | secondary (If known)
	Use *IdentifierUseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// Description of identifier
	Type *CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The namespace for the identifier value
	System *Uri `protobuf:"bytes,5,opt,name=system,proto3" json:"system,omitempty"`
	// The value that is unique
	Value *String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Time period when id is/was valid for use
	Period *Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that issued id (may be just text)
	Assigner *Reference `protobuf:"bytes,8,opt,name=assigner,proto3" json:"assigner,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{30}
}

func (x *Identifier) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Identifier) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Identifier) GetUse() *IdentifierUseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Identifier) GetType() *CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Identifier) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Identifier) GetValue() *String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Identifier) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Identifier) GetAssigner() *Reference {
	if x != nil {
		return x.Assigner
	}
	return nil
}

// Auto-generated from StructureDefinition for Meta, last updated
// 2017-04-19T07:44:43.294+10:00. Metadata about a resource. See
// http://hl7.org/fhir/StructureDefinition/Meta
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version specific identifier
	VersionId *Id `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// When the resource version last changed
	LastUpdated *Instant `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Profiles this resource claims to conform to
	Profile []*Uri `protobuf:"bytes,5,rep,name=profile,proto3" json:"profile,omitempty"`
	// Security Labels applied to this resource
	Security []*Coding `protobuf:"bytes,6,rep,name=security,proto3" json:"security,omitempty"`
	// Tags applied to this resource
	Tag []*Coding `protobuf:"bytes,7,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{31}
}

func (x *Meta) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Meta) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Meta) GetVersionId() *Id {
	if x != nil {
		return x.VersionId
	}
	return nil
}

func (x *Meta) GetLastUpdated() *Instant {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Meta) GetProfile() []*Uri {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Meta) GetSecurity() []*Coding {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Meta) GetTag() []*Coding {
	if x != nil {
		return x.Tag
	}
	return nil
}

// Auto-generated from StructureDefinition for Money, last updated
// 2017-04-19T07:44:43.294+10:00. An amount of economic utility in some
// recognized currency. See http://hl7.org/fhir/StructureDefinition/Money
type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{32}
}

func (x *Money) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Money) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Money) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Money) GetComparator() *QuantityComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Money) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Money) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Money) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Period, last updated
// 2017-04-19T07:44:43.294+10:00. Time range defined by start and end date/time.
// See http://hl7.org/fhir/StructureDefinition/Period
type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Starting time with inclusive boundary
	Start *DateTime `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// End time with inclusive boundary, if not ongoing
	End *DateTime `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{33}
}

func (x *Period) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Period) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Period) GetStart() *DateTime {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Period) GetEnd() *DateTime {
	if x != nil {
		return x.End
	}
	return nil
}

// Auto-generated from StructureDefinition for Quantity, last updated
// 2017-04-19T07:44:43.294+10:00. A measured or measurable amount. See
// http://hl7.org/fhir/StructureDefinition/Quantity
type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// < | <= | >= | > - how to understand the value
	Comparator *QuantityComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{34}
}

func (x *Quantity) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Quantity) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Quantity) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Quantity) GetComparator() *QuantityComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Quantity) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Quantity) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Quantity) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Range, last updated
// 2017-04-19T07:44:43.294+10:00. Set of values bounded by low and high. See
// http://hl7.org/fhir/StructureDefinition/Range
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Low limit
	Low *SimpleQuantity `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`
	// High limit
	High *SimpleQuantity `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{35}
}

func (x *Range) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Range) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Range) GetLow() *SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Range) GetHigh() *SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

// Auto-generated from StructureDefinition for Ratio, last updated
// 2017-04-19T07:44:43.294+10:00. A ratio of two Quantity values - a numerator
// and a denominator. See http://hl7.org/fhir/StructureDefinition/Ratio
type Ratio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerator value
	Numerator *Quantity `protobuf:"bytes,3,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// Denominator value
	Denominator *Quantity `protobuf:"bytes,4,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *Ratio) Reset() {
	*x = Ratio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratio) ProtoMessage() {}

func (x *Ratio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratio.ProtoReflect.Descriptor instead.
func (*Ratio) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{36}
}

func (x *Ratio) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ratio) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ratio) GetNumerator() *Quantity {
	if x != nil {
		return x.Numerator
	}
	return nil
}

func (x *Ratio) GetDenominator() *Quantity {
	if x != nil {
		return x.Denominator
	}
	return nil
}

// Auto-generated from StructureDefinition for SampledData, last updated
// 2017-04-19T07:44:43.294+10:00. A series of measurements taken by a device.
// See http://hl7.org/fhir/StructureDefinition/SampledData
type SampledData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Zero value and units
	Origin *SimpleQuantity `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// Number of milliseconds between samples
	Period *Decimal `protobuf:"bytes,4,opt,name=period,proto3" json:"period,omitempty"`
	// Multiply data by this before adding to origin
	Factor *Decimal `protobuf:"bytes,5,opt,name=factor,proto3" json:"factor,omitempty"`
	// Lower limit of detection
	LowerLimit *Decimal `protobuf:"bytes,6,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`
	// Upper limit of detection
	UpperLimit *Decimal `protobuf:"bytes,7,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	// Number of sample points at each time point
	Dimensions *PositiveInt `protobuf:"bytes,8,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Decimal values with spaces, or "E" | "U" | "L"
	Data *String `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SampledData) Reset() {
	*x = SampledData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampledData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledData) ProtoMessage() {}

func (x *SampledData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampledData.ProtoReflect.Descriptor instead.
func (*SampledData) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{37}
}

func (x *SampledData) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SampledData) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SampledData) GetOrigin() *SimpleQuantity {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *SampledData) GetPeriod() *Decimal {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *SampledData) GetFactor() *Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *SampledData) GetLowerLimit() *Decimal {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *SampledData) GetUpperLimit() *Decimal {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *SampledData) GetDimensions() *PositiveInt {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *SampledData) GetData() *String {
	if x != nil {
		return x.Data
	}
	return nil
}

// Auto-generated from StructureDefinition for Signature, last updated
// 2017-04-19T07:44:43.294+10:00. A digital Signature - XML DigSig, JWT,
// Graphical image of signature, etc. See
// http://hl7.org/fhir/StructureDefinition/Signature
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Indication of the reason the entity signed the object(s)
	Type []*Coding `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// When the signature was created
	When       *Instant              `protobuf:"bytes,4,opt,name=when,proto3" json:"when,omitempty"`
	Who        *Signature_Who        `protobuf:"bytes,5,opt,name=who,proto3" json:"who,omitempty"`
	OnBehalfOf *Signature_OnBehalfOf `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
	// The technical format of the signature
	ContentType *MimeTypeCode `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The actual signature content (XML DigSig. JWT, picture, etc.)
	Blob *Base64Binary `protobuf:"bytes,8,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{38}
}

func (x *Signature) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Signature) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Signature) GetType() []*Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Signature) GetWhen() *Instant {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Signature) GetWho() *Signature_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *Signature) GetOnBehalfOf() *Signature_OnBehalfOf {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

func (x *Signature) GetContentType() *MimeTypeCode {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *Signature) GetBlob() *Base64Binary {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Auto-generated from StructureDefinition for SimpleQuantity, last updated
// 2017-04-19T07:44:43.294+10:00. A fixed quantity (no comparator). See
// http://hl7.org/fhir/StructureDefinition/SimpleQuantity
type SimpleQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SimpleQuantity) Reset() {
	*x = SimpleQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleQuantity) ProtoMessage() {}

func (x *SimpleQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleQuantity.ProtoReflect.Descriptor instead.
func (*SimpleQuantity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{39}
}

func (x *SimpleQuantity) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SimpleQuantity) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SimpleQuantity) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SimpleQuantity) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *SimpleQuantity) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *SimpleQuantity) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Timing, last updated
// 2017-04-19T07:44:43.294+10:00. A timing schedule that specifies an event that
// may occur multiple times. See http://hl7.org/fhir/StructureDefinition/Timing
type Timing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// When the event occurs
	Event  []*DateTime    `protobuf:"bytes,3,rep,name=event,proto3" json:"event,omitempty"`
	Repeat *Timing_Repeat `protobuf:"bytes,4,opt,name=repeat,proto3" json:"repeat,omitempty"`
	// BID | TID | QID | AM | PM | QD | QOD | Q4H | Q6H +
	Code *CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Timing) Reset() {
	*x = Timing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{40}
}

func (x *Timing) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Timing) GetEvent() []*DateTime {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Timing) GetRepeat() *Timing_Repeat {
	if x != nil {
		return x.Repeat
	}
	return nil
}

func (x *Timing) GetCode() *CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

// Optional Extensions Element
// See https://www.hl7.org/fhir/datatypes.html#Extension
type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// identifies the meaning of the extension
	Url   *Uri              `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Value *Extension_ValueX `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{41}
}

func (x *Extension) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Extension) GetUrl() *Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Extension) GetValue() *Extension_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Extension) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Specialization of Coding that drops the system field.
// Fields that use this message must be annotated with
// fhir_inlined_coding_system.
type CodingWithFixedSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Symbol in syntax defined by the system
	Code *Code `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *CodingWithFixedSystem) Reset() {
	*x = CodingWithFixedSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodingWithFixedSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodingWithFixedSystem) ProtoMessage() {}

func (x *CodingWithFixedSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodingWithFixedSystem.ProtoReflect.Descriptor instead.
func (*CodingWithFixedSystem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{42}
}

func (x *CodingWithFixedSystem) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodingWithFixedSystem) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodingWithFixedSystem) GetVersion() *String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CodingWithFixedSystem) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CodingWithFixedSystem) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *CodingWithFixedSystem) GetUserSelected() *Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

// Specialization of Coding that drops the system and code fields.
// Fields that use this message must be annotated with
// fhir_inlined_coding_system and fhir_inlined_coding_code.
type CodingWithFixedCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *CodingWithFixedCode) Reset() {
	*x = CodingWithFixedCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodingWithFixedCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodingWithFixedCode) ProtoMessage() {}

func (x *CodingWithFixedCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodingWithFixedCode.ProtoReflect.Descriptor instead.
func (*CodingWithFixedCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{43}
}

func (x *CodingWithFixedCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodingWithFixedCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodingWithFixedCode) GetVersion() *String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CodingWithFixedCode) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *CodingWithFixedCode) GetUserSelected() *Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

// A reference from one resource to another
// See https://www.hl7.org/fhir/datatypes.html#Reference
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Literal reference, Relative, internal or absolute URL
	//
	// Types that are assignable to Reference:
	//	*Reference_Uri
	//	*Reference_Fragment
	//	*Reference_AccountId
	//	*Reference_ActivityDefinitionId
	//	*Reference_AdverseEventId
	//	*Reference_AllergyIntoleranceId
	//	*Reference_AppointmentId
	//	*Reference_AppointmentResponseId
	//	*Reference_AuditEventId
	//	*Reference_BasicId
	//	*Reference_BinaryId
	//	*Reference_BodySiteId
	//	*Reference_BundleId
	//	*Reference_CapabilityStatementId
	//	*Reference_CarePlanId
	//	*Reference_CareTeamId
	//	*Reference_ChargeItemId
	//	*Reference_ClaimId
	//	*Reference_ClaimResponseId
	//	*Reference_ClinicalImpressionId
	//	*Reference_CodeSystemId
	//	*Reference_CommunicationId
	//	*Reference_CommunicationRequestId
	//	*Reference_CompartmentDefinitionId
	//	*Reference_CompositionId
	//	*Reference_ConceptMapId
	//	*Reference_ConditionId
	//	*Reference_ConsentId
	//	*Reference_ContractId
	//	*Reference_CoverageId
	//	*Reference_DataElementId
	//	*Reference_DetectedIssueId
	//	*Reference_DeviceId
	//	*Reference_DeviceComponentId
	//	*Reference_DeviceMetricId
	//	*Reference_DeviceRequestId
	//	*Reference_DeviceUseStatementId
	//	*Reference_DiagnosticReportId
	//	*Reference_DocumentManifestId
	//	*Reference_DocumentReferenceId
	//	*Reference_EligibilityRequestId
	//	*Reference_EligibilityResponseId
	//	*Reference_EncounterId
	//	*Reference_EndpointId
	//	*Reference_EnrollmentRequestId
	//	*Reference_EnrollmentResponseId
	//	*Reference_EpisodeOfCareId
	//	*Reference_ExpansionProfileId
	//	*Reference_ExplanationOfBenefitId
	//	*Reference_FamilyMemberHistoryId
	//	*Reference_FlagId
	//	*Reference_GoalId
	//	*Reference_GraphDefinitionId
	//	*Reference_GroupId
	//	*Reference_GuidanceResponseId
	//	*Reference_HealthcareServiceId
	//	*Reference_ImagingManifestId
	//	*Reference_ImagingStudyId
	//	*Reference_ImmunizationId
	//	*Reference_ImmunizationRecommendationId
	//	*Reference_ImplementationGuideId
	//	*Reference_LibraryId
	//	*Reference_LinkageId
	//	*Reference_ListId
	//	*Reference_LocationId
	//	*Reference_MeasureId
	//	*Reference_MeasureReportId
	//	*Reference_MediaId
	//	*Reference_MedicationId
	//	*Reference_MedicationAdministrationId
	//	*Reference_MedicationDispenseId
	//	*Reference_MedicationRequestId
	//	*Reference_MedicationStatementId
	//	*Reference_MessageDefinitionId
	//	*Reference_MessageHeaderId
	//	*Reference_NamingSystemId
	//	*Reference_NutritionOrderId
	//	*Reference_ObservationId
	//	*Reference_OperationDefinitionId
	//	*Reference_OperationOutcomeId
	//	*Reference_OrganizationId
	//	*Reference_ParametersId
	//	*Reference_PatientId
	//	*Reference_PaymentNoticeId
	//	*Reference_PaymentReconciliationId
	//	*Reference_PersonId
	//	*Reference_PlanDefinitionId
	//	*Reference_PractitionerId
	//	*Reference_PractitionerRoleId
	//	*Reference_ProcedureId
	//	*Reference_ProcedureRequestId
	//	*Reference_ProcessRequestId
	//	*Reference_ProcessResponseId
	//	*Reference_ProvenanceId
	//	*Reference_QuestionnaireId
	//	*Reference_QuestionnaireResponseId
	//	*Reference_ReferralRequestId
	//	*Reference_RelatedPersonId
	//	*Reference_RequestGroupId
	//	*Reference_ResearchStudyId
	//	*Reference_ResearchSubjectId
	//	*Reference_RiskAssessmentId
	//	*Reference_ScheduleId
	//	*Reference_SearchParameterId
	//	*Reference_SequenceId
	//	*Reference_ServiceDefinitionId
	//	*Reference_SlotId
	//	*Reference_SpecimenId
	//	*Reference_StructureDefinitionId
	//	*Reference_StructureMapId
	//	*Reference_SubscriptionId
	//	*Reference_SubstanceId
	//	*Reference_SupplyDeliveryId
	//	*Reference_SupplyRequestId
	//	*Reference_TaskId
	//	*Reference_TestReportId
	//	*Reference_TestScriptId
	//	*Reference_ValueSetId
	//	*Reference_VisionPrescriptionId
	Reference isReference_Reference `protobuf_oneof:"reference"`
	// Logical reference, when literal reference is not known
	Identifier *Identifier `protobuf:"bytes,122,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Text alternative for the resource
	Display *String `protobuf:"bytes,123,opt,name=display,proto3" json:"display,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{44}
}

func (x *Reference) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Reference) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (m *Reference) GetReference() isReference_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *Reference) GetUri() *String {
	if x, ok := x.GetReference().(*Reference_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Reference) GetFragment() *String {
	if x, ok := x.GetReference().(*Reference_Fragment); ok {
		return x.Fragment
	}
	return nil
}

func (x *Reference) GetAccountId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (x *Reference) GetActivityDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ActivityDefinitionId); ok {
		return x.ActivityDefinitionId
	}
	return nil
}

func (x *Reference) GetAdverseEventId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AdverseEventId); ok {
		return x.AdverseEventId
	}
	return nil
}

func (x *Reference) GetAllergyIntoleranceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AllergyIntoleranceId); ok {
		return x.AllergyIntoleranceId
	}
	return nil
}

func (x *Reference) GetAppointmentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AppointmentId); ok {
		return x.AppointmentId
	}
	return nil
}

func (x *Reference) GetAppointmentResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AppointmentResponseId); ok {
		return x.AppointmentResponseId
	}
	return nil
}

func (x *Reference) GetAuditEventId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AuditEventId); ok {
		return x.AuditEventId
	}
	return nil
}

func (x *Reference) GetBasicId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BasicId); ok {
		return x.BasicId
	}
	return nil
}

func (x *Reference) GetBinaryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BinaryId); ok {
		return x.BinaryId
	}
	return nil
}

func (x *Reference) GetBodySiteId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BodySiteId); ok {
		return x.BodySiteId
	}
	return nil
}

func (x *Reference) GetBundleId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BundleId); ok {
		return x.BundleId
	}
	return nil
}

func (x *Reference) GetCapabilityStatementId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CapabilityStatementId); ok {
		return x.CapabilityStatementId
	}
	return nil
}

func (x *Reference) GetCarePlanId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CarePlanId); ok {
		return x.CarePlanId
	}
	return nil
}

func (x *Reference) GetCareTeamId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CareTeamId); ok {
		return x.CareTeamId
	}
	return nil
}

func (x *Reference) GetChargeItemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ChargeItemId); ok {
		return x.ChargeItemId
	}
	return nil
}

func (x *Reference) GetClaimId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClaimId); ok {
		return x.ClaimId
	}
	return nil
}

func (x *Reference) GetClaimResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClaimResponseId); ok {
		return x.ClaimResponseId
	}
	return nil
}

func (x *Reference) GetClinicalImpressionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClinicalImpressionId); ok {
		return x.ClinicalImpressionId
	}
	return nil
}

func (x *Reference) GetCodeSystemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CodeSystemId); ok {
		return x.CodeSystemId
	}
	return nil
}

func (x *Reference) GetCommunicationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CommunicationId); ok {
		return x.CommunicationId
	}
	return nil
}

func (x *Reference) GetCommunicationRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CommunicationRequestId); ok {
		return x.CommunicationRequestId
	}
	return nil
}

func (x *Reference) GetCompartmentDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CompartmentDefinitionId); ok {
		return x.CompartmentDefinitionId
	}
	return nil
}

func (x *Reference) GetCompositionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CompositionId); ok {
		return x.CompositionId
	}
	return nil
}

func (x *Reference) GetConceptMapId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConceptMapId); ok {
		return x.ConceptMapId
	}
	return nil
}

func (x *Reference) GetConditionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConditionId); ok {
		return x.ConditionId
	}
	return nil
}

func (x *Reference) GetConsentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConsentId); ok {
		return x.ConsentId
	}
	return nil
}

func (x *Reference) GetContractId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ContractId); ok {
		return x.ContractId
	}
	return nil
}

func (x *Reference) GetCoverageId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CoverageId); ok {
		return x.CoverageId
	}
	return nil
}

func (x *Reference) GetDataElementId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DataElementId); ok {
		return x.DataElementId
	}
	return nil
}

func (x *Reference) GetDetectedIssueId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DetectedIssueId); ok {
		return x.DetectedIssueId
	}
	return nil
}

func (x *Reference) GetDeviceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceId); ok {
		return x.DeviceId
	}
	return nil
}

func (x *Reference) GetDeviceComponentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceComponentId); ok {
		return x.DeviceComponentId
	}
	return nil
}

func (x *Reference) GetDeviceMetricId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceMetricId); ok {
		return x.DeviceMetricId
	}
	return nil
}

func (x *Reference) GetDeviceRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceRequestId); ok {
		return x.DeviceRequestId
	}
	return nil
}

func (x *Reference) GetDeviceUseStatementId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceUseStatementId); ok {
		return x.DeviceUseStatementId
	}
	return nil
}

func (x *Reference) GetDiagnosticReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DiagnosticReportId); ok {
		return x.DiagnosticReportId
	}
	return nil
}

func (x *Reference) GetDocumentManifestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DocumentManifestId); ok {
		return x.DocumentManifestId
	}
	return nil
}

func (x *Reference) GetDocumentReferenceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DocumentReferenceId); ok {
		return x.DocumentReferenceId
	}
	return nil
}

func (x *Reference) GetEligibilityRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EligibilityRequestId); ok {
		return x.EligibilityRequestId
	}
	return nil
}

func (x *Reference) GetEligibilityResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EligibilityResponseId); ok {
		return x.EligibilityResponseId
	}
	return nil
}

func (x *Reference) GetEncounterId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EncounterId); ok {
		return x.EncounterId
	}
	return nil
}

func (x *Reference) GetEndpointId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EndpointId); ok {
		return x.EndpointId
	}
	return nil
}

func (x *Reference) GetEnrollmentRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EnrollmentRequestId); ok {
		return x.EnrollmentRequestId
	}
	return nil
}

func (x *Reference) GetEnrollmentResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EnrollmentResponseId); ok {
		return x.EnrollmentResponseId
	}
	return nil
}

func (x *Reference) GetEpisodeOfCareId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EpisodeOfCareId); ok {
		return x.EpisodeOfCareId
	}
	return nil
}

func (x *Reference) GetExpansionProfileId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ExpansionProfileId); ok {
		return x.ExpansionProfileId
	}
	return nil
}

func (x *Reference) GetExplanationOfBenefitId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ExplanationOfBenefitId); ok {
		return x.ExplanationOfBenefitId
	}
	return nil
}

func (x *Reference) GetFamilyMemberHistoryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_FamilyMemberHistoryId); ok {
		return x.FamilyMemberHistoryId
	}
	return nil
}

func (x *Reference) GetFlagId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_FlagId); ok {
		return x.FlagId
	}
	return nil
}

func (x *Reference) GetGoalId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GoalId); ok {
		return x.GoalId
	}
	return nil
}

func (x *Reference) GetGraphDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GraphDefinitionId); ok {
		return x.GraphDefinitionId
	}
	return nil
}

func (x *Reference) GetGroupId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GroupId); ok {
		return x.GroupId
	}
	return nil
}

func (x *Reference) GetGuidanceResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GuidanceResponseId); ok {
		return x.GuidanceResponseId
	}
	return nil
}

func (x *Reference) GetHealthcareServiceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_HealthcareServiceId); ok {
		return x.HealthcareServiceId
	}
	return nil
}

func (x *Reference) GetImagingManifestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImagingManifestId); ok {
		return x.ImagingManifestId
	}
	return nil
}

func (x *Reference) GetImagingStudyId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImagingStudyId); ok {
		return x.ImagingStudyId
	}
	return nil
}

func (x *Reference) GetImmunizationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImmunizationId); ok {
		return x.ImmunizationId
	}
	return nil
}

func (x *Reference) GetImmunizationRecommendationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImmunizationRecommendationId); ok {
		return x.ImmunizationRecommendationId
	}
	return nil
}

func (x *Reference) GetImplementationGuideId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImplementationGuideId); ok {
		return x.ImplementationGuideId
	}
	return nil
}

func (x *Reference) GetLibraryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_LibraryId); ok {
		return x.LibraryId
	}
	return nil
}

func (x *Reference) GetLinkageId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_LinkageId); ok {
		return x.LinkageId
	}
	return nil
}

func (x *Reference) GetListId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ListId); ok {
		return x.ListId
	}
	return nil
}

func (x *Reference) GetLocationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_LocationId); ok {
		return x.LocationId
	}
	return nil
}

func (x *Reference) GetMeasureId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MeasureId); ok {
		return x.MeasureId
	}
	return nil
}

func (x *Reference) GetMeasureReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MeasureReportId); ok {
		return x.MeasureReportId
	}
	return nil
}

func (x *Reference) GetMediaId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MediaId); ok {
		return x.MediaId
	}
	return nil
}

func (x *Reference) GetMedicationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationId); ok {
		return x.MedicationId
	}
	return nil
}

func (x *Reference) GetMedicationAdministrationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationAdministrationId); ok {
		return x.MedicationAdministrationId
	}
	return nil
}

func (x *Reference) GetMedicationDispenseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationDispenseId); ok {
		return x.MedicationDispenseId
	}
	return nil
}

func (x *Reference) GetMedicationRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationRequestId); ok {
		return x.MedicationRequestId
	}
	return nil
}

func (x *Reference) GetMedicationStatementId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationStatementId); ok {
		return x.MedicationStatementId
	}
	return nil
}

func (x *Reference) GetMessageDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MessageDefinitionId); ok {
		return x.MessageDefinitionId
	}
	return nil
}

func (x *Reference) GetMessageHeaderId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MessageHeaderId); ok {
		return x.MessageHeaderId
	}
	return nil
}

func (x *Reference) GetNamingSystemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_NamingSystemId); ok {
		return x.NamingSystemId
	}
	return nil
}

func (x *Reference) GetNutritionOrderId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_NutritionOrderId); ok {
		return x.NutritionOrderId
	}
	return nil
}

func (x *Reference) GetObservationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ObservationId); ok {
		return x.ObservationId
	}
	return nil
}

func (x *Reference) GetOperationDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OperationDefinitionId); ok {
		return x.OperationDefinitionId
	}
	return nil
}

func (x *Reference) GetOperationOutcomeId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OperationOutcomeId); ok {
		return x.OperationOutcomeId
	}
	return nil
}

func (x *Reference) GetOrganizationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OrganizationId); ok {
		return x.OrganizationId
	}
	return nil
}

func (x *Reference) GetParametersId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ParametersId); ok {
		return x.ParametersId
	}
	return nil
}

func (x *Reference) GetPatientId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PatientId); ok {
		return x.PatientId
	}
	return nil
}

func (x *Reference) GetPaymentNoticeId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PaymentNoticeId); ok {
		return x.PaymentNoticeId
	}
	return nil
}

func (x *Reference) GetPaymentReconciliationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PaymentReconciliationId); ok {
		return x.PaymentReconciliationId
	}
	return nil
}

func (x *Reference) GetPersonId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PersonId); ok {
		return x.PersonId
	}
	return nil
}

func (x *Reference) GetPlanDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PlanDefinitionId); ok {
		return x.PlanDefinitionId
	}
	return nil
}

func (x *Reference) GetPractitionerId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PractitionerId); ok {
		return x.PractitionerId
	}
	return nil
}

func (x *Reference) GetPractitionerRoleId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PractitionerRoleId); ok {
		return x.PractitionerRoleId
	}
	return nil
}

func (x *Reference) GetProcedureId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProcedureId); ok {
		return x.ProcedureId
	}
	return nil
}

func (x *Reference) GetProcedureRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProcedureRequestId); ok {
		return x.ProcedureRequestId
	}
	return nil
}

func (x *Reference) GetProcessRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProcessRequestId); ok {
		return x.ProcessRequestId
	}
	return nil
}

func (x *Reference) GetProcessResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProcessResponseId); ok {
		return x.ProcessResponseId
	}
	return nil
}

func (x *Reference) GetProvenanceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProvenanceId); ok {
		return x.ProvenanceId
	}
	return nil
}

func (x *Reference) GetQuestionnaireId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_QuestionnaireId); ok {
		return x.QuestionnaireId
	}
	return nil
}

func (x *Reference) GetQuestionnaireResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_QuestionnaireResponseId); ok {
		return x.QuestionnaireResponseId
	}
	return nil
}

func (x *Reference) GetReferralRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ReferralRequestId); ok {
		return x.ReferralRequestId
	}
	return nil
}

func (x *Reference) GetRelatedPersonId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RelatedPersonId); ok {
		return x.RelatedPersonId
	}
	return nil
}

func (x *Reference) GetRequestGroupId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RequestGroupId); ok {
		return x.RequestGroupId
	}
	return nil
}

func (x *Reference) GetResearchStudyId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ResearchStudyId); ok {
		return x.ResearchStudyId
	}
	return nil
}

func (x *Reference) GetResearchSubjectId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ResearchSubjectId); ok {
		return x.ResearchSubjectId
	}
	return nil
}

func (x *Reference) GetRiskAssessmentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RiskAssessmentId); ok {
		return x.RiskAssessmentId
	}
	return nil
}

func (x *Reference) GetScheduleId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ScheduleId); ok {
		return x.ScheduleId
	}
	return nil
}

func (x *Reference) GetSearchParameterId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SearchParameterId); ok {
		return x.SearchParameterId
	}
	return nil
}

func (x *Reference) GetSequenceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SequenceId); ok {
		return x.SequenceId
	}
	return nil
}

func (x *Reference) GetServiceDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ServiceDefinitionId); ok {
		return x.ServiceDefinitionId
	}
	return nil
}

func (x *Reference) GetSlotId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SlotId); ok {
		return x.SlotId
	}
	return nil
}

func (x *Reference) GetSpecimenId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SpecimenId); ok {
		return x.SpecimenId
	}
	return nil
}

func (x *Reference) GetStructureDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_StructureDefinitionId); ok {
		return x.StructureDefinitionId
	}
	return nil
}

func (x *Reference) GetStructureMapId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_StructureMapId); ok {
		return x.StructureMapId
	}
	return nil
}

func (x *Reference) GetSubscriptionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubscriptionId); ok {
		return x.SubscriptionId
	}
	return nil
}

func (x *Reference) GetSubstanceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceId); ok {
		return x.SubstanceId
	}
	return nil
}

func (x *Reference) GetSupplyDeliveryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SupplyDeliveryId); ok {
		return x.SupplyDeliveryId
	}
	return nil
}

func (x *Reference) GetSupplyRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SupplyRequestId); ok {
		return x.SupplyRequestId
	}
	return nil
}

func (x *Reference) GetTaskId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TaskId); ok {
		return x.TaskId
	}
	return nil
}

func (x *Reference) GetTestReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TestReportId); ok {
		return x.TestReportId
	}
	return nil
}

func (x *Reference) GetTestScriptId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TestScriptId); ok {
		return x.TestScriptId
	}
	return nil
}

func (x *Reference) GetValueSetId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ValueSetId); ok {
		return x.ValueSetId
	}
	return nil
}

func (x *Reference) GetVisionPrescriptionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_VisionPrescriptionId); ok {
		return x.VisionPrescriptionId
	}
	return nil
}

func (x *Reference) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Reference) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

type isReference_Reference interface {
	isReference_Reference()
}

type Reference_Uri struct {
	// Absolute URIs are untyped.
	Uri *String `protobuf:"bytes,3,opt,name=uri,json=reference,proto3,oneof"`
}

type Reference_Fragment struct {
	// Fragments (internal references) are untyped, and represented here
	// without the leading '#'.
	Fragment *String `protobuf:"bytes,4,opt,name=fragment,proto3,oneof"`
}

type Reference_AccountId struct {
	// Typed relative urls are represented here.
	AccountId *ReferenceId `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3,oneof"`
}

type Reference_ActivityDefinitionId struct {
	ActivityDefinitionId *ReferenceId `protobuf:"bytes,6,opt,name=activity_definition_id,json=activityDefinitionId,proto3,oneof"`
}

type Reference_AdverseEventId struct {
	AdverseEventId *ReferenceId `protobuf:"bytes,7,opt,name=adverse_event_id,json=adverseEventId,proto3,oneof"`
}

type Reference_AllergyIntoleranceId struct {
	AllergyIntoleranceId *ReferenceId `protobuf:"bytes,8,opt,name=allergy_intolerance_id,json=allergyIntoleranceId,proto3,oneof"`
}

type Reference_AppointmentId struct {
	AppointmentId *ReferenceId `protobuf:"bytes,9,opt,name=appointment_id,json=appointmentId,proto3,oneof"`
}

type Reference_AppointmentResponseId struct {
	AppointmentResponseId *ReferenceId `protobuf:"bytes,10,opt,name=appointment_response_id,json=appointmentResponseId,proto3,oneof"`
}

type Reference_AuditEventId struct {
	AuditEventId *ReferenceId `protobuf:"bytes,11,opt,name=audit_event_id,json=auditEventId,proto3,oneof"`
}

type Reference_BasicId struct {
	BasicId *ReferenceId `protobuf:"bytes,12,opt,name=basic_id,json=basicId,proto3,oneof"`
}

type Reference_BinaryId struct {
	BinaryId *ReferenceId `protobuf:"bytes,13,opt,name=binary_id,json=binaryId,proto3,oneof"`
}

type Reference_BodySiteId struct {
	BodySiteId *ReferenceId `protobuf:"bytes,14,opt,name=body_site_id,json=bodySiteId,proto3,oneof"`
}

type Reference_BundleId struct {
	BundleId *ReferenceId `protobuf:"bytes,15,opt,name=bundle_id,json=bundleId,proto3,oneof"`
}

type Reference_CapabilityStatementId struct {
	CapabilityStatementId *ReferenceId `protobuf:"bytes,16,opt,name=capability_statement_id,json=capabilityStatementId,proto3,oneof"`
}

type Reference_CarePlanId struct {
	CarePlanId *ReferenceId `protobuf:"bytes,17,opt,name=care_plan_id,json=carePlanId,proto3,oneof"`
}

type Reference_CareTeamId struct {
	CareTeamId *ReferenceId `protobuf:"bytes,18,opt,name=care_team_id,json=careTeamId,proto3,oneof"`
}

type Reference_ChargeItemId struct {
	ChargeItemId *ReferenceId `protobuf:"bytes,19,opt,name=charge_item_id,json=chargeItemId,proto3,oneof"`
}

type Reference_ClaimId struct {
	ClaimId *ReferenceId `protobuf:"bytes,20,opt,name=claim_id,json=claimId,proto3,oneof"`
}

type Reference_ClaimResponseId struct {
	ClaimResponseId *ReferenceId `protobuf:"bytes,21,opt,name=claim_response_id,json=claimResponseId,proto3,oneof"`
}

type Reference_ClinicalImpressionId struct {
	ClinicalImpressionId *ReferenceId `protobuf:"bytes,22,opt,name=clinical_impression_id,json=clinicalImpressionId,proto3,oneof"`
}

type Reference_CodeSystemId struct {
	CodeSystemId *ReferenceId `protobuf:"bytes,23,opt,name=code_system_id,json=codeSystemId,proto3,oneof"`
}

type Reference_CommunicationId struct {
	CommunicationId *ReferenceId `protobuf:"bytes,24,opt,name=communication_id,json=communicationId,proto3,oneof"`
}

type Reference_CommunicationRequestId struct {
	CommunicationRequestId *ReferenceId `protobuf:"bytes,25,opt,name=communication_request_id,json=communicationRequestId,proto3,oneof"`
}

type Reference_CompartmentDefinitionId struct {
	CompartmentDefinitionId *ReferenceId `protobuf:"bytes,26,opt,name=compartment_definition_id,json=compartmentDefinitionId,proto3,oneof"`
}

type Reference_CompositionId struct {
	CompositionId *ReferenceId `protobuf:"bytes,27,opt,name=composition_id,json=compositionId,proto3,oneof"`
}

type Reference_ConceptMapId struct {
	ConceptMapId *ReferenceId `protobuf:"bytes,28,opt,name=concept_map_id,json=conceptMapId,proto3,oneof"`
}

type Reference_ConditionId struct {
	ConditionId *ReferenceId `protobuf:"bytes,29,opt,name=condition_id,json=conditionId,proto3,oneof"`
}

type Reference_ConsentId struct {
	ConsentId *ReferenceId `protobuf:"bytes,30,opt,name=consent_id,json=consentId,proto3,oneof"`
}

type Reference_ContractId struct {
	ContractId *ReferenceId `protobuf:"bytes,31,opt,name=contract_id,json=contractId,proto3,oneof"`
}

type Reference_CoverageId struct {
	CoverageId *ReferenceId `protobuf:"bytes,32,opt,name=coverage_id,json=coverageId,proto3,oneof"`
}

type Reference_DataElementId struct {
	DataElementId *ReferenceId `protobuf:"bytes,33,opt,name=data_element_id,json=dataElementId,proto3,oneof"`
}

type Reference_DetectedIssueId struct {
	DetectedIssueId *ReferenceId `protobuf:"bytes,34,opt,name=detected_issue_id,json=detectedIssueId,proto3,oneof"`
}

type Reference_DeviceId struct {
	DeviceId *ReferenceId `protobuf:"bytes,35,opt,name=device_id,json=deviceId,proto3,oneof"`
}

type Reference_DeviceComponentId struct {
	DeviceComponentId *ReferenceId `protobuf:"bytes,36,opt,name=device_component_id,json=deviceComponentId,proto3,oneof"`
}

type Reference_DeviceMetricId struct {
	DeviceMetricId *ReferenceId `protobuf:"bytes,37,opt,name=device_metric_id,json=deviceMetricId,proto3,oneof"`
}

type Reference_DeviceRequestId struct {
	DeviceRequestId *ReferenceId `protobuf:"bytes,38,opt,name=device_request_id,json=deviceRequestId,proto3,oneof"`
}

type Reference_DeviceUseStatementId struct {
	DeviceUseStatementId *ReferenceId `protobuf:"bytes,39,opt,name=device_use_statement_id,json=deviceUseStatementId,proto3,oneof"`
}

type Reference_DiagnosticReportId struct {
	DiagnosticReportId *ReferenceId `protobuf:"bytes,40,opt,name=diagnostic_report_id,json=diagnosticReportId,proto3,oneof"`
}

type Reference_DocumentManifestId struct {
	DocumentManifestId *ReferenceId `protobuf:"bytes,41,opt,name=document_manifest_id,json=documentManifestId,proto3,oneof"`
}

type Reference_DocumentReferenceId struct {
	DocumentReferenceId *ReferenceId `protobuf:"bytes,42,opt,name=document_reference_id,json=documentReferenceId,proto3,oneof"`
}

type Reference_EligibilityRequestId struct {
	EligibilityRequestId *ReferenceId `protobuf:"bytes,43,opt,name=eligibility_request_id,json=eligibilityRequestId,proto3,oneof"`
}

type Reference_EligibilityResponseId struct {
	EligibilityResponseId *ReferenceId `protobuf:"bytes,44,opt,name=eligibility_response_id,json=eligibilityResponseId,proto3,oneof"`
}

type Reference_EncounterId struct {
	EncounterId *ReferenceId `protobuf:"bytes,45,opt,name=encounter_id,json=encounterId,proto3,oneof"`
}

type Reference_EndpointId struct {
	EndpointId *ReferenceId `protobuf:"bytes,46,opt,name=endpoint_id,json=endpointId,proto3,oneof"`
}

type Reference_EnrollmentRequestId struct {
	EnrollmentRequestId *ReferenceId `protobuf:"bytes,47,opt,name=enrollment_request_id,json=enrollmentRequestId,proto3,oneof"`
}

type Reference_EnrollmentResponseId struct {
	EnrollmentResponseId *ReferenceId `protobuf:"bytes,48,opt,name=enrollment_response_id,json=enrollmentResponseId,proto3,oneof"`
}

type Reference_EpisodeOfCareId struct {
	EpisodeOfCareId *ReferenceId `protobuf:"bytes,49,opt,name=episode_of_care_id,json=episodeOfCareId,proto3,oneof"`
}

type Reference_ExpansionProfileId struct {
	ExpansionProfileId *ReferenceId `protobuf:"bytes,50,opt,name=expansion_profile_id,json=expansionProfileId,proto3,oneof"`
}

type Reference_ExplanationOfBenefitId struct {
	ExplanationOfBenefitId *ReferenceId `protobuf:"bytes,51,opt,name=explanation_of_benefit_id,json=explanationOfBenefitId,proto3,oneof"`
}

type Reference_FamilyMemberHistoryId struct {
	FamilyMemberHistoryId *ReferenceId `protobuf:"bytes,52,opt,name=family_member_history_id,json=familyMemberHistoryId,proto3,oneof"`
}

type Reference_FlagId struct {
	FlagId *ReferenceId `protobuf:"bytes,53,opt,name=flag_id,json=flagId,proto3,oneof"`
}

type Reference_GoalId struct {
	GoalId *ReferenceId `protobuf:"bytes,54,opt,name=goal_id,json=goalId,proto3,oneof"`
}

type Reference_GraphDefinitionId struct {
	GraphDefinitionId *ReferenceId `protobuf:"bytes,55,opt,name=graph_definition_id,json=graphDefinitionId,proto3,oneof"`
}

type Reference_GroupId struct {
	GroupId *ReferenceId `protobuf:"bytes,56,opt,name=group_id,json=groupId,proto3,oneof"`
}

type Reference_GuidanceResponseId struct {
	GuidanceResponseId *ReferenceId `protobuf:"bytes,57,opt,name=guidance_response_id,json=guidanceResponseId,proto3,oneof"`
}

type Reference_HealthcareServiceId struct {
	HealthcareServiceId *ReferenceId `protobuf:"bytes,58,opt,name=healthcare_service_id,json=healthcareServiceId,proto3,oneof"`
}

type Reference_ImagingManifestId struct {
	ImagingManifestId *ReferenceId `protobuf:"bytes,59,opt,name=imaging_manifest_id,json=imagingManifestId,proto3,oneof"`
}

type Reference_ImagingStudyId struct {
	ImagingStudyId *ReferenceId `protobuf:"bytes,60,opt,name=imaging_study_id,json=imagingStudyId,proto3,oneof"`
}

type Reference_ImmunizationId struct {
	ImmunizationId *ReferenceId `protobuf:"bytes,61,opt,name=immunization_id,json=immunizationId,proto3,oneof"`
}

type Reference_ImmunizationRecommendationId struct {
	ImmunizationRecommendationId *ReferenceId `protobuf:"bytes,62,opt,name=immunization_recommendation_id,json=immunizationRecommendationId,proto3,oneof"`
}

type Reference_ImplementationGuideId struct {
	ImplementationGuideId *ReferenceId `protobuf:"bytes,63,opt,name=implementation_guide_id,json=implementationGuideId,proto3,oneof"`
}

type Reference_LibraryId struct {
	LibraryId *ReferenceId `protobuf:"bytes,64,opt,name=library_id,json=libraryId,proto3,oneof"`
}

type Reference_LinkageId struct {
	LinkageId *ReferenceId `protobuf:"bytes,65,opt,name=linkage_id,json=linkageId,proto3,oneof"`
}

type Reference_ListId struct {
	ListId *ReferenceId `protobuf:"bytes,66,opt,name=list_id,json=listId,proto3,oneof"`
}

type Reference_LocationId struct {
	LocationId *ReferenceId `protobuf:"bytes,67,opt,name=location_id,json=locationId,proto3,oneof"`
}

type Reference_MeasureId struct {
	MeasureId *ReferenceId `protobuf:"bytes,68,opt,name=measure_id,json=measureId,proto3,oneof"`
}

type Reference_MeasureReportId struct {
	MeasureReportId *ReferenceId `protobuf:"bytes,69,opt,name=measure_report_id,json=measureReportId,proto3,oneof"`
}

type Reference_MediaId struct {
	MediaId *ReferenceId `protobuf:"bytes,70,opt,name=media_id,json=mediaId,proto3,oneof"`
}

type Reference_MedicationId struct {
	MedicationId *ReferenceId `protobuf:"bytes,71,opt,name=medication_id,json=medicationId,proto3,oneof"`
}

type Reference_MedicationAdministrationId struct {
	MedicationAdministrationId *ReferenceId `protobuf:"bytes,72,opt,name=medication_administration_id,json=medicationAdministrationId,proto3,oneof"`
}

type Reference_MedicationDispenseId struct {
	MedicationDispenseId *ReferenceId `protobuf:"bytes,73,opt,name=medication_dispense_id,json=medicationDispenseId,proto3,oneof"`
}

type Reference_MedicationRequestId struct {
	MedicationRequestId *ReferenceId `protobuf:"bytes,74,opt,name=medication_request_id,json=medicationRequestId,proto3,oneof"`
}

type Reference_MedicationStatementId struct {
	MedicationStatementId *ReferenceId `protobuf:"bytes,75,opt,name=medication_statement_id,json=medicationStatementId,proto3,oneof"`
}

type Reference_MessageDefinitionId struct {
	MessageDefinitionId *ReferenceId `protobuf:"bytes,76,opt,name=message_definition_id,json=messageDefinitionId,proto3,oneof"`
}

type Reference_MessageHeaderId struct {
	MessageHeaderId *ReferenceId `protobuf:"bytes,77,opt,name=message_header_id,json=messageHeaderId,proto3,oneof"`
}

type Reference_NamingSystemId struct {
	NamingSystemId *ReferenceId `protobuf:"bytes,78,opt,name=naming_system_id,json=namingSystemId,proto3,oneof"`
}

type Reference_NutritionOrderId struct {
	NutritionOrderId *ReferenceId `protobuf:"bytes,79,opt,name=nutrition_order_id,json=nutritionOrderId,proto3,oneof"`
}

type Reference_ObservationId struct {
	ObservationId *ReferenceId `protobuf:"bytes,80,opt,name=observation_id,json=observationId,proto3,oneof"`
}

type Reference_OperationDefinitionId struct {
	OperationDefinitionId *ReferenceId `protobuf:"bytes,81,opt,name=operation_definition_id,json=operationDefinitionId,proto3,oneof"`
}

type Reference_OperationOutcomeId struct {
	OperationOutcomeId *ReferenceId `protobuf:"bytes,82,opt,name=operation_outcome_id,json=operationOutcomeId,proto3,oneof"`
}

type Reference_OrganizationId struct {
	OrganizationId *ReferenceId `protobuf:"bytes,83,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type Reference_ParametersId struct {
	ParametersId *ReferenceId `protobuf:"bytes,84,opt,name=parameters_id,json=parametersId,proto3,oneof"`
}

type Reference_PatientId struct {
	PatientId *ReferenceId `protobuf:"bytes,85,opt,name=patient_id,json=patientId,proto3,oneof"`
}

type Reference_PaymentNoticeId struct {
	PaymentNoticeId *ReferenceId `protobuf:"bytes,86,opt,name=payment_notice_id,json=paymentNoticeId,proto3,oneof"`
}

type Reference_PaymentReconciliationId struct {
	PaymentReconciliationId *ReferenceId `protobuf:"bytes,87,opt,name=payment_reconciliation_id,json=paymentReconciliationId,proto3,oneof"`
}

type Reference_PersonId struct {
	PersonId *ReferenceId `protobuf:"bytes,88,opt,name=person_id,json=personId,proto3,oneof"`
}

type Reference_PlanDefinitionId struct {
	PlanDefinitionId *ReferenceId `protobuf:"bytes,89,opt,name=plan_definition_id,json=planDefinitionId,proto3,oneof"`
}

type Reference_PractitionerId struct {
	PractitionerId *ReferenceId `protobuf:"bytes,90,opt,name=practitioner_id,json=practitionerId,proto3,oneof"`
}

type Reference_PractitionerRoleId struct {
	PractitionerRoleId *ReferenceId `protobuf:"bytes,91,opt,name=practitioner_role_id,json=practitionerRoleId,proto3,oneof"`
}

type Reference_ProcedureId struct {
	ProcedureId *ReferenceId `protobuf:"bytes,92,opt,name=procedure_id,json=procedureId,proto3,oneof"`
}

type Reference_ProcedureRequestId struct {
	ProcedureRequestId *ReferenceId `protobuf:"bytes,93,opt,name=procedure_request_id,json=procedureRequestId,proto3,oneof"`
}

type Reference_ProcessRequestId struct {
	ProcessRequestId *ReferenceId `protobuf:"bytes,94,opt,name=process_request_id,json=processRequestId,proto3,oneof"`
}

type Reference_ProcessResponseId struct {
	ProcessResponseId *ReferenceId `protobuf:"bytes,95,opt,name=process_response_id,json=processResponseId,proto3,oneof"`
}

type Reference_ProvenanceId struct {
	ProvenanceId *ReferenceId `protobuf:"bytes,96,opt,name=provenance_id,json=provenanceId,proto3,oneof"`
}

type Reference_QuestionnaireId struct {
	QuestionnaireId *ReferenceId `protobuf:"bytes,97,opt,name=questionnaire_id,json=questionnaireId,proto3,oneof"`
}

type Reference_QuestionnaireResponseId struct {
	QuestionnaireResponseId *ReferenceId `protobuf:"bytes,98,opt,name=questionnaire_response_id,json=questionnaireResponseId,proto3,oneof"`
}

type Reference_ReferralRequestId struct {
	ReferralRequestId *ReferenceId `protobuf:"bytes,99,opt,name=referral_request_id,json=referralRequestId,proto3,oneof"`
}

type Reference_RelatedPersonId struct {
	RelatedPersonId *ReferenceId `protobuf:"bytes,100,opt,name=related_person_id,json=relatedPersonId,proto3,oneof"`
}

type Reference_RequestGroupId struct {
	RequestGroupId *ReferenceId `protobuf:"bytes,101,opt,name=request_group_id,json=requestGroupId,proto3,oneof"`
}

type Reference_ResearchStudyId struct {
	ResearchStudyId *ReferenceId `protobuf:"bytes,102,opt,name=research_study_id,json=researchStudyId,proto3,oneof"`
}

type Reference_ResearchSubjectId struct {
	ResearchSubjectId *ReferenceId `protobuf:"bytes,103,opt,name=research_subject_id,json=researchSubjectId,proto3,oneof"`
}

type Reference_RiskAssessmentId struct {
	RiskAssessmentId *ReferenceId `protobuf:"bytes,104,opt,name=risk_assessment_id,json=riskAssessmentId,proto3,oneof"`
}

type Reference_ScheduleId struct {
	ScheduleId *ReferenceId `protobuf:"bytes,105,opt,name=schedule_id,json=scheduleId,proto3,oneof"`
}

type Reference_SearchParameterId struct {
	SearchParameterId *ReferenceId `protobuf:"bytes,106,opt,name=search_parameter_id,json=searchParameterId,proto3,oneof"`
}

type Reference_SequenceId struct {
	SequenceId *ReferenceId `protobuf:"bytes,107,opt,name=sequence_id,json=sequenceId,proto3,oneof"`
}

type Reference_ServiceDefinitionId struct {
	ServiceDefinitionId *ReferenceId `protobuf:"bytes,108,opt,name=service_definition_id,json=serviceDefinitionId,proto3,oneof"`
}

type Reference_SlotId struct {
	SlotId *ReferenceId `protobuf:"bytes,109,opt,name=slot_id,json=slotId,proto3,oneof"`
}

type Reference_SpecimenId struct {
	SpecimenId *ReferenceId `protobuf:"bytes,110,opt,name=specimen_id,json=specimenId,proto3,oneof"`
}

type Reference_StructureDefinitionId struct {
	StructureDefinitionId *ReferenceId `protobuf:"bytes,111,opt,name=structure_definition_id,json=structureDefinitionId,proto3,oneof"`
}

type Reference_StructureMapId struct {
	StructureMapId *ReferenceId `protobuf:"bytes,112,opt,name=structure_map_id,json=structureMapId,proto3,oneof"`
}

type Reference_SubscriptionId struct {
	SubscriptionId *ReferenceId `protobuf:"bytes,113,opt,name=subscription_id,json=subscriptionId,proto3,oneof"`
}

type Reference_SubstanceId struct {
	SubstanceId *ReferenceId `protobuf:"bytes,114,opt,name=substance_id,json=substanceId,proto3,oneof"`
}

type Reference_SupplyDeliveryId struct {
	SupplyDeliveryId *ReferenceId `protobuf:"bytes,115,opt,name=supply_delivery_id,json=supplyDeliveryId,proto3,oneof"`
}

type Reference_SupplyRequestId struct {
	SupplyRequestId *ReferenceId `protobuf:"bytes,116,opt,name=supply_request_id,json=supplyRequestId,proto3,oneof"`
}

type Reference_TaskId struct {
	TaskId *ReferenceId `protobuf:"bytes,117,opt,name=task_id,json=taskId,proto3,oneof"`
}

type Reference_TestReportId struct {
	TestReportId *ReferenceId `protobuf:"bytes,118,opt,name=test_report_id,json=testReportId,proto3,oneof"`
}

type Reference_TestScriptId struct {
	TestScriptId *ReferenceId `protobuf:"bytes,119,opt,name=test_script_id,json=testScriptId,proto3,oneof"`
}

type Reference_ValueSetId struct {
	ValueSetId *ReferenceId `protobuf:"bytes,120,opt,name=value_set_id,json=valueSetId,proto3,oneof"`
}

type Reference_VisionPrescriptionId struct {
	VisionPrescriptionId *ReferenceId `protobuf:"bytes,121,opt,name=vision_prescription_id,json=visionPrescriptionId,proto3,oneof"`
}

func (*Reference_Uri) isReference_Reference() {}

func (*Reference_Fragment) isReference_Reference() {}

func (*Reference_AccountId) isReference_Reference() {}

func (*Reference_ActivityDefinitionId) isReference_Reference() {}

func (*Reference_AdverseEventId) isReference_Reference() {}

func (*Reference_AllergyIntoleranceId) isReference_Reference() {}

func (*Reference_AppointmentId) isReference_Reference() {}

func (*Reference_AppointmentResponseId) isReference_Reference() {}

func (*Reference_AuditEventId) isReference_Reference() {}

func (*Reference_BasicId) isReference_Reference() {}

func (*Reference_BinaryId) isReference_Reference() {}

func (*Reference_BodySiteId) isReference_Reference() {}

func (*Reference_BundleId) isReference_Reference() {}

func (*Reference_CapabilityStatementId) isReference_Reference() {}

func (*Reference_CarePlanId) isReference_Reference() {}

func (*Reference_CareTeamId) isReference_Reference() {}

func (*Reference_ChargeItemId) isReference_Reference() {}

func (*Reference_ClaimId) isReference_Reference() {}

func (*Reference_ClaimResponseId) isReference_Reference() {}

func (*Reference_ClinicalImpressionId) isReference_Reference() {}

func (*Reference_CodeSystemId) isReference_Reference() {}

func (*Reference_CommunicationId) isReference_Reference() {}

func (*Reference_CommunicationRequestId) isReference_Reference() {}

func (*Reference_CompartmentDefinitionId) isReference_Reference() {}

func (*Reference_CompositionId) isReference_Reference() {}

func (*Reference_ConceptMapId) isReference_Reference() {}

func (*Reference_ConditionId) isReference_Reference() {}

func (*Reference_ConsentId) isReference_Reference() {}

func (*Reference_ContractId) isReference_Reference() {}

func (*Reference_CoverageId) isReference_Reference() {}

func (*Reference_DataElementId) isReference_Reference() {}

func (*Reference_DetectedIssueId) isReference_Reference() {}

func (*Reference_DeviceId) isReference_Reference() {}

func (*Reference_DeviceComponentId) isReference_Reference() {}

func (*Reference_DeviceMetricId) isReference_Reference() {}

func (*Reference_DeviceRequestId) isReference_Reference() {}

func (*Reference_DeviceUseStatementId) isReference_Reference() {}

func (*Reference_DiagnosticReportId) isReference_Reference() {}

func (*Reference_DocumentManifestId) isReference_Reference() {}

func (*Reference_DocumentReferenceId) isReference_Reference() {}

func (*Reference_EligibilityRequestId) isReference_Reference() {}

func (*Reference_EligibilityResponseId) isReference_Reference() {}

func (*Reference_EncounterId) isReference_Reference() {}

func (*Reference_EndpointId) isReference_Reference() {}

func (*Reference_EnrollmentRequestId) isReference_Reference() {}

func (*Reference_EnrollmentResponseId) isReference_Reference() {}

func (*Reference_EpisodeOfCareId) isReference_Reference() {}

func (*Reference_ExpansionProfileId) isReference_Reference() {}

func (*Reference_ExplanationOfBenefitId) isReference_Reference() {}

func (*Reference_FamilyMemberHistoryId) isReference_Reference() {}

func (*Reference_FlagId) isReference_Reference() {}

func (*Reference_GoalId) isReference_Reference() {}

func (*Reference_GraphDefinitionId) isReference_Reference() {}

func (*Reference_GroupId) isReference_Reference() {}

func (*Reference_GuidanceResponseId) isReference_Reference() {}

func (*Reference_HealthcareServiceId) isReference_Reference() {}

func (*Reference_ImagingManifestId) isReference_Reference() {}

func (*Reference_ImagingStudyId) isReference_Reference() {}

func (*Reference_ImmunizationId) isReference_Reference() {}

func (*Reference_ImmunizationRecommendationId) isReference_Reference() {}

func (*Reference_ImplementationGuideId) isReference_Reference() {}

func (*Reference_LibraryId) isReference_Reference() {}

func (*Reference_LinkageId) isReference_Reference() {}

func (*Reference_ListId) isReference_Reference() {}

func (*Reference_LocationId) isReference_Reference() {}

func (*Reference_MeasureId) isReference_Reference() {}

func (*Reference_MeasureReportId) isReference_Reference() {}

func (*Reference_MediaId) isReference_Reference() {}

func (*Reference_MedicationId) isReference_Reference() {}

func (*Reference_MedicationAdministrationId) isReference_Reference() {}

func (*Reference_MedicationDispenseId) isReference_Reference() {}

func (*Reference_MedicationRequestId) isReference_Reference() {}

func (*Reference_MedicationStatementId) isReference_Reference() {}

func (*Reference_MessageDefinitionId) isReference_Reference() {}

func (*Reference_MessageHeaderId) isReference_Reference() {}

func (*Reference_NamingSystemId) isReference_Reference() {}

func (*Reference_NutritionOrderId) isReference_Reference() {}

func (*Reference_ObservationId) isReference_Reference() {}

func (*Reference_OperationDefinitionId) isReference_Reference() {}

func (*Reference_OperationOutcomeId) isReference_Reference() {}

func (*Reference_OrganizationId) isReference_Reference() {}

func (*Reference_ParametersId) isReference_Reference() {}

func (*Reference_PatientId) isReference_Reference() {}

func (*Reference_PaymentNoticeId) isReference_Reference() {}

func (*Reference_PaymentReconciliationId) isReference_Reference() {}

func (*Reference_PersonId) isReference_Reference() {}

func (*Reference_PlanDefinitionId) isReference_Reference() {}

func (*Reference_PractitionerId) isReference_Reference() {}

func (*Reference_PractitionerRoleId) isReference_Reference() {}

func (*Reference_ProcedureId) isReference_Reference() {}

func (*Reference_ProcedureRequestId) isReference_Reference() {}

func (*Reference_ProcessRequestId) isReference_Reference() {}

func (*Reference_ProcessResponseId) isReference_Reference() {}

func (*Reference_ProvenanceId) isReference_Reference() {}

func (*Reference_QuestionnaireId) isReference_Reference() {}

func (*Reference_QuestionnaireResponseId) isReference_Reference() {}

func (*Reference_ReferralRequestId) isReference_Reference() {}

func (*Reference_RelatedPersonId) isReference_Reference() {}

func (*Reference_RequestGroupId) isReference_Reference() {}

func (*Reference_ResearchStudyId) isReference_Reference() {}

func (*Reference_ResearchSubjectId) isReference_Reference() {}

func (*Reference_RiskAssessmentId) isReference_Reference() {}

func (*Reference_ScheduleId) isReference_Reference() {}

func (*Reference_SearchParameterId) isReference_Reference() {}

func (*Reference_SequenceId) isReference_Reference() {}

func (*Reference_ServiceDefinitionId) isReference_Reference() {}

func (*Reference_SlotId) isReference_Reference() {}

func (*Reference_SpecimenId) isReference_Reference() {}

func (*Reference_StructureDefinitionId) isReference_Reference() {}

func (*Reference_StructureMapId) isReference_Reference() {}

func (*Reference_SubscriptionId) isReference_Reference() {}

func (*Reference_SubstanceId) isReference_Reference() {}

func (*Reference_SupplyDeliveryId) isReference_Reference() {}

func (*Reference_SupplyRequestId) isReference_Reference() {}

func (*Reference_TaskId) isReference_Reference() {}

func (*Reference_TestReportId) isReference_Reference() {}

func (*Reference_TestScriptId) isReference_Reference() {}

func (*Reference_ValueSetId) isReference_Reference() {}

func (*Reference_VisionPrescriptionId) isReference_Reference() {}

type ReferenceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for id
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// History version, if present.
	History *Id `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReferenceId) Reset() {
	*x = ReferenceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceId) ProtoMessage() {}

func (x *ReferenceId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceId.ProtoReflect.Descriptor instead.
func (*ReferenceId) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{45}
}

func (x *ReferenceId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReferenceId) GetHistory() *Id {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *ReferenceId) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferenceId) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of an address (physical / postal)
// See http://hl7.org/fhir/ValueSet/address-type
type AddressTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AddressTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AddressTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AddressTypeCode) Reset() {
	*x = AddressTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressTypeCode) ProtoMessage() {}

func (x *AddressTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressTypeCode.ProtoReflect.Descriptor instead.
func (*AddressTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{46}
}

func (x *AddressTypeCode) GetValue() AddressTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AddressTypeCode_INVALID_UNINITIALIZED
}

func (x *AddressTypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressTypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The use of an address
// See http://hl7.org/fhir/ValueSet/address-use
type AddressUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AddressUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.AddressUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AddressUseCode) Reset() {
	*x = AddressUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressUseCode) ProtoMessage() {}

func (x *AddressUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressUseCode.ProtoReflect.Descriptor instead.
func (*AddressUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{47}
}

func (x *AddressUseCode) GetValue() AddressUseCode_Value {
	if x != nil {
		return x.Value
	}
	return AddressUseCode_INVALID_UNINITIALIZED
}

func (x *AddressUseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressUseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Telecommunications form for contact point
// See http://hl7.org/fhir/ValueSet/contact-point-system
type ContactPointSystemCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ContactPointSystemCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContactPointSystemCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContactPointSystemCode) Reset() {
	*x = ContactPointSystemCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointSystemCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointSystemCode) ProtoMessage() {}

func (x *ContactPointSystemCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointSystemCode.ProtoReflect.Descriptor instead.
func (*ContactPointSystemCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{48}
}

func (x *ContactPointSystemCode) GetValue() ContactPointSystemCode_Value {
	if x != nil {
		return x.Value
	}
	return ContactPointSystemCode_INVALID_UNINITIALIZED
}

func (x *ContactPointSystemCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPointSystemCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Use of contact point
// See http://hl7.org/fhir/ValueSet/contact-point-use
type ContactPointUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ContactPointUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.ContactPointUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContactPointUseCode) Reset() {
	*x = ContactPointUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointUseCode) ProtoMessage() {}

func (x *ContactPointUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointUseCode.ProtoReflect.Descriptor instead.
func (*ContactPointUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{49}
}

func (x *ContactPointUseCode) GetValue() ContactPointUseCode_Value {
	if x != nil {
		return x.Value
	}
	return ContactPointUseCode_INVALID_UNINITIALIZED
}

func (x *ContactPointUseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPointUseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The days of the week.
// See http://hl7.org/fhir/ValueSet/days-of-week
type DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.DaysOfWeekCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DaysOfWeekCode) Reset() {
	*x = DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaysOfWeekCode) ProtoMessage() {}

func (x *DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{50}
}

func (x *DaysOfWeekCode) GetValue() DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (x *DaysOfWeekCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DaysOfWeekCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Real world event relating to the schedule.
// See http://hl7.org/fhir/ValueSet/event-timing
type EventTimingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value EventTimingCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.EventTimingCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EventTimingCode) Reset() {
	*x = EventTimingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimingCode) ProtoMessage() {}

func (x *EventTimingCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimingCode.ProtoReflect.Descriptor instead.
func (*EventTimingCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{51}
}

func (x *EventTimingCode) GetValue() EventTimingCode_Value {
	if x != nil {
		return x.Value
	}
	return EventTimingCode_INVALID_UNINITIALIZED
}

func (x *EventTimingCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EventTimingCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Identifies the purpose for this identifier, if known .
// See http://hl7.org/fhir/ValueSet/identifier-use
type IdentifierUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value IdentifierUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.IdentifierUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IdentifierUseCode) Reset() {
	*x = IdentifierUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierUseCode) ProtoMessage() {}

func (x *IdentifierUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierUseCode.ProtoReflect.Descriptor instead.
func (*IdentifierUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{52}
}

func (x *IdentifierUseCode) GetValue() IdentifierUseCode_Value {
	if x != nil {
		return x.Value
	}
	return IdentifierUseCode_INVALID_UNINITIALIZED
}

func (x *IdentifierUseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IdentifierUseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set includes all possible codes from BCP-47
// (http://tools.ietf.org/html/bcp47)
// See http://hl7.org/fhir/ValueSet/all-languages
type AllLanguageCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllLanguageCode) Reset() {
	*x = AllLanguageCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllLanguageCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllLanguageCode) ProtoMessage() {}

func (x *AllLanguageCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllLanguageCode.ProtoReflect.Descriptor instead.
func (*AllLanguageCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{53}
}

func (x *AllLanguageCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AllLanguageCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllLanguageCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This value set includes common codes from BCP-47
// (http://tools.ietf.org/html/bcp47)
// See http://hl7.org/fhir/ValueSet/languages
// Note: For historical reasons, this does not use an enum to represent value.
type LanguageCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LanguageCode) Reset() {
	*x = LanguageCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageCode) ProtoMessage() {}

func (x *LanguageCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageCode.ProtoReflect.Descriptor instead.
func (*LanguageCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{54}
}

func (x *LanguageCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LanguageCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LanguageCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Any valid MimeType.
// See http://www.rfc-editor.org/bcp/bcp13.txt
type MimeTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MimeTypeCode) Reset() {
	*x = MimeTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MimeTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MimeTypeCode) ProtoMessage() {}

func (x *MimeTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MimeTypeCode.ProtoReflect.Descriptor instead.
func (*MimeTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{55}
}

func (x *MimeTypeCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MimeTypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MimeTypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The use of a human name
// See http://hl7.org/fhir/ValueSet/name-use
type NameUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NameUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.NameUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NameUseCode) Reset() {
	*x = NameUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameUseCode) ProtoMessage() {}

func (x *NameUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameUseCode.ProtoReflect.Descriptor instead.
func (*NameUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{56}
}

func (x *NameUseCode) GetValue() NameUseCode_Value {
	if x != nil {
		return x.Value
	}
	return NameUseCode_INVALID_UNINITIALIZED
}

func (x *NameUseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NameUseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// How the Quantity should be understood and represented.
// See http://hl7.org/fhir/ValueSet/quantity-comparator
type QuantityComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.QuantityComparatorCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuantityComparatorCode) Reset() {
	*x = QuantityComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityComparatorCode) ProtoMessage() {}

func (x *QuantityComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityComparatorCode.ProtoReflect.Descriptor instead.
func (*QuantityComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{57}
}

func (x *QuantityComparatorCode) GetValue() QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return QuantityComparatorCode_INVALID_UNINITIALIZED
}

func (x *QuantityComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuantityComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// A unit of time (units from UCUM). See
// http://hl7.org/fhir/ValueSet/units-of-time
type UnitsOfTimeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UnitsOfTimeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.stu3.proto.UnitsOfTimeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UnitsOfTimeCode) Reset() {
	*x = UnitsOfTimeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitsOfTimeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitsOfTimeCode) ProtoMessage() {}

func (x *UnitsOfTimeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitsOfTimeCode.ProtoReflect.Descriptor instead.
func (*UnitsOfTimeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{58}
}

func (x *UnitsOfTimeCode) GetValue() UnitsOfTimeCode_Value {
	if x != nil {
		return x.Value
	}
	return UnitsOfTimeCode_INVALID_UNINITIALIZED
}

func (x *UnitsOfTimeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UnitsOfTimeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Individual responsible for the annotation
type Annotation_Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Author:
	//	*Annotation_Author_Reference
	//	*Annotation_Author_StringValue
	Author isAnnotation_Author_Author `protobuf_oneof:"author"`
}

func (x *Annotation_Author) Reset() {
	*x = Annotation_Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation_Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation_Author) ProtoMessage() {}

func (x *Annotation_Author) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation_Author.ProtoReflect.Descriptor instead.
func (*Annotation_Author) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{20, 0}
}

func (m *Annotation_Author) GetAuthor() isAnnotation_Author_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (x *Annotation_Author) GetReference() *Reference {
	if x, ok := x.GetAuthor().(*Annotation_Author_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Annotation_Author) GetStringValue() *String {
	if x, ok := x.GetAuthor().(*Annotation_Author_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isAnnotation_Author_Author interface {
	isAnnotation_Author_Author()
}

type Annotation_Author_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type Annotation_Author_StringValue struct {
	StringValue *String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*Annotation_Author_Reference) isAnnotation_Author_Author() {}

func (*Annotation_Author_StringValue) isAnnotation_Author_Author() {}

// Take "as needed" (for x)
type Dosage_AsNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsNeeded:
	//	*Dosage_AsNeeded_Boolean
	//	*Dosage_AsNeeded_CodeableConcept
	AsNeeded isDosage_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
}

func (x *Dosage_AsNeeded) Reset() {
	*x = Dosage_AsNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage_AsNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage_AsNeeded) ProtoMessage() {}

func (x *Dosage_AsNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage_AsNeeded.ProtoReflect.Descriptor instead.
func (*Dosage_AsNeeded) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{27, 0}
}

func (m *Dosage_AsNeeded) GetAsNeeded() isDosage_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (x *Dosage_AsNeeded) GetBoolean() *Boolean {
	if x, ok := x.GetAsNeeded().(*Dosage_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Dosage_AsNeeded) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetAsNeeded().(*Dosage_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isDosage_AsNeeded_AsNeeded interface {
	isDosage_AsNeeded_AsNeeded()
}

type Dosage_AsNeeded_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Dosage_AsNeeded_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*Dosage_AsNeeded_Boolean) isDosage_AsNeeded_AsNeeded() {}

func (*Dosage_AsNeeded_CodeableConcept) isDosage_AsNeeded_AsNeeded() {}

// Amount of medication per dose
type Dosage_Dose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Dose:
	//	*Dosage_Dose_Range
	//	*Dosage_Dose_Quantity
	Dose isDosage_Dose_Dose `protobuf_oneof:"dose"`
}

func (x *Dosage_Dose) Reset() {
	*x = Dosage_Dose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage_Dose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage_Dose) ProtoMessage() {}

func (x *Dosage_Dose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage_Dose.ProtoReflect.Descriptor instead.
func (*Dosage_Dose) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{27, 1}
}

func (m *Dosage_Dose) GetDose() isDosage_Dose_Dose {
	if m != nil {
		return m.Dose
	}
	return nil
}

func (x *Dosage_Dose) GetRange() *Range {
	if x, ok := x.GetDose().(*Dosage_Dose_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Dosage_Dose) GetQuantity() *SimpleQuantity {
	if x, ok := x.GetDose().(*Dosage_Dose_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isDosage_Dose_Dose interface {
	isDosage_Dose_Dose()
}

type Dosage_Dose_Range struct {
	Range *Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type Dosage_Dose_Quantity struct {
	Quantity *SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*Dosage_Dose_Range) isDosage_Dose_Dose() {}

func (*Dosage_Dose_Quantity) isDosage_Dose_Dose() {}

// Amount of medication per unit of time
type Dosage_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//	*Dosage_Rate_Ratio
	//	*Dosage_Rate_Range
	//	*Dosage_Rate_Quantity
	Rate isDosage_Rate_Rate `protobuf_oneof:"rate"`
}

func (x *Dosage_Rate) Reset() {
	*x = Dosage_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage_Rate) ProtoMessage() {}

func (x *Dosage_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage_Rate.ProtoReflect.Descriptor instead.
func (*Dosage_Rate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{27, 2}
}

func (m *Dosage_Rate) GetRate() isDosage_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *Dosage_Rate) GetRatio() *Ratio {
	if x, ok := x.GetRate().(*Dosage_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Dosage_Rate) GetRange() *Range {
	if x, ok := x.GetRate().(*Dosage_Rate_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Dosage_Rate) GetQuantity() *SimpleQuantity {
	if x, ok := x.GetRate().(*Dosage_Rate_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isDosage_Rate_Rate interface {
	isDosage_Rate_Rate()
}

type Dosage_Rate_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type Dosage_Rate_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type Dosage_Rate_Quantity struct {
	Quantity *SimpleQuantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

func (*Dosage_Rate_Ratio) isDosage_Rate_Rate() {}

func (*Dosage_Rate_Range) isDosage_Rate_Rate() {}

func (*Dosage_Rate_Quantity) isDosage_Rate_Rate() {}

// Who signed
type Signature_Who struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Who:
	//	*Signature_Who_Uri
	//	*Signature_Who_Reference
	Who isSignature_Who_Who `protobuf_oneof:"who"`
}

func (x *Signature_Who) Reset() {
	*x = Signature_Who{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature_Who) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature_Who) ProtoMessage() {}

func (x *Signature_Who) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature_Who.ProtoReflect.Descriptor instead.
func (*Signature_Who) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{38, 0}
}

func (m *Signature_Who) GetWho() isSignature_Who_Who {
	if m != nil {
		return m.Who
	}
	return nil
}

func (x *Signature_Who) GetUri() *Uri {
	if x, ok := x.GetWho().(*Signature_Who_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Signature_Who) GetReference() *Reference {
	if x, ok := x.GetWho().(*Signature_Who_Reference); ok {
		return x.Reference
	}
	return nil
}

type isSignature_Who_Who interface {
	isSignature_Who_Who()
}

type Signature_Who_Uri struct {
	Uri *Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type Signature_Who_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Signature_Who_Uri) isSignature_Who_Who() {}

func (*Signature_Who_Reference) isSignature_Who_Who() {}

// The party represented
type Signature_OnBehalfOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OnBehalfOf:
	//	*Signature_OnBehalfOf_Uri
	//	*Signature_OnBehalfOf_Reference
	OnBehalfOf isSignature_OnBehalfOf_OnBehalfOf `protobuf_oneof:"on_behalf_of"`
}

func (x *Signature_OnBehalfOf) Reset() {
	*x = Signature_OnBehalfOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature_OnBehalfOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature_OnBehalfOf) ProtoMessage() {}

func (x *Signature_OnBehalfOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature_OnBehalfOf.ProtoReflect.Descriptor instead.
func (*Signature_OnBehalfOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{38, 1}
}

func (m *Signature_OnBehalfOf) GetOnBehalfOf() isSignature_OnBehalfOf_OnBehalfOf {
	if m != nil {
		return m.OnBehalfOf
	}
	return nil
}

func (x *Signature_OnBehalfOf) GetUri() *Uri {
	if x, ok := x.GetOnBehalfOf().(*Signature_OnBehalfOf_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Signature_OnBehalfOf) GetReference() *Reference {
	if x, ok := x.GetOnBehalfOf().(*Signature_OnBehalfOf_Reference); ok {
		return x.Reference
	}
	return nil
}

type isSignature_OnBehalfOf_OnBehalfOf interface {
	isSignature_OnBehalfOf_OnBehalfOf()
}

type Signature_OnBehalfOf_Uri struct {
	Uri *Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type Signature_OnBehalfOf_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Signature_OnBehalfOf_Uri) isSignature_OnBehalfOf_OnBehalfOf() {}

func (*Signature_OnBehalfOf_Reference) isSignature_OnBehalfOf_OnBehalfOf() {}

// When the event is to occur
type Timing_Repeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension          `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Bounds    *Timing_Repeat_Bounds `protobuf:"bytes,3,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// Number of times to repeat
	Count *Integer `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	// Maximum number of times to repeat
	CountMax *Integer `protobuf:"bytes,5,opt,name=count_max,json=countMax,proto3" json:"count_max,omitempty"`
	// How long when it happens
	Duration *Decimal `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// How long when it happens (Max)
	DurationMax *Decimal `protobuf:"bytes,7,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	// s | min | h | d | wk | mo | a - unit of time (UCUM)
	DurationUnit *UnitsOfTimeCode `protobuf:"bytes,8,opt,name=duration_unit,json=durationUnit,proto3" json:"duration_unit,omitempty"`
	// Event occurs frequency times per period
	Frequency *Integer `protobuf:"bytes,9,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Event occurs up to frequencyMax times per period
	FrequencyMax *Integer `protobuf:"bytes,10,opt,name=frequency_max,json=frequencyMax,proto3" json:"frequency_max,omitempty"`
	// Event occurs frequency times per period
	Period *Decimal `protobuf:"bytes,11,opt,name=period,proto3" json:"period,omitempty"`
	// Upper limit of period (3-4 hours)
	PeriodMax *Decimal `protobuf:"bytes,12,opt,name=period_max,json=periodMax,proto3" json:"period_max,omitempty"`
	// s | min | h | d | wk | mo | a - unit of time (UCUM)
	PeriodUnit *UnitsOfTimeCode `protobuf:"bytes,13,opt,name=period_unit,json=periodUnit,proto3" json:"period_unit,omitempty"`
	// mon | tue | wed | thu | fri | sat | sun
	DayOfWeek []*DaysOfWeekCode `protobuf:"bytes,14,rep,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	// Time of day for action
	TimeOfDay []*Time `protobuf:"bytes,15,rep,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	// Regular life events the event is tied to
	When []*EventTimingCode `protobuf:"bytes,16,rep,name=when,proto3" json:"when,omitempty"`
	// Minutes from event (before or after)
	Offset *UnsignedInt `protobuf:"bytes,17,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Timing_Repeat) Reset() {
	*x = Timing_Repeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat) ProtoMessage() {}

func (x *Timing_Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat.ProtoReflect.Descriptor instead.
func (*Timing_Repeat) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{40, 0}
}

func (x *Timing_Repeat) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing_Repeat) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Timing_Repeat) GetBounds() *Timing_Repeat_Bounds {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *Timing_Repeat) GetCount() *Integer {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Timing_Repeat) GetCountMax() *Integer {
	if x != nil {
		return x.CountMax
	}
	return nil
}

func (x *Timing_Repeat) GetDuration() *Decimal {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Timing_Repeat) GetDurationMax() *Decimal {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *Timing_Repeat) GetDurationUnit() *UnitsOfTimeCode {
	if x != nil {
		return x.DurationUnit
	}
	return nil
}

func (x *Timing_Repeat) GetFrequency() *Integer {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *Timing_Repeat) GetFrequencyMax() *Integer {
	if x != nil {
		return x.FrequencyMax
	}
	return nil
}

func (x *Timing_Repeat) GetPeriod() *Decimal {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Timing_Repeat) GetPeriodMax() *Decimal {
	if x != nil {
		return x.PeriodMax
	}
	return nil
}

func (x *Timing_Repeat) GetPeriodUnit() *UnitsOfTimeCode {
	if x != nil {
		return x.PeriodUnit
	}
	return nil
}

func (x *Timing_Repeat) GetDayOfWeek() []*DaysOfWeekCode {
	if x != nil {
		return x.DayOfWeek
	}
	return nil
}

func (x *Timing_Repeat) GetTimeOfDay() []*Time {
	if x != nil {
		return x.TimeOfDay
	}
	return nil
}

func (x *Timing_Repeat) GetWhen() []*EventTimingCode {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Timing_Repeat) GetOffset() *UnsignedInt {
	if x != nil {
		return x.Offset
	}
	return nil
}

// Length/Range of lengths, or (Start and/or end) limits
type Timing_Repeat_Bounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Bounds:
	//	*Timing_Repeat_Bounds_Duration
	//	*Timing_Repeat_Bounds_Range
	//	*Timing_Repeat_Bounds_Period
	Bounds isTiming_Repeat_Bounds_Bounds `protobuf_oneof:"bounds"`
}

func (x *Timing_Repeat_Bounds) Reset() {
	*x = Timing_Repeat_Bounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat_Bounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat_Bounds) ProtoMessage() {}

func (x *Timing_Repeat_Bounds) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat_Bounds.ProtoReflect.Descriptor instead.
func (*Timing_Repeat_Bounds) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{40, 0, 0}
}

func (m *Timing_Repeat_Bounds) GetBounds() isTiming_Repeat_Bounds_Bounds {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (x *Timing_Repeat_Bounds) GetDuration() *Duration {
	if x, ok := x.GetBounds().(*Timing_Repeat_Bounds_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Timing_Repeat_Bounds) GetRange() *Range {
	if x, ok := x.GetBounds().(*Timing_Repeat_Bounds_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Timing_Repeat_Bounds) GetPeriod() *Period {
	if x, ok := x.GetBounds().(*Timing_Repeat_Bounds_Period); ok {
		return x.Period
	}
	return nil
}

type isTiming_Repeat_Bounds_Bounds interface {
	isTiming_Repeat_Bounds_Bounds()
}

type Timing_Repeat_Bounds_Duration struct {
	Duration *Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type Timing_Repeat_Bounds_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type Timing_Repeat_Bounds_Period struct {
	Period *Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

func (*Timing_Repeat_Bounds_Duration) isTiming_Repeat_Bounds_Bounds() {}

func (*Timing_Repeat_Bounds_Range) isTiming_Repeat_Bounds_Bounds() {}

func (*Timing_Repeat_Bounds_Period) isTiming_Repeat_Bounds_Bounds() {}

// Value of extension
type Extension_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Extension_ValueX_Base64Binary
	//	*Extension_ValueX_Boolean
	//	*Extension_ValueX_Code
	//	*Extension_ValueX_Date
	//	*Extension_ValueX_DateTime
	//	*Extension_ValueX_Decimal
	//	*Extension_ValueX_Id
	//	*Extension_ValueX_Instant
	//	*Extension_ValueX_Integer
	//	*Extension_ValueX_Markdown
	//	*Extension_ValueX_Oid
	//	*Extension_ValueX_PositiveInt
	//	*Extension_ValueX_StringValue
	//	*Extension_ValueX_Time
	//	*Extension_ValueX_UnsignedInt
	//	*Extension_ValueX_Uri
	//	*Extension_ValueX_Address
	//	*Extension_ValueX_Age
	//	*Extension_ValueX_Annotation
	//	*Extension_ValueX_Attachment
	//	*Extension_ValueX_CodeableConcept
	//	*Extension_ValueX_Coding
	//	*Extension_ValueX_ContactPoint
	//	*Extension_ValueX_Count
	//	*Extension_ValueX_Distance
	//	*Extension_ValueX_Duration
	//	*Extension_ValueX_HumanName
	//	*Extension_ValueX_Identifier
	//	*Extension_ValueX_Money
	//	*Extension_ValueX_Period
	//	*Extension_ValueX_Quantity
	//	*Extension_ValueX_Range
	//	*Extension_ValueX_Ratio
	//	*Extension_ValueX_Reference
	//	*Extension_ValueX_SampledData
	//	*Extension_ValueX_Signature
	//	*Extension_ValueX_Timing
	//	*Extension_ValueX_Meta
	Choice isExtension_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Extension_ValueX) Reset() {
	*x = Extension_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension_ValueX) ProtoMessage() {}

func (x *Extension_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension_ValueX.ProtoReflect.Descriptor instead.
func (*Extension_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP(), []int{41, 0}
}

func (m *Extension_ValueX) GetChoice() isExtension_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Extension_ValueX) GetBase64Binary() *Base64Binary {
	if x, ok := x.GetChoice().(*Extension_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *Extension_ValueX) GetBoolean() *Boolean {
	if x, ok := x.GetChoice().(*Extension_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Extension_ValueX) GetCode() *Code {
	if x, ok := x.GetChoice().(*Extension_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *Extension_ValueX) GetDate() *Date {
	if x, ok := x.GetChoice().(*Extension_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Extension_ValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*Extension_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Extension_ValueX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*Extension_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Extension_ValueX) GetId() *Id {
	if x, ok := x.GetChoice().(*Extension_ValueX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Extension_ValueX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*Extension_ValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *Extension_ValueX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*Extension_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Extension_ValueX) GetMarkdown() *Markdown {
	if x, ok := x.GetChoice().(*Extension_ValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *Extension_ValueX) GetOid() *Oid {
	if x, ok := x.GetChoice().(*Extension_ValueX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *Extension_ValueX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*Extension_ValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *Extension_ValueX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*Extension_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Extension_ValueX) GetTime() *Time {
	if x, ok := x.GetChoice().(*Extension_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Extension_ValueX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*Extension_ValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *Extension_ValueX) GetUri() *Uri {
	if x, ok := x.GetChoice().(*Extension_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Extension_ValueX) GetAddress() *Address {
	if x, ok := x.GetChoice().(*Extension_ValueX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Extension_ValueX) GetAge() *Age {
	if x, ok := x.GetChoice().(*Extension_ValueX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *Extension_ValueX) GetAnnotation() *Annotation {
	if x, ok := x.GetChoice().(*Extension_ValueX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *Extension_ValueX) GetAttachment() *Attachment {
	if x, ok := x.GetChoice().(*Extension_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Extension_ValueX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*Extension_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Extension_ValueX) GetCoding() *Coding {
	if x, ok := x.GetChoice().(*Extension_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Extension_ValueX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*Extension_ValueX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *Extension_ValueX) GetCount() *Count {
	if x, ok := x.GetChoice().(*Extension_ValueX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *Extension_ValueX) GetDistance() *Distance {
	if x, ok := x.GetChoice().(*Extension_ValueX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *Extension_ValueX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*Extension_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Extension_ValueX) GetHumanName() *HumanName {
	if x, ok := x.GetChoice().(*Extension_ValueX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *Extension_ValueX) GetIdentifier() *Identifier {
	if x, ok := x.GetChoice().(*Extension_ValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Extension_ValueX) GetMoney() *Money {
	if x, ok := x.GetChoice().(*Extension_ValueX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *Extension_ValueX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*Extension_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Extension_ValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*Extension_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Extension_ValueX) GetRange() *Range {
	if x, ok := x.GetChoice().(*Extension_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Extension_ValueX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*Extension_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Extension_ValueX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*Extension_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Extension_ValueX) GetSampledData() *SampledData {
	if x, ok := x.GetChoice().(*Extension_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Extension_ValueX) GetSignature() *Signature {
	if x, ok := x.GetChoice().(*Extension_ValueX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *Extension_ValueX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*Extension_ValueX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *Extension_ValueX) GetMeta() *Meta {
	if x, ok := x.GetChoice().(*Extension_ValueX_Meta); ok {
		return x.Meta
	}
	return nil
}

type isExtension_ValueX_Choice interface {
	isExtension_ValueX_Choice()
}

type Extension_ValueX_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type Extension_ValueX_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type Extension_ValueX_Code struct {
	Code *Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type Extension_ValueX_Date struct {
	Date *Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type Extension_ValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Extension_ValueX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type Extension_ValueX_Id struct {
	Id *Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type Extension_ValueX_Instant struct {
	Instant *Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type Extension_ValueX_Integer struct {
	Integer *Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type Extension_ValueX_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type Extension_ValueX_Oid struct {
	Oid *Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type Extension_ValueX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type Extension_ValueX_StringValue struct {
	StringValue *String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type Extension_ValueX_Time struct {
	Time *Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type Extension_ValueX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type Extension_ValueX_Uri struct {
	Uri *Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type Extension_ValueX_Address struct {
	Address *Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type Extension_ValueX_Age struct {
	Age *Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type Extension_ValueX_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type Extension_ValueX_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type Extension_ValueX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Extension_ValueX_Coding struct {
	Coding *Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type Extension_ValueX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type Extension_ValueX_Count struct {
	Count *Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type Extension_ValueX_Distance struct {
	Distance *Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type Extension_ValueX_Duration struct {
	Duration *Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type Extension_ValueX_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type Extension_ValueX_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type Extension_ValueX_Money struct {
	Money *Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type Extension_ValueX_Period struct {
	Period *Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type Extension_ValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type Extension_ValueX_Range struct {
	Range *Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type Extension_ValueX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type Extension_ValueX_Reference struct {
	Reference *Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type Extension_ValueX_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Extension_ValueX_Signature struct {
	Signature *Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type Extension_ValueX_Timing struct {
	Timing *Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type Extension_ValueX_Meta struct {
	Meta *Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*Extension_ValueX_Base64Binary) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Boolean) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Code) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Date) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_DateTime) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Decimal) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Id) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Instant) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Integer) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Markdown) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Oid) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_PositiveInt) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_StringValue) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Time) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_UnsignedInt) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Uri) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Address) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Age) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Annotation) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Attachment) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_CodeableConcept) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Coding) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_ContactPoint) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Count) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Distance) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Duration) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_HumanName) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Identifier) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Money) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Period) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Quantity) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Range) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Ratio) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Reference) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_SampledData) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Signature) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Timing) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Meta) isExtension_ValueX_Choice() {}

var File_proto_google_fhir_proto_stu3_datatypes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_stu3_datatypes_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xcd, 0x01, 0x0a, 0x07,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3b,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x52, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x14, 0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x2b, 0x28,
	0x5b, 0x5c, 0x73, 0x5d, 0x3f, 0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x2b, 0x29, 0x2a, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xb5, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x44, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x03, 0x3a, 0x79, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x3b, 0x2d, 0x3f, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x34, 0x7d, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b,
	0x30, 0x2d, 0x32, 0x5d, 0x29, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b,
	0x31, 0x2d, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x2d, 0x31, 0x5d,
	0x29, 0x29, 0x3f, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd4, 0x04, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x06, 0x3a, 0xe1, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x9e, 0x01, 0x2d, 0x3f, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x34, 0x7d, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b,
	0x30, 0x2d, 0x32, 0x5d, 0x29, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b,
	0x31, 0x2d, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x2d, 0x31, 0x5d,
	0x29, 0x28, 0x54, 0x28, 0x5b, 0x30, 0x31, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x5b,
	0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5c, 0x2e, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x3f, 0x28, 0x5a, 0x7c, 0x28, 0x5c, 0x2b, 0x7c, 0x2d, 0x29, 0x28,
	0x28, 0x30, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a,
	0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x34, 0x3a, 0x30, 0x30,
	0x29, 0x29, 0x29, 0x3f, 0x29, 0x3f, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf3,
	0x01, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x61, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x20, 0x2d,
	0x3f, 0x28, 0x5b, 0x30, 0x5d, 0x7c, 0x28, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x2a, 0x29, 0x29, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x29, 0x3f, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x22, 0xde, 0x01, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x51, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x15,
	0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x7b,
	0x31, 0x2c, 0x36, 0x34, 0x7d, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43, 0x52, 0x4f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x56, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x15, 0x2d, 0x3f, 0x28, 0x5b, 0x30, 0x5d, 0x7c, 0x28, 0x5b, 0x31,
	0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x29, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x22, 0xcf, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x03, 0x4f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x2b, 0x75,
	0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x28, 0x30, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x28, 0x5c, 0x2e, 0x28, 0x30, 0x7c, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x29, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x69, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x0b,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x50, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x0b,
	0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0xa1, 0x03, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x10, 0x03, 0x3a, 0x71, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06,
	0x33, 0x28, 0x5b, 0x30, 0x31, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x5b, 0x30, 0x2d,
	0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x3a, 0x5b,
	0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x2b, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x56, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x11, 0x5b, 0x30, 0x5d, 0x7c, 0x28,
	0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x03, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x72, 0x69, 0x22, 0x93, 0x02,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x83, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x45, 0x75, 0x72, 0x6e, 0x3a,
	0x75, 0x75, 0x69, 0x64, 0x3a, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x31, 0x32,
	0x7d, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x58, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x1c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x39, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xef, 0x05, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03,
	0x75, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd1,
	0x03, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41,
	0x67, 0x65, 0x22, 0xc6, 0x04, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xd1, 0x01, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x75, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x05, 0x0a, 0x0a,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x37, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x22, 0xd6, 0x03, 0x0a,
	0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xef, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x03, 0x75, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x36, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xd5, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xdb, 0x03, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xac, 0x0d,
	0x0a, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52,
	0x08, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x44, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x65, 0x0a,
	0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x44,
	0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x44, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x4e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x93, 0x01,
	0x0a, 0x04, 0x44, 0x6f, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x64,
	0x6f, 0x73, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x03, 0x0a,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3c, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x04, 0x0a, 0x09, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x04, 0x0a, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x03, 0x75, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd5, 0x03, 0x0a, 0x04, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0xd5, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x39,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xa1, 0x02, 0x0a, 0x06, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xdb, 0x03,
	0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x02, 0x0a, 0x05,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x3a, 0x39, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x22, 0x8e, 0x05, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x94, 0x08, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x03, 0x77, 0x68,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x57, 0x68, 0x6f, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x4e, 0x0a, 0x0c, 0x6f,
	0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x52,
	0x0a, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x12, 0x47, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x1a, 0xdb,
	0x01, 0x0a, 0x03, 0x57, 0x68, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x1a, 0xeb, 0x01, 0x0a,
	0x0a, 0x4f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x12, 0x2f, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x93, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x78, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22,
	0xb8, 0x10, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0xef, 0x03, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x42, 0xaf, 0x03, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x52, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x77, 0x68, 0x65, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x28, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x28, 0x27, 0x43, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x43, 0x4d, 0x27, 0x20, 0x7c,
	0x20, 0x27, 0x43, 0x44, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x43, 0x56, 0x27, 0x29, 0x29, 0x2e, 0x6e,
	0x6f, 0x74, 0x28, 0x29, 0x29, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x23, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x28, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x22, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x78, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x29, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x25, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x27, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x06, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x99, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x4c, 0x0a, 0x0d, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x48, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x46, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x1a, 0xcb, 0x01, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x3a, 0x3a,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x15, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0xd1, 0x12, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x4b, 0x0a, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3e,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3b, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x03, 0x0a, 0x15, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x2e, 0x63, 0x6f, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xc7, 0x03,
	0x0a, 0x13, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x2e, 0x63, 0x6f, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xb7, 0x61, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x75, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x41, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x05, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x06, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x57, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x0c, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x17,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x57, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61,
	0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x75,
	0x0a, 0x16, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x1a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x1b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x11, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x76, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x15, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x75, 0x0a,
	0x16, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x17, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x13, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x59,
	0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x72, 0x0a, 0x15, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x16, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1a,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x18, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x15, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x0f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x69, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0f,
	0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x20,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1c, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x78, 0x0a, 0x17, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07,
	0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x56, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x66, 0x0a,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1e,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x16,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x72, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x10, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x69, 0x0a, 0x12, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5f, 0x0a,
	0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x78,
	0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x66, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x1b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x0c, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x12, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x09, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x5d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x6c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x65, 0x0a,
	0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x19, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1b, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x66, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x66, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x0f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x12, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x56, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x72,
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04,
	0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x56,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x63, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x66, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x64, 0x12, 0x57, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x16, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
	0x4b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x8a, 0xa1, 0x96, 0xbc, 0x05, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x06, 0xb0, 0xee, 0x92, 0xb2, 0x06,
	0x01, 0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x06,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x46, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xc6, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x44,
	0x10, 0x04, 0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x69, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x41, 0x58, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xe2, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x10, 0x05, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x22,
	0xdf, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f,
	0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x45, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48, 0x55, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x54, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x07, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65,
	0x6b, 0x22, 0x97, 0x05, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x03, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x04, 0x4d, 0x4f, 0x52, 0x4e, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4d, 0x4f, 0x52, 0x4e, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x46, 0x54, 0x10, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x46, 0x54, 0x12, 0x12, 0x0a, 0x03, 0x45, 0x56,
	0x45, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x56, 0x45, 0x12, 0x16,
	0x0a, 0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x48, 0x53, 0x10, 0x05, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x48, 0x53, 0x12, 0x10, 0x0a, 0x02, 0x48, 0x53,
	0x10, 0x06, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x53, 0x12, 0x14, 0x0a, 0x04,
	0x57, 0x41, 0x4b, 0x45, 0x10, 0x07, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x57, 0x41,
	0x4b, 0x45, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x08, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x01, 0x43, 0x12, 0x10, 0x0a, 0x02, 0x43, 0x4d, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x43, 0x4d, 0x12, 0x10, 0x0a, 0x02, 0x43, 0x44, 0x10, 0x0a, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x43, 0x44, 0x12, 0x10, 0x0a, 0x02, 0x43, 0x56, 0x10, 0x0b, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x56, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x43, 0x10, 0x0c,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x43,
	0x4d, 0x10, 0x0d, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x43, 0x4d, 0x12, 0x12,
	0x0a, 0x03, 0x41, 0x43, 0x44, 0x10, 0x0e, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41,
	0x43, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x43, 0x56, 0x10, 0x0f, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x41, 0x43, 0x56, 0x12, 0x10, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x10, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x43, 0x4d, 0x10,
	0x11, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x4d, 0x12, 0x12, 0x0a, 0x03,
	0x50, 0x43, 0x44, 0x10, 0x12, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x44,
	0x12, 0x12, 0x0a, 0x03, 0x50, 0x43, 0x56, 0x10, 0x13, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x50, 0x43, 0x56, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xda, 0x02, 0x0a, 0x11,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x04, 0x3a,
	0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c,
	0x6c, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x72, 0x66, 0x63, 0x2d, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x62, 0x63, 0x70, 0x2f, 0x62, 0x63, 0x70, 0x31, 0x33,
	0x2e, 0x74, 0x78, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53,
	0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4c,
	0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x49, 0x44, 0x45, 0x4e, 0x10, 0x07, 0x3a,
	0x31, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x25, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x75,
	0x73, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x02, 0x4c, 0x54, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3c, 0x12,
	0x10, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x3c,
	0x3d, 0x12, 0x10, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x3e, 0x3d, 0x12, 0x0f, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x3e, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xd8, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x4f, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x05, 0x0a, 0x01, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x05, 0x0a, 0x01, 0x48, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10, 0x04, 0x12, 0x06,
	0x0a, 0x02, 0x57, 0x4b, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x4f, 0x10, 0x06, 0x12, 0x05,
	0x0a, 0x01, 0x41, 0x10, 0x07, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x02, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescData = file_proto_google_fhir_proto_stu3_datatypes_proto_rawDesc
)

func file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_stu3_datatypes_proto_rawDescData
}

var file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_proto_google_fhir_proto_stu3_datatypes_proto_goTypes = []interface{}{
	(Date_Precision)(0),               // 0: google.fhir.stu3.proto.Date.Precision
	(DateTime_Precision)(0),           // 1: google.fhir.stu3.proto.DateTime.Precision
	(Instant_Precision)(0),            // 2: google.fhir.stu3.proto.Instant.Precision
	(Time_Precision)(0),               // 3: google.fhir.stu3.proto.Time.Precision
	(AddressTypeCode_Value)(0),        // 4: google.fhir.stu3.proto.AddressTypeCode.Value
	(AddressUseCode_Value)(0),         // 5: google.fhir.stu3.proto.AddressUseCode.Value
	(ContactPointSystemCode_Value)(0), // 6: google.fhir.stu3.proto.ContactPointSystemCode.Value
	(ContactPointUseCode_Value)(0),    // 7: google.fhir.stu3.proto.ContactPointUseCode.Value
	(DaysOfWeekCode_Value)(0),         // 8: google.fhir.stu3.proto.DaysOfWeekCode.Value
	(EventTimingCode_Value)(0),        // 9: google.fhir.stu3.proto.EventTimingCode.Value
	(IdentifierUseCode_Value)(0),      // 10: google.fhir.stu3.proto.IdentifierUseCode.Value
	(NameUseCode_Value)(0),            // 11: google.fhir.stu3.proto.NameUseCode.Value
	(QuantityComparatorCode_Value)(0), // 12: google.fhir.stu3.proto.QuantityComparatorCode.Value
	(UnitsOfTimeCode_Value)(0),        // 13: google.fhir.stu3.proto.UnitsOfTimeCode.Value
	(*Base64Binary)(nil),              // 14: google.fhir.stu3.proto.Base64Binary
	(*Boolean)(nil),                   // 15: google.fhir.stu3.proto.Boolean
	(*Code)(nil),                      // 16: google.fhir.stu3.proto.Code
	(*Date)(nil),                      // 17: google.fhir.stu3.proto.Date
	(*DateTime)(nil),                  // 18: google.fhir.stu3.proto.DateTime
	(*Decimal)(nil),                   // 19: google.fhir.stu3.proto.Decimal
	(*Id)(nil),                        // 20: google.fhir.stu3.proto.Id
	(*Instant)(nil),                   // 21: google.fhir.stu3.proto.Instant
	(*Integer)(nil),                   // 22: google.fhir.stu3.proto.Integer
	(*Markdown)(nil),                  // 23: google.fhir.stu3.proto.Markdown
	(*Oid)(nil),                       // 24: google.fhir.stu3.proto.Oid
	(*PositiveInt)(nil),               // 25: google.fhir.stu3.proto.PositiveInt
	(*String)(nil),                    // 26: google.fhir.stu3.proto.String
	(*Time)(nil),                      // 27: google.fhir.stu3.proto.Time
	(*UnsignedInt)(nil),               // 28: google.fhir.stu3.proto.UnsignedInt
	(*Uri)(nil),                       // 29: google.fhir.stu3.proto.Uri
	(*Uuid)(nil),                      // 30: google.fhir.stu3.proto.Uuid
	(*Xhtml)(nil),                     // 31: google.fhir.stu3.proto.Xhtml
	(*Address)(nil),                   // 32: google.fhir.stu3.proto.Address
	(*Age)(nil),                       // 33: google.fhir.stu3.proto.Age
	(*Annotation)(nil),                // 34: google.fhir.stu3.proto.Annotation
	(*Attachment)(nil),                // 35: google.fhir.stu3.proto.Attachment
	(*CodeableConcept)(nil),           // 36: google.fhir.stu3.proto.CodeableConcept
	(*Coding)(nil),                    // 37: google.fhir.stu3.proto.Coding
	(*ContactPoint)(nil),              // 38: google.fhir.stu3.proto.ContactPoint
	(*Count)(nil),                     // 39: google.fhir.stu3.proto.Count
	(*Distance)(nil),                  // 40: google.fhir.stu3.proto.Distance
	(*Dosage)(nil),                    // 41: google.fhir.stu3.proto.Dosage
	(*Duration)(nil),                  // 42: google.fhir.stu3.proto.Duration
	(*HumanName)(nil),                 // 43: google.fhir.stu3.proto.HumanName
	(*Identifier)(nil),                // 44: google.fhir.stu3.proto.Identifier
	(*Meta)(nil),                      // 45: google.fhir.stu3.proto.Meta
	(*Money)(nil),                     // 46: google.fhir.stu3.proto.Money
	(*Period)(nil),                    // 47: google.fhir.stu3.proto.Period
	(*Quantity)(nil),                  // 48: google.fhir.stu3.proto.Quantity
	(*Range)(nil),                     // 49: google.fhir.stu3.proto.Range
	(*Ratio)(nil),                     // 50: google.fhir.stu3.proto.Ratio
	(*SampledData)(nil),               // 51: google.fhir.stu3.proto.SampledData
	(*Signature)(nil),                 // 52: google.fhir.stu3.proto.Signature
	(*SimpleQuantity)(nil),            // 53: google.fhir.stu3.proto.SimpleQuantity
	(*Timing)(nil),                    // 54: google.fhir.stu3.proto.Timing
	(*Extension)(nil),                 // 55: google.fhir.stu3.proto.Extension
	(*CodingWithFixedSystem)(nil),     // 56: google.fhir.stu3.proto.CodingWithFixedSystem
	(*CodingWithFixedCode)(nil),       // 57: google.fhir.stu3.proto.CodingWithFixedCode
	(*Reference)(nil),                 // 58: google.fhir.stu3.proto.Reference
	(*ReferenceId)(nil),               // 59: google.fhir.stu3.proto.ReferenceId
	(*AddressTypeCode)(nil),           // 60: google.fhir.stu3.proto.AddressTypeCode
	(*AddressUseCode)(nil),            // 61: google.fhir.stu3.proto.AddressUseCode
	(*ContactPointSystemCode)(nil),    // 62: google.fhir.stu3.proto.ContactPointSystemCode
	(*ContactPointUseCode)(nil),       // 63: google.fhir.stu3.proto.ContactPointUseCode
	(*DaysOfWeekCode)(nil),            // 64: google.fhir.stu3.proto.DaysOfWeekCode
	(*EventTimingCode)(nil),           // 65: google.fhir.stu3.proto.EventTimingCode
	(*IdentifierUseCode)(nil),         // 66: google.fhir.stu3.proto.IdentifierUseCode
	(*AllLanguageCode)(nil),           // 67: google.fhir.stu3.proto.AllLanguageCode
	(*LanguageCode)(nil),              // 68: google.fhir.stu3.proto.LanguageCode
	(*MimeTypeCode)(nil),              // 69: google.fhir.stu3.proto.MimeTypeCode
	(*NameUseCode)(nil),               // 70: google.fhir.stu3.proto.NameUseCode
	(*QuantityComparatorCode)(nil),    // 71: google.fhir.stu3.proto.QuantityComparatorCode
	(*UnitsOfTimeCode)(nil),           // 72: google.fhir.stu3.proto.UnitsOfTimeCode
	(*Annotation_Author)(nil),         // 73: google.fhir.stu3.proto.Annotation.Author
	(*Dosage_AsNeeded)(nil),           // 74: google.fhir.stu3.proto.Dosage.AsNeeded
	(*Dosage_Dose)(nil),               // 75: google.fhir.stu3.proto.Dosage.Dose
	(*Dosage_Rate)(nil),               // 76: google.fhir.stu3.proto.Dosage.Rate
	(*Signature_Who)(nil),             // 77: google.fhir.stu3.proto.Signature.Who
	(*Signature_OnBehalfOf)(nil),      // 78: google.fhir.stu3.proto.Signature.OnBehalfOf
	(*Timing_Repeat)(nil),             // 79: google.fhir.stu3.proto.Timing.Repeat
	(*Timing_Repeat_Bounds)(nil),      // 80: google.fhir.stu3.proto.Timing.Repeat.Bounds
	(*Extension_ValueX)(nil),          // 81: google.fhir.stu3.proto.Extension.ValueX
}
var file_proto_google_fhir_proto_stu3_datatypes_proto_depIdxs = []int32{
	26,  // 0: google.fhir.stu3.proto.Base64Binary.id:type_name -> google.fhir.stu3.proto.String
	55,  // 1: google.fhir.stu3.proto.Base64Binary.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 2: google.fhir.stu3.proto.Boolean.id:type_name -> google.fhir.stu3.proto.String
	55,  // 3: google.fhir.stu3.proto.Boolean.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 4: google.fhir.stu3.proto.Code.id:type_name -> google.fhir.stu3.proto.String
	55,  // 5: google.fhir.stu3.proto.Code.extension:type_name -> google.fhir.stu3.proto.Extension
	0,   // 6: google.fhir.stu3.proto.Date.precision:type_name -> google.fhir.stu3.proto.Date.Precision
	26,  // 7: google.fhir.stu3.proto.Date.id:type_name -> google.fhir.stu3.proto.String
	55,  // 8: google.fhir.stu3.proto.Date.extension:type_name -> google.fhir.stu3.proto.Extension
	1,   // 9: google.fhir.stu3.proto.DateTime.precision:type_name -> google.fhir.stu3.proto.DateTime.Precision
	26,  // 10: google.fhir.stu3.proto.DateTime.id:type_name -> google.fhir.stu3.proto.String
	55,  // 11: google.fhir.stu3.proto.DateTime.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 12: google.fhir.stu3.proto.Decimal.id:type_name -> google.fhir.stu3.proto.String
	55,  // 13: google.fhir.stu3.proto.Decimal.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 14: google.fhir.stu3.proto.Id.id:type_name -> google.fhir.stu3.proto.String
	55,  // 15: google.fhir.stu3.proto.Id.extension:type_name -> google.fhir.stu3.proto.Extension
	2,   // 16: google.fhir.stu3.proto.Instant.precision:type_name -> google.fhir.stu3.proto.Instant.Precision
	26,  // 17: google.fhir.stu3.proto.Instant.id:type_name -> google.fhir.stu3.proto.String
	55,  // 18: google.fhir.stu3.proto.Instant.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 19: google.fhir.stu3.proto.Integer.id:type_name -> google.fhir.stu3.proto.String
	55,  // 20: google.fhir.stu3.proto.Integer.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 21: google.fhir.stu3.proto.Markdown.id:type_name -> google.fhir.stu3.proto.String
	55,  // 22: google.fhir.stu3.proto.Markdown.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 23: google.fhir.stu3.proto.Oid.id:type_name -> google.fhir.stu3.proto.String
	55,  // 24: google.fhir.stu3.proto.Oid.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 25: google.fhir.stu3.proto.PositiveInt.id:type_name -> google.fhir.stu3.proto.String
	55,  // 26: google.fhir.stu3.proto.PositiveInt.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 27: google.fhir.stu3.proto.String.id:type_name -> google.fhir.stu3.proto.String
	55,  // 28: google.fhir.stu3.proto.String.extension:type_name -> google.fhir.stu3.proto.Extension
	3,   // 29: google.fhir.stu3.proto.Time.precision:type_name -> google.fhir.stu3.proto.Time.Precision
	26,  // 30: google.fhir.stu3.proto.Time.id:type_name -> google.fhir.stu3.proto.String
	55,  // 31: google.fhir.stu3.proto.Time.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 32: google.fhir.stu3.proto.UnsignedInt.id:type_name -> google.fhir.stu3.proto.String
	55,  // 33: google.fhir.stu3.proto.UnsignedInt.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 34: google.fhir.stu3.proto.Uri.id:type_name -> google.fhir.stu3.proto.String
	55,  // 35: google.fhir.stu3.proto.Uri.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 36: google.fhir.stu3.proto.Uuid.id:type_name -> google.fhir.stu3.proto.String
	55,  // 37: google.fhir.stu3.proto.Uuid.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 38: google.fhir.stu3.proto.Xhtml.id:type_name -> google.fhir.stu3.proto.String
	26,  // 39: google.fhir.stu3.proto.Address.id:type_name -> google.fhir.stu3.proto.String
	55,  // 40: google.fhir.stu3.proto.Address.extension:type_name -> google.fhir.stu3.proto.Extension
	61,  // 41: google.fhir.stu3.proto.Address.use:type_name -> google.fhir.stu3.proto.AddressUseCode
	60,  // 42: google.fhir.stu3.proto.Address.type:type_name -> google.fhir.stu3.proto.AddressTypeCode
	26,  // 43: google.fhir.stu3.proto.Address.text:type_name -> google.fhir.stu3.proto.String
	26,  // 44: google.fhir.stu3.proto.Address.line:type_name -> google.fhir.stu3.proto.String
	26,  // 45: google.fhir.stu3.proto.Address.city:type_name -> google.fhir.stu3.proto.String
	26,  // 46: google.fhir.stu3.proto.Address.district:type_name -> google.fhir.stu3.proto.String
	26,  // 47: google.fhir.stu3.proto.Address.state:type_name -> google.fhir.stu3.proto.String
	26,  // 48: google.fhir.stu3.proto.Address.postal_code:type_name -> google.fhir.stu3.proto.String
	26,  // 49: google.fhir.stu3.proto.Address.country:type_name -> google.fhir.stu3.proto.String
	47,  // 50: google.fhir.stu3.proto.Address.period:type_name -> google.fhir.stu3.proto.Period
	26,  // 51: google.fhir.stu3.proto.Age.id:type_name -> google.fhir.stu3.proto.String
	55,  // 52: google.fhir.stu3.proto.Age.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 53: google.fhir.stu3.proto.Age.value:type_name -> google.fhir.stu3.proto.Decimal
	71,  // 54: google.fhir.stu3.proto.Age.comparator:type_name -> google.fhir.stu3.proto.QuantityComparatorCode
	26,  // 55: google.fhir.stu3.proto.Age.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 56: google.fhir.stu3.proto.Age.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 57: google.fhir.stu3.proto.Age.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 58: google.fhir.stu3.proto.Annotation.id:type_name -> google.fhir.stu3.proto.String
	55,  // 59: google.fhir.stu3.proto.Annotation.extension:type_name -> google.fhir.stu3.proto.Extension
	73,  // 60: google.fhir.stu3.proto.Annotation.author:type_name -> google.fhir.stu3.proto.Annotation.Author
	18,  // 61: google.fhir.stu3.proto.Annotation.time:type_name -> google.fhir.stu3.proto.DateTime
	26,  // 62: google.fhir.stu3.proto.Annotation.text:type_name -> google.fhir.stu3.proto.String
	26,  // 63: google.fhir.stu3.proto.Attachment.id:type_name -> google.fhir.stu3.proto.String
	55,  // 64: google.fhir.stu3.proto.Attachment.extension:type_name -> google.fhir.stu3.proto.Extension
	69,  // 65: google.fhir.stu3.proto.Attachment.content_type:type_name -> google.fhir.stu3.proto.MimeTypeCode
	68,  // 66: google.fhir.stu3.proto.Attachment.language:type_name -> google.fhir.stu3.proto.LanguageCode
	14,  // 67: google.fhir.stu3.proto.Attachment.data:type_name -> google.fhir.stu3.proto.Base64Binary
	29,  // 68: google.fhir.stu3.proto.Attachment.url:type_name -> google.fhir.stu3.proto.Uri
	28,  // 69: google.fhir.stu3.proto.Attachment.size:type_name -> google.fhir.stu3.proto.UnsignedInt
	14,  // 70: google.fhir.stu3.proto.Attachment.hash:type_name -> google.fhir.stu3.proto.Base64Binary
	26,  // 71: google.fhir.stu3.proto.Attachment.title:type_name -> google.fhir.stu3.proto.String
	18,  // 72: google.fhir.stu3.proto.Attachment.creation:type_name -> google.fhir.stu3.proto.DateTime
	26,  // 73: google.fhir.stu3.proto.CodeableConcept.id:type_name -> google.fhir.stu3.proto.String
	55,  // 74: google.fhir.stu3.proto.CodeableConcept.extension:type_name -> google.fhir.stu3.proto.Extension
	37,  // 75: google.fhir.stu3.proto.CodeableConcept.coding:type_name -> google.fhir.stu3.proto.Coding
	26,  // 76: google.fhir.stu3.proto.CodeableConcept.text:type_name -> google.fhir.stu3.proto.String
	26,  // 77: google.fhir.stu3.proto.Coding.id:type_name -> google.fhir.stu3.proto.String
	55,  // 78: google.fhir.stu3.proto.Coding.extension:type_name -> google.fhir.stu3.proto.Extension
	29,  // 79: google.fhir.stu3.proto.Coding.system:type_name -> google.fhir.stu3.proto.Uri
	26,  // 80: google.fhir.stu3.proto.Coding.version:type_name -> google.fhir.stu3.proto.String
	16,  // 81: google.fhir.stu3.proto.Coding.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 82: google.fhir.stu3.proto.Coding.display:type_name -> google.fhir.stu3.proto.String
	15,  // 83: google.fhir.stu3.proto.Coding.user_selected:type_name -> google.fhir.stu3.proto.Boolean
	26,  // 84: google.fhir.stu3.proto.ContactPoint.id:type_name -> google.fhir.stu3.proto.String
	55,  // 85: google.fhir.stu3.proto.ContactPoint.extension:type_name -> google.fhir.stu3.proto.Extension
	62,  // 86: google.fhir.stu3.proto.ContactPoint.system:type_name -> google.fhir.stu3.proto.ContactPointSystemCode
	26,  // 87: google.fhir.stu3.proto.ContactPoint.value:type_name -> google.fhir.stu3.proto.String
	63,  // 88: google.fhir.stu3.proto.ContactPoint.use:type_name -> google.fhir.stu3.proto.ContactPointUseCode
	25,  // 89: google.fhir.stu3.proto.ContactPoint.rank:type_name -> google.fhir.stu3.proto.PositiveInt
	47,  // 90: google.fhir.stu3.proto.ContactPoint.period:type_name -> google.fhir.stu3.proto.Period
	26,  // 91: google.fhir.stu3.proto.Count.id:type_name -> google.fhir.stu3.proto.String
	55,  // 92: google.fhir.stu3.proto.Count.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 93: google.fhir.stu3.proto.Count.value:type_name -> google.fhir.stu3.proto.Decimal
	71,  // 94: google.fhir.stu3.proto.Count.comparator:type_name -> google.fhir.stu3.proto.QuantityComparatorCode
	26,  // 95: google.fhir.stu3.proto.Count.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 96: google.fhir.stu3.proto.Count.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 97: google.fhir.stu3.proto.Count.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 98: google.fhir.stu3.proto.Distance.id:type_name -> google.fhir.stu3.proto.String
	55,  // 99: google.fhir.stu3.proto.Distance.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 100: google.fhir.stu3.proto.Distance.value:type_name -> google.fhir.stu3.proto.Decimal
	71,  // 101: google.fhir.stu3.proto.Distance.comparator:type_name -> google.fhir.stu3.proto.QuantityComparatorCode
	26,  // 102: google.fhir.stu3.proto.Distance.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 103: google.fhir.stu3.proto.Distance.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 104: google.fhir.stu3.proto.Distance.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 105: google.fhir.stu3.proto.Dosage.id:type_name -> google.fhir.stu3.proto.String
	55,  // 106: google.fhir.stu3.proto.Dosage.extension:type_name -> google.fhir.stu3.proto.Extension
	22,  // 107: google.fhir.stu3.proto.Dosage.sequence:type_name -> google.fhir.stu3.proto.Integer
	26,  // 108: google.fhir.stu3.proto.Dosage.text:type_name -> google.fhir.stu3.proto.String
	36,  // 109: google.fhir.stu3.proto.Dosage.additional_instruction:type_name -> google.fhir.stu3.proto.CodeableConcept
	26,  // 110: google.fhir.stu3.proto.Dosage.patient_instruction:type_name -> google.fhir.stu3.proto.String
	54,  // 111: google.fhir.stu3.proto.Dosage.timing:type_name -> google.fhir.stu3.proto.Timing
	74,  // 112: google.fhir.stu3.proto.Dosage.as_needed:type_name -> google.fhir.stu3.proto.Dosage.AsNeeded
	36,  // 113: google.fhir.stu3.proto.Dosage.site:type_name -> google.fhir.stu3.proto.CodeableConcept
	36,  // 114: google.fhir.stu3.proto.Dosage.route:type_name -> google.fhir.stu3.proto.CodeableConcept
	36,  // 115: google.fhir.stu3.proto.Dosage.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	75,  // 116: google.fhir.stu3.proto.Dosage.dose:type_name -> google.fhir.stu3.proto.Dosage.Dose
	50,  // 117: google.fhir.stu3.proto.Dosage.max_dose_per_period:type_name -> google.fhir.stu3.proto.Ratio
	53,  // 118: google.fhir.stu3.proto.Dosage.max_dose_per_administration:type_name -> google.fhir.stu3.proto.SimpleQuantity
	53,  // 119: google.fhir.stu3.proto.Dosage.max_dose_per_lifetime:type_name -> google.fhir.stu3.proto.SimpleQuantity
	76,  // 120: google.fhir.stu3.proto.Dosage.rate:type_name -> google.fhir.stu3.proto.Dosage.Rate
	26,  // 121: google.fhir.stu3.proto.Duration.id:type_name -> google.fhir.stu3.proto.String
	55,  // 122: google.fhir.stu3.proto.Duration.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 123: google.fhir.stu3.proto.Duration.value:type_name -> google.fhir.stu3.proto.Decimal
	71,  // 124: google.fhir.stu3.proto.Duration.comparator:type_name -> google.fhir.stu3.proto.QuantityComparatorCode
	26,  // 125: google.fhir.stu3.proto.Duration.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 126: google.fhir.stu3.proto.Duration.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 127: google.fhir.stu3.proto.Duration.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 128: google.fhir.stu3.proto.HumanName.id:type_name -> google.fhir.stu3.proto.String
	55,  // 129: google.fhir.stu3.proto.HumanName.extension:type_name -> google.fhir.stu3.proto.Extension
	70,  // 130: google.fhir.stu3.proto.HumanName.use:type_name -> google.fhir.stu3.proto.NameUseCode
	26,  // 131: google.fhir.stu3.proto.HumanName.text:type_name -> google.fhir.stu3.proto.String
	26,  // 132: google.fhir.stu3.proto.HumanName.family:type_name -> google.fhir.stu3.proto.String
	26,  // 133: google.fhir.stu3.proto.HumanName.given:type_name -> google.fhir.stu3.proto.String
	26,  // 134: google.fhir.stu3.proto.HumanName.prefix:type_name -> google.fhir.stu3.proto.String
	26,  // 135: google.fhir.stu3.proto.HumanName.suffix:type_name -> google.fhir.stu3.proto.String
	47,  // 136: google.fhir.stu3.proto.HumanName.period:type_name -> google.fhir.stu3.proto.Period
	26,  // 137: google.fhir.stu3.proto.Identifier.id:type_name -> google.fhir.stu3.proto.String
	55,  // 138: google.fhir.stu3.proto.Identifier.extension:type_name -> google.fhir.stu3.proto.Extension
	66,  // 139: google.fhir.stu3.proto.Identifier.use:type_name -> google.fhir.stu3.proto.IdentifierUseCode
	36,  // 140: google.fhir.stu3.proto.Identifier.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	29,  // 141: google.fhir.stu3.proto.Identifier.system:type_name -> google.fhir.stu3.proto.Uri
	26,  // 142: google.fhir.stu3.proto.Identifier.value:type_name -> google.fhir.stu3.proto.String
	47,  // 143: google.fhir.stu3.proto.Identifier.period:type_name -> google.fhir.stu3.proto.Period
	58,  // 144: google.fhir.stu3.proto.Identifier.assigner:type_name -> google.fhir.stu3.proto.Reference
	26,  // 145: google.fhir.stu3.proto.Meta.id:type_name -> google.fhir.stu3.proto.String
	55,  // 146: google.fhir.stu3.proto.Meta.extension:type_name -> google.fhir.stu3.proto.Extension
	20,  // 147: google.fhir.stu3.proto.Meta.version_id:type_name -> google.fhir.stu3.proto.Id
	21,  // 148: google.fhir.stu3.proto.Meta.last_updated:type_name -> google.fhir.stu3.proto.Instant
	29,  // 149: google.fhir.stu3.proto.Meta.profile:type_name -> google.fhir.stu3.proto.Uri
	37,  // 150: google.fhir.stu3.proto.Meta.security:type_name -> google.fhir.stu3.proto.Coding
	37,  // 151: google.fhir.stu3.proto.Meta.tag:type_name -> google.fhir.stu3.proto.Coding
	26,  // 152: google.fhir.stu3.proto.Money.id:type_name -> google.fhir.stu3.proto.String
	55,  // 153: google.fhir.stu3.proto.Money.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 154: google.fhir.stu3.proto.Money.value:type_name -> google.fhir.stu3.proto.Decimal
	71,  // 155: google.fhir.stu3.proto.Money.comparator:type_name -> google.fhir.stu3.proto.QuantityComparatorCode
	26,  // 156: google.fhir.stu3.proto.Money.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 157: google.fhir.stu3.proto.Money.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 158: google.fhir.stu3.proto.Money.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 159: google.fhir.stu3.proto.Period.id:type_name -> google.fhir.stu3.proto.String
	55,  // 160: google.fhir.stu3.proto.Period.extension:type_name -> google.fhir.stu3.proto.Extension
	18,  // 161: google.fhir.stu3.proto.Period.start:type_name -> google.fhir.stu3.proto.DateTime
	18,  // 162: google.fhir.stu3.proto.Period.end:type_name -> google.fhir.stu3.proto.DateTime
	26,  // 163: google.fhir.stu3.proto.Quantity.id:type_name -> google.fhir.stu3.proto.String
	55,  // 164: google.fhir.stu3.proto.Quantity.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 165: google.fhir.stu3.proto.Quantity.value:type_name -> google.fhir.stu3.proto.Decimal
	71,  // 166: google.fhir.stu3.proto.Quantity.comparator:type_name -> google.fhir.stu3.proto.QuantityComparatorCode
	26,  // 167: google.fhir.stu3.proto.Quantity.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 168: google.fhir.stu3.proto.Quantity.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 169: google.fhir.stu3.proto.Quantity.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 170: google.fhir.stu3.proto.Range.id:type_name -> google.fhir.stu3.proto.String
	55,  // 171: google.fhir.stu3.proto.Range.extension:type_name -> google.fhir.stu3.proto.Extension
	53,  // 172: google.fhir.stu3.proto.Range.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	53,  // 173: google.fhir.stu3.proto.Range.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	26,  // 174: google.fhir.stu3.proto.Ratio.id:type_name -> google.fhir.stu3.proto.String
	55,  // 175: google.fhir.stu3.proto.Ratio.extension:type_name -> google.fhir.stu3.proto.Extension
	48,  // 176: google.fhir.stu3.proto.Ratio.numerator:type_name -> google.fhir.stu3.proto.Quantity
	48,  // 177: google.fhir.stu3.proto.Ratio.denominator:type_name -> google.fhir.stu3.proto.Quantity
	26,  // 178: google.fhir.stu3.proto.SampledData.id:type_name -> google.fhir.stu3.proto.String
	55,  // 179: google.fhir.stu3.proto.SampledData.extension:type_name -> google.fhir.stu3.proto.Extension
	53,  // 180: google.fhir.stu3.proto.SampledData.origin:type_name -> google.fhir.stu3.proto.SimpleQuantity
	19,  // 181: google.fhir.stu3.proto.SampledData.period:type_name -> google.fhir.stu3.proto.Decimal
	19,  // 182: google.fhir.stu3.proto.SampledData.factor:type_name -> google.fhir.stu3.proto.Decimal
	19,  // 183: google.fhir.stu3.proto.SampledData.lower_limit:type_name -> google.fhir.stu3.proto.Decimal
	19,  // 184: google.fhir.stu3.proto.SampledData.upper_limit:type_name -> google.fhir.stu3.proto.Decimal
	25,  // 185: google.fhir.stu3.proto.SampledData.dimensions:type_name -> google.fhir.stu3.proto.PositiveInt
	26,  // 186: google.fhir.stu3.proto.SampledData.data:type_name -> google.fhir.stu3.proto.String
	26,  // 187: google.fhir.stu3.proto.Signature.id:type_name -> google.fhir.stu3.proto.String
	55,  // 188: google.fhir.stu3.proto.Signature.extension:type_name -> google.fhir.stu3.proto.Extension
	37,  // 189: google.fhir.stu3.proto.Signature.type:type_name -> google.fhir.stu3.proto.Coding
	21,  // 190: google.fhir.stu3.proto.Signature.when:type_name -> google.fhir.stu3.proto.Instant
	77,  // 191: google.fhir.stu3.proto.Signature.who:type_name -> google.fhir.stu3.proto.Signature.Who
	78,  // 192: google.fhir.stu3.proto.Signature.on_behalf_of:type_name -> google.fhir.stu3.proto.Signature.OnBehalfOf
	69,  // 193: google.fhir.stu3.proto.Signature.content_type:type_name -> google.fhir.stu3.proto.MimeTypeCode
	14,  // 194: google.fhir.stu3.proto.Signature.blob:type_name -> google.fhir.stu3.proto.Base64Binary
	26,  // 195: google.fhir.stu3.proto.SimpleQuantity.id:type_name -> google.fhir.stu3.proto.String
	55,  // 196: google.fhir.stu3.proto.SimpleQuantity.extension:type_name -> google.fhir.stu3.proto.Extension
	19,  // 197: google.fhir.stu3.proto.SimpleQuantity.value:type_name -> google.fhir.stu3.proto.Decimal
	26,  // 198: google.fhir.stu3.proto.SimpleQuantity.unit:type_name -> google.fhir.stu3.proto.String
	29,  // 199: google.fhir.stu3.proto.SimpleQuantity.system:type_name -> google.fhir.stu3.proto.Uri
	16,  // 200: google.fhir.stu3.proto.SimpleQuantity.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 201: google.fhir.stu3.proto.Timing.id:type_name -> google.fhir.stu3.proto.String
	55,  // 202: google.fhir.stu3.proto.Timing.extension:type_name -> google.fhir.stu3.proto.Extension
	18,  // 203: google.fhir.stu3.proto.Timing.event:type_name -> google.fhir.stu3.proto.DateTime
	79,  // 204: google.fhir.stu3.proto.Timing.repeat:type_name -> google.fhir.stu3.proto.Timing.Repeat
	36,  // 205: google.fhir.stu3.proto.Timing.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	26,  // 206: google.fhir.stu3.proto.Extension.id:type_name -> google.fhir.stu3.proto.String
	29,  // 207: google.fhir.stu3.proto.Extension.url:type_name -> google.fhir.stu3.proto.Uri
	81,  // 208: google.fhir.stu3.proto.Extension.value:type_name -> google.fhir.stu3.proto.Extension.ValueX
	55,  // 209: google.fhir.stu3.proto.Extension.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 210: google.fhir.stu3.proto.CodingWithFixedSystem.id:type_name -> google.fhir.stu3.proto.String
	55,  // 211: google.fhir.stu3.proto.CodingWithFixedSystem.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 212: google.fhir.stu3.proto.CodingWithFixedSystem.version:type_name -> google.fhir.stu3.proto.String
	16,  // 213: google.fhir.stu3.proto.CodingWithFixedSystem.code:type_name -> google.fhir.stu3.proto.Code
	26,  // 214: google.fhir.stu3.proto.CodingWithFixedSystem.display:type_name -> google.fhir.stu3.proto.String
	15,  // 215: google.fhir.stu3.proto.CodingWithFixedSystem.user_selected:type_name -> google.fhir.stu3.proto.Boolean
	26,  // 216: google.fhir.stu3.proto.CodingWithFixedCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 217: google.fhir.stu3.proto.CodingWithFixedCode.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 218: google.fhir.stu3.proto.CodingWithFixedCode.version:type_name -> google.fhir.stu3.proto.String
	26,  // 219: google.fhir.stu3.proto.CodingWithFixedCode.display:type_name -> google.fhir.stu3.proto.String
	15,  // 220: google.fhir.stu3.proto.CodingWithFixedCode.user_selected:type_name -> google.fhir.stu3.proto.Boolean
	26,  // 221: google.fhir.stu3.proto.Reference.id:type_name -> google.fhir.stu3.proto.String
	55,  // 222: google.fhir.stu3.proto.Reference.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 223: google.fhir.stu3.proto.Reference.uri:type_name -> google.fhir.stu3.proto.String
	26,  // 224: google.fhir.stu3.proto.Reference.fragment:type_name -> google.fhir.stu3.proto.String
	59,  // 225: google.fhir.stu3.proto.Reference.account_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 226: google.fhir.stu3.proto.Reference.activity_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 227: google.fhir.stu3.proto.Reference.adverse_event_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 228: google.fhir.stu3.proto.Reference.allergy_intolerance_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 229: google.fhir.stu3.proto.Reference.appointment_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 230: google.fhir.stu3.proto.Reference.appointment_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 231: google.fhir.stu3.proto.Reference.audit_event_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 232: google.fhir.stu3.proto.Reference.basic_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 233: google.fhir.stu3.proto.Reference.binary_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 234: google.fhir.stu3.proto.Reference.body_site_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 235: google.fhir.stu3.proto.Reference.bundle_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 236: google.fhir.stu3.proto.Reference.capability_statement_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 237: google.fhir.stu3.proto.Reference.care_plan_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 238: google.fhir.stu3.proto.Reference.care_team_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 239: google.fhir.stu3.proto.Reference.charge_item_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 240: google.fhir.stu3.proto.Reference.claim_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 241: google.fhir.stu3.proto.Reference.claim_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 242: google.fhir.stu3.proto.Reference.clinical_impression_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 243: google.fhir.stu3.proto.Reference.code_system_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 244: google.fhir.stu3.proto.Reference.communication_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 245: google.fhir.stu3.proto.Reference.communication_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 246: google.fhir.stu3.proto.Reference.compartment_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 247: google.fhir.stu3.proto.Reference.composition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 248: google.fhir.stu3.proto.Reference.concept_map_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 249: google.fhir.stu3.proto.Reference.condition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 250: google.fhir.stu3.proto.Reference.consent_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 251: google.fhir.stu3.proto.Reference.contract_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 252: google.fhir.stu3.proto.Reference.coverage_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 253: google.fhir.stu3.proto.Reference.data_element_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 254: google.fhir.stu3.proto.Reference.detected_issue_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 255: google.fhir.stu3.proto.Reference.device_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 256: google.fhir.stu3.proto.Reference.device_component_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 257: google.fhir.stu3.proto.Reference.device_metric_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 258: google.fhir.stu3.proto.Reference.device_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 259: google.fhir.stu3.proto.Reference.device_use_statement_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 260: google.fhir.stu3.proto.Reference.diagnostic_report_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 261: google.fhir.stu3.proto.Reference.document_manifest_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 262: google.fhir.stu3.proto.Reference.document_reference_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 263: google.fhir.stu3.proto.Reference.eligibility_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 264: google.fhir.stu3.proto.Reference.eligibility_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 265: google.fhir.stu3.proto.Reference.encounter_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 266: google.fhir.stu3.proto.Reference.endpoint_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 267: google.fhir.stu3.proto.Reference.enrollment_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 268: google.fhir.stu3.proto.Reference.enrollment_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 269: google.fhir.stu3.proto.Reference.episode_of_care_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 270: google.fhir.stu3.proto.Reference.expansion_profile_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 271: google.fhir.stu3.proto.Reference.explanation_of_benefit_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 272: google.fhir.stu3.proto.Reference.family_member_history_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 273: google.fhir.stu3.proto.Reference.flag_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 274: google.fhir.stu3.proto.Reference.goal_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 275: google.fhir.stu3.proto.Reference.graph_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 276: google.fhir.stu3.proto.Reference.group_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 277: google.fhir.stu3.proto.Reference.guidance_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 278: google.fhir.stu3.proto.Reference.healthcare_service_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 279: google.fhir.stu3.proto.Reference.imaging_manifest_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 280: google.fhir.stu3.proto.Reference.imaging_study_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 281: google.fhir.stu3.proto.Reference.immunization_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 282: google.fhir.stu3.proto.Reference.immunization_recommendation_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 283: google.fhir.stu3.proto.Reference.implementation_guide_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 284: google.fhir.stu3.proto.Reference.library_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 285: google.fhir.stu3.proto.Reference.linkage_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 286: google.fhir.stu3.proto.Reference.list_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 287: google.fhir.stu3.proto.Reference.location_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 288: google.fhir.stu3.proto.Reference.measure_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 289: google.fhir.stu3.proto.Reference.measure_report_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 290: google.fhir.stu3.proto.Reference.media_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 291: google.fhir.stu3.proto.Reference.medication_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 292: google.fhir.stu3.proto.Reference.medication_administration_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 293: google.fhir.stu3.proto.Reference.medication_dispense_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 294: google.fhir.stu3.proto.Reference.medication_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 295: google.fhir.stu3.proto.Reference.medication_statement_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 296: google.fhir.stu3.proto.Reference.message_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 297: google.fhir.stu3.proto.Reference.message_header_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 298: google.fhir.stu3.proto.Reference.naming_system_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 299: google.fhir.stu3.proto.Reference.nutrition_order_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 300: google.fhir.stu3.proto.Reference.observation_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 301: google.fhir.stu3.proto.Reference.operation_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 302: google.fhir.stu3.proto.Reference.operation_outcome_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 303: google.fhir.stu3.proto.Reference.organization_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 304: google.fhir.stu3.proto.Reference.parameters_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 305: google.fhir.stu3.proto.Reference.patient_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 306: google.fhir.stu3.proto.Reference.payment_notice_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 307: google.fhir.stu3.proto.Reference.payment_reconciliation_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 308: google.fhir.stu3.proto.Reference.person_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 309: google.fhir.stu3.proto.Reference.plan_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 310: google.fhir.stu3.proto.Reference.practitioner_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 311: google.fhir.stu3.proto.Reference.practitioner_role_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 312: google.fhir.stu3.proto.Reference.procedure_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 313: google.fhir.stu3.proto.Reference.procedure_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 314: google.fhir.stu3.proto.Reference.process_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 315: google.fhir.stu3.proto.Reference.process_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 316: google.fhir.stu3.proto.Reference.provenance_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 317: google.fhir.stu3.proto.Reference.questionnaire_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 318: google.fhir.stu3.proto.Reference.questionnaire_response_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 319: google.fhir.stu3.proto.Reference.referral_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 320: google.fhir.stu3.proto.Reference.related_person_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 321: google.fhir.stu3.proto.Reference.request_group_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 322: google.fhir.stu3.proto.Reference.research_study_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 323: google.fhir.stu3.proto.Reference.research_subject_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 324: google.fhir.stu3.proto.Reference.risk_assessment_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 325: google.fhir.stu3.proto.Reference.schedule_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 326: google.fhir.stu3.proto.Reference.search_parameter_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 327: google.fhir.stu3.proto.Reference.sequence_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 328: google.fhir.stu3.proto.Reference.service_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 329: google.fhir.stu3.proto.Reference.slot_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 330: google.fhir.stu3.proto.Reference.specimen_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 331: google.fhir.stu3.proto.Reference.structure_definition_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 332: google.fhir.stu3.proto.Reference.structure_map_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 333: google.fhir.stu3.proto.Reference.subscription_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 334: google.fhir.stu3.proto.Reference.substance_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 335: google.fhir.stu3.proto.Reference.supply_delivery_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 336: google.fhir.stu3.proto.Reference.supply_request_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 337: google.fhir.stu3.proto.Reference.task_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 338: google.fhir.stu3.proto.Reference.test_report_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 339: google.fhir.stu3.proto.Reference.test_script_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 340: google.fhir.stu3.proto.Reference.value_set_id:type_name -> google.fhir.stu3.proto.ReferenceId
	59,  // 341: google.fhir.stu3.proto.Reference.vision_prescription_id:type_name -> google.fhir.stu3.proto.ReferenceId
	44,  // 342: google.fhir.stu3.proto.Reference.identifier:type_name -> google.fhir.stu3.proto.Identifier
	26,  // 343: google.fhir.stu3.proto.Reference.display:type_name -> google.fhir.stu3.proto.String
	20,  // 344: google.fhir.stu3.proto.ReferenceId.history:type_name -> google.fhir.stu3.proto.Id
	26,  // 345: google.fhir.stu3.proto.ReferenceId.id:type_name -> google.fhir.stu3.proto.String
	55,  // 346: google.fhir.stu3.proto.ReferenceId.extension:type_name -> google.fhir.stu3.proto.Extension
	4,   // 347: google.fhir.stu3.proto.AddressTypeCode.value:type_name -> google.fhir.stu3.proto.AddressTypeCode.Value
	26,  // 348: google.fhir.stu3.proto.AddressTypeCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 349: google.fhir.stu3.proto.AddressTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	5,   // 350: google.fhir.stu3.proto.AddressUseCode.value:type_name -> google.fhir.stu3.proto.AddressUseCode.Value
	26,  // 351: google.fhir.stu3.proto.AddressUseCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 352: google.fhir.stu3.proto.AddressUseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	6,   // 353: google.fhir.stu3.proto.ContactPointSystemCode.value:type_name -> google.fhir.stu3.proto.ContactPointSystemCode.Value
	26,  // 354: google.fhir.stu3.proto.ContactPointSystemCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 355: google.fhir.stu3.proto.ContactPointSystemCode.extension:type_name -> google.fhir.stu3.proto.Extension
	7,   // 356: google.fhir.stu3.proto.ContactPointUseCode.value:type_name -> google.fhir.stu3.proto.ContactPointUseCode.Value
	26,  // 357: google.fhir.stu3.proto.ContactPointUseCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 358: google.fhir.stu3.proto.ContactPointUseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	8,   // 359: google.fhir.stu3.proto.DaysOfWeekCode.value:type_name -> google.fhir.stu3.proto.DaysOfWeekCode.Value
	26,  // 360: google.fhir.stu3.proto.DaysOfWeekCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 361: google.fhir.stu3.proto.DaysOfWeekCode.extension:type_name -> google.fhir.stu3.proto.Extension
	9,   // 362: google.fhir.stu3.proto.EventTimingCode.value:type_name -> google.fhir.stu3.proto.EventTimingCode.Value
	26,  // 363: google.fhir.stu3.proto.EventTimingCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 364: google.fhir.stu3.proto.EventTimingCode.extension:type_name -> google.fhir.stu3.proto.Extension
	10,  // 365: google.fhir.stu3.proto.IdentifierUseCode.value:type_name -> google.fhir.stu3.proto.IdentifierUseCode.Value
	26,  // 366: google.fhir.stu3.proto.IdentifierUseCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 367: google.fhir.stu3.proto.IdentifierUseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 368: google.fhir.stu3.proto.AllLanguageCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 369: google.fhir.stu3.proto.AllLanguageCode.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 370: google.fhir.stu3.proto.LanguageCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 371: google.fhir.stu3.proto.LanguageCode.extension:type_name -> google.fhir.stu3.proto.Extension
	26,  // 372: google.fhir.stu3.proto.MimeTypeCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 373: google.fhir.stu3.proto.MimeTypeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	11,  // 374: google.fhir.stu3.proto.NameUseCode.value:type_name -> google.fhir.stu3.proto.NameUseCode.Value
	26,  // 375: google.fhir.stu3.proto.NameUseCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 376: google.fhir.stu3.proto.NameUseCode.extension:type_name -> google.fhir.stu3.proto.Extension
	12,  // 377: google.fhir.stu3.proto.QuantityComparatorCode.value:type_name -> google.fhir.stu3.proto.QuantityComparatorCode.Value
	26,  // 378: google.fhir.stu3.proto.QuantityComparatorCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 379: google.fhir.stu3.proto.QuantityComparatorCode.extension:type_name -> google.fhir.stu3.proto.Extension
	13,  // 380: google.fhir.stu3.proto.UnitsOfTimeCode.value:type_name -> google.fhir.stu3.proto.UnitsOfTimeCode.Value
	26,  // 381: google.fhir.stu3.proto.UnitsOfTimeCode.id:type_name -> google.fhir.stu3.proto.String
	55,  // 382: google.fhir.stu3.proto.UnitsOfTimeCode.extension:type_name -> google.fhir.stu3.proto.Extension
	58,  // 383: google.fhir.stu3.proto.Annotation.Author.reference:type_name -> google.fhir.stu3.proto.Reference
	26,  // 384: google.fhir.stu3.proto.Annotation.Author.string_value:type_name -> google.fhir.stu3.proto.String
	15,  // 385: google.fhir.stu3.proto.Dosage.AsNeeded.boolean:type_name -> google.fhir.stu3.proto.Boolean
	36,  // 386: google.fhir.stu3.proto.Dosage.AsNeeded.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	49,  // 387: google.fhir.stu3.proto.Dosage.Dose.range:type_name -> google.fhir.stu3.proto.Range
	53,  // 388: google.fhir.stu3.proto.Dosage.Dose.quantity:type_name -> google.fhir.stu3.proto.SimpleQuantity
	50,  // 389: google.fhir.stu3.proto.Dosage.Rate.ratio:type_name -> google.fhir.stu3.proto.Ratio
	49,  // 390: google.fhir.stu3.proto.Dosage.Rate.range:type_name -> google.fhir.stu3.proto.Range
	53,  // 391: google.fhir.stu3.proto.Dosage.Rate.quantity:type_name -> google.fhir.stu3.proto.SimpleQuantity
	29,  // 392: google.fhir.stu3.proto.Signature.Who.uri:type_name -> google.fhir.stu3.proto.Uri
	58,  // 393: google.fhir.stu3.proto.Signature.Who.reference:type_name -> google.fhir.stu3.proto.Reference
	29,  // 394: google.fhir.stu3.proto.Signature.OnBehalfOf.uri:type_name -> google.fhir.stu3.proto.Uri
	58,  // 395: google.fhir.stu3.proto.Signature.OnBehalfOf.reference:type_name -> google.fhir.stu3.proto.Reference
	26,  // 396: google.fhir.stu3.proto.Timing.Repeat.id:type_name -> google.fhir.stu3.proto.String
	55,  // 397: google.fhir.stu3.proto.Timing.Repeat.extension:type_name -> google.fhir.stu3.proto.Extension
	80,  // 398: google.fhir.stu3.proto.Timing.Repeat.bounds:type_name -> google.fhir.stu3.proto.Timing.Repeat.Bounds
	22,  // 399: google.fhir.stu3.proto.Timing.Repeat.count:type_name -> google.fhir.stu3.proto.Integer
	22,  // 400: google.fhir.stu3.proto.Timing.Repeat.count_max:type_name -> google.fhir.stu3.proto.Integer
	19,  // 401: google.fhir.stu3.proto.Timing.Repeat.duration:type_name -> google.fhir.stu3.proto.Decimal
	19,  // 402: google.fhir.stu3.proto.Timing.Repeat.duration_max:type_name -> google.fhir.stu3.proto.Decimal
	72,  // 403: google.fhir.stu3.proto.Timing.Repeat.duration_unit:type_name -> google.fhir.stu3.proto.UnitsOfTimeCode
	22,  // 404: google.fhir.stu3.proto.Timing.Repeat.frequency:type_name -> google.fhir.stu3.proto.Integer
	22,  // 405: google.fhir.stu3.proto.Timing.Repeat.frequency_max:type_name -> google.fhir.stu3.proto.Integer
	19,  // 406: google.fhir.stu3.proto.Timing.Repeat.period:type_name -> google.fhir.stu3.proto.Decimal
	19,  // 407: google.fhir.stu3.proto.Timing.Repeat.period_max:type_name -> google.fhir.stu3.proto.Decimal
	72,  // 408: google.fhir.stu3.proto.Timing.Repeat.period_unit:type_name -> google.fhir.stu3.proto.UnitsOfTimeCode
	64,  // 409: google.fhir.stu3.proto.Timing.Repeat.day_of_week:type_name -> google.fhir.stu3.proto.DaysOfWeekCode
	27,  // 410: google.fhir.stu3.proto.Timing.Repeat.time_of_day:type_name -> google.fhir.stu3.proto.Time
	65,  // 411: google.fhir.stu3.proto.Timing.Repeat.when:type_name -> google.fhir.stu3.proto.EventTimingCode
	28,  // 412: google.fhir.stu3.proto.Timing.Repeat.offset:type_name -> google.fhir.stu3.proto.UnsignedInt
	42,  // 413: google.fhir.stu3.proto.Timing.Repeat.Bounds.duration:type_name -> google.fhir.stu3.proto.Duration
	49,  // 414: google.fhir.stu3.proto.Timing.Repeat.Bounds.range:type_name -> google.fhir.stu3.proto.Range
	47,  // 415: google.fhir.stu3.proto.Timing.Repeat.Bounds.period:type_name -> google.fhir.stu3.proto.Period
	14,  // 416: google.fhir.stu3.proto.Extension.ValueX.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	15,  // 417: google.fhir.stu3.proto.Extension.ValueX.boolean:type_name -> google.fhir.stu3.proto.Boolean
	16,  // 418: google.fhir.stu3.proto.Extension.ValueX.code:type_name -> google.fhir.stu3.proto.Code
	17,  // 419: google.fhir.stu3.proto.Extension.ValueX.date:type_name -> google.fhir.stu3.proto.Date
	18,  // 420: google.fhir.stu3.proto.Extension.ValueX.date_time:type_name -> google.fhir.stu3.proto.DateTime
	19,  // 421: google.fhir.stu3.proto.Extension.ValueX.decimal:type_name -> google.fhir.stu3.proto.Decimal
	20,  // 422: google.fhir.stu3.proto.Extension.ValueX.id:type_name -> google.fhir.stu3.proto.Id
	21,  // 423: google.fhir.stu3.proto.Extension.ValueX.instant:type_name -> google.fhir.stu3.proto.Instant
	22,  // 424: google.fhir.stu3.proto.Extension.ValueX.integer:type_name -> google.fhir.stu3.proto.Integer
	23,  // 425: google.fhir.stu3.proto.Extension.ValueX.markdown:type_name -> google.fhir.stu3.proto.Markdown
	24,  // 426: google.fhir.stu3.proto.Extension.ValueX.oid:type_name -> google.fhir.stu3.proto.Oid
	25,  // 427: google.fhir.stu3.proto.Extension.ValueX.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	26,  // 428: google.fhir.stu3.proto.Extension.ValueX.string_value:type_name -> google.fhir.stu3.proto.String
	27,  // 429: google.fhir.stu3.proto.Extension.ValueX.time:type_name -> google.fhir.stu3.proto.Time
	28,  // 430: google.fhir.stu3.proto.Extension.ValueX.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	29,  // 431: google.fhir.stu3.proto.Extension.ValueX.uri:type_name -> google.fhir.stu3.proto.Uri
	32,  // 432: google.fhir.stu3.proto.Extension.ValueX.address:type_name -> google.fhir.stu3.proto.Address
	33,  // 433: google.fhir.stu3.proto.Extension.ValueX.age:type_name -> google.fhir.stu3.proto.Age
	34,  // 434: google.fhir.stu3.proto.Extension.ValueX.annotation:type_name -> google.fhir.stu3.proto.Annotation
	35,  // 435: google.fhir.stu3.proto.Extension.ValueX.attachment:type_name -> google.fhir.stu3.proto.Attachment
	36,  // 436: google.fhir.stu3.proto.Extension.ValueX.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	37,  // 437: google.fhir.stu3.proto.Extension.ValueX.coding:type_name -> google.fhir.stu3.proto.Coding
	38,  // 438: google.fhir.stu3.proto.Extension.ValueX.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	39,  // 439: google.fhir.stu3.proto.Extension.ValueX.count:type_name -> google.fhir.stu3.proto.Count
	40,  // 440: google.fhir.stu3.proto.Extension.ValueX.distance:type_name -> google.fhir.stu3.proto.Distance
	42,  // 441: google.fhir.stu3.proto.Extension.ValueX.duration:type_name -> google.fhir.stu3.proto.Duration
	43,  // 442: google.fhir.stu3.proto.Extension.ValueX.human_name:type_name -> google.fhir.stu3.proto.HumanName
	44,  // 443: google.fhir.stu3.proto.Extension.ValueX.identifier:type_name -> google.fhir.stu3.proto.Identifier
	46,  // 444: google.fhir.stu3.proto.Extension.ValueX.money:type_name -> google.fhir.stu3.proto.Money
	47,  // 445: google.fhir.stu3.proto.Extension.ValueX.period:type_name -> google.fhir.stu3.proto.Period
	48,  // 446: google.fhir.stu3.proto.Extension.ValueX.quantity:type_name -> google.fhir.stu3.proto.Quantity
	49,  // 447: google.fhir.stu3.proto.Extension.ValueX.range:type_name -> google.fhir.stu3.proto.Range
	50,  // 448: google.fhir.stu3.proto.Extension.ValueX.ratio:type_name -> google.fhir.stu3.proto.Ratio
	58,  // 449: google.fhir.stu3.proto.Extension.ValueX.reference:type_name -> google.fhir.stu3.proto.Reference
	51,  // 450: google.fhir.stu3.proto.Extension.ValueX.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	52,  // 451: google.fhir.stu3.proto.Extension.ValueX.signature:type_name -> google.fhir.stu3.proto.Signature
	54,  // 452: google.fhir.stu3.proto.Extension.ValueX.timing:type_name -> google.fhir.stu3.proto.Timing
	45,  // 453: google.fhir.stu3.proto.Extension.ValueX.meta:type_name -> google.fhir.stu3.proto.Meta
	454, // [454:454] is the sub-list for method output_type
	454, // [454:454] is the sub-list for method input_type
	454, // [454:454] is the sub-list for extension type_name
	454, // [454:454] is the sub-list for extension extendee
	0,   // [0:454] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_stu3_datatypes_proto_init() }
func file_proto_google_fhir_proto_stu3_datatypes_proto_init() {
	if File_proto_google_fhir_proto_stu3_datatypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base64Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Markdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositiveInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsignedInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xhtml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Age); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeableConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampledData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodingWithFixedSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodingWithFixedCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointSystemCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllLanguageCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MimeTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitsOfTimeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation_Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage_AsNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage_Dose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature_Who); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature_OnBehalfOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat_Bounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*Reference_Uri)(nil),
		(*Reference_Fragment)(nil),
		(*Reference_AccountId)(nil),
		(*Reference_ActivityDefinitionId)(nil),
		(*Reference_AdverseEventId)(nil),
		(*Reference_AllergyIntoleranceId)(nil),
		(*Reference_AppointmentId)(nil),
		(*Reference_AppointmentResponseId)(nil),
		(*Reference_AuditEventId)(nil),
		(*Reference_BasicId)(nil),
		(*Reference_BinaryId)(nil),
		(*Reference_BodySiteId)(nil),
		(*Reference_BundleId)(nil),
		(*Reference_CapabilityStatementId)(nil),
		(*Reference_CarePlanId)(nil),
		(*Reference_CareTeamId)(nil),
		(*Reference_ChargeItemId)(nil),
		(*Reference_ClaimId)(nil),
		(*Reference_ClaimResponseId)(nil),
		(*Reference_ClinicalImpressionId)(nil),
		(*Reference_CodeSystemId)(nil),
		(*Reference_CommunicationId)(nil),
		(*Reference_CommunicationRequestId)(nil),
		(*Reference_CompartmentDefinitionId)(nil),
		(*Reference_CompositionId)(nil),
		(*Reference_ConceptMapId)(nil),
		(*Reference_ConditionId)(nil),
		(*Reference_ConsentId)(nil),
		(*Reference_ContractId)(nil),
		(*Reference_CoverageId)(nil),
		(*Reference_DataElementId)(nil),
		(*Reference_DetectedIssueId)(nil),
		(*Reference_DeviceId)(nil),
		(*Reference_DeviceComponentId)(nil),
		(*Reference_DeviceMetricId)(nil),
		(*Reference_DeviceRequestId)(nil),
		(*Reference_DeviceUseStatementId)(nil),
		(*Reference_DiagnosticReportId)(nil),
		(*Reference_DocumentManifestId)(nil),
		(*Reference_DocumentReferenceId)(nil),
		(*Reference_EligibilityRequestId)(nil),
		(*Reference_EligibilityResponseId)(nil),
		(*Reference_EncounterId)(nil),
		(*Reference_EndpointId)(nil),
		(*Reference_EnrollmentRequestId)(nil),
		(*Reference_EnrollmentResponseId)(nil),
		(*Reference_EpisodeOfCareId)(nil),
		(*Reference_ExpansionProfileId)(nil),
		(*Reference_ExplanationOfBenefitId)(nil),
		(*Reference_FamilyMemberHistoryId)(nil),
		(*Reference_FlagId)(nil),
		(*Reference_GoalId)(nil),
		(*Reference_GraphDefinitionId)(nil),
		(*Reference_GroupId)(nil),
		(*Reference_GuidanceResponseId)(nil),
		(*Reference_HealthcareServiceId)(nil),
		(*Reference_ImagingManifestId)(nil),
		(*Reference_ImagingStudyId)(nil),
		(*Reference_ImmunizationId)(nil),
		(*Reference_ImmunizationRecommendationId)(nil),
		(*Reference_ImplementationGuideId)(nil),
		(*Reference_LibraryId)(nil),
		(*Reference_LinkageId)(nil),
		(*Reference_ListId)(nil),
		(*Reference_LocationId)(nil),
		(*Reference_MeasureId)(nil),
		(*Reference_MeasureReportId)(nil),
		(*Reference_MediaId)(nil),
		(*Reference_MedicationId)(nil),
		(*Reference_MedicationAdministrationId)(nil),
		(*Reference_MedicationDispenseId)(nil),
		(*Reference_MedicationRequestId)(nil),
		(*Reference_MedicationStatementId)(nil),
		(*Reference_MessageDefinitionId)(nil),
		(*Reference_MessageHeaderId)(nil),
		(*Reference_NamingSystemId)(nil),
		(*Reference_NutritionOrderId)(nil),
		(*Reference_ObservationId)(nil),
		(*Reference_OperationDefinitionId)(nil),
		(*Reference_OperationOutcomeId)(nil),
		(*Reference_OrganizationId)(nil),
		(*Reference_ParametersId)(nil),
		(*Reference_PatientId)(nil),
		(*Reference_PaymentNoticeId)(nil),
		(*Reference_PaymentReconciliationId)(nil),
		(*Reference_PersonId)(nil),
		(*Reference_PlanDefinitionId)(nil),
		(*Reference_PractitionerId)(nil),
		(*Reference_PractitionerRoleId)(nil),
		(*Reference_ProcedureId)(nil),
		(*Reference_ProcedureRequestId)(nil),
		(*Reference_ProcessRequestId)(nil),
		(*Reference_ProcessResponseId)(nil),
		(*Reference_ProvenanceId)(nil),
		(*Reference_QuestionnaireId)(nil),
		(*Reference_QuestionnaireResponseId)(nil),
		(*Reference_ReferralRequestId)(nil),
		(*Reference_RelatedPersonId)(nil),
		(*Reference_RequestGroupId)(nil),
		(*Reference_ResearchStudyId)(nil),
		(*Reference_ResearchSubjectId)(nil),
		(*Reference_RiskAssessmentId)(nil),
		(*Reference_ScheduleId)(nil),
		(*Reference_SearchParameterId)(nil),
		(*Reference_SequenceId)(nil),
		(*Reference_ServiceDefinitionId)(nil),
		(*Reference_SlotId)(nil),
		(*Reference_SpecimenId)(nil),
		(*Reference_StructureDefinitionId)(nil),
		(*Reference_StructureMapId)(nil),
		(*Reference_SubscriptionId)(nil),
		(*Reference_SubstanceId)(nil),
		(*Reference_SupplyDeliveryId)(nil),
		(*Reference_SupplyRequestId)(nil),
		(*Reference_TaskId)(nil),
		(*Reference_TestReportId)(nil),
		(*Reference_TestScriptId)(nil),
		(*Reference_ValueSetId)(nil),
		(*Reference_VisionPrescriptionId)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*Annotation_Author_Reference)(nil),
		(*Annotation_Author_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*Dosage_AsNeeded_Boolean)(nil),
		(*Dosage_AsNeeded_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*Dosage_Dose_Range)(nil),
		(*Dosage_Dose_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*Dosage_Rate_Ratio)(nil),
		(*Dosage_Rate_Range)(nil),
		(*Dosage_Rate_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*Signature_Who_Uri)(nil),
		(*Signature_Who_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*Signature_OnBehalfOf_Uri)(nil),
		(*Signature_OnBehalfOf_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*Timing_Repeat_Bounds_Duration)(nil),
		(*Timing_Repeat_Bounds_Range)(nil),
		(*Timing_Repeat_Bounds_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*Extension_ValueX_Base64Binary)(nil),
		(*Extension_ValueX_Boolean)(nil),
		(*Extension_ValueX_Code)(nil),
		(*Extension_ValueX_Date)(nil),
		(*Extension_ValueX_DateTime)(nil),
		(*Extension_ValueX_Decimal)(nil),
		(*Extension_ValueX_Id)(nil),
		(*Extension_ValueX_Instant)(nil),
		(*Extension_ValueX_Integer)(nil),
		(*Extension_ValueX_Markdown)(nil),
		(*Extension_ValueX_Oid)(nil),
		(*Extension_ValueX_PositiveInt)(nil),
		(*Extension_ValueX_StringValue)(nil),
		(*Extension_ValueX_Time)(nil),
		(*Extension_ValueX_UnsignedInt)(nil),
		(*Extension_ValueX_Uri)(nil),
		(*Extension_ValueX_Address)(nil),
		(*Extension_ValueX_Age)(nil),
		(*Extension_ValueX_Annotation)(nil),
		(*Extension_ValueX_Attachment)(nil),
		(*Extension_ValueX_CodeableConcept)(nil),
		(*Extension_ValueX_Coding)(nil),
		(*Extension_ValueX_ContactPoint)(nil),
		(*Extension_ValueX_Count)(nil),
		(*Extension_ValueX_Distance)(nil),
		(*Extension_ValueX_Duration)(nil),
		(*Extension_ValueX_HumanName)(nil),
		(*Extension_ValueX_Identifier)(nil),
		(*Extension_ValueX_Money)(nil),
		(*Extension_ValueX_Period)(nil),
		(*Extension_ValueX_Quantity)(nil),
		(*Extension_ValueX_Range)(nil),
		(*Extension_ValueX_Ratio)(nil),
		(*Extension_ValueX_Reference)(nil),
		(*Extension_ValueX_SampledData)(nil),
		(*Extension_ValueX_Signature)(nil),
		(*Extension_ValueX_Timing)(nil),
		(*Extension_ValueX_Meta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_stu3_datatypes_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_stu3_datatypes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_stu3_datatypes_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_stu3_datatypes_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_stu3_datatypes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_stu3_datatypes_proto = out.File
	file_proto_google_fhir_proto_stu3_datatypes_proto_rawDesc = nil
	file_proto_google_fhir_proto_stu3_datatypes_proto_goTypes = nil
	file_proto_google_fhir_proto_stu3_datatypes_proto_depIdxs = nil
}
