//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/coverage_eligibility_response.proto

package coverage_eligibility_response_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for CoverageEligibilityResponse, last
// updated 2019-11-01T09:29:23.356+11:00. CoverageEligibilityResponse resource.
// See http://hl7.org/fhir/StructureDefinition/CoverageEligibilityResponse
type CoverageEligibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for coverage eligiblity request
	Identifier []*datatypes_go_proto.Identifier           `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *CoverageEligibilityResponse_StatusCode    `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Purpose    []*CoverageEligibilityResponse_PurposeCode `protobuf:"bytes,12,rep,name=purpose,proto3" json:"purpose,omitempty"`
	// Intended recipient of products and services
	Patient  *datatypes_go_proto.Reference          `protobuf:"bytes,13,opt,name=patient,proto3" json:"patient,omitempty"`
	Serviced *CoverageEligibilityResponse_ServicedX `protobuf:"bytes,14,opt,name=serviced,proto3" json:"serviced,omitempty"`
	// Response creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// Party responsible for the request
	Requestor *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=requestor,proto3" json:"requestor,omitempty"`
	// Eligibility request reference
	Request *datatypes_go_proto.Reference            `protobuf:"bytes,17,opt,name=request,proto3" json:"request,omitempty"`
	Outcome *CoverageEligibilityResponse_OutcomeCode `protobuf:"bytes,18,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Coverage issuer
	Insurer   *datatypes_go_proto.Reference            `protobuf:"bytes,20,opt,name=insurer,proto3" json:"insurer,omitempty"`
	Insurance []*CoverageEligibilityResponse_Insurance `protobuf:"bytes,21,rep,name=insurance,proto3" json:"insurance,omitempty"`
	// Preauthorization reference
	PreAuthRef *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=pre_auth_ref,json=preAuthRef,proto3" json:"pre_auth_ref,omitempty"`
	// Printed form identifier
	Form  *datatypes_go_proto.CodeableConcept   `protobuf:"bytes,23,opt,name=form,proto3" json:"form,omitempty"`
	Error []*CoverageEligibilityResponse_Errors `protobuf:"bytes,24,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *CoverageEligibilityResponse) Reset() {
	*x = CoverageEligibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse) ProtoMessage() {}

func (x *CoverageEligibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0}
}

func (x *CoverageEligibilityResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetStatus() *CoverageEligibilityResponse_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetPurpose() []*CoverageEligibilityResponse_PurposeCode {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetServiced() *CoverageEligibilityResponse_ServicedX {
	if x != nil {
		return x.Serviced
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetRequestor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requestor
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetOutcome() *CoverageEligibilityResponse_OutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetInsurer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurer
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetInsurance() []*CoverageEligibilityResponse_Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetPreAuthRef() *datatypes_go_proto.String {
	if x != nil {
		return x.PreAuthRef
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *CoverageEligibilityResponse) GetError() []*CoverageEligibilityResponse_Errors {
	if x != nil {
		return x.Error
	}
	return nil
}

// active | cancelled | draft | entered-in-error
type CoverageEligibilityResponse_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FinancialResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FinancialResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CoverageEligibilityResponse_StatusCode) Reset() {
	*x = CoverageEligibilityResponse_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_StatusCode) ProtoMessage() {}

func (x *CoverageEligibilityResponse_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_StatusCode.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CoverageEligibilityResponse_StatusCode) GetValue() codes_go_proto.FinancialResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FinancialResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *CoverageEligibilityResponse_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// auth-requirements | benefits | discovery | validation
type CoverageEligibilityResponse_PurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EligibilityResponsePurposeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EligibilityResponsePurposeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CoverageEligibilityResponse_PurposeCode) Reset() {
	*x = CoverageEligibilityResponse_PurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_PurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_PurposeCode) ProtoMessage() {}

func (x *CoverageEligibilityResponse_PurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_PurposeCode.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_PurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CoverageEligibilityResponse_PurposeCode) GetValue() codes_go_proto.EligibilityResponsePurposeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EligibilityResponsePurposeCode_INVALID_UNINITIALIZED
}

func (x *CoverageEligibilityResponse_PurposeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_PurposeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Estimated date or dates of service
type CoverageEligibilityResponse_ServicedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*CoverageEligibilityResponse_ServicedX_Date
	//	*CoverageEligibilityResponse_ServicedX_Period
	Choice isCoverageEligibilityResponse_ServicedX_Choice `protobuf_oneof:"choice"`
}

func (x *CoverageEligibilityResponse_ServicedX) Reset() {
	*x = CoverageEligibilityResponse_ServicedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_ServicedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_ServicedX) ProtoMessage() {}

func (x *CoverageEligibilityResponse_ServicedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_ServicedX.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_ServicedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 2}
}

func (m *CoverageEligibilityResponse_ServicedX) GetChoice() isCoverageEligibilityResponse_ServicedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *CoverageEligibilityResponse_ServicedX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_ServicedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *CoverageEligibilityResponse_ServicedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_ServicedX_Period); ok {
		return x.Period
	}
	return nil
}

type isCoverageEligibilityResponse_ServicedX_Choice interface {
	isCoverageEligibilityResponse_ServicedX_Choice()
}

type CoverageEligibilityResponse_ServicedX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type CoverageEligibilityResponse_ServicedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*CoverageEligibilityResponse_ServicedX_Date) isCoverageEligibilityResponse_ServicedX_Choice() {}

func (*CoverageEligibilityResponse_ServicedX_Period) isCoverageEligibilityResponse_ServicedX_Choice() {
}

// queued | complete | error | partial
type CoverageEligibilityResponse_OutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ClaimProcessingCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ClaimProcessingCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CoverageEligibilityResponse_OutcomeCode) Reset() {
	*x = CoverageEligibilityResponse_OutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_OutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_OutcomeCode) ProtoMessage() {}

func (x *CoverageEligibilityResponse_OutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_OutcomeCode.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_OutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CoverageEligibilityResponse_OutcomeCode) GetValue() codes_go_proto.ClaimProcessingCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ClaimProcessingCode_INVALID_UNINITIALIZED
}

func (x *CoverageEligibilityResponse_OutcomeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_OutcomeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Patient insurance information
type CoverageEligibilityResponse_Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Coverage inforce indicator
	Inforce *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=inforce,proto3" json:"inforce,omitempty"`
	// When the benefits are applicable
	BenefitPeriod *datatypes_go_proto.Period                     `protobuf:"bytes,6,opt,name=benefit_period,json=benefitPeriod,proto3" json:"benefit_period,omitempty"`
	Item          []*CoverageEligibilityResponse_Insurance_Items `protobuf:"bytes,7,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *CoverageEligibilityResponse_Insurance) Reset() {
	*x = CoverageEligibilityResponse_Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_Insurance) ProtoMessage() {}

func (x *CoverageEligibilityResponse_Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_Insurance.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_Insurance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CoverageEligibilityResponse_Insurance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance) GetInforce() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Inforce
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance) GetBenefitPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.BenefitPeriod
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance) GetItem() []*CoverageEligibilityResponse_Insurance_Items {
	if x != nil {
		return x.Item
	}
	return nil
}

// Processing errors
type CoverageEligibilityResponse_Errors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Error code detailing processing issues
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CoverageEligibilityResponse_Errors) Reset() {
	*x = CoverageEligibilityResponse_Errors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_Errors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_Errors) ProtoMessage() {}

func (x *CoverageEligibilityResponse_Errors) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_Errors.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_Errors) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CoverageEligibilityResponse_Errors) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_Errors) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Errors) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Errors) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

// Benefits and authorization details
type CoverageEligibilityResponse_Insurance_Items struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// Product or service billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Performing practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	// Excluded from the plan
	Excluded *datatypes_go_proto.Boolean `protobuf:"bytes,8,opt,name=excluded,proto3" json:"excluded,omitempty"`
	// Short name for the benefit
	Name *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the benefit or services covered
	Description *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// In or out of network
	Network *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=network,proto3" json:"network,omitempty"`
	// Individual or family
	Unit *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=unit,proto3" json:"unit,omitempty"`
	// Annual or lifetime
	Term    *datatypes_go_proto.CodeableConcept                    `protobuf:"bytes,13,opt,name=term,proto3" json:"term,omitempty"`
	Benefit []*CoverageEligibilityResponse_Insurance_Items_Benefit `protobuf:"bytes,14,rep,name=benefit,proto3" json:"benefit,omitempty"`
	// Authorization required flag
	AuthorizationRequired *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=authorization_required,json=authorizationRequired,proto3" json:"authorization_required,omitempty"`
	// Type of required supporting materials
	AuthorizationSupporting []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=authorization_supporting,json=authorizationSupporting,proto3" json:"authorization_supporting,omitempty"`
	// Preauthorization requirements endpoint
	AuthorizationUrl *datatypes_go_proto.Uri `protobuf:"bytes,17,opt,name=authorization_url,json=authorizationUrl,proto3" json:"authorization_url,omitempty"`
}

func (x *CoverageEligibilityResponse_Insurance_Items) Reset() {
	*x = CoverageEligibilityResponse_Insurance_Items{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_Insurance_Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_Insurance_Items) ProtoMessage() {}

func (x *CoverageEligibilityResponse_Insurance_Items) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_Insurance_Items.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_Insurance_Items) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetExcluded() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Excluded
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetNetwork() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetUnit() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetTerm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetBenefit() []*CoverageEligibilityResponse_Insurance_Items_Benefit {
	if x != nil {
		return x.Benefit
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetAuthorizationRequired() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AuthorizationRequired
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetAuthorizationSupporting() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AuthorizationSupporting
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items) GetAuthorizationUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.AuthorizationUrl
	}
	return nil
}

// Benefit Summary
type CoverageEligibilityResponse_Insurance_Items_Benefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Benefit classification
	Type    *datatypes_go_proto.CodeableConcept                           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Allowed *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX `protobuf:"bytes,5,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Used    *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX    `protobuf:"bytes,6,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) Reset() {
	*x = CoverageEligibilityResponse_Insurance_Items_Benefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit) ProtoMessage() {}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_Insurance_Items_Benefit.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_Insurance_Items_Benefit) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) GetAllowed() *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit) GetUsed() *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX {
	if x != nil {
		return x.Used
	}
	return nil
}

// Benefits allowed
type CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_UnsignedInt
	//	*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_StringValue
	//	*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Money
	Choice isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice `protobuf_oneof:"choice"`
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) Reset() {
	*x = CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) ProtoMessage() {}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

func (m *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) GetChoice() isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Money); ok {
		return x.Money
	}
	return nil
}

type isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice interface {
	isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice()
}

type CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,1,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,3,opt,name=money,proto3,oneof"`
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_UnsignedInt) isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice() {
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_StringValue) isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice() {
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Money) isCoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Choice() {
}

// Benefits used
type CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_UnsignedInt
	//	*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_StringValue
	//	*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Money
	Choice isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice `protobuf_oneof:"choice"`
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) Reset() {
	*x = CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) ProtoMessage() {}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP(), []int{0, 4, 0, 0, 1}
}

func (m *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) GetChoice() isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetChoice().(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Money); ok {
		return x.Money
	}
	return nil
}

type isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice interface {
	isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice()
}

type CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,1,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,3,opt,name=money,proto3,oneof"`
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_UnsignedInt) isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice() {
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_StringValue) isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice() {
}

func (*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Money) isCoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x2d, 0x0a, 0x1b, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x58, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x60, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x26,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x58, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x4d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0xab, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x76,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xad,
	0x02, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xe5,
	0x14, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0xf9, 0x10, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x62, 0x0a, 0x07, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x07, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x53,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x15, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x17, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x1a, 0x81, 0x07, 0x0a, 0x07,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x58, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x62, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x58, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x1a, 0xd4, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x58, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xd1, 0x01, 0x0a, 0x05,
	0x55, 0x73, 0x65, 0x64, 0x58, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a,
	0x35, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x78, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0x84, 0x02, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x4f, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x42, 0x8d, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x01, 0x5a, 0x6a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_goTypes = []interface{}{
	(*CoverageEligibilityResponse)(nil),                                  // 0: google.fhir.r4.core.CoverageEligibilityResponse
	(*CoverageEligibilityResponse_StatusCode)(nil),                       // 1: google.fhir.r4.core.CoverageEligibilityResponse.StatusCode
	(*CoverageEligibilityResponse_PurposeCode)(nil),                      // 2: google.fhir.r4.core.CoverageEligibilityResponse.PurposeCode
	(*CoverageEligibilityResponse_ServicedX)(nil),                        // 3: google.fhir.r4.core.CoverageEligibilityResponse.ServicedX
	(*CoverageEligibilityResponse_OutcomeCode)(nil),                      // 4: google.fhir.r4.core.CoverageEligibilityResponse.OutcomeCode
	(*CoverageEligibilityResponse_Insurance)(nil),                        // 5: google.fhir.r4.core.CoverageEligibilityResponse.Insurance
	(*CoverageEligibilityResponse_Errors)(nil),                           // 6: google.fhir.r4.core.CoverageEligibilityResponse.Errors
	(*CoverageEligibilityResponse_Insurance_Items)(nil),                  // 7: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items
	(*CoverageEligibilityResponse_Insurance_Items_Benefit)(nil),          // 8: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit
	(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX)(nil), // 9: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.AllowedX
	(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX)(nil),    // 10: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.UsedX
	(*datatypes_go_proto.Id)(nil),                                        // 11: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                      // 12: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                       // 13: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                      // 14: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                                 // 15: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                      // 16: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                                 // 17: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                                // 18: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                                 // 19: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                                  // 20: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.String)(nil),                                    // 21: google.fhir.r4.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),                           // 22: google.fhir.r4.core.CodeableConcept
	(codes_go_proto.FinancialResourceStatusCode_Value)(0),                // 23: google.fhir.r4.core.FinancialResourceStatusCode.Value
	(codes_go_proto.EligibilityResponsePurposeCode_Value)(0),             // 24: google.fhir.r4.core.EligibilityResponsePurposeCode.Value
	(*datatypes_go_proto.Date)(nil),                                      // 25: google.fhir.r4.core.Date
	(*datatypes_go_proto.Period)(nil),                                    // 26: google.fhir.r4.core.Period
	(codes_go_proto.ClaimProcessingCode_Value)(0),                        // 27: google.fhir.r4.core.ClaimProcessingCode.Value
	(*datatypes_go_proto.Boolean)(nil),                                   // 28: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.UnsignedInt)(nil),                               // 29: google.fhir.r4.core.UnsignedInt
	(*datatypes_go_proto.Money)(nil),                                     // 30: google.fhir.r4.core.Money
}
var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_depIdxs = []int32{
	11, // 0: google.fhir.r4.core.CoverageEligibilityResponse.id:type_name -> google.fhir.r4.core.Id
	12, // 1: google.fhir.r4.core.CoverageEligibilityResponse.meta:type_name -> google.fhir.r4.core.Meta
	13, // 2: google.fhir.r4.core.CoverageEligibilityResponse.implicit_rules:type_name -> google.fhir.r4.core.Uri
	14, // 3: google.fhir.r4.core.CoverageEligibilityResponse.language:type_name -> google.fhir.r4.core.Code
	15, // 4: google.fhir.r4.core.CoverageEligibilityResponse.text:type_name -> google.fhir.r4.core.Narrative
	16, // 5: google.fhir.r4.core.CoverageEligibilityResponse.contained:type_name -> google.protobuf.Any
	17, // 6: google.fhir.r4.core.CoverageEligibilityResponse.extension:type_name -> google.fhir.r4.core.Extension
	17, // 7: google.fhir.r4.core.CoverageEligibilityResponse.modifier_extension:type_name -> google.fhir.r4.core.Extension
	18, // 8: google.fhir.r4.core.CoverageEligibilityResponse.identifier:type_name -> google.fhir.r4.core.Identifier
	1,  // 9: google.fhir.r4.core.CoverageEligibilityResponse.status:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.StatusCode
	2,  // 10: google.fhir.r4.core.CoverageEligibilityResponse.purpose:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.PurposeCode
	19, // 11: google.fhir.r4.core.CoverageEligibilityResponse.patient:type_name -> google.fhir.r4.core.Reference
	3,  // 12: google.fhir.r4.core.CoverageEligibilityResponse.serviced:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.ServicedX
	20, // 13: google.fhir.r4.core.CoverageEligibilityResponse.created:type_name -> google.fhir.r4.core.DateTime
	19, // 14: google.fhir.r4.core.CoverageEligibilityResponse.requestor:type_name -> google.fhir.r4.core.Reference
	19, // 15: google.fhir.r4.core.CoverageEligibilityResponse.request:type_name -> google.fhir.r4.core.Reference
	4,  // 16: google.fhir.r4.core.CoverageEligibilityResponse.outcome:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.OutcomeCode
	21, // 17: google.fhir.r4.core.CoverageEligibilityResponse.disposition:type_name -> google.fhir.r4.core.String
	19, // 18: google.fhir.r4.core.CoverageEligibilityResponse.insurer:type_name -> google.fhir.r4.core.Reference
	5,  // 19: google.fhir.r4.core.CoverageEligibilityResponse.insurance:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.Insurance
	21, // 20: google.fhir.r4.core.CoverageEligibilityResponse.pre_auth_ref:type_name -> google.fhir.r4.core.String
	22, // 21: google.fhir.r4.core.CoverageEligibilityResponse.form:type_name -> google.fhir.r4.core.CodeableConcept
	6,  // 22: google.fhir.r4.core.CoverageEligibilityResponse.error:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.Errors
	23, // 23: google.fhir.r4.core.CoverageEligibilityResponse.StatusCode.value:type_name -> google.fhir.r4.core.FinancialResourceStatusCode.Value
	21, // 24: google.fhir.r4.core.CoverageEligibilityResponse.StatusCode.id:type_name -> google.fhir.r4.core.String
	17, // 25: google.fhir.r4.core.CoverageEligibilityResponse.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	24, // 26: google.fhir.r4.core.CoverageEligibilityResponse.PurposeCode.value:type_name -> google.fhir.r4.core.EligibilityResponsePurposeCode.Value
	21, // 27: google.fhir.r4.core.CoverageEligibilityResponse.PurposeCode.id:type_name -> google.fhir.r4.core.String
	17, // 28: google.fhir.r4.core.CoverageEligibilityResponse.PurposeCode.extension:type_name -> google.fhir.r4.core.Extension
	25, // 29: google.fhir.r4.core.CoverageEligibilityResponse.ServicedX.date:type_name -> google.fhir.r4.core.Date
	26, // 30: google.fhir.r4.core.CoverageEligibilityResponse.ServicedX.period:type_name -> google.fhir.r4.core.Period
	27, // 31: google.fhir.r4.core.CoverageEligibilityResponse.OutcomeCode.value:type_name -> google.fhir.r4.core.ClaimProcessingCode.Value
	21, // 32: google.fhir.r4.core.CoverageEligibilityResponse.OutcomeCode.id:type_name -> google.fhir.r4.core.String
	17, // 33: google.fhir.r4.core.CoverageEligibilityResponse.OutcomeCode.extension:type_name -> google.fhir.r4.core.Extension
	21, // 34: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.id:type_name -> google.fhir.r4.core.String
	17, // 35: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.extension:type_name -> google.fhir.r4.core.Extension
	17, // 36: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	19, // 37: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.coverage:type_name -> google.fhir.r4.core.Reference
	28, // 38: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.inforce:type_name -> google.fhir.r4.core.Boolean
	26, // 39: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.benefit_period:type_name -> google.fhir.r4.core.Period
	7,  // 40: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.item:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items
	21, // 41: google.fhir.r4.core.CoverageEligibilityResponse.Errors.id:type_name -> google.fhir.r4.core.String
	17, // 42: google.fhir.r4.core.CoverageEligibilityResponse.Errors.extension:type_name -> google.fhir.r4.core.Extension
	17, // 43: google.fhir.r4.core.CoverageEligibilityResponse.Errors.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22, // 44: google.fhir.r4.core.CoverageEligibilityResponse.Errors.code:type_name -> google.fhir.r4.core.CodeableConcept
	21, // 45: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.id:type_name -> google.fhir.r4.core.String
	17, // 46: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.extension:type_name -> google.fhir.r4.core.Extension
	17, // 47: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22, // 48: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.category:type_name -> google.fhir.r4.core.CodeableConcept
	22, // 49: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.product_or_service:type_name -> google.fhir.r4.core.CodeableConcept
	22, // 50: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	19, // 51: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.provider:type_name -> google.fhir.r4.core.Reference
	28, // 52: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.excluded:type_name -> google.fhir.r4.core.Boolean
	21, // 53: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.name:type_name -> google.fhir.r4.core.String
	21, // 54: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.description:type_name -> google.fhir.r4.core.String
	22, // 55: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.network:type_name -> google.fhir.r4.core.CodeableConcept
	22, // 56: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.unit:type_name -> google.fhir.r4.core.CodeableConcept
	22, // 57: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.term:type_name -> google.fhir.r4.core.CodeableConcept
	8,  // 58: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.benefit:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit
	28, // 59: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.authorization_required:type_name -> google.fhir.r4.core.Boolean
	22, // 60: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.authorization_supporting:type_name -> google.fhir.r4.core.CodeableConcept
	13, // 61: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.authorization_url:type_name -> google.fhir.r4.core.Uri
	21, // 62: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.id:type_name -> google.fhir.r4.core.String
	17, // 63: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.extension:type_name -> google.fhir.r4.core.Extension
	17, // 64: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.modifier_extension:type_name -> google.fhir.r4.core.Extension
	22, // 65: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.type:type_name -> google.fhir.r4.core.CodeableConcept
	9,  // 66: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.allowed:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.AllowedX
	10, // 67: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.used:type_name -> google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.UsedX
	29, // 68: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.AllowedX.unsigned_int:type_name -> google.fhir.r4.core.UnsignedInt
	21, // 69: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.AllowedX.string_value:type_name -> google.fhir.r4.core.String
	30, // 70: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.AllowedX.money:type_name -> google.fhir.r4.core.Money
	29, // 71: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.UsedX.unsigned_int:type_name -> google.fhir.r4.core.UnsignedInt
	21, // 72: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.UsedX.string_value:type_name -> google.fhir.r4.core.String
	30, // 73: google.fhir.r4.core.CoverageEligibilityResponse.Insurance.Items.Benefit.UsedX.money:type_name -> google.fhir.r4.core.Money
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() {
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_init()
}
func file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_PurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_ServicedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_OutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_Errors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_Insurance_Items); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_Insurance_Items_Benefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CoverageEligibilityResponse_ServicedX_Date)(nil),
		(*CoverageEligibilityResponse_ServicedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_UnsignedInt)(nil),
		(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_StringValue)(nil),
		(*CoverageEligibilityResponse_Insurance_Items_Benefit_AllowedX_Money)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_UnsignedInt)(nil),
		(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_StringValue)(nil),
		(*CoverageEligibilityResponse_Insurance_Items_Benefit_UsedX_Money)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_response_proto_depIdxs = nil
}
