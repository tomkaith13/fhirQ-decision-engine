//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/structure_definition.proto

package structure_definition_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for StructureDefinition, last updated
// 2019-11-01T09:29:23.356+11:00. Structural Definition. See
// http://hl7.org/fhir/StructureDefinition/StructureDefinition
type StructureDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Canonical identifier for this structure definition, represented as a URI
	// (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the structure definition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the structure definition
	Version *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// Name for this structure definition (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this structure definition (human friendly)
	Title  *datatypes_go_proto.String      `protobuf:"bytes,14,opt,name=title,proto3" json:"title,omitempty"`
	Status *StructureDefinition_StatusCode `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,16,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*datatypes_go_proto.ContactDetail `protobuf:"bytes,19,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the structure definition
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	// The context that the content is intended to support
	UseContext []*datatypes_go_proto.UsageContext `protobuf:"bytes,21,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for structure definition (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Why this structure definition is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,23,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,24,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Assist with indexing and finding
	Keyword     []*datatypes_go_proto.Coding         `protobuf:"bytes,25,rep,name=keyword,proto3" json:"keyword,omitempty"`
	FhirVersion *StructureDefinition_FhirVersionCode `protobuf:"bytes,26,opt,name=fhir_version,json=fhirVersion,proto3" json:"fhir_version,omitempty"`
	Mapping     []*StructureDefinition_Mapping       `protobuf:"bytes,27,rep,name=mapping,proto3" json:"mapping,omitempty"`
	Kind        *StructureDefinition_KindCode        `protobuf:"bytes,28,opt,name=kind,proto3" json:"kind,omitempty"`
	// Whether the structure is abstract
	Abstract *datatypes_go_proto.Boolean    `protobuf:"bytes,29,opt,name=abstract,proto3" json:"abstract,omitempty"`
	Context  []*StructureDefinition_Context `protobuf:"bytes,30,rep,name=context,proto3" json:"context,omitempty"`
	// FHIRPath invariants - when the extension can be used
	ContextInvariant []*datatypes_go_proto.String `protobuf:"bytes,31,rep,name=context_invariant,json=contextInvariant,proto3" json:"context_invariant,omitempty"`
	// Type defined or constrained by this structure
	Type *datatypes_go_proto.Uri `protobuf:"bytes,32,opt,name=type,proto3" json:"type,omitempty"`
	// Definition that this type is constrained/specialized from
	BaseDefinition *datatypes_go_proto.Canonical       `protobuf:"bytes,33,opt,name=base_definition,json=baseDefinition,proto3" json:"base_definition,omitempty"`
	Derivation     *StructureDefinition_DerivationCode `protobuf:"bytes,34,opt,name=derivation,proto3" json:"derivation,omitempty"`
	Snapshot       *StructureDefinition_Snapshot       `protobuf:"bytes,35,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Differential   *StructureDefinition_Differential   `protobuf:"bytes,36,opt,name=differential,proto3" json:"differential,omitempty"`
}

func (x *StructureDefinition) Reset() {
	*x = StructureDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition) ProtoMessage() {}

func (x *StructureDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition.ProtoReflect.Descriptor instead.
func (*StructureDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0}
}

func (x *StructureDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *StructureDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *StructureDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *StructureDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *StructureDefinition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *StructureDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *StructureDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *StructureDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *StructureDefinition) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StructureDefinition) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *StructureDefinition) GetStatus() *StructureDefinition_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StructureDefinition) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *StructureDefinition) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *StructureDefinition) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *StructureDefinition) GetContact() []*datatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *StructureDefinition) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StructureDefinition) GetUseContext() []*datatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *StructureDefinition) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *StructureDefinition) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *StructureDefinition) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *StructureDefinition) GetKeyword() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *StructureDefinition) GetFhirVersion() *StructureDefinition_FhirVersionCode {
	if x != nil {
		return x.FhirVersion
	}
	return nil
}

func (x *StructureDefinition) GetMapping() []*StructureDefinition_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *StructureDefinition) GetKind() *StructureDefinition_KindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *StructureDefinition) GetAbstract() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *StructureDefinition) GetContext() []*StructureDefinition_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *StructureDefinition) GetContextInvariant() []*datatypes_go_proto.String {
	if x != nil {
		return x.ContextInvariant
	}
	return nil
}

func (x *StructureDefinition) GetType() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StructureDefinition) GetBaseDefinition() *datatypes_go_proto.Canonical {
	if x != nil {
		return x.BaseDefinition
	}
	return nil
}

func (x *StructureDefinition) GetDerivation() *StructureDefinition_DerivationCode {
	if x != nil {
		return x.Derivation
	}
	return nil
}

func (x *StructureDefinition) GetSnapshot() *StructureDefinition_Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *StructureDefinition) GetDifferential() *StructureDefinition_Differential {
	if x != nil {
		return x.Differential
	}
	return nil
}

// draft | active | retired | unknown
type StructureDefinition_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinition_StatusCode) Reset() {
	*x = StructureDefinition_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_StatusCode) ProtoMessage() {}

func (x *StructureDefinition_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_StatusCode.ProtoReflect.Descriptor instead.
func (*StructureDefinition_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StructureDefinition_StatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinition_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// FHIR Version this StructureDefinition targets
type StructureDefinition_FhirVersionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRVersionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FHIRVersionCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinition_FhirVersionCode) Reset() {
	*x = StructureDefinition_FhirVersionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_FhirVersionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_FhirVersionCode) ProtoMessage() {}

func (x *StructureDefinition_FhirVersionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_FhirVersionCode.ProtoReflect.Descriptor instead.
func (*StructureDefinition_FhirVersionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *StructureDefinition_FhirVersionCode) GetValue() codes_go_proto.FHIRVersionCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRVersionCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinition_FhirVersionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_FhirVersionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// External specification that the content is mapped to
type StructureDefinition_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Internal id when this mapping is used
	Identity *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// Identifies what this mapping refers to
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	// Names what this mapping refers to
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Versions, Issues, Scope limitations etc.
	Comment *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *StructureDefinition_Mapping) Reset() {
	*x = StructureDefinition_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Mapping) ProtoMessage() {}

func (x *StructureDefinition_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Mapping.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 2}
}

func (x *StructureDefinition_Mapping) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetIdentity() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

// primitive-type | complex-type | resource | logical
type StructureDefinition_KindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.StructureDefinitionKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.StructureDefinitionKindCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinition_KindCode) Reset() {
	*x = StructureDefinition_KindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_KindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_KindCode) ProtoMessage() {}

func (x *StructureDefinition_KindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_KindCode.ProtoReflect.Descriptor instead.
func (*StructureDefinition_KindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 3}
}

func (x *StructureDefinition_KindCode) GetValue() codes_go_proto.StructureDefinitionKindCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.StructureDefinitionKindCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinition_KindCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_KindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// If an extension, where it can be used in instances
type StructureDefinition_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Type              *StructureDefinition_Context_TypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Where the extension can be used in instances
	Expression *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *StructureDefinition_Context) Reset() {
	*x = StructureDefinition_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Context) ProtoMessage() {}

func (x *StructureDefinition_Context) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Context.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Context) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 4}
}

func (x *StructureDefinition_Context) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Context) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Context) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Context) GetType() *StructureDefinition_Context_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StructureDefinition_Context) GetExpression() *datatypes_go_proto.String {
	if x != nil {
		return x.Expression
	}
	return nil
}

// specialization | constraint - How relates to base definition
type StructureDefinition_DerivationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.TypeDerivationRuleCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.TypeDerivationRuleCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinition_DerivationCode) Reset() {
	*x = StructureDefinition_DerivationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_DerivationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_DerivationCode) ProtoMessage() {}

func (x *StructureDefinition_DerivationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_DerivationCode.ProtoReflect.Descriptor instead.
func (*StructureDefinition_DerivationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 5}
}

func (x *StructureDefinition_DerivationCode) GetValue() codes_go_proto.TypeDerivationRuleCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.TypeDerivationRuleCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinition_DerivationCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_DerivationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Snapshot view of the structure
type StructureDefinition_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Definition of elements in the resource (if no StructureDefinition)
	Element []*datatypes_go_proto.ElementDefinition `protobuf:"bytes,4,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *StructureDefinition_Snapshot) Reset() {
	*x = StructureDefinition_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Snapshot) ProtoMessage() {}

func (x *StructureDefinition_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Snapshot.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Snapshot) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 6}
}

func (x *StructureDefinition_Snapshot) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Snapshot) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Snapshot) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Snapshot) GetElement() []*datatypes_go_proto.ElementDefinition {
	if x != nil {
		return x.Element
	}
	return nil
}

// Differential view of the structure
type StructureDefinition_Differential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Definition of elements in the resource (if no StructureDefinition)
	Element []*datatypes_go_proto.ElementDefinition `protobuf:"bytes,4,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *StructureDefinition_Differential) Reset() {
	*x = StructureDefinition_Differential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Differential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Differential) ProtoMessage() {}

func (x *StructureDefinition_Differential) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Differential.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Differential) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 7}
}

func (x *StructureDefinition_Differential) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Differential) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Differential) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Differential) GetElement() []*datatypes_go_proto.ElementDefinition {
	if x != nil {
		return x.Element
	}
	return nil
}

// fhirpath | element | extension
type StructureDefinition_Context_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ExtensionContextTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ExtensionContextTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinition_Context_TypeCode) Reset() {
	*x = StructureDefinition_Context_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Context_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Context_TypeCode) ProtoMessage() {}

func (x *StructureDefinition_Context_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Context_TypeCode.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Context_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *StructureDefinition_Context_TypeCode) GetValue() codes_go_proto.ExtensionContextTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ExtensionContextTypeCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinition_Context_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Context_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_structure_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDesc = []byte{
	0x0a, 0x44, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8b, 0x3c, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0c,
	0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x5b, 0x0a, 0x0c, 0x66, 0x68, 0x69, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x66, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0xae, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa7, 0x02, 0x0a, 0x0f, 0x46, 0x68, 0x69, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x48, 0x49, 0x52, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xb9, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x23, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1d, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x75, 0x72, 0x69, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xb9, 0x02, 0x0a,
	0x08, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x74, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x95, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xb3, 0x02, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x71, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xb5, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xed, 0x04, 0x0a, 0x08, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x9a, 0x01, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x58, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x4c, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x89, 0x02, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x42, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x6c, 0x6c,
	0x28, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x9a, 0x01, 0x28, 0x25,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x3d, 0x20,
	0x27, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x29, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x20, 0x3d, 0x20, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x74, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x70, 0x61, 0x74, 0x68, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x29, 0x2e, 0x70, 0x61,
	0x74, 0x68, 0x26, 0x27, 0x2e, 0x27, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1a, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x1a, 0xb8, 0x04, 0x0a, 0x0c, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0xa3, 0x02,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x37, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x28, 0x27, 0x2e, 0x27, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29, 0x2e, 0x73, 0x6c,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0xdf, 0x01, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x6b,
	0x69, 0x6e, 0x64, 0x20, 0x3d, 0x20, 0x27, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x27, 0x20,
	0x6f, 0x72, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x28, 0x29, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x74, 0x61, 0x69, 0x6c, 0x28, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x61, 0x69, 0x6c, 0x28,
	0x29, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28, 0x29, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x5c, 0x5c, 0x2e, 0x2e, 0x2a, 0x27, 0x2c, 0x27, 0x27, 0x29, 0x26, 0x27, 0x2e, 0x27,
	0x29, 0x29, 0x29, 0x3a, 0xb1, 0x0e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x47, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20,
	0x27, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x27, 0x20, 0x6f, 0x72, 0x20,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x70, 0x61, 0x74, 0x68, 0x29, 0x2e, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x7e,
	0x28, 0x6b, 0x69, 0x6e, 0x64, 0x21, 0x3d, 0x27, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x27,
	0x20, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x28, 0x29, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x28, 0x27, 0x2e, 0x27, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29, 0x20, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28,
	0x29, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x2a, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x3d, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x4a, 0x74, 0x79, 0x70, 0x65, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x27, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x2a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0xd0, 0x01, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x70, 0x61,
	0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x28, 0x27, 0x2e, 0x27, 0x29,
	0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x28, 0x29, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x28, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x28, 0x27, 0x2e, 0x27, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x28, 0x29, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x28, 0x27, 0x2e, 0x27, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x52, 0x6b, 0x69, 0x6e, 0x64, 0x20,
	0x21, 0x3d, 0x20, 0x27, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x27, 0x20, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x28,
	0x29, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x4b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x69, 0x64, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x6c,
	0x6c, 0x28, 0x69, 0x64, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x3d, 0x6b, 0x69, 0x6e, 0x64, 0x21, 0x3d, 0x27, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x27, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x28, 0x29, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x53, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x69, 0x64, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x28, 0x27, 0x69, 0x64, 0x73, 0x27, 0x29, 0x2e, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5b,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x69, 0x64, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69,
	0x64, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x28, 0x27, 0x69, 0x64, 0x73, 0x27, 0x29, 0x2e, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08,
	0x34, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x27, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xd6, 0x02, 0x75, 0x72, 0x6c, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x27, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x6c,
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x5c, 0x5c,
	0x2f, 0x5c, 0x5c, 0x2f, 0x68, 0x6c, 0x37, 0x5c, 0x5c, 0x2e, 0x6f, 0x72, 0x67, 0x5c, 0x5c, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x70, 0x61, 0x74, 0x68, 0x5c, 0x5c, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5c, 0x5c, 0x2e, 0x5b, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x5d, 0x2b, 0x24, 0x27, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5c, 0x5c,
	0x2e, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x5c, 0x5c, 0x2f, 0x5c, 0x5c, 0x2f, 0x68,
	0x6c, 0x37, 0x5c, 0x5c, 0x2e, 0x6f, 0x72, 0x67, 0x5c, 0x5c, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x70,
	0x61, 0x74, 0x68, 0x5c, 0x5c, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x5c, 0x2e, 0x5b,
	0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x24, 0x27, 0x29,
	0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x52, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x64, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x27, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x97,
	0x01, 0x75, 0x72, 0x6c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x20, 0x28, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x59, 0x28, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x7c, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x29, 0x2e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x6c, 0x6c, 0x28, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x28, 0x27, 0x2e, 0x27, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x84, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x61, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_goTypes = []interface{}{
	(*StructureDefinition)(nil),                           // 0: google.fhir.r4.core.StructureDefinition
	(*StructureDefinition_StatusCode)(nil),                // 1: google.fhir.r4.core.StructureDefinition.StatusCode
	(*StructureDefinition_FhirVersionCode)(nil),           // 2: google.fhir.r4.core.StructureDefinition.FhirVersionCode
	(*StructureDefinition_Mapping)(nil),                   // 3: google.fhir.r4.core.StructureDefinition.Mapping
	(*StructureDefinition_KindCode)(nil),                  // 4: google.fhir.r4.core.StructureDefinition.KindCode
	(*StructureDefinition_Context)(nil),                   // 5: google.fhir.r4.core.StructureDefinition.Context
	(*StructureDefinition_DerivationCode)(nil),            // 6: google.fhir.r4.core.StructureDefinition.DerivationCode
	(*StructureDefinition_Snapshot)(nil),                  // 7: google.fhir.r4.core.StructureDefinition.Snapshot
	(*StructureDefinition_Differential)(nil),              // 8: google.fhir.r4.core.StructureDefinition.Differential
	(*StructureDefinition_Context_TypeCode)(nil),          // 9: google.fhir.r4.core.StructureDefinition.Context.TypeCode
	(*datatypes_go_proto.Id)(nil),                         // 10: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                       // 11: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                        // 12: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                       // 13: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                  // 14: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                       // 15: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                  // 16: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                 // 17: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.String)(nil),                     // 18: google.fhir.r4.core.String
	(*datatypes_go_proto.Boolean)(nil),                    // 19: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.DateTime)(nil),                   // 20: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.ContactDetail)(nil),              // 21: google.fhir.r4.core.ContactDetail
	(*datatypes_go_proto.Markdown)(nil),                   // 22: google.fhir.r4.core.Markdown
	(*datatypes_go_proto.UsageContext)(nil),               // 23: google.fhir.r4.core.UsageContext
	(*datatypes_go_proto.CodeableConcept)(nil),            // 24: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Coding)(nil),                     // 25: google.fhir.r4.core.Coding
	(*datatypes_go_proto.Canonical)(nil),                  // 26: google.fhir.r4.core.Canonical
	(codes_go_proto.PublicationStatusCode_Value)(0),       // 27: google.fhir.r4.core.PublicationStatusCode.Value
	(codes_go_proto.FHIRVersionCode_Value)(0),             // 28: google.fhir.r4.core.FHIRVersionCode.Value
	(codes_go_proto.StructureDefinitionKindCode_Value)(0), // 29: google.fhir.r4.core.StructureDefinitionKindCode.Value
	(codes_go_proto.TypeDerivationRuleCode_Value)(0),      // 30: google.fhir.r4.core.TypeDerivationRuleCode.Value
	(*datatypes_go_proto.ElementDefinition)(nil),          // 31: google.fhir.r4.core.ElementDefinition
	(codes_go_proto.ExtensionContextTypeCode_Value)(0),    // 32: google.fhir.r4.core.ExtensionContextTypeCode.Value
}
var file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_depIdxs = []int32{
	10, // 0: google.fhir.r4.core.StructureDefinition.id:type_name -> google.fhir.r4.core.Id
	11, // 1: google.fhir.r4.core.StructureDefinition.meta:type_name -> google.fhir.r4.core.Meta
	12, // 2: google.fhir.r4.core.StructureDefinition.implicit_rules:type_name -> google.fhir.r4.core.Uri
	13, // 3: google.fhir.r4.core.StructureDefinition.language:type_name -> google.fhir.r4.core.Code
	14, // 4: google.fhir.r4.core.StructureDefinition.text:type_name -> google.fhir.r4.core.Narrative
	15, // 5: google.fhir.r4.core.StructureDefinition.contained:type_name -> google.protobuf.Any
	16, // 6: google.fhir.r4.core.StructureDefinition.extension:type_name -> google.fhir.r4.core.Extension
	16, // 7: google.fhir.r4.core.StructureDefinition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	12, // 8: google.fhir.r4.core.StructureDefinition.url:type_name -> google.fhir.r4.core.Uri
	17, // 9: google.fhir.r4.core.StructureDefinition.identifier:type_name -> google.fhir.r4.core.Identifier
	18, // 10: google.fhir.r4.core.StructureDefinition.version:type_name -> google.fhir.r4.core.String
	18, // 11: google.fhir.r4.core.StructureDefinition.name:type_name -> google.fhir.r4.core.String
	18, // 12: google.fhir.r4.core.StructureDefinition.title:type_name -> google.fhir.r4.core.String
	1,  // 13: google.fhir.r4.core.StructureDefinition.status:type_name -> google.fhir.r4.core.StructureDefinition.StatusCode
	19, // 14: google.fhir.r4.core.StructureDefinition.experimental:type_name -> google.fhir.r4.core.Boolean
	20, // 15: google.fhir.r4.core.StructureDefinition.date:type_name -> google.fhir.r4.core.DateTime
	18, // 16: google.fhir.r4.core.StructureDefinition.publisher:type_name -> google.fhir.r4.core.String
	21, // 17: google.fhir.r4.core.StructureDefinition.contact:type_name -> google.fhir.r4.core.ContactDetail
	22, // 18: google.fhir.r4.core.StructureDefinition.description:type_name -> google.fhir.r4.core.Markdown
	23, // 19: google.fhir.r4.core.StructureDefinition.use_context:type_name -> google.fhir.r4.core.UsageContext
	24, // 20: google.fhir.r4.core.StructureDefinition.jurisdiction:type_name -> google.fhir.r4.core.CodeableConcept
	22, // 21: google.fhir.r4.core.StructureDefinition.purpose:type_name -> google.fhir.r4.core.Markdown
	22, // 22: google.fhir.r4.core.StructureDefinition.copyright:type_name -> google.fhir.r4.core.Markdown
	25, // 23: google.fhir.r4.core.StructureDefinition.keyword:type_name -> google.fhir.r4.core.Coding
	2,  // 24: google.fhir.r4.core.StructureDefinition.fhir_version:type_name -> google.fhir.r4.core.StructureDefinition.FhirVersionCode
	3,  // 25: google.fhir.r4.core.StructureDefinition.mapping:type_name -> google.fhir.r4.core.StructureDefinition.Mapping
	4,  // 26: google.fhir.r4.core.StructureDefinition.kind:type_name -> google.fhir.r4.core.StructureDefinition.KindCode
	19, // 27: google.fhir.r4.core.StructureDefinition.abstract:type_name -> google.fhir.r4.core.Boolean
	5,  // 28: google.fhir.r4.core.StructureDefinition.context:type_name -> google.fhir.r4.core.StructureDefinition.Context
	18, // 29: google.fhir.r4.core.StructureDefinition.context_invariant:type_name -> google.fhir.r4.core.String
	12, // 30: google.fhir.r4.core.StructureDefinition.type:type_name -> google.fhir.r4.core.Uri
	26, // 31: google.fhir.r4.core.StructureDefinition.base_definition:type_name -> google.fhir.r4.core.Canonical
	6,  // 32: google.fhir.r4.core.StructureDefinition.derivation:type_name -> google.fhir.r4.core.StructureDefinition.DerivationCode
	7,  // 33: google.fhir.r4.core.StructureDefinition.snapshot:type_name -> google.fhir.r4.core.StructureDefinition.Snapshot
	8,  // 34: google.fhir.r4.core.StructureDefinition.differential:type_name -> google.fhir.r4.core.StructureDefinition.Differential
	27, // 35: google.fhir.r4.core.StructureDefinition.StatusCode.value:type_name -> google.fhir.r4.core.PublicationStatusCode.Value
	18, // 36: google.fhir.r4.core.StructureDefinition.StatusCode.id:type_name -> google.fhir.r4.core.String
	16, // 37: google.fhir.r4.core.StructureDefinition.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	28, // 38: google.fhir.r4.core.StructureDefinition.FhirVersionCode.value:type_name -> google.fhir.r4.core.FHIRVersionCode.Value
	18, // 39: google.fhir.r4.core.StructureDefinition.FhirVersionCode.id:type_name -> google.fhir.r4.core.String
	16, // 40: google.fhir.r4.core.StructureDefinition.FhirVersionCode.extension:type_name -> google.fhir.r4.core.Extension
	18, // 41: google.fhir.r4.core.StructureDefinition.Mapping.id:type_name -> google.fhir.r4.core.String
	16, // 42: google.fhir.r4.core.StructureDefinition.Mapping.extension:type_name -> google.fhir.r4.core.Extension
	16, // 43: google.fhir.r4.core.StructureDefinition.Mapping.modifier_extension:type_name -> google.fhir.r4.core.Extension
	10, // 44: google.fhir.r4.core.StructureDefinition.Mapping.identity:type_name -> google.fhir.r4.core.Id
	12, // 45: google.fhir.r4.core.StructureDefinition.Mapping.uri:type_name -> google.fhir.r4.core.Uri
	18, // 46: google.fhir.r4.core.StructureDefinition.Mapping.name:type_name -> google.fhir.r4.core.String
	18, // 47: google.fhir.r4.core.StructureDefinition.Mapping.comment:type_name -> google.fhir.r4.core.String
	29, // 48: google.fhir.r4.core.StructureDefinition.KindCode.value:type_name -> google.fhir.r4.core.StructureDefinitionKindCode.Value
	18, // 49: google.fhir.r4.core.StructureDefinition.KindCode.id:type_name -> google.fhir.r4.core.String
	16, // 50: google.fhir.r4.core.StructureDefinition.KindCode.extension:type_name -> google.fhir.r4.core.Extension
	18, // 51: google.fhir.r4.core.StructureDefinition.Context.id:type_name -> google.fhir.r4.core.String
	16, // 52: google.fhir.r4.core.StructureDefinition.Context.extension:type_name -> google.fhir.r4.core.Extension
	16, // 53: google.fhir.r4.core.StructureDefinition.Context.modifier_extension:type_name -> google.fhir.r4.core.Extension
	9,  // 54: google.fhir.r4.core.StructureDefinition.Context.type:type_name -> google.fhir.r4.core.StructureDefinition.Context.TypeCode
	18, // 55: google.fhir.r4.core.StructureDefinition.Context.expression:type_name -> google.fhir.r4.core.String
	30, // 56: google.fhir.r4.core.StructureDefinition.DerivationCode.value:type_name -> google.fhir.r4.core.TypeDerivationRuleCode.Value
	18, // 57: google.fhir.r4.core.StructureDefinition.DerivationCode.id:type_name -> google.fhir.r4.core.String
	16, // 58: google.fhir.r4.core.StructureDefinition.DerivationCode.extension:type_name -> google.fhir.r4.core.Extension
	18, // 59: google.fhir.r4.core.StructureDefinition.Snapshot.id:type_name -> google.fhir.r4.core.String
	16, // 60: google.fhir.r4.core.StructureDefinition.Snapshot.extension:type_name -> google.fhir.r4.core.Extension
	16, // 61: google.fhir.r4.core.StructureDefinition.Snapshot.modifier_extension:type_name -> google.fhir.r4.core.Extension
	31, // 62: google.fhir.r4.core.StructureDefinition.Snapshot.element:type_name -> google.fhir.r4.core.ElementDefinition
	18, // 63: google.fhir.r4.core.StructureDefinition.Differential.id:type_name -> google.fhir.r4.core.String
	16, // 64: google.fhir.r4.core.StructureDefinition.Differential.extension:type_name -> google.fhir.r4.core.Extension
	16, // 65: google.fhir.r4.core.StructureDefinition.Differential.modifier_extension:type_name -> google.fhir.r4.core.Extension
	31, // 66: google.fhir.r4.core.StructureDefinition.Differential.element:type_name -> google.fhir.r4.core.ElementDefinition
	32, // 67: google.fhir.r4.core.StructureDefinition.Context.TypeCode.value:type_name -> google.fhir.r4.core.ExtensionContextTypeCode.Value
	18, // 68: google.fhir.r4.core.StructureDefinition.Context.TypeCode.id:type_name -> google.fhir.r4.core.String
	16, // 69: google.fhir.r4.core.StructureDefinition.Context.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_structure_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_FhirVersionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_KindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_DerivationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Differential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Context_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_structure_definition_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_structure_definition_proto_depIdxs = nil
}
