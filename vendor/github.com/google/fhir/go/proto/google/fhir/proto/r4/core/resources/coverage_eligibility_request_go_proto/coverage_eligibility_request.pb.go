//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/coverage_eligibility_request.proto

package coverage_eligibility_request_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for CoverageEligibilityRequest, last
// updated 2019-11-01T09:29:23.356+11:00. CoverageEligibilityRequest resource.
// See http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest
type CoverageEligibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for coverage eligiblity request
	Identifier []*datatypes_go_proto.Identifier       `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Status     *CoverageEligibilityRequest_StatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Desired processing priority
	Priority *datatypes_go_proto.CodeableConcept       `protobuf:"bytes,12,opt,name=priority,proto3" json:"priority,omitempty"`
	Purpose  []*CoverageEligibilityRequest_PurposeCode `protobuf:"bytes,13,rep,name=purpose,proto3" json:"purpose,omitempty"`
	// Intended recipient of products and services
	Patient  *datatypes_go_proto.Reference         `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	Serviced *CoverageEligibilityRequest_ServicedX `protobuf:"bytes,15,opt,name=serviced,proto3" json:"serviced,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=created,proto3" json:"created,omitempty"`
	// Author
	Enterer *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=enterer,proto3" json:"enterer,omitempty"`
	// Party responsible for the request
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=provider,proto3" json:"provider,omitempty"`
	// Coverage issuer
	Insurer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=insurer,proto3" json:"insurer,omitempty"`
	// Servicing facility
	Facility       *datatypes_go_proto.Reference                       `protobuf:"bytes,20,opt,name=facility,proto3" json:"facility,omitempty"`
	SupportingInfo []*CoverageEligibilityRequest_SupportingInformation `protobuf:"bytes,21,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	Insurance      []*CoverageEligibilityRequest_Insurance             `protobuf:"bytes,22,rep,name=insurance,proto3" json:"insurance,omitempty"`
	Item           []*CoverageEligibilityRequest_Details               `protobuf:"bytes,23,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *CoverageEligibilityRequest) Reset() {
	*x = CoverageEligibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest) ProtoMessage() {}

func (x *CoverageEligibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0}
}

func (x *CoverageEligibilityRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetStatus() *CoverageEligibilityRequest_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetPurpose() []*CoverageEligibilityRequest_PurposeCode {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetServiced() *CoverageEligibilityRequest_ServicedX {
	if x != nil {
		return x.Serviced
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetEnterer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Enterer
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetInsurer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Insurer
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetFacility() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetSupportingInfo() []*CoverageEligibilityRequest_SupportingInformation {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetInsurance() []*CoverageEligibilityRequest_Insurance {
	if x != nil {
		return x.Insurance
	}
	return nil
}

func (x *CoverageEligibilityRequest) GetItem() []*CoverageEligibilityRequest_Details {
	if x != nil {
		return x.Item
	}
	return nil
}

// active | cancelled | draft | entered-in-error
type CoverageEligibilityRequest_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FinancialResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.FinancialResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                  `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CoverageEligibilityRequest_StatusCode) Reset() {
	*x = CoverageEligibilityRequest_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_StatusCode) ProtoMessage() {}

func (x *CoverageEligibilityRequest_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_StatusCode.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CoverageEligibilityRequest_StatusCode) GetValue() codes_go_proto.FinancialResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FinancialResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *CoverageEligibilityRequest_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// auth-requirements | benefits | discovery | validation
type CoverageEligibilityRequest_PurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.EligibilityRequestPurposeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.EligibilityRequestPurposeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CoverageEligibilityRequest_PurposeCode) Reset() {
	*x = CoverageEligibilityRequest_PurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_PurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_PurposeCode) ProtoMessage() {}

func (x *CoverageEligibilityRequest_PurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_PurposeCode.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_PurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CoverageEligibilityRequest_PurposeCode) GetValue() codes_go_proto.EligibilityRequestPurposeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.EligibilityRequestPurposeCode_INVALID_UNINITIALIZED
}

func (x *CoverageEligibilityRequest_PurposeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest_PurposeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Estimated date or dates of service
type CoverageEligibilityRequest_ServicedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*CoverageEligibilityRequest_ServicedX_Date
	//	*CoverageEligibilityRequest_ServicedX_Period
	Choice isCoverageEligibilityRequest_ServicedX_Choice `protobuf_oneof:"choice"`
}

func (x *CoverageEligibilityRequest_ServicedX) Reset() {
	*x = CoverageEligibilityRequest_ServicedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_ServicedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_ServicedX) ProtoMessage() {}

func (x *CoverageEligibilityRequest_ServicedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_ServicedX.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_ServicedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 2}
}

func (m *CoverageEligibilityRequest_ServicedX) GetChoice() isCoverageEligibilityRequest_ServicedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *CoverageEligibilityRequest_ServicedX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*CoverageEligibilityRequest_ServicedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *CoverageEligibilityRequest_ServicedX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*CoverageEligibilityRequest_ServicedX_Period); ok {
		return x.Period
	}
	return nil
}

type isCoverageEligibilityRequest_ServicedX_Choice interface {
	isCoverageEligibilityRequest_ServicedX_Choice()
}

type CoverageEligibilityRequest_ServicedX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type CoverageEligibilityRequest_ServicedX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*CoverageEligibilityRequest_ServicedX_Date) isCoverageEligibilityRequest_ServicedX_Choice() {}

func (*CoverageEligibilityRequest_ServicedX_Period) isCoverageEligibilityRequest_ServicedX_Choice() {}

// Supporting information
type CoverageEligibilityRequest_SupportingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Information instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Data to be provided
	Information *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=information,proto3" json:"information,omitempty"`
	// Applies to all items
	AppliesToAll *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=applies_to_all,json=appliesToAll,proto3" json:"applies_to_all,omitempty"`
}

func (x *CoverageEligibilityRequest_SupportingInformation) Reset() {
	*x = CoverageEligibilityRequest_SupportingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_SupportingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_SupportingInformation) ProtoMessage() {}

func (x *CoverageEligibilityRequest_SupportingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_SupportingInformation.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_SupportingInformation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CoverageEligibilityRequest_SupportingInformation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest_SupportingInformation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityRequest_SupportingInformation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityRequest_SupportingInformation) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *CoverageEligibilityRequest_SupportingInformation) GetInformation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *CoverageEligibilityRequest_SupportingInformation) GetAppliesToAll() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AppliesToAll
	}
	return nil
}

// Patient insurance information
type CoverageEligibilityRequest_Insurance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Applicable coverage
	Focal *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=focal,proto3" json:"focal,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Additional provider contract number
	BusinessArrangement *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=business_arrangement,json=businessArrangement,proto3" json:"business_arrangement,omitempty"`
}

func (x *CoverageEligibilityRequest_Insurance) Reset() {
	*x = CoverageEligibilityRequest_Insurance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_Insurance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_Insurance) ProtoMessage() {}

func (x *CoverageEligibilityRequest_Insurance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_Insurance.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_Insurance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CoverageEligibilityRequest_Insurance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest_Insurance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityRequest_Insurance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityRequest_Insurance) GetFocal() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Focal
	}
	return nil
}

func (x *CoverageEligibilityRequest_Insurance) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *CoverageEligibilityRequest_Insurance) GetBusinessArrangement() *datatypes_go_proto.String {
	if x != nil {
		return x.BusinessArrangement
	}
	return nil
}

// Item to be evaluated for eligibiity
type CoverageEligibilityRequest_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Applicable exception or supporting information
	SupportingInfoSequence []*datatypes_go_proto.PositiveInt `protobuf:"bytes,4,rep,name=supporting_info_sequence,json=supportingInfoSequence,proto3" json:"supporting_info_sequence,omitempty"`
	// Benefit classification
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	// Billing, service, product, or drug code
	ProductOrService *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=product_or_service,json=productOrService,proto3" json:"product_or_service,omitempty"`
	// Product or service billing modifiers
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Perfoming practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	// Count of products or services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per item
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,10,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Servicing facility
	Facility  *datatypes_go_proto.Reference                   `protobuf:"bytes,11,opt,name=facility,proto3" json:"facility,omitempty"`
	Diagnosis []*CoverageEligibilityRequest_Details_Diagnosis `protobuf:"bytes,12,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// Product or service details
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CoverageEligibilityRequest_Details) Reset() {
	*x = CoverageEligibilityRequest_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_Details) ProtoMessage() {}

func (x *CoverageEligibilityRequest_Details) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_Details.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_Details) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CoverageEligibilityRequest_Details) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetSupportingInfoSequence() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SupportingInfoSequence
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetProductOrService() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ProductOrService
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetFacility() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetDiagnosis() []*CoverageEligibilityRequest_Details_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Applicable diagnosis
type CoverageEligibilityRequest_Details_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                          `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Diagnosis         *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX `protobuf:"bytes,4,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *CoverageEligibilityRequest_Details_Diagnosis) Reset() {
	*x = CoverageEligibilityRequest_Details_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_Details_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_Details_Diagnosis) ProtoMessage() {}

func (x *CoverageEligibilityRequest_Details_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_Details_Diagnosis.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_Details_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *CoverageEligibilityRequest_Details_Diagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details_Diagnosis) GetDiagnosis() *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

// Nature of illness or problem
type CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_CodeableConcept
	//	*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Reference
	Choice isCoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Choice `protobuf_oneof:"choice"`
}

func (x *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) Reset() {
	*x = CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) ProtoMessage() {}

func (x *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX.ProtoReflect.Descriptor instead.
func (*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (m *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) GetChoice() isCoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isCoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Choice interface {
	isCoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Choice()
}

type CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_CodeableConcept) isCoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Choice() {
}

func (*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Reference) isCoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x26, 0x0a, 0x1a, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x64, 0x58, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x62, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x0f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x1a, 0xab, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xbf, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x58,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb3, 0x03, 0x0a, 0x15, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x1a, 0x9b, 0x03, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4e,
	0x0a, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xd9,
	0x0b, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x1a, 0xf6, 0x03, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x09, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x58, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x4e, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x42, 0x8c, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x69,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_goTypes = []interface{}{
	(*CoverageEligibilityRequest)(nil),                              // 0: google.fhir.r4.core.CoverageEligibilityRequest
	(*CoverageEligibilityRequest_StatusCode)(nil),                   // 1: google.fhir.r4.core.CoverageEligibilityRequest.StatusCode
	(*CoverageEligibilityRequest_PurposeCode)(nil),                  // 2: google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode
	(*CoverageEligibilityRequest_ServicedX)(nil),                    // 3: google.fhir.r4.core.CoverageEligibilityRequest.ServicedX
	(*CoverageEligibilityRequest_SupportingInformation)(nil),        // 4: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation
	(*CoverageEligibilityRequest_Insurance)(nil),                    // 5: google.fhir.r4.core.CoverageEligibilityRequest.Insurance
	(*CoverageEligibilityRequest_Details)(nil),                      // 6: google.fhir.r4.core.CoverageEligibilityRequest.Details
	(*CoverageEligibilityRequest_Details_Diagnosis)(nil),            // 7: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis
	(*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX)(nil), // 8: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX
	(*datatypes_go_proto.Id)(nil),                                   // 9: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                 // 10: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                  // 11: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                 // 12: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                            // 13: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                 // 14: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                            // 15: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                           // 16: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                      // 17: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                            // 18: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                             // 19: google.fhir.r4.core.DateTime
	(codes_go_proto.FinancialResourceStatusCode_Value)(0),           // 20: google.fhir.r4.core.FinancialResourceStatusCode.Value
	(*datatypes_go_proto.String)(nil),                               // 21: google.fhir.r4.core.String
	(codes_go_proto.EligibilityRequestPurposeCode_Value)(0),         // 22: google.fhir.r4.core.EligibilityRequestPurposeCode.Value
	(*datatypes_go_proto.Date)(nil),                                 // 23: google.fhir.r4.core.Date
	(*datatypes_go_proto.Period)(nil),                               // 24: google.fhir.r4.core.Period
	(*datatypes_go_proto.PositiveInt)(nil),                          // 25: google.fhir.r4.core.PositiveInt
	(*datatypes_go_proto.Boolean)(nil),                              // 26: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.SimpleQuantity)(nil),                       // 27: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Money)(nil),                                // 28: google.fhir.r4.core.Money
}
var file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_depIdxs = []int32{
	9,  // 0: google.fhir.r4.core.CoverageEligibilityRequest.id:type_name -> google.fhir.r4.core.Id
	10, // 1: google.fhir.r4.core.CoverageEligibilityRequest.meta:type_name -> google.fhir.r4.core.Meta
	11, // 2: google.fhir.r4.core.CoverageEligibilityRequest.implicit_rules:type_name -> google.fhir.r4.core.Uri
	12, // 3: google.fhir.r4.core.CoverageEligibilityRequest.language:type_name -> google.fhir.r4.core.Code
	13, // 4: google.fhir.r4.core.CoverageEligibilityRequest.text:type_name -> google.fhir.r4.core.Narrative
	14, // 5: google.fhir.r4.core.CoverageEligibilityRequest.contained:type_name -> google.protobuf.Any
	15, // 6: google.fhir.r4.core.CoverageEligibilityRequest.extension:type_name -> google.fhir.r4.core.Extension
	15, // 7: google.fhir.r4.core.CoverageEligibilityRequest.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 8: google.fhir.r4.core.CoverageEligibilityRequest.identifier:type_name -> google.fhir.r4.core.Identifier
	1,  // 9: google.fhir.r4.core.CoverageEligibilityRequest.status:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.StatusCode
	17, // 10: google.fhir.r4.core.CoverageEligibilityRequest.priority:type_name -> google.fhir.r4.core.CodeableConcept
	2,  // 11: google.fhir.r4.core.CoverageEligibilityRequest.purpose:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode
	18, // 12: google.fhir.r4.core.CoverageEligibilityRequest.patient:type_name -> google.fhir.r4.core.Reference
	3,  // 13: google.fhir.r4.core.CoverageEligibilityRequest.serviced:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.ServicedX
	19, // 14: google.fhir.r4.core.CoverageEligibilityRequest.created:type_name -> google.fhir.r4.core.DateTime
	18, // 15: google.fhir.r4.core.CoverageEligibilityRequest.enterer:type_name -> google.fhir.r4.core.Reference
	18, // 16: google.fhir.r4.core.CoverageEligibilityRequest.provider:type_name -> google.fhir.r4.core.Reference
	18, // 17: google.fhir.r4.core.CoverageEligibilityRequest.insurer:type_name -> google.fhir.r4.core.Reference
	18, // 18: google.fhir.r4.core.CoverageEligibilityRequest.facility:type_name -> google.fhir.r4.core.Reference
	4,  // 19: google.fhir.r4.core.CoverageEligibilityRequest.supporting_info:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation
	5,  // 20: google.fhir.r4.core.CoverageEligibilityRequest.insurance:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.Insurance
	6,  // 21: google.fhir.r4.core.CoverageEligibilityRequest.item:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.Details
	20, // 22: google.fhir.r4.core.CoverageEligibilityRequest.StatusCode.value:type_name -> google.fhir.r4.core.FinancialResourceStatusCode.Value
	21, // 23: google.fhir.r4.core.CoverageEligibilityRequest.StatusCode.id:type_name -> google.fhir.r4.core.String
	15, // 24: google.fhir.r4.core.CoverageEligibilityRequest.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	22, // 25: google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode.value:type_name -> google.fhir.r4.core.EligibilityRequestPurposeCode.Value
	21, // 26: google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode.id:type_name -> google.fhir.r4.core.String
	15, // 27: google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode.extension:type_name -> google.fhir.r4.core.Extension
	23, // 28: google.fhir.r4.core.CoverageEligibilityRequest.ServicedX.date:type_name -> google.fhir.r4.core.Date
	24, // 29: google.fhir.r4.core.CoverageEligibilityRequest.ServicedX.period:type_name -> google.fhir.r4.core.Period
	21, // 30: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation.id:type_name -> google.fhir.r4.core.String
	15, // 31: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation.extension:type_name -> google.fhir.r4.core.Extension
	15, // 32: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation.modifier_extension:type_name -> google.fhir.r4.core.Extension
	25, // 33: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation.sequence:type_name -> google.fhir.r4.core.PositiveInt
	18, // 34: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation.information:type_name -> google.fhir.r4.core.Reference
	26, // 35: google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation.applies_to_all:type_name -> google.fhir.r4.core.Boolean
	21, // 36: google.fhir.r4.core.CoverageEligibilityRequest.Insurance.id:type_name -> google.fhir.r4.core.String
	15, // 37: google.fhir.r4.core.CoverageEligibilityRequest.Insurance.extension:type_name -> google.fhir.r4.core.Extension
	15, // 38: google.fhir.r4.core.CoverageEligibilityRequest.Insurance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	26, // 39: google.fhir.r4.core.CoverageEligibilityRequest.Insurance.focal:type_name -> google.fhir.r4.core.Boolean
	18, // 40: google.fhir.r4.core.CoverageEligibilityRequest.Insurance.coverage:type_name -> google.fhir.r4.core.Reference
	21, // 41: google.fhir.r4.core.CoverageEligibilityRequest.Insurance.business_arrangement:type_name -> google.fhir.r4.core.String
	21, // 42: google.fhir.r4.core.CoverageEligibilityRequest.Details.id:type_name -> google.fhir.r4.core.String
	15, // 43: google.fhir.r4.core.CoverageEligibilityRequest.Details.extension:type_name -> google.fhir.r4.core.Extension
	15, // 44: google.fhir.r4.core.CoverageEligibilityRequest.Details.modifier_extension:type_name -> google.fhir.r4.core.Extension
	25, // 45: google.fhir.r4.core.CoverageEligibilityRequest.Details.supporting_info_sequence:type_name -> google.fhir.r4.core.PositiveInt
	17, // 46: google.fhir.r4.core.CoverageEligibilityRequest.Details.category:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 47: google.fhir.r4.core.CoverageEligibilityRequest.Details.product_or_service:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 48: google.fhir.r4.core.CoverageEligibilityRequest.Details.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 49: google.fhir.r4.core.CoverageEligibilityRequest.Details.provider:type_name -> google.fhir.r4.core.Reference
	27, // 50: google.fhir.r4.core.CoverageEligibilityRequest.Details.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	28, // 51: google.fhir.r4.core.CoverageEligibilityRequest.Details.unit_price:type_name -> google.fhir.r4.core.Money
	18, // 52: google.fhir.r4.core.CoverageEligibilityRequest.Details.facility:type_name -> google.fhir.r4.core.Reference
	7,  // 53: google.fhir.r4.core.CoverageEligibilityRequest.Details.diagnosis:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis
	18, // 54: google.fhir.r4.core.CoverageEligibilityRequest.Details.detail:type_name -> google.fhir.r4.core.Reference
	21, // 55: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.id:type_name -> google.fhir.r4.core.String
	15, // 56: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.extension:type_name -> google.fhir.r4.core.Extension
	15, // 57: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.modifier_extension:type_name -> google.fhir.r4.core.Extension
	8,  // 58: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.diagnosis:type_name -> google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX
	17, // 59: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 60: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX.reference:type_name -> google.fhir.r4.core.Reference
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_PurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_ServicedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_SupportingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_Insurance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_Details_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CoverageEligibilityRequest_ServicedX_Date)(nil),
		(*CoverageEligibilityRequest_ServicedX_Period)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_CodeableConcept)(nil),
		(*CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_coverage_eligibility_request_proto_depIdxs = nil
}
