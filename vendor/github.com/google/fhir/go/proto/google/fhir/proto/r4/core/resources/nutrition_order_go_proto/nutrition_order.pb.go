//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/nutrition_order.proto

package nutrition_order_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for NutritionOrder, last updated
// 2019-11-01T09:29:23.356+11:00. Diet, formula or nutritional supplement
// request. See http://hl7.org/fhir/StructureDefinition/NutritionOrder
type NutritionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers assigned to this order
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates FHIR protocol or definition
	InstantiatesCanonical []*datatypes_go_proto.Canonical `protobuf:"bytes,11,rep,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// Instantiates external protocol or definition
	InstantiatesUri []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Instantiates protocol or definition
	Instantiates []*datatypes_go_proto.Uri  `protobuf:"bytes,13,rep,name=instantiates,proto3" json:"instantiates,omitempty"`
	Status       *NutritionOrder_StatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Intent       *NutritionOrder_IntentCode `protobuf:"bytes,15,opt,name=intent,proto3" json:"intent,omitempty"`
	// The person who requires the diet, formula or nutritional supplement
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=patient,proto3" json:"patient,omitempty"`
	// The encounter associated with this nutrition order
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Date and time the nutrition order was requested
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// Who ordered the diet, formula or nutritional supplement
	Orderer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// List of the patient's food and nutrition-related allergies and intolerances
	AllergyIntolerance []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=allergy_intolerance,json=allergyIntolerance,proto3" json:"allergy_intolerance,omitempty"`
	// Order-specific modifier about the type of food that should be given
	FoodPreferenceModifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=food_preference_modifier,json=foodPreferenceModifier,proto3" json:"food_preference_modifier,omitempty"`
	// Order-specific modifier about the type of food that should not be given
	ExcludeFoodModifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=exclude_food_modifier,json=excludeFoodModifier,proto3" json:"exclude_food_modifier,omitempty"`
	OralDiet            *NutritionOrder_OralDiet              `protobuf:"bytes,23,opt,name=oral_diet,json=oralDiet,proto3" json:"oral_diet,omitempty"`
	Supplement          []*NutritionOrder_Supplement          `protobuf:"bytes,24,rep,name=supplement,proto3" json:"supplement,omitempty"`
	EnteralFormula      *NutritionOrder_EnteralFormula        `protobuf:"bytes,25,opt,name=enteral_formula,json=enteralFormula,proto3" json:"enteral_formula,omitempty"`
	// Comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *NutritionOrder) Reset() {
	*x = NutritionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder) ProtoMessage() {}

func (x *NutritionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder.ProtoReflect.Descriptor instead.
func (*NutritionOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0}
}

func (x *NutritionOrder) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NutritionOrder) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *NutritionOrder) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *NutritionOrder) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *NutritionOrder) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *NutritionOrder) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *NutritionOrder) GetInstantiatesCanonical() []*datatypes_go_proto.Canonical {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *NutritionOrder) GetInstantiatesUri() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *NutritionOrder) GetInstantiates() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Instantiates
	}
	return nil
}

func (x *NutritionOrder) GetStatus() *NutritionOrder_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *NutritionOrder) GetIntent() *NutritionOrder_IntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *NutritionOrder) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *NutritionOrder) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *NutritionOrder) GetDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *NutritionOrder) GetOrderer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *NutritionOrder) GetAllergyIntolerance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AllergyIntolerance
	}
	return nil
}

func (x *NutritionOrder) GetFoodPreferenceModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FoodPreferenceModifier
	}
	return nil
}

func (x *NutritionOrder) GetExcludeFoodModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExcludeFoodModifier
	}
	return nil
}

func (x *NutritionOrder) GetOralDiet() *NutritionOrder_OralDiet {
	if x != nil {
		return x.OralDiet
	}
	return nil
}

func (x *NutritionOrder) GetSupplement() []*NutritionOrder_Supplement {
	if x != nil {
		return x.Supplement
	}
	return nil
}

func (x *NutritionOrder) GetEnteralFormula() *NutritionOrder_EnteralFormula {
	if x != nil {
		return x.EnteralFormula
	}
	return nil
}

func (x *NutritionOrder) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// draft | active | on-hold | revoked | completed | entered-in-error | unknown
type NutritionOrder_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NutritionOrder_StatusCode) Reset() {
	*x = NutritionOrder_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_StatusCode) ProtoMessage() {}

func (x *NutritionOrder_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_StatusCode.ProtoReflect.Descriptor instead.
func (*NutritionOrder_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NutritionOrder_StatusCode) GetValue() codes_go_proto.RequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestStatusCode_INVALID_UNINITIALIZED
}

func (x *NutritionOrder_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// proposal | plan | directive | order | original-order | reflex-order |
// filler-order | instance-order | option
type NutritionOrder_IntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RequestIntentCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.RequestIntentCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NutritionOrder_IntentCode) Reset() {
	*x = NutritionOrder_IntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_IntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_IntentCode) ProtoMessage() {}

func (x *NutritionOrder_IntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_IntentCode.ProtoReflect.Descriptor instead.
func (*NutritionOrder_IntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NutritionOrder_IntentCode) GetValue() codes_go_proto.RequestIntentCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RequestIntentCode_INVALID_UNINITIALIZED
}

func (x *NutritionOrder_IntentCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_IntentCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Oral diet components
type NutritionOrder_OralDiet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of oral diet or diet restrictions that describe what can be consumed
	// orally
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Scheduled frequency of diet
	Schedule []*datatypes_go_proto.Timing        `protobuf:"bytes,5,rep,name=schedule,proto3" json:"schedule,omitempty"`
	Nutrient []*NutritionOrder_OralDiet_Nutrient `protobuf:"bytes,6,rep,name=nutrient,proto3" json:"nutrient,omitempty"`
	Texture  []*NutritionOrder_OralDiet_Texture  `protobuf:"bytes,7,rep,name=texture,proto3" json:"texture,omitempty"`
	// The required consistency of fluids and liquids provided to the patient
	FluidConsistencyType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=fluid_consistency_type,json=fluidConsistencyType,proto3" json:"fluid_consistency_type,omitempty"`
	// Instructions or additional information about the oral diet
	Instruction *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *NutritionOrder_OralDiet) Reset() {
	*x = NutritionOrder_OralDiet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_OralDiet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_OralDiet) ProtoMessage() {}

func (x *NutritionOrder_OralDiet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_OralDiet.ProtoReflect.Descriptor instead.
func (*NutritionOrder_OralDiet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NutritionOrder_OralDiet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetSchedule() []*datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetNutrient() []*NutritionOrder_OralDiet_Nutrient {
	if x != nil {
		return x.Nutrient
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetTexture() []*NutritionOrder_OralDiet_Texture {
	if x != nil {
		return x.Texture
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetFluidConsistencyType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FluidConsistencyType
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Supplement components
type NutritionOrder_Supplement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of supplement product requested
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Product or brand name of the nutritional supplement
	ProductName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Scheduled frequency of supplement
	Schedule []*datatypes_go_proto.Timing `protobuf:"bytes,6,rep,name=schedule,proto3" json:"schedule,omitempty"`
	// Amount of the nutritional supplement
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Instructions or additional information about the oral supplement
	Instruction *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *NutritionOrder_Supplement) Reset() {
	*x = NutritionOrder_Supplement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_Supplement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_Supplement) ProtoMessage() {}

func (x *NutritionOrder_Supplement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_Supplement.ProtoReflect.Descriptor instead.
func (*NutritionOrder_Supplement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 3}
}

func (x *NutritionOrder_Supplement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetSchedule() []*datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Enteral formula components
type NutritionOrder_EnteralFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of enteral or infant formula
	BaseFormulaType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=base_formula_type,json=baseFormulaType,proto3" json:"base_formula_type,omitempty"`
	// Product or brand name of the enteral or infant formula
	BaseFormulaProductName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=base_formula_product_name,json=baseFormulaProductName,proto3" json:"base_formula_product_name,omitempty"`
	// Type of modular component to add to the feeding
	AdditiveType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=additive_type,json=additiveType,proto3" json:"additive_type,omitempty"`
	// Product or brand name of the modular additive
	AdditiveProductName *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=additive_product_name,json=additiveProductName,proto3" json:"additive_product_name,omitempty"`
	// Amount of energy per specified volume that is required
	CaloricDensity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=caloric_density,json=caloricDensity,proto3" json:"caloric_density,omitempty"`
	// How the formula should enter the patient's gastrointestinal tract
	RouteofAdministration *datatypes_go_proto.CodeableConcept             `protobuf:"bytes,9,opt,name=routeof_administration,json=routeofAdministration,proto3" json:"routeof_administration,omitempty"`
	Administration        []*NutritionOrder_EnteralFormula_Administration `protobuf:"bytes,10,rep,name=administration,proto3" json:"administration,omitempty"`
	// Upper limit on formula volume per unit of time
	MaxVolumeToDeliver *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,11,opt,name=max_volume_to_deliver,json=maxVolumeToDeliver,proto3" json:"max_volume_to_deliver,omitempty"`
	// Formula feeding instructions expressed as text
	AdministrationInstruction *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=administration_instruction,json=administrationInstruction,proto3" json:"administration_instruction,omitempty"`
}

func (x *NutritionOrder_EnteralFormula) Reset() {
	*x = NutritionOrder_EnteralFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_EnteralFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_EnteralFormula) ProtoMessage() {}

func (x *NutritionOrder_EnteralFormula) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_EnteralFormula.ProtoReflect.Descriptor instead.
func (*NutritionOrder_EnteralFormula) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 4}
}

func (x *NutritionOrder_EnteralFormula) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetBaseFormulaType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BaseFormulaType
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetBaseFormulaProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.BaseFormulaProductName
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdditiveType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditiveType
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdditiveProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.AdditiveProductName
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetCaloricDensity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.CaloricDensity
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetRouteofAdministration() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.RouteofAdministration
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdministration() []*NutritionOrder_EnteralFormula_Administration {
	if x != nil {
		return x.Administration
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetMaxVolumeToDeliver() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.MaxVolumeToDeliver
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdministrationInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.AdministrationInstruction
	}
	return nil
}

// Required  nutrient modifications
type NutritionOrder_OralDiet_Nutrient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of nutrient that is being modified
	Modifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	// Quantity of the specified nutrient
	Amount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NutritionOrder_OralDiet_Nutrient) Reset() {
	*x = NutritionOrder_OralDiet_Nutrient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_OralDiet_Nutrient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_OralDiet_Nutrient) ProtoMessage() {}

func (x *NutritionOrder_OralDiet_Nutrient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_OralDiet_Nutrient.ProtoReflect.Descriptor instead.
func (*NutritionOrder_OralDiet_Nutrient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *NutritionOrder_OralDiet_Nutrient) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetModifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Required  texture modifications
type NutritionOrder_OralDiet_Texture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code to indicate how to alter the texture of the foods, e.g. pureed
	Modifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	// Concepts that are used to identify an entity that is ingested for
	// nutritional purposes
	FoodType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=food_type,json=foodType,proto3" json:"food_type,omitempty"`
}

func (x *NutritionOrder_OralDiet_Texture) Reset() {
	*x = NutritionOrder_OralDiet_Texture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_OralDiet_Texture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_OralDiet_Texture) ProtoMessage() {}

func (x *NutritionOrder_OralDiet_Texture) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_OralDiet_Texture.ProtoReflect.Descriptor instead.
func (*NutritionOrder_OralDiet_Texture) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *NutritionOrder_OralDiet_Texture) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetModifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetFoodType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FoodType
	}
	return nil
}

// Formula feeding instruction as structured data
type NutritionOrder_EnteralFormula_Administration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Scheduled frequency of enteral feeding
	Schedule *datatypes_go_proto.Timing `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The volume of formula to provide
	Quantity *datatypes_go_proto.SimpleQuantity                  `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Rate     *NutritionOrder_EnteralFormula_Administration_RateX `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *NutritionOrder_EnteralFormula_Administration) Reset() {
	*x = NutritionOrder_EnteralFormula_Administration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_EnteralFormula_Administration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_EnteralFormula_Administration) ProtoMessage() {}

func (x *NutritionOrder_EnteralFormula_Administration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_EnteralFormula_Administration.ProtoReflect.Descriptor instead.
func (*NutritionOrder_EnteralFormula_Administration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *NutritionOrder_EnteralFormula_Administration) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetSchedule() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetRate() *NutritionOrder_EnteralFormula_Administration_RateX {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Speed with which the formula is provided per period of time
type NutritionOrder_EnteralFormula_Administration_RateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*NutritionOrder_EnteralFormula_Administration_RateX_Quantity
	//	*NutritionOrder_EnteralFormula_Administration_RateX_Ratio
	Choice isNutritionOrder_EnteralFormula_Administration_RateX_Choice `protobuf_oneof:"choice"`
}

func (x *NutritionOrder_EnteralFormula_Administration_RateX) Reset() {
	*x = NutritionOrder_EnteralFormula_Administration_RateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_EnteralFormula_Administration_RateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_EnteralFormula_Administration_RateX) ProtoMessage() {}

func (x *NutritionOrder_EnteralFormula_Administration_RateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_EnteralFormula_Administration_RateX.ProtoReflect.Descriptor instead.
func (*NutritionOrder_EnteralFormula_Administration_RateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (m *NutritionOrder_EnteralFormula_Administration_RateX) GetChoice() isNutritionOrder_EnteralFormula_Administration_RateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration_RateX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*NutritionOrder_EnteralFormula_Administration_RateX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration_RateX) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetChoice().(*NutritionOrder_EnteralFormula_Administration_RateX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

type isNutritionOrder_EnteralFormula_Administration_RateX_Choice interface {
	isNutritionOrder_EnteralFormula_Administration_RateX_Choice()
}

type NutritionOrder_EnteralFormula_Administration_RateX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type NutritionOrder_EnteralFormula_Administration_RateX_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,2,opt,name=ratio,proto3,oneof"`
}

func (*NutritionOrder_EnteralFormula_Administration_RateX_Quantity) isNutritionOrder_EnteralFormula_Administration_RateX_Choice() {
}

func (*NutritionOrder_EnteralFormula_Administration_RateX_Ratio) isNutritionOrder_EnteralFormula_Administration_RateX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x2d, 0x0a, 0x0e, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12,
	0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a,
	0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x62, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x28, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x18, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49,
	0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e,
	0x0a, 0x18, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x66, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x64,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x72, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x52, 0x08, 0x6f, 0x72, 0x61, 0x6c, 0x44,
	0x69, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xa6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa6,
	0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x86, 0x0a, 0x0a, 0x08, 0x4f, 0x72, 0x61, 0x6c,
	0x44, 0x69, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65,
	0x74, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x75, 0x74, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44,
	0x69, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xc3, 0x02, 0x0a, 0x08, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xc8, 0x02, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0xf9, 0x03, 0x0a, 0x0a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x91, 0x0c, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x62, 0x61, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63,
	0x61, 0x6c, 0x6f, 0x72, 0x69, 0x63, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a,
	0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x6f, 0x66, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb4, 0x04, 0x0a, 0x0e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x5b, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x01,
	0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x58, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x7f, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_goTypes = []interface{}{
	(*NutritionOrder)(nil),                                     // 0: google.fhir.r4.core.NutritionOrder
	(*NutritionOrder_StatusCode)(nil),                          // 1: google.fhir.r4.core.NutritionOrder.StatusCode
	(*NutritionOrder_IntentCode)(nil),                          // 2: google.fhir.r4.core.NutritionOrder.IntentCode
	(*NutritionOrder_OralDiet)(nil),                            // 3: google.fhir.r4.core.NutritionOrder.OralDiet
	(*NutritionOrder_Supplement)(nil),                          // 4: google.fhir.r4.core.NutritionOrder.Supplement
	(*NutritionOrder_EnteralFormula)(nil),                      // 5: google.fhir.r4.core.NutritionOrder.EnteralFormula
	(*NutritionOrder_OralDiet_Nutrient)(nil),                   // 6: google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient
	(*NutritionOrder_OralDiet_Texture)(nil),                    // 7: google.fhir.r4.core.NutritionOrder.OralDiet.Texture
	(*NutritionOrder_EnteralFormula_Administration)(nil),       // 8: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration
	(*NutritionOrder_EnteralFormula_Administration_RateX)(nil), // 9: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.RateX
	(*datatypes_go_proto.Id)(nil),                              // 10: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                            // 11: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                             // 12: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                            // 13: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                       // 14: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                            // 15: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                       // 16: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                      // 17: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.Canonical)(nil),                       // 18: google.fhir.r4.core.Canonical
	(*datatypes_go_proto.Reference)(nil),                       // 19: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                        // 20: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.CodeableConcept)(nil),                 // 21: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Annotation)(nil),                      // 22: google.fhir.r4.core.Annotation
	(codes_go_proto.RequestStatusCode_Value)(0),                // 23: google.fhir.r4.core.RequestStatusCode.Value
	(*datatypes_go_proto.String)(nil),                          // 24: google.fhir.r4.core.String
	(codes_go_proto.RequestIntentCode_Value)(0),                // 25: google.fhir.r4.core.RequestIntentCode.Value
	(*datatypes_go_proto.Timing)(nil),                          // 26: google.fhir.r4.core.Timing
	(*datatypes_go_proto.SimpleQuantity)(nil),                  // 27: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Ratio)(nil),                           // 28: google.fhir.r4.core.Ratio
}
var file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_depIdxs = []int32{
	10, // 0: google.fhir.r4.core.NutritionOrder.id:type_name -> google.fhir.r4.core.Id
	11, // 1: google.fhir.r4.core.NutritionOrder.meta:type_name -> google.fhir.r4.core.Meta
	12, // 2: google.fhir.r4.core.NutritionOrder.implicit_rules:type_name -> google.fhir.r4.core.Uri
	13, // 3: google.fhir.r4.core.NutritionOrder.language:type_name -> google.fhir.r4.core.Code
	14, // 4: google.fhir.r4.core.NutritionOrder.text:type_name -> google.fhir.r4.core.Narrative
	15, // 5: google.fhir.r4.core.NutritionOrder.contained:type_name -> google.protobuf.Any
	16, // 6: google.fhir.r4.core.NutritionOrder.extension:type_name -> google.fhir.r4.core.Extension
	16, // 7: google.fhir.r4.core.NutritionOrder.modifier_extension:type_name -> google.fhir.r4.core.Extension
	17, // 8: google.fhir.r4.core.NutritionOrder.identifier:type_name -> google.fhir.r4.core.Identifier
	18, // 9: google.fhir.r4.core.NutritionOrder.instantiates_canonical:type_name -> google.fhir.r4.core.Canonical
	12, // 10: google.fhir.r4.core.NutritionOrder.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	12, // 11: google.fhir.r4.core.NutritionOrder.instantiates:type_name -> google.fhir.r4.core.Uri
	1,  // 12: google.fhir.r4.core.NutritionOrder.status:type_name -> google.fhir.r4.core.NutritionOrder.StatusCode
	2,  // 13: google.fhir.r4.core.NutritionOrder.intent:type_name -> google.fhir.r4.core.NutritionOrder.IntentCode
	19, // 14: google.fhir.r4.core.NutritionOrder.patient:type_name -> google.fhir.r4.core.Reference
	19, // 15: google.fhir.r4.core.NutritionOrder.encounter:type_name -> google.fhir.r4.core.Reference
	20, // 16: google.fhir.r4.core.NutritionOrder.date_time:type_name -> google.fhir.r4.core.DateTime
	19, // 17: google.fhir.r4.core.NutritionOrder.orderer:type_name -> google.fhir.r4.core.Reference
	19, // 18: google.fhir.r4.core.NutritionOrder.allergy_intolerance:type_name -> google.fhir.r4.core.Reference
	21, // 19: google.fhir.r4.core.NutritionOrder.food_preference_modifier:type_name -> google.fhir.r4.core.CodeableConcept
	21, // 20: google.fhir.r4.core.NutritionOrder.exclude_food_modifier:type_name -> google.fhir.r4.core.CodeableConcept
	3,  // 21: google.fhir.r4.core.NutritionOrder.oral_diet:type_name -> google.fhir.r4.core.NutritionOrder.OralDiet
	4,  // 22: google.fhir.r4.core.NutritionOrder.supplement:type_name -> google.fhir.r4.core.NutritionOrder.Supplement
	5,  // 23: google.fhir.r4.core.NutritionOrder.enteral_formula:type_name -> google.fhir.r4.core.NutritionOrder.EnteralFormula
	22, // 24: google.fhir.r4.core.NutritionOrder.note:type_name -> google.fhir.r4.core.Annotation
	23, // 25: google.fhir.r4.core.NutritionOrder.StatusCode.value:type_name -> google.fhir.r4.core.RequestStatusCode.Value
	24, // 26: google.fhir.r4.core.NutritionOrder.StatusCode.id:type_name -> google.fhir.r4.core.String
	16, // 27: google.fhir.r4.core.NutritionOrder.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	25, // 28: google.fhir.r4.core.NutritionOrder.IntentCode.value:type_name -> google.fhir.r4.core.RequestIntentCode.Value
	24, // 29: google.fhir.r4.core.NutritionOrder.IntentCode.id:type_name -> google.fhir.r4.core.String
	16, // 30: google.fhir.r4.core.NutritionOrder.IntentCode.extension:type_name -> google.fhir.r4.core.Extension
	24, // 31: google.fhir.r4.core.NutritionOrder.OralDiet.id:type_name -> google.fhir.r4.core.String
	16, // 32: google.fhir.r4.core.NutritionOrder.OralDiet.extension:type_name -> google.fhir.r4.core.Extension
	16, // 33: google.fhir.r4.core.NutritionOrder.OralDiet.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21, // 34: google.fhir.r4.core.NutritionOrder.OralDiet.type:type_name -> google.fhir.r4.core.CodeableConcept
	26, // 35: google.fhir.r4.core.NutritionOrder.OralDiet.schedule:type_name -> google.fhir.r4.core.Timing
	6,  // 36: google.fhir.r4.core.NutritionOrder.OralDiet.nutrient:type_name -> google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient
	7,  // 37: google.fhir.r4.core.NutritionOrder.OralDiet.texture:type_name -> google.fhir.r4.core.NutritionOrder.OralDiet.Texture
	21, // 38: google.fhir.r4.core.NutritionOrder.OralDiet.fluid_consistency_type:type_name -> google.fhir.r4.core.CodeableConcept
	24, // 39: google.fhir.r4.core.NutritionOrder.OralDiet.instruction:type_name -> google.fhir.r4.core.String
	24, // 40: google.fhir.r4.core.NutritionOrder.Supplement.id:type_name -> google.fhir.r4.core.String
	16, // 41: google.fhir.r4.core.NutritionOrder.Supplement.extension:type_name -> google.fhir.r4.core.Extension
	16, // 42: google.fhir.r4.core.NutritionOrder.Supplement.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21, // 43: google.fhir.r4.core.NutritionOrder.Supplement.type:type_name -> google.fhir.r4.core.CodeableConcept
	24, // 44: google.fhir.r4.core.NutritionOrder.Supplement.product_name:type_name -> google.fhir.r4.core.String
	26, // 45: google.fhir.r4.core.NutritionOrder.Supplement.schedule:type_name -> google.fhir.r4.core.Timing
	27, // 46: google.fhir.r4.core.NutritionOrder.Supplement.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	24, // 47: google.fhir.r4.core.NutritionOrder.Supplement.instruction:type_name -> google.fhir.r4.core.String
	24, // 48: google.fhir.r4.core.NutritionOrder.EnteralFormula.id:type_name -> google.fhir.r4.core.String
	16, // 49: google.fhir.r4.core.NutritionOrder.EnteralFormula.extension:type_name -> google.fhir.r4.core.Extension
	16, // 50: google.fhir.r4.core.NutritionOrder.EnteralFormula.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21, // 51: google.fhir.r4.core.NutritionOrder.EnteralFormula.base_formula_type:type_name -> google.fhir.r4.core.CodeableConcept
	24, // 52: google.fhir.r4.core.NutritionOrder.EnteralFormula.base_formula_product_name:type_name -> google.fhir.r4.core.String
	21, // 53: google.fhir.r4.core.NutritionOrder.EnteralFormula.additive_type:type_name -> google.fhir.r4.core.CodeableConcept
	24, // 54: google.fhir.r4.core.NutritionOrder.EnteralFormula.additive_product_name:type_name -> google.fhir.r4.core.String
	27, // 55: google.fhir.r4.core.NutritionOrder.EnteralFormula.caloric_density:type_name -> google.fhir.r4.core.SimpleQuantity
	21, // 56: google.fhir.r4.core.NutritionOrder.EnteralFormula.routeof_administration:type_name -> google.fhir.r4.core.CodeableConcept
	8,  // 57: google.fhir.r4.core.NutritionOrder.EnteralFormula.administration:type_name -> google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration
	27, // 58: google.fhir.r4.core.NutritionOrder.EnteralFormula.max_volume_to_deliver:type_name -> google.fhir.r4.core.SimpleQuantity
	24, // 59: google.fhir.r4.core.NutritionOrder.EnteralFormula.administration_instruction:type_name -> google.fhir.r4.core.String
	24, // 60: google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient.id:type_name -> google.fhir.r4.core.String
	16, // 61: google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient.extension:type_name -> google.fhir.r4.core.Extension
	16, // 62: google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21, // 63: google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	27, // 64: google.fhir.r4.core.NutritionOrder.OralDiet.Nutrient.amount:type_name -> google.fhir.r4.core.SimpleQuantity
	24, // 65: google.fhir.r4.core.NutritionOrder.OralDiet.Texture.id:type_name -> google.fhir.r4.core.String
	16, // 66: google.fhir.r4.core.NutritionOrder.OralDiet.Texture.extension:type_name -> google.fhir.r4.core.Extension
	16, // 67: google.fhir.r4.core.NutritionOrder.OralDiet.Texture.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21, // 68: google.fhir.r4.core.NutritionOrder.OralDiet.Texture.modifier:type_name -> google.fhir.r4.core.CodeableConcept
	21, // 69: google.fhir.r4.core.NutritionOrder.OralDiet.Texture.food_type:type_name -> google.fhir.r4.core.CodeableConcept
	24, // 70: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.id:type_name -> google.fhir.r4.core.String
	16, // 71: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.extension:type_name -> google.fhir.r4.core.Extension
	16, // 72: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.modifier_extension:type_name -> google.fhir.r4.core.Extension
	26, // 73: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.schedule:type_name -> google.fhir.r4.core.Timing
	27, // 74: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	9,  // 75: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.rate:type_name -> google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.RateX
	27, // 76: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.RateX.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	28, // 77: google.fhir.r4.core.NutritionOrder.EnteralFormula.Administration.RateX.ratio:type_name -> google.fhir.r4.core.Ratio
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_IntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_OralDiet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_Supplement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_EnteralFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_OralDiet_Nutrient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_OralDiet_Texture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_EnteralFormula_Administration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_EnteralFormula_Administration_RateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*NutritionOrder_EnteralFormula_Administration_RateX_Quantity)(nil),
		(*NutritionOrder_EnteralFormula_Administration_RateX_Ratio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_nutrition_order_proto_depIdxs = nil
}
