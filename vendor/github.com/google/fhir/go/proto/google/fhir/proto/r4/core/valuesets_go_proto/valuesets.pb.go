//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/valuesets.proto

package valuesets_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BodyLengthUnitsValueSet_Value int32

const (
	BodyLengthUnitsValueSet_INVALID_UNINITIALIZED BodyLengthUnitsValueSet_Value = 0
	BodyLengthUnitsValueSet_CM                    BodyLengthUnitsValueSet_Value = 1
	BodyLengthUnitsValueSet_IN_I                  BodyLengthUnitsValueSet_Value = 2
)

// Enum value maps for BodyLengthUnitsValueSet_Value.
var (
	BodyLengthUnitsValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CM",
		2: "IN_I",
	}
	BodyLengthUnitsValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CM":                    1,
		"IN_I":                  2,
	}
)

func (x BodyLengthUnitsValueSet_Value) Enum() *BodyLengthUnitsValueSet_Value {
	p := new(BodyLengthUnitsValueSet_Value)
	*p = x
	return p
}

func (x BodyLengthUnitsValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyLengthUnitsValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[0].Descriptor()
}

func (BodyLengthUnitsValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[0]
}

func (x BodyLengthUnitsValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyLengthUnitsValueSet_Value.Descriptor instead.
func (BodyLengthUnitsValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{0, 0}
}

type BodyTemperatureUnitsValueSet_Value int32

const (
	BodyTemperatureUnitsValueSet_INVALID_UNINITIALIZED BodyTemperatureUnitsValueSet_Value = 0
	BodyTemperatureUnitsValueSet_CEL                   BodyTemperatureUnitsValueSet_Value = 1
	BodyTemperatureUnitsValueSet_DEG_F                 BodyTemperatureUnitsValueSet_Value = 2
)

// Enum value maps for BodyTemperatureUnitsValueSet_Value.
var (
	BodyTemperatureUnitsValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CEL",
		2: "DEG_F",
	}
	BodyTemperatureUnitsValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CEL":                   1,
		"DEG_F":                 2,
	}
)

func (x BodyTemperatureUnitsValueSet_Value) Enum() *BodyTemperatureUnitsValueSet_Value {
	p := new(BodyTemperatureUnitsValueSet_Value)
	*p = x
	return p
}

func (x BodyTemperatureUnitsValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyTemperatureUnitsValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[1].Descriptor()
}

func (BodyTemperatureUnitsValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[1]
}

func (x BodyTemperatureUnitsValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyTemperatureUnitsValueSet_Value.Descriptor instead.
func (BodyTemperatureUnitsValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{1, 0}
}

type BodyWeightUnitsValueSet_Value int32

const (
	BodyWeightUnitsValueSet_INVALID_UNINITIALIZED BodyWeightUnitsValueSet_Value = 0
	BodyWeightUnitsValueSet_KG                    BodyWeightUnitsValueSet_Value = 1
	BodyWeightUnitsValueSet_LB_AV                 BodyWeightUnitsValueSet_Value = 2
	BodyWeightUnitsValueSet_G                     BodyWeightUnitsValueSet_Value = 3
)

// Enum value maps for BodyWeightUnitsValueSet_Value.
var (
	BodyWeightUnitsValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "KG",
		2: "LB_AV",
		3: "G",
	}
	BodyWeightUnitsValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"KG":                    1,
		"LB_AV":                 2,
		"G":                     3,
	}
)

func (x BodyWeightUnitsValueSet_Value) Enum() *BodyWeightUnitsValueSet_Value {
	p := new(BodyWeightUnitsValueSet_Value)
	*p = x
	return p
}

func (x BodyWeightUnitsValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyWeightUnitsValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[2].Descriptor()
}

func (BodyWeightUnitsValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[2]
}

func (x BodyWeightUnitsValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyWeightUnitsValueSet_Value.Descriptor instead.
func (BodyWeightUnitsValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{2, 0}
}

type CarePlanActivityKindValueSet_Value int32

const (
	CarePlanActivityKindValueSet_INVALID_UNINITIALIZED CarePlanActivityKindValueSet_Value = 0
	CarePlanActivityKindValueSet_APPOINTMENT           CarePlanActivityKindValueSet_Value = 1
	CarePlanActivityKindValueSet_COMMUNICATION_REQUEST CarePlanActivityKindValueSet_Value = 2
	CarePlanActivityKindValueSet_DEVICE_REQUEST        CarePlanActivityKindValueSet_Value = 3
	CarePlanActivityKindValueSet_MEDICATION_REQUEST    CarePlanActivityKindValueSet_Value = 4
	CarePlanActivityKindValueSet_NUTRITION_ORDER       CarePlanActivityKindValueSet_Value = 5
	CarePlanActivityKindValueSet_TASK                  CarePlanActivityKindValueSet_Value = 6
	CarePlanActivityKindValueSet_SERVICE_REQUEST       CarePlanActivityKindValueSet_Value = 7
	CarePlanActivityKindValueSet_VISION_PRESCRIPTION   CarePlanActivityKindValueSet_Value = 8
)

// Enum value maps for CarePlanActivityKindValueSet_Value.
var (
	CarePlanActivityKindValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "APPOINTMENT",
		2: "COMMUNICATION_REQUEST",
		3: "DEVICE_REQUEST",
		4: "MEDICATION_REQUEST",
		5: "NUTRITION_ORDER",
		6: "TASK",
		7: "SERVICE_REQUEST",
		8: "VISION_PRESCRIPTION",
	}
	CarePlanActivityKindValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"APPOINTMENT":           1,
		"COMMUNICATION_REQUEST": 2,
		"DEVICE_REQUEST":        3,
		"MEDICATION_REQUEST":    4,
		"NUTRITION_ORDER":       5,
		"TASK":                  6,
		"SERVICE_REQUEST":       7,
		"VISION_PRESCRIPTION":   8,
	}
)

func (x CarePlanActivityKindValueSet_Value) Enum() *CarePlanActivityKindValueSet_Value {
	p := new(CarePlanActivityKindValueSet_Value)
	*p = x
	return p
}

func (x CarePlanActivityKindValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanActivityKindValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[3].Descriptor()
}

func (CarePlanActivityKindValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[3]
}

func (x CarePlanActivityKindValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanActivityKindValueSet_Value.Descriptor instead.
func (CarePlanActivityKindValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{3, 0}
}

type CarePlanIntentValueSet_Value int32

const (
	CarePlanIntentValueSet_INVALID_UNINITIALIZED CarePlanIntentValueSet_Value = 0
	CarePlanIntentValueSet_PROPOSAL              CarePlanIntentValueSet_Value = 1
	CarePlanIntentValueSet_PLAN                  CarePlanIntentValueSet_Value = 2
	CarePlanIntentValueSet_ORDER                 CarePlanIntentValueSet_Value = 3
	CarePlanIntentValueSet_OPTION                CarePlanIntentValueSet_Value = 4
)

// Enum value maps for CarePlanIntentValueSet_Value.
var (
	CarePlanIntentValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "ORDER",
		4: "OPTION",
	}
	CarePlanIntentValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"ORDER":                 3,
		"OPTION":                4,
	}
)

func (x CarePlanIntentValueSet_Value) Enum() *CarePlanIntentValueSet_Value {
	p := new(CarePlanIntentValueSet_Value)
	*p = x
	return p
}

func (x CarePlanIntentValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanIntentValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[4].Descriptor()
}

func (CarePlanIntentValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[4]
}

func (x CarePlanIntentValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanIntentValueSet_Value.Descriptor instead.
func (CarePlanIntentValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{4, 0}
}

type ClinicalImpressionStatusValueSet_Value int32

const (
	ClinicalImpressionStatusValueSet_INVALID_UNINITIALIZED ClinicalImpressionStatusValueSet_Value = 0
	ClinicalImpressionStatusValueSet_IN_PROGRESS           ClinicalImpressionStatusValueSet_Value = 1
	ClinicalImpressionStatusValueSet_COMPLETED             ClinicalImpressionStatusValueSet_Value = 2
	ClinicalImpressionStatusValueSet_ENTERED_IN_ERROR      ClinicalImpressionStatusValueSet_Value = 3
)

// Enum value maps for ClinicalImpressionStatusValueSet_Value.
var (
	ClinicalImpressionStatusValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
	}
	ClinicalImpressionStatusValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ClinicalImpressionStatusValueSet_Value) Enum() *ClinicalImpressionStatusValueSet_Value {
	p := new(ClinicalImpressionStatusValueSet_Value)
	*p = x
	return p
}

func (x ClinicalImpressionStatusValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClinicalImpressionStatusValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[5].Descriptor()
}

func (ClinicalImpressionStatusValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[5]
}

func (x ClinicalImpressionStatusValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClinicalImpressionStatusValueSet_Value.Descriptor instead.
func (ClinicalImpressionStatusValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{5, 0}
}

type EntityNamePartQualifierValueSet_Value int32

const (
	EntityNamePartQualifierValueSet_INVALID_UNINITIALIZED EntityNamePartQualifierValueSet_Value = 0
	EntityNamePartQualifierValueSet_LS                    EntityNamePartQualifierValueSet_Value = 1
	EntityNamePartQualifierValueSet_AC                    EntityNamePartQualifierValueSet_Value = 2
	EntityNamePartQualifierValueSet_NB                    EntityNamePartQualifierValueSet_Value = 3
	EntityNamePartQualifierValueSet_PR                    EntityNamePartQualifierValueSet_Value = 4
	EntityNamePartQualifierValueSet_HON                   EntityNamePartQualifierValueSet_Value = 5
	EntityNamePartQualifierValueSet_BR                    EntityNamePartQualifierValueSet_Value = 6
	EntityNamePartQualifierValueSet_AD                    EntityNamePartQualifierValueSet_Value = 7
	EntityNamePartQualifierValueSet_SP                    EntityNamePartQualifierValueSet_Value = 8
	EntityNamePartQualifierValueSet_MID                   EntityNamePartQualifierValueSet_Value = 9
	EntityNamePartQualifierValueSet_CL                    EntityNamePartQualifierValueSet_Value = 10
	EntityNamePartQualifierValueSet_IN                    EntityNamePartQualifierValueSet_Value = 11
	EntityNamePartQualifierValueSet_VV                    EntityNamePartQualifierValueSet_Value = 12
)

// Enum value maps for EntityNamePartQualifierValueSet_Value.
var (
	EntityNamePartQualifierValueSet_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "LS",
		2:  "AC",
		3:  "NB",
		4:  "PR",
		5:  "HON",
		6:  "BR",
		7:  "AD",
		8:  "SP",
		9:  "MID",
		10: "CL",
		11: "IN",
		12: "VV",
	}
	EntityNamePartQualifierValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LS":                    1,
		"AC":                    2,
		"NB":                    3,
		"PR":                    4,
		"HON":                   5,
		"BR":                    6,
		"AD":                    7,
		"SP":                    8,
		"MID":                   9,
		"CL":                    10,
		"IN":                    11,
		"VV":                    12,
	}
)

func (x EntityNamePartQualifierValueSet_Value) Enum() *EntityNamePartQualifierValueSet_Value {
	p := new(EntityNamePartQualifierValueSet_Value)
	*p = x
	return p
}

func (x EntityNamePartQualifierValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityNamePartQualifierValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[6].Descriptor()
}

func (EntityNamePartQualifierValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[6]
}

func (x EntityNamePartQualifierValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityNamePartQualifierValueSet_Value.Descriptor instead.
func (EntityNamePartQualifierValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{6, 0}
}

type EventTimingValueSet_Value int32

const (
	EventTimingValueSet_INVALID_UNINITIALIZED EventTimingValueSet_Value = 0
	EventTimingValueSet_MORN                  EventTimingValueSet_Value = 1
	EventTimingValueSet_MORN_EARLY            EventTimingValueSet_Value = 2
	EventTimingValueSet_MORN_LATE             EventTimingValueSet_Value = 3
	EventTimingValueSet_NOON                  EventTimingValueSet_Value = 4
	EventTimingValueSet_AFT                   EventTimingValueSet_Value = 5
	EventTimingValueSet_AFT_EARLY             EventTimingValueSet_Value = 6
	EventTimingValueSet_AFT_LATE              EventTimingValueSet_Value = 7
	EventTimingValueSet_EVE                   EventTimingValueSet_Value = 8
	EventTimingValueSet_EVE_EARLY             EventTimingValueSet_Value = 9
	EventTimingValueSet_EVE_LATE              EventTimingValueSet_Value = 10
	EventTimingValueSet_NIGHT                 EventTimingValueSet_Value = 11
	EventTimingValueSet_PHS                   EventTimingValueSet_Value = 12
	EventTimingValueSet_HS                    EventTimingValueSet_Value = 13
	EventTimingValueSet_WAKE                  EventTimingValueSet_Value = 14
	EventTimingValueSet_C                     EventTimingValueSet_Value = 15
	EventTimingValueSet_CM                    EventTimingValueSet_Value = 16
	EventTimingValueSet_CD                    EventTimingValueSet_Value = 17
	EventTimingValueSet_CV                    EventTimingValueSet_Value = 18
	EventTimingValueSet_AC                    EventTimingValueSet_Value = 19
	EventTimingValueSet_ACM                   EventTimingValueSet_Value = 20
	EventTimingValueSet_ACD                   EventTimingValueSet_Value = 21
	EventTimingValueSet_ACV                   EventTimingValueSet_Value = 22
	EventTimingValueSet_PC                    EventTimingValueSet_Value = 23
	EventTimingValueSet_PCM                   EventTimingValueSet_Value = 24
	EventTimingValueSet_PCD                   EventTimingValueSet_Value = 25
	EventTimingValueSet_PCV                   EventTimingValueSet_Value = 26
)

// Enum value maps for EventTimingValueSet_Value.
var (
	EventTimingValueSet_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MORN",
		2:  "MORN_EARLY",
		3:  "MORN_LATE",
		4:  "NOON",
		5:  "AFT",
		6:  "AFT_EARLY",
		7:  "AFT_LATE",
		8:  "EVE",
		9:  "EVE_EARLY",
		10: "EVE_LATE",
		11: "NIGHT",
		12: "PHS",
		13: "HS",
		14: "WAKE",
		15: "C",
		16: "CM",
		17: "CD",
		18: "CV",
		19: "AC",
		20: "ACM",
		21: "ACD",
		22: "ACV",
		23: "PC",
		24: "PCM",
		25: "PCD",
		26: "PCV",
	}
	EventTimingValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MORN":                  1,
		"MORN_EARLY":            2,
		"MORN_LATE":             3,
		"NOON":                  4,
		"AFT":                   5,
		"AFT_EARLY":             6,
		"AFT_LATE":              7,
		"EVE":                   8,
		"EVE_EARLY":             9,
		"EVE_LATE":              10,
		"NIGHT":                 11,
		"PHS":                   12,
		"HS":                    13,
		"WAKE":                  14,
		"C":                     15,
		"CM":                    16,
		"CD":                    17,
		"CV":                    18,
		"AC":                    19,
		"ACM":                   20,
		"ACD":                   21,
		"ACV":                   22,
		"PC":                    23,
		"PCM":                   24,
		"PCD":                   25,
		"PCV":                   26,
	}
)

func (x EventTimingValueSet_Value) Enum() *EventTimingValueSet_Value {
	p := new(EventTimingValueSet_Value)
	*p = x
	return p
}

func (x EventTimingValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTimingValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[7].Descriptor()
}

func (EventTimingValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[7]
}

func (x EventTimingValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTimingValueSet_Value.Descriptor instead.
func (EventTimingValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{7, 0}
}

type FHIRAllTypesValueSet_Value int32

const (
	FHIRAllTypesValueSet_INVALID_UNINITIALIZED                FHIRAllTypesValueSet_Value = 0
	FHIRAllTypesValueSet_ADDRESS                              FHIRAllTypesValueSet_Value = 1
	FHIRAllTypesValueSet_AGE                                  FHIRAllTypesValueSet_Value = 2
	FHIRAllTypesValueSet_ANNOTATION                           FHIRAllTypesValueSet_Value = 3
	FHIRAllTypesValueSet_ATTACHMENT                           FHIRAllTypesValueSet_Value = 4
	FHIRAllTypesValueSet_BACKBONE_ELEMENT                     FHIRAllTypesValueSet_Value = 5
	FHIRAllTypesValueSet_CODEABLE_CONCEPT                     FHIRAllTypesValueSet_Value = 6
	FHIRAllTypesValueSet_CODING                               FHIRAllTypesValueSet_Value = 7
	FHIRAllTypesValueSet_CONTACT_DETAIL                       FHIRAllTypesValueSet_Value = 8
	FHIRAllTypesValueSet_CONTACT_POINT                        FHIRAllTypesValueSet_Value = 9
	FHIRAllTypesValueSet_CONTRIBUTOR                          FHIRAllTypesValueSet_Value = 10
	FHIRAllTypesValueSet_COUNT                                FHIRAllTypesValueSet_Value = 11
	FHIRAllTypesValueSet_DATA_REQUIREMENT                     FHIRAllTypesValueSet_Value = 12
	FHIRAllTypesValueSet_DISTANCE                             FHIRAllTypesValueSet_Value = 13
	FHIRAllTypesValueSet_DOSAGE                               FHIRAllTypesValueSet_Value = 14
	FHIRAllTypesValueSet_DURATION                             FHIRAllTypesValueSet_Value = 15
	FHIRAllTypesValueSet_ELEMENT                              FHIRAllTypesValueSet_Value = 16
	FHIRAllTypesValueSet_ELEMENT_DEFINITION                   FHIRAllTypesValueSet_Value = 17
	FHIRAllTypesValueSet_EXPRESSION                           FHIRAllTypesValueSet_Value = 18
	FHIRAllTypesValueSet_EXTENSION                            FHIRAllTypesValueSet_Value = 19
	FHIRAllTypesValueSet_HUMAN_NAME                           FHIRAllTypesValueSet_Value = 20
	FHIRAllTypesValueSet_IDENTIFIER                           FHIRAllTypesValueSet_Value = 21
	FHIRAllTypesValueSet_MARKETING_STATUS                     FHIRAllTypesValueSet_Value = 22
	FHIRAllTypesValueSet_META                                 FHIRAllTypesValueSet_Value = 23
	FHIRAllTypesValueSet_MONEY                                FHIRAllTypesValueSet_Value = 24
	FHIRAllTypesValueSet_MONEY_QUANTITY                       FHIRAllTypesValueSet_Value = 25
	FHIRAllTypesValueSet_NARRATIVE                            FHIRAllTypesValueSet_Value = 26
	FHIRAllTypesValueSet_PARAMETER_DEFINITION                 FHIRAllTypesValueSet_Value = 27
	FHIRAllTypesValueSet_PERIOD                               FHIRAllTypesValueSet_Value = 28
	FHIRAllTypesValueSet_POPULATION                           FHIRAllTypesValueSet_Value = 29
	FHIRAllTypesValueSet_PROD_CHARACTERISTIC                  FHIRAllTypesValueSet_Value = 30
	FHIRAllTypesValueSet_PRODUCT_SHELF_LIFE                   FHIRAllTypesValueSet_Value = 31
	FHIRAllTypesValueSet_QUANTITY                             FHIRAllTypesValueSet_Value = 32
	FHIRAllTypesValueSet_RANGE                                FHIRAllTypesValueSet_Value = 33
	FHIRAllTypesValueSet_RATIO                                FHIRAllTypesValueSet_Value = 34
	FHIRAllTypesValueSet_REFERENCE                            FHIRAllTypesValueSet_Value = 35
	FHIRAllTypesValueSet_RELATED_ARTIFACT                     FHIRAllTypesValueSet_Value = 36
	FHIRAllTypesValueSet_SAMPLED_DATA                         FHIRAllTypesValueSet_Value = 37
	FHIRAllTypesValueSet_SIGNATURE                            FHIRAllTypesValueSet_Value = 38
	FHIRAllTypesValueSet_SIMPLE_QUANTITY                      FHIRAllTypesValueSet_Value = 39
	FHIRAllTypesValueSet_SUBSTANCE_AMOUNT                     FHIRAllTypesValueSet_Value = 40
	FHIRAllTypesValueSet_TIMING                               FHIRAllTypesValueSet_Value = 41
	FHIRAllTypesValueSet_TRIGGER_DEFINITION                   FHIRAllTypesValueSet_Value = 42
	FHIRAllTypesValueSet_USAGE_CONTEXT                        FHIRAllTypesValueSet_Value = 43
	FHIRAllTypesValueSet_BASE64_BINARY                        FHIRAllTypesValueSet_Value = 44
	FHIRAllTypesValueSet_BOOLEAN                              FHIRAllTypesValueSet_Value = 45
	FHIRAllTypesValueSet_CANONICAL                            FHIRAllTypesValueSet_Value = 46
	FHIRAllTypesValueSet_CODE                                 FHIRAllTypesValueSet_Value = 47
	FHIRAllTypesValueSet_DATE                                 FHIRAllTypesValueSet_Value = 48
	FHIRAllTypesValueSet_DATE_TIME                            FHIRAllTypesValueSet_Value = 49
	FHIRAllTypesValueSet_DECIMAL                              FHIRAllTypesValueSet_Value = 50
	FHIRAllTypesValueSet_ID                                   FHIRAllTypesValueSet_Value = 51
	FHIRAllTypesValueSet_INSTANT                              FHIRAllTypesValueSet_Value = 52
	FHIRAllTypesValueSet_INTEGER                              FHIRAllTypesValueSet_Value = 53
	FHIRAllTypesValueSet_MARKDOWN                             FHIRAllTypesValueSet_Value = 54
	FHIRAllTypesValueSet_OID                                  FHIRAllTypesValueSet_Value = 55
	FHIRAllTypesValueSet_POSITIVE_INT                         FHIRAllTypesValueSet_Value = 56
	FHIRAllTypesValueSet_STRING                               FHIRAllTypesValueSet_Value = 57
	FHIRAllTypesValueSet_TIME                                 FHIRAllTypesValueSet_Value = 58
	FHIRAllTypesValueSet_UNSIGNED_INT                         FHIRAllTypesValueSet_Value = 59
	FHIRAllTypesValueSet_URI                                  FHIRAllTypesValueSet_Value = 60
	FHIRAllTypesValueSet_URL                                  FHIRAllTypesValueSet_Value = 61
	FHIRAllTypesValueSet_UUID                                 FHIRAllTypesValueSet_Value = 62
	FHIRAllTypesValueSet_XHTML                                FHIRAllTypesValueSet_Value = 63
	FHIRAllTypesValueSet_ACCOUNT                              FHIRAllTypesValueSet_Value = 64
	FHIRAllTypesValueSet_ACTIVITY_DEFINITION                  FHIRAllTypesValueSet_Value = 65
	FHIRAllTypesValueSet_ADVERSE_EVENT                        FHIRAllTypesValueSet_Value = 66
	FHIRAllTypesValueSet_ALLERGY_INTOLERANCE                  FHIRAllTypesValueSet_Value = 67
	FHIRAllTypesValueSet_APPOINTMENT                          FHIRAllTypesValueSet_Value = 68
	FHIRAllTypesValueSet_APPOINTMENT_RESPONSE                 FHIRAllTypesValueSet_Value = 69
	FHIRAllTypesValueSet_AUDIT_EVENT                          FHIRAllTypesValueSet_Value = 70
	FHIRAllTypesValueSet_BASIC                                FHIRAllTypesValueSet_Value = 71
	FHIRAllTypesValueSet_BINARY                               FHIRAllTypesValueSet_Value = 72
	FHIRAllTypesValueSet_BIOLOGICALLY_DERIVED_PRODUCT         FHIRAllTypesValueSet_Value = 73
	FHIRAllTypesValueSet_BODY_STRUCTURE                       FHIRAllTypesValueSet_Value = 74
	FHIRAllTypesValueSet_BUNDLE                               FHIRAllTypesValueSet_Value = 75
	FHIRAllTypesValueSet_CAPABILITY_STATEMENT                 FHIRAllTypesValueSet_Value = 76
	FHIRAllTypesValueSet_CARE_PLAN                            FHIRAllTypesValueSet_Value = 77
	FHIRAllTypesValueSet_CARE_TEAM                            FHIRAllTypesValueSet_Value = 78
	FHIRAllTypesValueSet_CATALOG_ENTRY                        FHIRAllTypesValueSet_Value = 79
	FHIRAllTypesValueSet_CHARGE_ITEM                          FHIRAllTypesValueSet_Value = 80
	FHIRAllTypesValueSet_CHARGE_ITEM_DEFINITION               FHIRAllTypesValueSet_Value = 81
	FHIRAllTypesValueSet_CLAIM                                FHIRAllTypesValueSet_Value = 82
	FHIRAllTypesValueSet_CLAIM_RESPONSE                       FHIRAllTypesValueSet_Value = 83
	FHIRAllTypesValueSet_CLINICAL_IMPRESSION                  FHIRAllTypesValueSet_Value = 84
	FHIRAllTypesValueSet_CODE_SYSTEM                          FHIRAllTypesValueSet_Value = 85
	FHIRAllTypesValueSet_COMMUNICATION                        FHIRAllTypesValueSet_Value = 86
	FHIRAllTypesValueSet_COMMUNICATION_REQUEST                FHIRAllTypesValueSet_Value = 87
	FHIRAllTypesValueSet_COMPARTMENT_DEFINITION               FHIRAllTypesValueSet_Value = 88
	FHIRAllTypesValueSet_COMPOSITION                          FHIRAllTypesValueSet_Value = 89
	FHIRAllTypesValueSet_CONCEPT_MAP                          FHIRAllTypesValueSet_Value = 90
	FHIRAllTypesValueSet_CONDITION                            FHIRAllTypesValueSet_Value = 91
	FHIRAllTypesValueSet_CONSENT                              FHIRAllTypesValueSet_Value = 92
	FHIRAllTypesValueSet_CONTRACT                             FHIRAllTypesValueSet_Value = 93
	FHIRAllTypesValueSet_COVERAGE                             FHIRAllTypesValueSet_Value = 94
	FHIRAllTypesValueSet_COVERAGE_ELIGIBILITY_REQUEST         FHIRAllTypesValueSet_Value = 95
	FHIRAllTypesValueSet_COVERAGE_ELIGIBILITY_RESPONSE        FHIRAllTypesValueSet_Value = 96
	FHIRAllTypesValueSet_DETECTED_ISSUE                       FHIRAllTypesValueSet_Value = 97
	FHIRAllTypesValueSet_DEVICE                               FHIRAllTypesValueSet_Value = 98
	FHIRAllTypesValueSet_DEVICE_DEFINITION                    FHIRAllTypesValueSet_Value = 99
	FHIRAllTypesValueSet_DEVICE_METRIC                        FHIRAllTypesValueSet_Value = 100
	FHIRAllTypesValueSet_DEVICE_REQUEST                       FHIRAllTypesValueSet_Value = 101
	FHIRAllTypesValueSet_DEVICE_USE_STATEMENT                 FHIRAllTypesValueSet_Value = 102
	FHIRAllTypesValueSet_DIAGNOSTIC_REPORT                    FHIRAllTypesValueSet_Value = 103
	FHIRAllTypesValueSet_DOCUMENT_MANIFEST                    FHIRAllTypesValueSet_Value = 104
	FHIRAllTypesValueSet_DOCUMENT_REFERENCE                   FHIRAllTypesValueSet_Value = 105
	FHIRAllTypesValueSet_DOMAIN_RESOURCE                      FHIRAllTypesValueSet_Value = 106
	FHIRAllTypesValueSet_EFFECT_EVIDENCE_SYNTHESIS            FHIRAllTypesValueSet_Value = 107
	FHIRAllTypesValueSet_ENCOUNTER                            FHIRAllTypesValueSet_Value = 108
	FHIRAllTypesValueSet_ENDPOINT                             FHIRAllTypesValueSet_Value = 109
	FHIRAllTypesValueSet_ENROLLMENT_REQUEST                   FHIRAllTypesValueSet_Value = 110
	FHIRAllTypesValueSet_ENROLLMENT_RESPONSE                  FHIRAllTypesValueSet_Value = 111
	FHIRAllTypesValueSet_EPISODE_OF_CARE                      FHIRAllTypesValueSet_Value = 112
	FHIRAllTypesValueSet_EVENT_DEFINITION                     FHIRAllTypesValueSet_Value = 113
	FHIRAllTypesValueSet_EVIDENCE                             FHIRAllTypesValueSet_Value = 114
	FHIRAllTypesValueSet_EVIDENCE_VARIABLE                    FHIRAllTypesValueSet_Value = 115
	FHIRAllTypesValueSet_EXAMPLE_SCENARIO                     FHIRAllTypesValueSet_Value = 116
	FHIRAllTypesValueSet_EXPLANATION_OF_BENEFIT               FHIRAllTypesValueSet_Value = 117
	FHIRAllTypesValueSet_FAMILY_MEMBER_HISTORY                FHIRAllTypesValueSet_Value = 118
	FHIRAllTypesValueSet_FLAG                                 FHIRAllTypesValueSet_Value = 119
	FHIRAllTypesValueSet_GOAL                                 FHIRAllTypesValueSet_Value = 120
	FHIRAllTypesValueSet_GRAPH_DEFINITION                     FHIRAllTypesValueSet_Value = 121
	FHIRAllTypesValueSet_GROUP                                FHIRAllTypesValueSet_Value = 122
	FHIRAllTypesValueSet_GUIDANCE_RESPONSE                    FHIRAllTypesValueSet_Value = 123
	FHIRAllTypesValueSet_HEALTHCARE_SERVICE                   FHIRAllTypesValueSet_Value = 124
	FHIRAllTypesValueSet_IMAGING_STUDY                        FHIRAllTypesValueSet_Value = 125
	FHIRAllTypesValueSet_IMMUNIZATION                         FHIRAllTypesValueSet_Value = 126
	FHIRAllTypesValueSet_IMMUNIZATION_EVALUATION              FHIRAllTypesValueSet_Value = 127
	FHIRAllTypesValueSet_IMMUNIZATION_RECOMMENDATION          FHIRAllTypesValueSet_Value = 128
	FHIRAllTypesValueSet_IMPLEMENTATION_GUIDE                 FHIRAllTypesValueSet_Value = 129
	FHIRAllTypesValueSet_INSURANCE_PLAN                       FHIRAllTypesValueSet_Value = 130
	FHIRAllTypesValueSet_INVOICE                              FHIRAllTypesValueSet_Value = 131
	FHIRAllTypesValueSet_LIBRARY                              FHIRAllTypesValueSet_Value = 132
	FHIRAllTypesValueSet_LINKAGE                              FHIRAllTypesValueSet_Value = 133
	FHIRAllTypesValueSet_LIST                                 FHIRAllTypesValueSet_Value = 134
	FHIRAllTypesValueSet_LOCATION                             FHIRAllTypesValueSet_Value = 135
	FHIRAllTypesValueSet_MEASURE                              FHIRAllTypesValueSet_Value = 136
	FHIRAllTypesValueSet_MEASURE_REPORT                       FHIRAllTypesValueSet_Value = 137
	FHIRAllTypesValueSet_MEDIA                                FHIRAllTypesValueSet_Value = 138
	FHIRAllTypesValueSet_MEDICATION                           FHIRAllTypesValueSet_Value = 139
	FHIRAllTypesValueSet_MEDICATION_ADMINISTRATION            FHIRAllTypesValueSet_Value = 140
	FHIRAllTypesValueSet_MEDICATION_DISPENSE                  FHIRAllTypesValueSet_Value = 141
	FHIRAllTypesValueSet_MEDICATION_KNOWLEDGE                 FHIRAllTypesValueSet_Value = 142
	FHIRAllTypesValueSet_MEDICATION_REQUEST                   FHIRAllTypesValueSet_Value = 143
	FHIRAllTypesValueSet_MEDICATION_STATEMENT                 FHIRAllTypesValueSet_Value = 144
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT                    FHIRAllTypesValueSet_Value = 145
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_AUTHORIZATION      FHIRAllTypesValueSet_Value = 146
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_CONTRAINDICATION   FHIRAllTypesValueSet_Value = 147
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_INDICATION         FHIRAllTypesValueSet_Value = 148
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_INGREDIENT         FHIRAllTypesValueSet_Value = 149
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_INTERACTION        FHIRAllTypesValueSet_Value = 150
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_MANUFACTURED       FHIRAllTypesValueSet_Value = 151
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_PACKAGED           FHIRAllTypesValueSet_Value = 152
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_PHARMACEUTICAL     FHIRAllTypesValueSet_Value = 153
	FHIRAllTypesValueSet_MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT FHIRAllTypesValueSet_Value = 154
	FHIRAllTypesValueSet_MESSAGE_DEFINITION                   FHIRAllTypesValueSet_Value = 155
	FHIRAllTypesValueSet_MESSAGE_HEADER                       FHIRAllTypesValueSet_Value = 156
	FHIRAllTypesValueSet_MOLECULAR_SEQUENCE                   FHIRAllTypesValueSet_Value = 157
	FHIRAllTypesValueSet_NAMING_SYSTEM                        FHIRAllTypesValueSet_Value = 158
	FHIRAllTypesValueSet_NUTRITION_ORDER                      FHIRAllTypesValueSet_Value = 159
	FHIRAllTypesValueSet_OBSERVATION                          FHIRAllTypesValueSet_Value = 160
	FHIRAllTypesValueSet_OBSERVATION_DEFINITION               FHIRAllTypesValueSet_Value = 161
	FHIRAllTypesValueSet_OPERATION_DEFINITION                 FHIRAllTypesValueSet_Value = 162
	FHIRAllTypesValueSet_OPERATION_OUTCOME                    FHIRAllTypesValueSet_Value = 163
	FHIRAllTypesValueSet_ORGANIZATION                         FHIRAllTypesValueSet_Value = 164
	FHIRAllTypesValueSet_ORGANIZATION_AFFILIATION             FHIRAllTypesValueSet_Value = 165
	FHIRAllTypesValueSet_PARAMETERS                           FHIRAllTypesValueSet_Value = 166
	FHIRAllTypesValueSet_PATIENT                              FHIRAllTypesValueSet_Value = 167
	FHIRAllTypesValueSet_PAYMENT_NOTICE                       FHIRAllTypesValueSet_Value = 168
	FHIRAllTypesValueSet_PAYMENT_RECONCILIATION               FHIRAllTypesValueSet_Value = 169
	FHIRAllTypesValueSet_PERSON                               FHIRAllTypesValueSet_Value = 170
	FHIRAllTypesValueSet_PLAN_DEFINITION                      FHIRAllTypesValueSet_Value = 171
	FHIRAllTypesValueSet_PRACTITIONER                         FHIRAllTypesValueSet_Value = 172
	FHIRAllTypesValueSet_PRACTITIONER_ROLE                    FHIRAllTypesValueSet_Value = 173
	FHIRAllTypesValueSet_PROCEDURE                            FHIRAllTypesValueSet_Value = 174
	FHIRAllTypesValueSet_PROVENANCE                           FHIRAllTypesValueSet_Value = 175
	FHIRAllTypesValueSet_QUESTIONNAIRE                        FHIRAllTypesValueSet_Value = 176
	FHIRAllTypesValueSet_QUESTIONNAIRE_RESPONSE               FHIRAllTypesValueSet_Value = 177
	FHIRAllTypesValueSet_RELATED_PERSON                       FHIRAllTypesValueSet_Value = 178
	FHIRAllTypesValueSet_REQUEST_GROUP                        FHIRAllTypesValueSet_Value = 179
	FHIRAllTypesValueSet_RESEARCH_DEFINITION                  FHIRAllTypesValueSet_Value = 180
	FHIRAllTypesValueSet_RESEARCH_ELEMENT_DEFINITION          FHIRAllTypesValueSet_Value = 181
	FHIRAllTypesValueSet_RESEARCH_STUDY                       FHIRAllTypesValueSet_Value = 182
	FHIRAllTypesValueSet_RESEARCH_SUBJECT                     FHIRAllTypesValueSet_Value = 183
	FHIRAllTypesValueSet_RESOURCE                             FHIRAllTypesValueSet_Value = 184
	FHIRAllTypesValueSet_RISK_ASSESSMENT                      FHIRAllTypesValueSet_Value = 185
	FHIRAllTypesValueSet_RISK_EVIDENCE_SYNTHESIS              FHIRAllTypesValueSet_Value = 186
	FHIRAllTypesValueSet_SCHEDULE                             FHIRAllTypesValueSet_Value = 187
	FHIRAllTypesValueSet_SEARCH_PARAMETER                     FHIRAllTypesValueSet_Value = 188
	FHIRAllTypesValueSet_SERVICE_REQUEST                      FHIRAllTypesValueSet_Value = 189
	FHIRAllTypesValueSet_SLOT                                 FHIRAllTypesValueSet_Value = 190
	FHIRAllTypesValueSet_SPECIMEN                             FHIRAllTypesValueSet_Value = 191
	FHIRAllTypesValueSet_SPECIMEN_DEFINITION                  FHIRAllTypesValueSet_Value = 192
	FHIRAllTypesValueSet_STRUCTURE_DEFINITION                 FHIRAllTypesValueSet_Value = 193
	FHIRAllTypesValueSet_STRUCTURE_MAP                        FHIRAllTypesValueSet_Value = 194
	FHIRAllTypesValueSet_SUBSCRIPTION                         FHIRAllTypesValueSet_Value = 195
	FHIRAllTypesValueSet_SUBSTANCE                            FHIRAllTypesValueSet_Value = 196
	FHIRAllTypesValueSet_SUBSTANCE_NUCLEIC_ACID               FHIRAllTypesValueSet_Value = 197
	FHIRAllTypesValueSet_SUBSTANCE_POLYMER                    FHIRAllTypesValueSet_Value = 198
	FHIRAllTypesValueSet_SUBSTANCE_PROTEIN                    FHIRAllTypesValueSet_Value = 199
	FHIRAllTypesValueSet_SUBSTANCE_REFERENCE_INFORMATION      FHIRAllTypesValueSet_Value = 200
	FHIRAllTypesValueSet_SUBSTANCE_SOURCE_MATERIAL            FHIRAllTypesValueSet_Value = 201
	FHIRAllTypesValueSet_SUBSTANCE_SPECIFICATION              FHIRAllTypesValueSet_Value = 202
	FHIRAllTypesValueSet_SUPPLY_DELIVERY                      FHIRAllTypesValueSet_Value = 203
	FHIRAllTypesValueSet_SUPPLY_REQUEST                       FHIRAllTypesValueSet_Value = 204
	FHIRAllTypesValueSet_TASK                                 FHIRAllTypesValueSet_Value = 205
	FHIRAllTypesValueSet_TERMINOLOGY_CAPABILITIES             FHIRAllTypesValueSet_Value = 206
	FHIRAllTypesValueSet_TEST_REPORT                          FHIRAllTypesValueSet_Value = 207
	FHIRAllTypesValueSet_TEST_SCRIPT                          FHIRAllTypesValueSet_Value = 208
	FHIRAllTypesValueSet_VALUE_SET                            FHIRAllTypesValueSet_Value = 209
	FHIRAllTypesValueSet_VERIFICATION_RESULT                  FHIRAllTypesValueSet_Value = 210
	FHIRAllTypesValueSet_VISION_PRESCRIPTION                  FHIRAllTypesValueSet_Value = 211
	FHIRAllTypesValueSet_TYPE                                 FHIRAllTypesValueSet_Value = 212
	FHIRAllTypesValueSet_ANY                                  FHIRAllTypesValueSet_Value = 213
)

// Enum value maps for FHIRAllTypesValueSet_Value.
var (
	FHIRAllTypesValueSet_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ADDRESS",
		2:   "AGE",
		3:   "ANNOTATION",
		4:   "ATTACHMENT",
		5:   "BACKBONE_ELEMENT",
		6:   "CODEABLE_CONCEPT",
		7:   "CODING",
		8:   "CONTACT_DETAIL",
		9:   "CONTACT_POINT",
		10:  "CONTRIBUTOR",
		11:  "COUNT",
		12:  "DATA_REQUIREMENT",
		13:  "DISTANCE",
		14:  "DOSAGE",
		15:  "DURATION",
		16:  "ELEMENT",
		17:  "ELEMENT_DEFINITION",
		18:  "EXPRESSION",
		19:  "EXTENSION",
		20:  "HUMAN_NAME",
		21:  "IDENTIFIER",
		22:  "MARKETING_STATUS",
		23:  "META",
		24:  "MONEY",
		25:  "MONEY_QUANTITY",
		26:  "NARRATIVE",
		27:  "PARAMETER_DEFINITION",
		28:  "PERIOD",
		29:  "POPULATION",
		30:  "PROD_CHARACTERISTIC",
		31:  "PRODUCT_SHELF_LIFE",
		32:  "QUANTITY",
		33:  "RANGE",
		34:  "RATIO",
		35:  "REFERENCE",
		36:  "RELATED_ARTIFACT",
		37:  "SAMPLED_DATA",
		38:  "SIGNATURE",
		39:  "SIMPLE_QUANTITY",
		40:  "SUBSTANCE_AMOUNT",
		41:  "TIMING",
		42:  "TRIGGER_DEFINITION",
		43:  "USAGE_CONTEXT",
		44:  "BASE64_BINARY",
		45:  "BOOLEAN",
		46:  "CANONICAL",
		47:  "CODE",
		48:  "DATE",
		49:  "DATE_TIME",
		50:  "DECIMAL",
		51:  "ID",
		52:  "INSTANT",
		53:  "INTEGER",
		54:  "MARKDOWN",
		55:  "OID",
		56:  "POSITIVE_INT",
		57:  "STRING",
		58:  "TIME",
		59:  "UNSIGNED_INT",
		60:  "URI",
		61:  "URL",
		62:  "UUID",
		63:  "XHTML",
		64:  "ACCOUNT",
		65:  "ACTIVITY_DEFINITION",
		66:  "ADVERSE_EVENT",
		67:  "ALLERGY_INTOLERANCE",
		68:  "APPOINTMENT",
		69:  "APPOINTMENT_RESPONSE",
		70:  "AUDIT_EVENT",
		71:  "BASIC",
		72:  "BINARY",
		73:  "BIOLOGICALLY_DERIVED_PRODUCT",
		74:  "BODY_STRUCTURE",
		75:  "BUNDLE",
		76:  "CAPABILITY_STATEMENT",
		77:  "CARE_PLAN",
		78:  "CARE_TEAM",
		79:  "CATALOG_ENTRY",
		80:  "CHARGE_ITEM",
		81:  "CHARGE_ITEM_DEFINITION",
		82:  "CLAIM",
		83:  "CLAIM_RESPONSE",
		84:  "CLINICAL_IMPRESSION",
		85:  "CODE_SYSTEM",
		86:  "COMMUNICATION",
		87:  "COMMUNICATION_REQUEST",
		88:  "COMPARTMENT_DEFINITION",
		89:  "COMPOSITION",
		90:  "CONCEPT_MAP",
		91:  "CONDITION",
		92:  "CONSENT",
		93:  "CONTRACT",
		94:  "COVERAGE",
		95:  "COVERAGE_ELIGIBILITY_REQUEST",
		96:  "COVERAGE_ELIGIBILITY_RESPONSE",
		97:  "DETECTED_ISSUE",
		98:  "DEVICE",
		99:  "DEVICE_DEFINITION",
		100: "DEVICE_METRIC",
		101: "DEVICE_REQUEST",
		102: "DEVICE_USE_STATEMENT",
		103: "DIAGNOSTIC_REPORT",
		104: "DOCUMENT_MANIFEST",
		105: "DOCUMENT_REFERENCE",
		106: "DOMAIN_RESOURCE",
		107: "EFFECT_EVIDENCE_SYNTHESIS",
		108: "ENCOUNTER",
		109: "ENDPOINT",
		110: "ENROLLMENT_REQUEST",
		111: "ENROLLMENT_RESPONSE",
		112: "EPISODE_OF_CARE",
		113: "EVENT_DEFINITION",
		114: "EVIDENCE",
		115: "EVIDENCE_VARIABLE",
		116: "EXAMPLE_SCENARIO",
		117: "EXPLANATION_OF_BENEFIT",
		118: "FAMILY_MEMBER_HISTORY",
		119: "FLAG",
		120: "GOAL",
		121: "GRAPH_DEFINITION",
		122: "GROUP",
		123: "GUIDANCE_RESPONSE",
		124: "HEALTHCARE_SERVICE",
		125: "IMAGING_STUDY",
		126: "IMMUNIZATION",
		127: "IMMUNIZATION_EVALUATION",
		128: "IMMUNIZATION_RECOMMENDATION",
		129: "IMPLEMENTATION_GUIDE",
		130: "INSURANCE_PLAN",
		131: "INVOICE",
		132: "LIBRARY",
		133: "LINKAGE",
		134: "LIST",
		135: "LOCATION",
		136: "MEASURE",
		137: "MEASURE_REPORT",
		138: "MEDIA",
		139: "MEDICATION",
		140: "MEDICATION_ADMINISTRATION",
		141: "MEDICATION_DISPENSE",
		142: "MEDICATION_KNOWLEDGE",
		143: "MEDICATION_REQUEST",
		144: "MEDICATION_STATEMENT",
		145: "MEDICINAL_PRODUCT",
		146: "MEDICINAL_PRODUCT_AUTHORIZATION",
		147: "MEDICINAL_PRODUCT_CONTRAINDICATION",
		148: "MEDICINAL_PRODUCT_INDICATION",
		149: "MEDICINAL_PRODUCT_INGREDIENT",
		150: "MEDICINAL_PRODUCT_INTERACTION",
		151: "MEDICINAL_PRODUCT_MANUFACTURED",
		152: "MEDICINAL_PRODUCT_PACKAGED",
		153: "MEDICINAL_PRODUCT_PHARMACEUTICAL",
		154: "MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT",
		155: "MESSAGE_DEFINITION",
		156: "MESSAGE_HEADER",
		157: "MOLECULAR_SEQUENCE",
		158: "NAMING_SYSTEM",
		159: "NUTRITION_ORDER",
		160: "OBSERVATION",
		161: "OBSERVATION_DEFINITION",
		162: "OPERATION_DEFINITION",
		163: "OPERATION_OUTCOME",
		164: "ORGANIZATION",
		165: "ORGANIZATION_AFFILIATION",
		166: "PARAMETERS",
		167: "PATIENT",
		168: "PAYMENT_NOTICE",
		169: "PAYMENT_RECONCILIATION",
		170: "PERSON",
		171: "PLAN_DEFINITION",
		172: "PRACTITIONER",
		173: "PRACTITIONER_ROLE",
		174: "PROCEDURE",
		175: "PROVENANCE",
		176: "QUESTIONNAIRE",
		177: "QUESTIONNAIRE_RESPONSE",
		178: "RELATED_PERSON",
		179: "REQUEST_GROUP",
		180: "RESEARCH_DEFINITION",
		181: "RESEARCH_ELEMENT_DEFINITION",
		182: "RESEARCH_STUDY",
		183: "RESEARCH_SUBJECT",
		184: "RESOURCE",
		185: "RISK_ASSESSMENT",
		186: "RISK_EVIDENCE_SYNTHESIS",
		187: "SCHEDULE",
		188: "SEARCH_PARAMETER",
		189: "SERVICE_REQUEST",
		190: "SLOT",
		191: "SPECIMEN",
		192: "SPECIMEN_DEFINITION",
		193: "STRUCTURE_DEFINITION",
		194: "STRUCTURE_MAP",
		195: "SUBSCRIPTION",
		196: "SUBSTANCE",
		197: "SUBSTANCE_NUCLEIC_ACID",
		198: "SUBSTANCE_POLYMER",
		199: "SUBSTANCE_PROTEIN",
		200: "SUBSTANCE_REFERENCE_INFORMATION",
		201: "SUBSTANCE_SOURCE_MATERIAL",
		202: "SUBSTANCE_SPECIFICATION",
		203: "SUPPLY_DELIVERY",
		204: "SUPPLY_REQUEST",
		205: "TASK",
		206: "TERMINOLOGY_CAPABILITIES",
		207: "TEST_REPORT",
		208: "TEST_SCRIPT",
		209: "VALUE_SET",
		210: "VERIFICATION_RESULT",
		211: "VISION_PRESCRIPTION",
		212: "TYPE",
		213: "ANY",
	}
	FHIRAllTypesValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                0,
		"ADDRESS":                              1,
		"AGE":                                  2,
		"ANNOTATION":                           3,
		"ATTACHMENT":                           4,
		"BACKBONE_ELEMENT":                     5,
		"CODEABLE_CONCEPT":                     6,
		"CODING":                               7,
		"CONTACT_DETAIL":                       8,
		"CONTACT_POINT":                        9,
		"CONTRIBUTOR":                          10,
		"COUNT":                                11,
		"DATA_REQUIREMENT":                     12,
		"DISTANCE":                             13,
		"DOSAGE":                               14,
		"DURATION":                             15,
		"ELEMENT":                              16,
		"ELEMENT_DEFINITION":                   17,
		"EXPRESSION":                           18,
		"EXTENSION":                            19,
		"HUMAN_NAME":                           20,
		"IDENTIFIER":                           21,
		"MARKETING_STATUS":                     22,
		"META":                                 23,
		"MONEY":                                24,
		"MONEY_QUANTITY":                       25,
		"NARRATIVE":                            26,
		"PARAMETER_DEFINITION":                 27,
		"PERIOD":                               28,
		"POPULATION":                           29,
		"PROD_CHARACTERISTIC":                  30,
		"PRODUCT_SHELF_LIFE":                   31,
		"QUANTITY":                             32,
		"RANGE":                                33,
		"RATIO":                                34,
		"REFERENCE":                            35,
		"RELATED_ARTIFACT":                     36,
		"SAMPLED_DATA":                         37,
		"SIGNATURE":                            38,
		"SIMPLE_QUANTITY":                      39,
		"SUBSTANCE_AMOUNT":                     40,
		"TIMING":                               41,
		"TRIGGER_DEFINITION":                   42,
		"USAGE_CONTEXT":                        43,
		"BASE64_BINARY":                        44,
		"BOOLEAN":                              45,
		"CANONICAL":                            46,
		"CODE":                                 47,
		"DATE":                                 48,
		"DATE_TIME":                            49,
		"DECIMAL":                              50,
		"ID":                                   51,
		"INSTANT":                              52,
		"INTEGER":                              53,
		"MARKDOWN":                             54,
		"OID":                                  55,
		"POSITIVE_INT":                         56,
		"STRING":                               57,
		"TIME":                                 58,
		"UNSIGNED_INT":                         59,
		"URI":                                  60,
		"URL":                                  61,
		"UUID":                                 62,
		"XHTML":                                63,
		"ACCOUNT":                              64,
		"ACTIVITY_DEFINITION":                  65,
		"ADVERSE_EVENT":                        66,
		"ALLERGY_INTOLERANCE":                  67,
		"APPOINTMENT":                          68,
		"APPOINTMENT_RESPONSE":                 69,
		"AUDIT_EVENT":                          70,
		"BASIC":                                71,
		"BINARY":                               72,
		"BIOLOGICALLY_DERIVED_PRODUCT":         73,
		"BODY_STRUCTURE":                       74,
		"BUNDLE":                               75,
		"CAPABILITY_STATEMENT":                 76,
		"CARE_PLAN":                            77,
		"CARE_TEAM":                            78,
		"CATALOG_ENTRY":                        79,
		"CHARGE_ITEM":                          80,
		"CHARGE_ITEM_DEFINITION":               81,
		"CLAIM":                                82,
		"CLAIM_RESPONSE":                       83,
		"CLINICAL_IMPRESSION":                  84,
		"CODE_SYSTEM":                          85,
		"COMMUNICATION":                        86,
		"COMMUNICATION_REQUEST":                87,
		"COMPARTMENT_DEFINITION":               88,
		"COMPOSITION":                          89,
		"CONCEPT_MAP":                          90,
		"CONDITION":                            91,
		"CONSENT":                              92,
		"CONTRACT":                             93,
		"COVERAGE":                             94,
		"COVERAGE_ELIGIBILITY_REQUEST":         95,
		"COVERAGE_ELIGIBILITY_RESPONSE":        96,
		"DETECTED_ISSUE":                       97,
		"DEVICE":                               98,
		"DEVICE_DEFINITION":                    99,
		"DEVICE_METRIC":                        100,
		"DEVICE_REQUEST":                       101,
		"DEVICE_USE_STATEMENT":                 102,
		"DIAGNOSTIC_REPORT":                    103,
		"DOCUMENT_MANIFEST":                    104,
		"DOCUMENT_REFERENCE":                   105,
		"DOMAIN_RESOURCE":                      106,
		"EFFECT_EVIDENCE_SYNTHESIS":            107,
		"ENCOUNTER":                            108,
		"ENDPOINT":                             109,
		"ENROLLMENT_REQUEST":                   110,
		"ENROLLMENT_RESPONSE":                  111,
		"EPISODE_OF_CARE":                      112,
		"EVENT_DEFINITION":                     113,
		"EVIDENCE":                             114,
		"EVIDENCE_VARIABLE":                    115,
		"EXAMPLE_SCENARIO":                     116,
		"EXPLANATION_OF_BENEFIT":               117,
		"FAMILY_MEMBER_HISTORY":                118,
		"FLAG":                                 119,
		"GOAL":                                 120,
		"GRAPH_DEFINITION":                     121,
		"GROUP":                                122,
		"GUIDANCE_RESPONSE":                    123,
		"HEALTHCARE_SERVICE":                   124,
		"IMAGING_STUDY":                        125,
		"IMMUNIZATION":                         126,
		"IMMUNIZATION_EVALUATION":              127,
		"IMMUNIZATION_RECOMMENDATION":          128,
		"IMPLEMENTATION_GUIDE":                 129,
		"INSURANCE_PLAN":                       130,
		"INVOICE":                              131,
		"LIBRARY":                              132,
		"LINKAGE":                              133,
		"LIST":                                 134,
		"LOCATION":                             135,
		"MEASURE":                              136,
		"MEASURE_REPORT":                       137,
		"MEDIA":                                138,
		"MEDICATION":                           139,
		"MEDICATION_ADMINISTRATION":            140,
		"MEDICATION_DISPENSE":                  141,
		"MEDICATION_KNOWLEDGE":                 142,
		"MEDICATION_REQUEST":                   143,
		"MEDICATION_STATEMENT":                 144,
		"MEDICINAL_PRODUCT":                    145,
		"MEDICINAL_PRODUCT_AUTHORIZATION":      146,
		"MEDICINAL_PRODUCT_CONTRAINDICATION":   147,
		"MEDICINAL_PRODUCT_INDICATION":         148,
		"MEDICINAL_PRODUCT_INGREDIENT":         149,
		"MEDICINAL_PRODUCT_INTERACTION":        150,
		"MEDICINAL_PRODUCT_MANUFACTURED":       151,
		"MEDICINAL_PRODUCT_PACKAGED":           152,
		"MEDICINAL_PRODUCT_PHARMACEUTICAL":     153,
		"MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT": 154,
		"MESSAGE_DEFINITION":                   155,
		"MESSAGE_HEADER":                       156,
		"MOLECULAR_SEQUENCE":                   157,
		"NAMING_SYSTEM":                        158,
		"NUTRITION_ORDER":                      159,
		"OBSERVATION":                          160,
		"OBSERVATION_DEFINITION":               161,
		"OPERATION_DEFINITION":                 162,
		"OPERATION_OUTCOME":                    163,
		"ORGANIZATION":                         164,
		"ORGANIZATION_AFFILIATION":             165,
		"PARAMETERS":                           166,
		"PATIENT":                              167,
		"PAYMENT_NOTICE":                       168,
		"PAYMENT_RECONCILIATION":               169,
		"PERSON":                               170,
		"PLAN_DEFINITION":                      171,
		"PRACTITIONER":                         172,
		"PRACTITIONER_ROLE":                    173,
		"PROCEDURE":                            174,
		"PROVENANCE":                           175,
		"QUESTIONNAIRE":                        176,
		"QUESTIONNAIRE_RESPONSE":               177,
		"RELATED_PERSON":                       178,
		"REQUEST_GROUP":                        179,
		"RESEARCH_DEFINITION":                  180,
		"RESEARCH_ELEMENT_DEFINITION":          181,
		"RESEARCH_STUDY":                       182,
		"RESEARCH_SUBJECT":                     183,
		"RESOURCE":                             184,
		"RISK_ASSESSMENT":                      185,
		"RISK_EVIDENCE_SYNTHESIS":              186,
		"SCHEDULE":                             187,
		"SEARCH_PARAMETER":                     188,
		"SERVICE_REQUEST":                      189,
		"SLOT":                                 190,
		"SPECIMEN":                             191,
		"SPECIMEN_DEFINITION":                  192,
		"STRUCTURE_DEFINITION":                 193,
		"STRUCTURE_MAP":                        194,
		"SUBSCRIPTION":                         195,
		"SUBSTANCE":                            196,
		"SUBSTANCE_NUCLEIC_ACID":               197,
		"SUBSTANCE_POLYMER":                    198,
		"SUBSTANCE_PROTEIN":                    199,
		"SUBSTANCE_REFERENCE_INFORMATION":      200,
		"SUBSTANCE_SOURCE_MATERIAL":            201,
		"SUBSTANCE_SPECIFICATION":              202,
		"SUPPLY_DELIVERY":                      203,
		"SUPPLY_REQUEST":                       204,
		"TASK":                                 205,
		"TERMINOLOGY_CAPABILITIES":             206,
		"TEST_REPORT":                          207,
		"TEST_SCRIPT":                          208,
		"VALUE_SET":                            209,
		"VERIFICATION_RESULT":                  210,
		"VISION_PRESCRIPTION":                  211,
		"TYPE":                                 212,
		"ANY":                                  213,
	}
)

func (x FHIRAllTypesValueSet_Value) Enum() *FHIRAllTypesValueSet_Value {
	p := new(FHIRAllTypesValueSet_Value)
	*p = x
	return p
}

func (x FHIRAllTypesValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRAllTypesValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[8].Descriptor()
}

func (FHIRAllTypesValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[8]
}

func (x FHIRAllTypesValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRAllTypesValueSet_Value.Descriptor instead.
func (FHIRAllTypesValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{8, 0}
}

type FHIRDefinedTypeValueSet_Value int32

const (
	FHIRDefinedTypeValueSet_INVALID_UNINITIALIZED                FHIRDefinedTypeValueSet_Value = 0
	FHIRDefinedTypeValueSet_ADDRESS                              FHIRDefinedTypeValueSet_Value = 1
	FHIRDefinedTypeValueSet_AGE                                  FHIRDefinedTypeValueSet_Value = 2
	FHIRDefinedTypeValueSet_ANNOTATION                           FHIRDefinedTypeValueSet_Value = 3
	FHIRDefinedTypeValueSet_ATTACHMENT                           FHIRDefinedTypeValueSet_Value = 4
	FHIRDefinedTypeValueSet_BACKBONE_ELEMENT                     FHIRDefinedTypeValueSet_Value = 5
	FHIRDefinedTypeValueSet_CODEABLE_CONCEPT                     FHIRDefinedTypeValueSet_Value = 6
	FHIRDefinedTypeValueSet_CODING                               FHIRDefinedTypeValueSet_Value = 7
	FHIRDefinedTypeValueSet_CONTACT_DETAIL                       FHIRDefinedTypeValueSet_Value = 8
	FHIRDefinedTypeValueSet_CONTACT_POINT                        FHIRDefinedTypeValueSet_Value = 9
	FHIRDefinedTypeValueSet_CONTRIBUTOR                          FHIRDefinedTypeValueSet_Value = 10
	FHIRDefinedTypeValueSet_COUNT                                FHIRDefinedTypeValueSet_Value = 11
	FHIRDefinedTypeValueSet_DATA_REQUIREMENT                     FHIRDefinedTypeValueSet_Value = 12
	FHIRDefinedTypeValueSet_DISTANCE                             FHIRDefinedTypeValueSet_Value = 13
	FHIRDefinedTypeValueSet_DOSAGE                               FHIRDefinedTypeValueSet_Value = 14
	FHIRDefinedTypeValueSet_DURATION                             FHIRDefinedTypeValueSet_Value = 15
	FHIRDefinedTypeValueSet_ELEMENT                              FHIRDefinedTypeValueSet_Value = 16
	FHIRDefinedTypeValueSet_ELEMENT_DEFINITION                   FHIRDefinedTypeValueSet_Value = 17
	FHIRDefinedTypeValueSet_EXPRESSION                           FHIRDefinedTypeValueSet_Value = 18
	FHIRDefinedTypeValueSet_EXTENSION                            FHIRDefinedTypeValueSet_Value = 19
	FHIRDefinedTypeValueSet_HUMAN_NAME                           FHIRDefinedTypeValueSet_Value = 20
	FHIRDefinedTypeValueSet_IDENTIFIER                           FHIRDefinedTypeValueSet_Value = 21
	FHIRDefinedTypeValueSet_MARKETING_STATUS                     FHIRDefinedTypeValueSet_Value = 22
	FHIRDefinedTypeValueSet_META                                 FHIRDefinedTypeValueSet_Value = 23
	FHIRDefinedTypeValueSet_MONEY                                FHIRDefinedTypeValueSet_Value = 24
	FHIRDefinedTypeValueSet_MONEY_QUANTITY                       FHIRDefinedTypeValueSet_Value = 25
	FHIRDefinedTypeValueSet_NARRATIVE                            FHIRDefinedTypeValueSet_Value = 26
	FHIRDefinedTypeValueSet_PARAMETER_DEFINITION                 FHIRDefinedTypeValueSet_Value = 27
	FHIRDefinedTypeValueSet_PERIOD                               FHIRDefinedTypeValueSet_Value = 28
	FHIRDefinedTypeValueSet_POPULATION                           FHIRDefinedTypeValueSet_Value = 29
	FHIRDefinedTypeValueSet_PROD_CHARACTERISTIC                  FHIRDefinedTypeValueSet_Value = 30
	FHIRDefinedTypeValueSet_PRODUCT_SHELF_LIFE                   FHIRDefinedTypeValueSet_Value = 31
	FHIRDefinedTypeValueSet_QUANTITY                             FHIRDefinedTypeValueSet_Value = 32
	FHIRDefinedTypeValueSet_RANGE                                FHIRDefinedTypeValueSet_Value = 33
	FHIRDefinedTypeValueSet_RATIO                                FHIRDefinedTypeValueSet_Value = 34
	FHIRDefinedTypeValueSet_REFERENCE                            FHIRDefinedTypeValueSet_Value = 35
	FHIRDefinedTypeValueSet_RELATED_ARTIFACT                     FHIRDefinedTypeValueSet_Value = 36
	FHIRDefinedTypeValueSet_SAMPLED_DATA                         FHIRDefinedTypeValueSet_Value = 37
	FHIRDefinedTypeValueSet_SIGNATURE                            FHIRDefinedTypeValueSet_Value = 38
	FHIRDefinedTypeValueSet_SIMPLE_QUANTITY                      FHIRDefinedTypeValueSet_Value = 39
	FHIRDefinedTypeValueSet_SUBSTANCE_AMOUNT                     FHIRDefinedTypeValueSet_Value = 40
	FHIRDefinedTypeValueSet_TIMING                               FHIRDefinedTypeValueSet_Value = 41
	FHIRDefinedTypeValueSet_TRIGGER_DEFINITION                   FHIRDefinedTypeValueSet_Value = 42
	FHIRDefinedTypeValueSet_USAGE_CONTEXT                        FHIRDefinedTypeValueSet_Value = 43
	FHIRDefinedTypeValueSet_BASE64_BINARY                        FHIRDefinedTypeValueSet_Value = 44
	FHIRDefinedTypeValueSet_BOOLEAN                              FHIRDefinedTypeValueSet_Value = 45
	FHIRDefinedTypeValueSet_CANONICAL                            FHIRDefinedTypeValueSet_Value = 46
	FHIRDefinedTypeValueSet_CODE                                 FHIRDefinedTypeValueSet_Value = 47
	FHIRDefinedTypeValueSet_DATE                                 FHIRDefinedTypeValueSet_Value = 48
	FHIRDefinedTypeValueSet_DATE_TIME                            FHIRDefinedTypeValueSet_Value = 49
	FHIRDefinedTypeValueSet_DECIMAL                              FHIRDefinedTypeValueSet_Value = 50
	FHIRDefinedTypeValueSet_ID                                   FHIRDefinedTypeValueSet_Value = 51
	FHIRDefinedTypeValueSet_INSTANT                              FHIRDefinedTypeValueSet_Value = 52
	FHIRDefinedTypeValueSet_INTEGER                              FHIRDefinedTypeValueSet_Value = 53
	FHIRDefinedTypeValueSet_MARKDOWN                             FHIRDefinedTypeValueSet_Value = 54
	FHIRDefinedTypeValueSet_OID                                  FHIRDefinedTypeValueSet_Value = 55
	FHIRDefinedTypeValueSet_POSITIVE_INT                         FHIRDefinedTypeValueSet_Value = 56
	FHIRDefinedTypeValueSet_STRING                               FHIRDefinedTypeValueSet_Value = 57
	FHIRDefinedTypeValueSet_TIME                                 FHIRDefinedTypeValueSet_Value = 58
	FHIRDefinedTypeValueSet_UNSIGNED_INT                         FHIRDefinedTypeValueSet_Value = 59
	FHIRDefinedTypeValueSet_URI                                  FHIRDefinedTypeValueSet_Value = 60
	FHIRDefinedTypeValueSet_URL                                  FHIRDefinedTypeValueSet_Value = 61
	FHIRDefinedTypeValueSet_UUID                                 FHIRDefinedTypeValueSet_Value = 62
	FHIRDefinedTypeValueSet_XHTML                                FHIRDefinedTypeValueSet_Value = 63
	FHIRDefinedTypeValueSet_ACCOUNT                              FHIRDefinedTypeValueSet_Value = 64
	FHIRDefinedTypeValueSet_ACTIVITY_DEFINITION                  FHIRDefinedTypeValueSet_Value = 65
	FHIRDefinedTypeValueSet_ADVERSE_EVENT                        FHIRDefinedTypeValueSet_Value = 66
	FHIRDefinedTypeValueSet_ALLERGY_INTOLERANCE                  FHIRDefinedTypeValueSet_Value = 67
	FHIRDefinedTypeValueSet_APPOINTMENT                          FHIRDefinedTypeValueSet_Value = 68
	FHIRDefinedTypeValueSet_APPOINTMENT_RESPONSE                 FHIRDefinedTypeValueSet_Value = 69
	FHIRDefinedTypeValueSet_AUDIT_EVENT                          FHIRDefinedTypeValueSet_Value = 70
	FHIRDefinedTypeValueSet_BASIC                                FHIRDefinedTypeValueSet_Value = 71
	FHIRDefinedTypeValueSet_BINARY                               FHIRDefinedTypeValueSet_Value = 72
	FHIRDefinedTypeValueSet_BIOLOGICALLY_DERIVED_PRODUCT         FHIRDefinedTypeValueSet_Value = 73
	FHIRDefinedTypeValueSet_BODY_STRUCTURE                       FHIRDefinedTypeValueSet_Value = 74
	FHIRDefinedTypeValueSet_BUNDLE                               FHIRDefinedTypeValueSet_Value = 75
	FHIRDefinedTypeValueSet_CAPABILITY_STATEMENT                 FHIRDefinedTypeValueSet_Value = 76
	FHIRDefinedTypeValueSet_CARE_PLAN                            FHIRDefinedTypeValueSet_Value = 77
	FHIRDefinedTypeValueSet_CARE_TEAM                            FHIRDefinedTypeValueSet_Value = 78
	FHIRDefinedTypeValueSet_CATALOG_ENTRY                        FHIRDefinedTypeValueSet_Value = 79
	FHIRDefinedTypeValueSet_CHARGE_ITEM                          FHIRDefinedTypeValueSet_Value = 80
	FHIRDefinedTypeValueSet_CHARGE_ITEM_DEFINITION               FHIRDefinedTypeValueSet_Value = 81
	FHIRDefinedTypeValueSet_CLAIM                                FHIRDefinedTypeValueSet_Value = 82
	FHIRDefinedTypeValueSet_CLAIM_RESPONSE                       FHIRDefinedTypeValueSet_Value = 83
	FHIRDefinedTypeValueSet_CLINICAL_IMPRESSION                  FHIRDefinedTypeValueSet_Value = 84
	FHIRDefinedTypeValueSet_CODE_SYSTEM                          FHIRDefinedTypeValueSet_Value = 85
	FHIRDefinedTypeValueSet_COMMUNICATION                        FHIRDefinedTypeValueSet_Value = 86
	FHIRDefinedTypeValueSet_COMMUNICATION_REQUEST                FHIRDefinedTypeValueSet_Value = 87
	FHIRDefinedTypeValueSet_COMPARTMENT_DEFINITION               FHIRDefinedTypeValueSet_Value = 88
	FHIRDefinedTypeValueSet_COMPOSITION                          FHIRDefinedTypeValueSet_Value = 89
	FHIRDefinedTypeValueSet_CONCEPT_MAP                          FHIRDefinedTypeValueSet_Value = 90
	FHIRDefinedTypeValueSet_CONDITION                            FHIRDefinedTypeValueSet_Value = 91
	FHIRDefinedTypeValueSet_CONSENT                              FHIRDefinedTypeValueSet_Value = 92
	FHIRDefinedTypeValueSet_CONTRACT                             FHIRDefinedTypeValueSet_Value = 93
	FHIRDefinedTypeValueSet_COVERAGE                             FHIRDefinedTypeValueSet_Value = 94
	FHIRDefinedTypeValueSet_COVERAGE_ELIGIBILITY_REQUEST         FHIRDefinedTypeValueSet_Value = 95
	FHIRDefinedTypeValueSet_COVERAGE_ELIGIBILITY_RESPONSE        FHIRDefinedTypeValueSet_Value = 96
	FHIRDefinedTypeValueSet_DETECTED_ISSUE                       FHIRDefinedTypeValueSet_Value = 97
	FHIRDefinedTypeValueSet_DEVICE                               FHIRDefinedTypeValueSet_Value = 98
	FHIRDefinedTypeValueSet_DEVICE_DEFINITION                    FHIRDefinedTypeValueSet_Value = 99
	FHIRDefinedTypeValueSet_DEVICE_METRIC                        FHIRDefinedTypeValueSet_Value = 100
	FHIRDefinedTypeValueSet_DEVICE_REQUEST                       FHIRDefinedTypeValueSet_Value = 101
	FHIRDefinedTypeValueSet_DEVICE_USE_STATEMENT                 FHIRDefinedTypeValueSet_Value = 102
	FHIRDefinedTypeValueSet_DIAGNOSTIC_REPORT                    FHIRDefinedTypeValueSet_Value = 103
	FHIRDefinedTypeValueSet_DOCUMENT_MANIFEST                    FHIRDefinedTypeValueSet_Value = 104
	FHIRDefinedTypeValueSet_DOCUMENT_REFERENCE                   FHIRDefinedTypeValueSet_Value = 105
	FHIRDefinedTypeValueSet_DOMAIN_RESOURCE                      FHIRDefinedTypeValueSet_Value = 106
	FHIRDefinedTypeValueSet_EFFECT_EVIDENCE_SYNTHESIS            FHIRDefinedTypeValueSet_Value = 107
	FHIRDefinedTypeValueSet_ENCOUNTER                            FHIRDefinedTypeValueSet_Value = 108
	FHIRDefinedTypeValueSet_ENDPOINT                             FHIRDefinedTypeValueSet_Value = 109
	FHIRDefinedTypeValueSet_ENROLLMENT_REQUEST                   FHIRDefinedTypeValueSet_Value = 110
	FHIRDefinedTypeValueSet_ENROLLMENT_RESPONSE                  FHIRDefinedTypeValueSet_Value = 111
	FHIRDefinedTypeValueSet_EPISODE_OF_CARE                      FHIRDefinedTypeValueSet_Value = 112
	FHIRDefinedTypeValueSet_EVENT_DEFINITION                     FHIRDefinedTypeValueSet_Value = 113
	FHIRDefinedTypeValueSet_EVIDENCE                             FHIRDefinedTypeValueSet_Value = 114
	FHIRDefinedTypeValueSet_EVIDENCE_VARIABLE                    FHIRDefinedTypeValueSet_Value = 115
	FHIRDefinedTypeValueSet_EXAMPLE_SCENARIO                     FHIRDefinedTypeValueSet_Value = 116
	FHIRDefinedTypeValueSet_EXPLANATION_OF_BENEFIT               FHIRDefinedTypeValueSet_Value = 117
	FHIRDefinedTypeValueSet_FAMILY_MEMBER_HISTORY                FHIRDefinedTypeValueSet_Value = 118
	FHIRDefinedTypeValueSet_FLAG                                 FHIRDefinedTypeValueSet_Value = 119
	FHIRDefinedTypeValueSet_GOAL                                 FHIRDefinedTypeValueSet_Value = 120
	FHIRDefinedTypeValueSet_GRAPH_DEFINITION                     FHIRDefinedTypeValueSet_Value = 121
	FHIRDefinedTypeValueSet_GROUP                                FHIRDefinedTypeValueSet_Value = 122
	FHIRDefinedTypeValueSet_GUIDANCE_RESPONSE                    FHIRDefinedTypeValueSet_Value = 123
	FHIRDefinedTypeValueSet_HEALTHCARE_SERVICE                   FHIRDefinedTypeValueSet_Value = 124
	FHIRDefinedTypeValueSet_IMAGING_STUDY                        FHIRDefinedTypeValueSet_Value = 125
	FHIRDefinedTypeValueSet_IMMUNIZATION                         FHIRDefinedTypeValueSet_Value = 126
	FHIRDefinedTypeValueSet_IMMUNIZATION_EVALUATION              FHIRDefinedTypeValueSet_Value = 127
	FHIRDefinedTypeValueSet_IMMUNIZATION_RECOMMENDATION          FHIRDefinedTypeValueSet_Value = 128
	FHIRDefinedTypeValueSet_IMPLEMENTATION_GUIDE                 FHIRDefinedTypeValueSet_Value = 129
	FHIRDefinedTypeValueSet_INSURANCE_PLAN                       FHIRDefinedTypeValueSet_Value = 130
	FHIRDefinedTypeValueSet_INVOICE                              FHIRDefinedTypeValueSet_Value = 131
	FHIRDefinedTypeValueSet_LIBRARY                              FHIRDefinedTypeValueSet_Value = 132
	FHIRDefinedTypeValueSet_LINKAGE                              FHIRDefinedTypeValueSet_Value = 133
	FHIRDefinedTypeValueSet_LIST                                 FHIRDefinedTypeValueSet_Value = 134
	FHIRDefinedTypeValueSet_LOCATION                             FHIRDefinedTypeValueSet_Value = 135
	FHIRDefinedTypeValueSet_MEASURE                              FHIRDefinedTypeValueSet_Value = 136
	FHIRDefinedTypeValueSet_MEASURE_REPORT                       FHIRDefinedTypeValueSet_Value = 137
	FHIRDefinedTypeValueSet_MEDIA                                FHIRDefinedTypeValueSet_Value = 138
	FHIRDefinedTypeValueSet_MEDICATION                           FHIRDefinedTypeValueSet_Value = 139
	FHIRDefinedTypeValueSet_MEDICATION_ADMINISTRATION            FHIRDefinedTypeValueSet_Value = 140
	FHIRDefinedTypeValueSet_MEDICATION_DISPENSE                  FHIRDefinedTypeValueSet_Value = 141
	FHIRDefinedTypeValueSet_MEDICATION_KNOWLEDGE                 FHIRDefinedTypeValueSet_Value = 142
	FHIRDefinedTypeValueSet_MEDICATION_REQUEST                   FHIRDefinedTypeValueSet_Value = 143
	FHIRDefinedTypeValueSet_MEDICATION_STATEMENT                 FHIRDefinedTypeValueSet_Value = 144
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT                    FHIRDefinedTypeValueSet_Value = 145
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_AUTHORIZATION      FHIRDefinedTypeValueSet_Value = 146
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_CONTRAINDICATION   FHIRDefinedTypeValueSet_Value = 147
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_INDICATION         FHIRDefinedTypeValueSet_Value = 148
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_INGREDIENT         FHIRDefinedTypeValueSet_Value = 149
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_INTERACTION        FHIRDefinedTypeValueSet_Value = 150
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_MANUFACTURED       FHIRDefinedTypeValueSet_Value = 151
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_PACKAGED           FHIRDefinedTypeValueSet_Value = 152
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_PHARMACEUTICAL     FHIRDefinedTypeValueSet_Value = 153
	FHIRDefinedTypeValueSet_MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT FHIRDefinedTypeValueSet_Value = 154
	FHIRDefinedTypeValueSet_MESSAGE_DEFINITION                   FHIRDefinedTypeValueSet_Value = 155
	FHIRDefinedTypeValueSet_MESSAGE_HEADER                       FHIRDefinedTypeValueSet_Value = 156
	FHIRDefinedTypeValueSet_MOLECULAR_SEQUENCE                   FHIRDefinedTypeValueSet_Value = 157
	FHIRDefinedTypeValueSet_NAMING_SYSTEM                        FHIRDefinedTypeValueSet_Value = 158
	FHIRDefinedTypeValueSet_NUTRITION_ORDER                      FHIRDefinedTypeValueSet_Value = 159
	FHIRDefinedTypeValueSet_OBSERVATION                          FHIRDefinedTypeValueSet_Value = 160
	FHIRDefinedTypeValueSet_OBSERVATION_DEFINITION               FHIRDefinedTypeValueSet_Value = 161
	FHIRDefinedTypeValueSet_OPERATION_DEFINITION                 FHIRDefinedTypeValueSet_Value = 162
	FHIRDefinedTypeValueSet_OPERATION_OUTCOME                    FHIRDefinedTypeValueSet_Value = 163
	FHIRDefinedTypeValueSet_ORGANIZATION                         FHIRDefinedTypeValueSet_Value = 164
	FHIRDefinedTypeValueSet_ORGANIZATION_AFFILIATION             FHIRDefinedTypeValueSet_Value = 165
	FHIRDefinedTypeValueSet_PARAMETERS                           FHIRDefinedTypeValueSet_Value = 166
	FHIRDefinedTypeValueSet_PATIENT                              FHIRDefinedTypeValueSet_Value = 167
	FHIRDefinedTypeValueSet_PAYMENT_NOTICE                       FHIRDefinedTypeValueSet_Value = 168
	FHIRDefinedTypeValueSet_PAYMENT_RECONCILIATION               FHIRDefinedTypeValueSet_Value = 169
	FHIRDefinedTypeValueSet_PERSON                               FHIRDefinedTypeValueSet_Value = 170
	FHIRDefinedTypeValueSet_PLAN_DEFINITION                      FHIRDefinedTypeValueSet_Value = 171
	FHIRDefinedTypeValueSet_PRACTITIONER                         FHIRDefinedTypeValueSet_Value = 172
	FHIRDefinedTypeValueSet_PRACTITIONER_ROLE                    FHIRDefinedTypeValueSet_Value = 173
	FHIRDefinedTypeValueSet_PROCEDURE                            FHIRDefinedTypeValueSet_Value = 174
	FHIRDefinedTypeValueSet_PROVENANCE                           FHIRDefinedTypeValueSet_Value = 175
	FHIRDefinedTypeValueSet_QUESTIONNAIRE                        FHIRDefinedTypeValueSet_Value = 176
	FHIRDefinedTypeValueSet_QUESTIONNAIRE_RESPONSE               FHIRDefinedTypeValueSet_Value = 177
	FHIRDefinedTypeValueSet_RELATED_PERSON                       FHIRDefinedTypeValueSet_Value = 178
	FHIRDefinedTypeValueSet_REQUEST_GROUP                        FHIRDefinedTypeValueSet_Value = 179
	FHIRDefinedTypeValueSet_RESEARCH_DEFINITION                  FHIRDefinedTypeValueSet_Value = 180
	FHIRDefinedTypeValueSet_RESEARCH_ELEMENT_DEFINITION          FHIRDefinedTypeValueSet_Value = 181
	FHIRDefinedTypeValueSet_RESEARCH_STUDY                       FHIRDefinedTypeValueSet_Value = 182
	FHIRDefinedTypeValueSet_RESEARCH_SUBJECT                     FHIRDefinedTypeValueSet_Value = 183
	FHIRDefinedTypeValueSet_RESOURCE                             FHIRDefinedTypeValueSet_Value = 184
	FHIRDefinedTypeValueSet_RISK_ASSESSMENT                      FHIRDefinedTypeValueSet_Value = 185
	FHIRDefinedTypeValueSet_RISK_EVIDENCE_SYNTHESIS              FHIRDefinedTypeValueSet_Value = 186
	FHIRDefinedTypeValueSet_SCHEDULE                             FHIRDefinedTypeValueSet_Value = 187
	FHIRDefinedTypeValueSet_SEARCH_PARAMETER                     FHIRDefinedTypeValueSet_Value = 188
	FHIRDefinedTypeValueSet_SERVICE_REQUEST                      FHIRDefinedTypeValueSet_Value = 189
	FHIRDefinedTypeValueSet_SLOT                                 FHIRDefinedTypeValueSet_Value = 190
	FHIRDefinedTypeValueSet_SPECIMEN                             FHIRDefinedTypeValueSet_Value = 191
	FHIRDefinedTypeValueSet_SPECIMEN_DEFINITION                  FHIRDefinedTypeValueSet_Value = 192
	FHIRDefinedTypeValueSet_STRUCTURE_DEFINITION                 FHIRDefinedTypeValueSet_Value = 193
	FHIRDefinedTypeValueSet_STRUCTURE_MAP                        FHIRDefinedTypeValueSet_Value = 194
	FHIRDefinedTypeValueSet_SUBSCRIPTION                         FHIRDefinedTypeValueSet_Value = 195
	FHIRDefinedTypeValueSet_SUBSTANCE                            FHIRDefinedTypeValueSet_Value = 196
	FHIRDefinedTypeValueSet_SUBSTANCE_NUCLEIC_ACID               FHIRDefinedTypeValueSet_Value = 197
	FHIRDefinedTypeValueSet_SUBSTANCE_POLYMER                    FHIRDefinedTypeValueSet_Value = 198
	FHIRDefinedTypeValueSet_SUBSTANCE_PROTEIN                    FHIRDefinedTypeValueSet_Value = 199
	FHIRDefinedTypeValueSet_SUBSTANCE_REFERENCE_INFORMATION      FHIRDefinedTypeValueSet_Value = 200
	FHIRDefinedTypeValueSet_SUBSTANCE_SOURCE_MATERIAL            FHIRDefinedTypeValueSet_Value = 201
	FHIRDefinedTypeValueSet_SUBSTANCE_SPECIFICATION              FHIRDefinedTypeValueSet_Value = 202
	FHIRDefinedTypeValueSet_SUPPLY_DELIVERY                      FHIRDefinedTypeValueSet_Value = 203
	FHIRDefinedTypeValueSet_SUPPLY_REQUEST                       FHIRDefinedTypeValueSet_Value = 204
	FHIRDefinedTypeValueSet_TASK                                 FHIRDefinedTypeValueSet_Value = 205
	FHIRDefinedTypeValueSet_TERMINOLOGY_CAPABILITIES             FHIRDefinedTypeValueSet_Value = 206
	FHIRDefinedTypeValueSet_TEST_REPORT                          FHIRDefinedTypeValueSet_Value = 207
	FHIRDefinedTypeValueSet_TEST_SCRIPT                          FHIRDefinedTypeValueSet_Value = 208
	FHIRDefinedTypeValueSet_VALUE_SET                            FHIRDefinedTypeValueSet_Value = 209
	FHIRDefinedTypeValueSet_VERIFICATION_RESULT                  FHIRDefinedTypeValueSet_Value = 210
	FHIRDefinedTypeValueSet_VISION_PRESCRIPTION                  FHIRDefinedTypeValueSet_Value = 211
)

// Enum value maps for FHIRDefinedTypeValueSet_Value.
var (
	FHIRDefinedTypeValueSet_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ADDRESS",
		2:   "AGE",
		3:   "ANNOTATION",
		4:   "ATTACHMENT",
		5:   "BACKBONE_ELEMENT",
		6:   "CODEABLE_CONCEPT",
		7:   "CODING",
		8:   "CONTACT_DETAIL",
		9:   "CONTACT_POINT",
		10:  "CONTRIBUTOR",
		11:  "COUNT",
		12:  "DATA_REQUIREMENT",
		13:  "DISTANCE",
		14:  "DOSAGE",
		15:  "DURATION",
		16:  "ELEMENT",
		17:  "ELEMENT_DEFINITION",
		18:  "EXPRESSION",
		19:  "EXTENSION",
		20:  "HUMAN_NAME",
		21:  "IDENTIFIER",
		22:  "MARKETING_STATUS",
		23:  "META",
		24:  "MONEY",
		25:  "MONEY_QUANTITY",
		26:  "NARRATIVE",
		27:  "PARAMETER_DEFINITION",
		28:  "PERIOD",
		29:  "POPULATION",
		30:  "PROD_CHARACTERISTIC",
		31:  "PRODUCT_SHELF_LIFE",
		32:  "QUANTITY",
		33:  "RANGE",
		34:  "RATIO",
		35:  "REFERENCE",
		36:  "RELATED_ARTIFACT",
		37:  "SAMPLED_DATA",
		38:  "SIGNATURE",
		39:  "SIMPLE_QUANTITY",
		40:  "SUBSTANCE_AMOUNT",
		41:  "TIMING",
		42:  "TRIGGER_DEFINITION",
		43:  "USAGE_CONTEXT",
		44:  "BASE64_BINARY",
		45:  "BOOLEAN",
		46:  "CANONICAL",
		47:  "CODE",
		48:  "DATE",
		49:  "DATE_TIME",
		50:  "DECIMAL",
		51:  "ID",
		52:  "INSTANT",
		53:  "INTEGER",
		54:  "MARKDOWN",
		55:  "OID",
		56:  "POSITIVE_INT",
		57:  "STRING",
		58:  "TIME",
		59:  "UNSIGNED_INT",
		60:  "URI",
		61:  "URL",
		62:  "UUID",
		63:  "XHTML",
		64:  "ACCOUNT",
		65:  "ACTIVITY_DEFINITION",
		66:  "ADVERSE_EVENT",
		67:  "ALLERGY_INTOLERANCE",
		68:  "APPOINTMENT",
		69:  "APPOINTMENT_RESPONSE",
		70:  "AUDIT_EVENT",
		71:  "BASIC",
		72:  "BINARY",
		73:  "BIOLOGICALLY_DERIVED_PRODUCT",
		74:  "BODY_STRUCTURE",
		75:  "BUNDLE",
		76:  "CAPABILITY_STATEMENT",
		77:  "CARE_PLAN",
		78:  "CARE_TEAM",
		79:  "CATALOG_ENTRY",
		80:  "CHARGE_ITEM",
		81:  "CHARGE_ITEM_DEFINITION",
		82:  "CLAIM",
		83:  "CLAIM_RESPONSE",
		84:  "CLINICAL_IMPRESSION",
		85:  "CODE_SYSTEM",
		86:  "COMMUNICATION",
		87:  "COMMUNICATION_REQUEST",
		88:  "COMPARTMENT_DEFINITION",
		89:  "COMPOSITION",
		90:  "CONCEPT_MAP",
		91:  "CONDITION",
		92:  "CONSENT",
		93:  "CONTRACT",
		94:  "COVERAGE",
		95:  "COVERAGE_ELIGIBILITY_REQUEST",
		96:  "COVERAGE_ELIGIBILITY_RESPONSE",
		97:  "DETECTED_ISSUE",
		98:  "DEVICE",
		99:  "DEVICE_DEFINITION",
		100: "DEVICE_METRIC",
		101: "DEVICE_REQUEST",
		102: "DEVICE_USE_STATEMENT",
		103: "DIAGNOSTIC_REPORT",
		104: "DOCUMENT_MANIFEST",
		105: "DOCUMENT_REFERENCE",
		106: "DOMAIN_RESOURCE",
		107: "EFFECT_EVIDENCE_SYNTHESIS",
		108: "ENCOUNTER",
		109: "ENDPOINT",
		110: "ENROLLMENT_REQUEST",
		111: "ENROLLMENT_RESPONSE",
		112: "EPISODE_OF_CARE",
		113: "EVENT_DEFINITION",
		114: "EVIDENCE",
		115: "EVIDENCE_VARIABLE",
		116: "EXAMPLE_SCENARIO",
		117: "EXPLANATION_OF_BENEFIT",
		118: "FAMILY_MEMBER_HISTORY",
		119: "FLAG",
		120: "GOAL",
		121: "GRAPH_DEFINITION",
		122: "GROUP",
		123: "GUIDANCE_RESPONSE",
		124: "HEALTHCARE_SERVICE",
		125: "IMAGING_STUDY",
		126: "IMMUNIZATION",
		127: "IMMUNIZATION_EVALUATION",
		128: "IMMUNIZATION_RECOMMENDATION",
		129: "IMPLEMENTATION_GUIDE",
		130: "INSURANCE_PLAN",
		131: "INVOICE",
		132: "LIBRARY",
		133: "LINKAGE",
		134: "LIST",
		135: "LOCATION",
		136: "MEASURE",
		137: "MEASURE_REPORT",
		138: "MEDIA",
		139: "MEDICATION",
		140: "MEDICATION_ADMINISTRATION",
		141: "MEDICATION_DISPENSE",
		142: "MEDICATION_KNOWLEDGE",
		143: "MEDICATION_REQUEST",
		144: "MEDICATION_STATEMENT",
		145: "MEDICINAL_PRODUCT",
		146: "MEDICINAL_PRODUCT_AUTHORIZATION",
		147: "MEDICINAL_PRODUCT_CONTRAINDICATION",
		148: "MEDICINAL_PRODUCT_INDICATION",
		149: "MEDICINAL_PRODUCT_INGREDIENT",
		150: "MEDICINAL_PRODUCT_INTERACTION",
		151: "MEDICINAL_PRODUCT_MANUFACTURED",
		152: "MEDICINAL_PRODUCT_PACKAGED",
		153: "MEDICINAL_PRODUCT_PHARMACEUTICAL",
		154: "MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT",
		155: "MESSAGE_DEFINITION",
		156: "MESSAGE_HEADER",
		157: "MOLECULAR_SEQUENCE",
		158: "NAMING_SYSTEM",
		159: "NUTRITION_ORDER",
		160: "OBSERVATION",
		161: "OBSERVATION_DEFINITION",
		162: "OPERATION_DEFINITION",
		163: "OPERATION_OUTCOME",
		164: "ORGANIZATION",
		165: "ORGANIZATION_AFFILIATION",
		166: "PARAMETERS",
		167: "PATIENT",
		168: "PAYMENT_NOTICE",
		169: "PAYMENT_RECONCILIATION",
		170: "PERSON",
		171: "PLAN_DEFINITION",
		172: "PRACTITIONER",
		173: "PRACTITIONER_ROLE",
		174: "PROCEDURE",
		175: "PROVENANCE",
		176: "QUESTIONNAIRE",
		177: "QUESTIONNAIRE_RESPONSE",
		178: "RELATED_PERSON",
		179: "REQUEST_GROUP",
		180: "RESEARCH_DEFINITION",
		181: "RESEARCH_ELEMENT_DEFINITION",
		182: "RESEARCH_STUDY",
		183: "RESEARCH_SUBJECT",
		184: "RESOURCE",
		185: "RISK_ASSESSMENT",
		186: "RISK_EVIDENCE_SYNTHESIS",
		187: "SCHEDULE",
		188: "SEARCH_PARAMETER",
		189: "SERVICE_REQUEST",
		190: "SLOT",
		191: "SPECIMEN",
		192: "SPECIMEN_DEFINITION",
		193: "STRUCTURE_DEFINITION",
		194: "STRUCTURE_MAP",
		195: "SUBSCRIPTION",
		196: "SUBSTANCE",
		197: "SUBSTANCE_NUCLEIC_ACID",
		198: "SUBSTANCE_POLYMER",
		199: "SUBSTANCE_PROTEIN",
		200: "SUBSTANCE_REFERENCE_INFORMATION",
		201: "SUBSTANCE_SOURCE_MATERIAL",
		202: "SUBSTANCE_SPECIFICATION",
		203: "SUPPLY_DELIVERY",
		204: "SUPPLY_REQUEST",
		205: "TASK",
		206: "TERMINOLOGY_CAPABILITIES",
		207: "TEST_REPORT",
		208: "TEST_SCRIPT",
		209: "VALUE_SET",
		210: "VERIFICATION_RESULT",
		211: "VISION_PRESCRIPTION",
	}
	FHIRDefinedTypeValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                0,
		"ADDRESS":                              1,
		"AGE":                                  2,
		"ANNOTATION":                           3,
		"ATTACHMENT":                           4,
		"BACKBONE_ELEMENT":                     5,
		"CODEABLE_CONCEPT":                     6,
		"CODING":                               7,
		"CONTACT_DETAIL":                       8,
		"CONTACT_POINT":                        9,
		"CONTRIBUTOR":                          10,
		"COUNT":                                11,
		"DATA_REQUIREMENT":                     12,
		"DISTANCE":                             13,
		"DOSAGE":                               14,
		"DURATION":                             15,
		"ELEMENT":                              16,
		"ELEMENT_DEFINITION":                   17,
		"EXPRESSION":                           18,
		"EXTENSION":                            19,
		"HUMAN_NAME":                           20,
		"IDENTIFIER":                           21,
		"MARKETING_STATUS":                     22,
		"META":                                 23,
		"MONEY":                                24,
		"MONEY_QUANTITY":                       25,
		"NARRATIVE":                            26,
		"PARAMETER_DEFINITION":                 27,
		"PERIOD":                               28,
		"POPULATION":                           29,
		"PROD_CHARACTERISTIC":                  30,
		"PRODUCT_SHELF_LIFE":                   31,
		"QUANTITY":                             32,
		"RANGE":                                33,
		"RATIO":                                34,
		"REFERENCE":                            35,
		"RELATED_ARTIFACT":                     36,
		"SAMPLED_DATA":                         37,
		"SIGNATURE":                            38,
		"SIMPLE_QUANTITY":                      39,
		"SUBSTANCE_AMOUNT":                     40,
		"TIMING":                               41,
		"TRIGGER_DEFINITION":                   42,
		"USAGE_CONTEXT":                        43,
		"BASE64_BINARY":                        44,
		"BOOLEAN":                              45,
		"CANONICAL":                            46,
		"CODE":                                 47,
		"DATE":                                 48,
		"DATE_TIME":                            49,
		"DECIMAL":                              50,
		"ID":                                   51,
		"INSTANT":                              52,
		"INTEGER":                              53,
		"MARKDOWN":                             54,
		"OID":                                  55,
		"POSITIVE_INT":                         56,
		"STRING":                               57,
		"TIME":                                 58,
		"UNSIGNED_INT":                         59,
		"URI":                                  60,
		"URL":                                  61,
		"UUID":                                 62,
		"XHTML":                                63,
		"ACCOUNT":                              64,
		"ACTIVITY_DEFINITION":                  65,
		"ADVERSE_EVENT":                        66,
		"ALLERGY_INTOLERANCE":                  67,
		"APPOINTMENT":                          68,
		"APPOINTMENT_RESPONSE":                 69,
		"AUDIT_EVENT":                          70,
		"BASIC":                                71,
		"BINARY":                               72,
		"BIOLOGICALLY_DERIVED_PRODUCT":         73,
		"BODY_STRUCTURE":                       74,
		"BUNDLE":                               75,
		"CAPABILITY_STATEMENT":                 76,
		"CARE_PLAN":                            77,
		"CARE_TEAM":                            78,
		"CATALOG_ENTRY":                        79,
		"CHARGE_ITEM":                          80,
		"CHARGE_ITEM_DEFINITION":               81,
		"CLAIM":                                82,
		"CLAIM_RESPONSE":                       83,
		"CLINICAL_IMPRESSION":                  84,
		"CODE_SYSTEM":                          85,
		"COMMUNICATION":                        86,
		"COMMUNICATION_REQUEST":                87,
		"COMPARTMENT_DEFINITION":               88,
		"COMPOSITION":                          89,
		"CONCEPT_MAP":                          90,
		"CONDITION":                            91,
		"CONSENT":                              92,
		"CONTRACT":                             93,
		"COVERAGE":                             94,
		"COVERAGE_ELIGIBILITY_REQUEST":         95,
		"COVERAGE_ELIGIBILITY_RESPONSE":        96,
		"DETECTED_ISSUE":                       97,
		"DEVICE":                               98,
		"DEVICE_DEFINITION":                    99,
		"DEVICE_METRIC":                        100,
		"DEVICE_REQUEST":                       101,
		"DEVICE_USE_STATEMENT":                 102,
		"DIAGNOSTIC_REPORT":                    103,
		"DOCUMENT_MANIFEST":                    104,
		"DOCUMENT_REFERENCE":                   105,
		"DOMAIN_RESOURCE":                      106,
		"EFFECT_EVIDENCE_SYNTHESIS":            107,
		"ENCOUNTER":                            108,
		"ENDPOINT":                             109,
		"ENROLLMENT_REQUEST":                   110,
		"ENROLLMENT_RESPONSE":                  111,
		"EPISODE_OF_CARE":                      112,
		"EVENT_DEFINITION":                     113,
		"EVIDENCE":                             114,
		"EVIDENCE_VARIABLE":                    115,
		"EXAMPLE_SCENARIO":                     116,
		"EXPLANATION_OF_BENEFIT":               117,
		"FAMILY_MEMBER_HISTORY":                118,
		"FLAG":                                 119,
		"GOAL":                                 120,
		"GRAPH_DEFINITION":                     121,
		"GROUP":                                122,
		"GUIDANCE_RESPONSE":                    123,
		"HEALTHCARE_SERVICE":                   124,
		"IMAGING_STUDY":                        125,
		"IMMUNIZATION":                         126,
		"IMMUNIZATION_EVALUATION":              127,
		"IMMUNIZATION_RECOMMENDATION":          128,
		"IMPLEMENTATION_GUIDE":                 129,
		"INSURANCE_PLAN":                       130,
		"INVOICE":                              131,
		"LIBRARY":                              132,
		"LINKAGE":                              133,
		"LIST":                                 134,
		"LOCATION":                             135,
		"MEASURE":                              136,
		"MEASURE_REPORT":                       137,
		"MEDIA":                                138,
		"MEDICATION":                           139,
		"MEDICATION_ADMINISTRATION":            140,
		"MEDICATION_DISPENSE":                  141,
		"MEDICATION_KNOWLEDGE":                 142,
		"MEDICATION_REQUEST":                   143,
		"MEDICATION_STATEMENT":                 144,
		"MEDICINAL_PRODUCT":                    145,
		"MEDICINAL_PRODUCT_AUTHORIZATION":      146,
		"MEDICINAL_PRODUCT_CONTRAINDICATION":   147,
		"MEDICINAL_PRODUCT_INDICATION":         148,
		"MEDICINAL_PRODUCT_INGREDIENT":         149,
		"MEDICINAL_PRODUCT_INTERACTION":        150,
		"MEDICINAL_PRODUCT_MANUFACTURED":       151,
		"MEDICINAL_PRODUCT_PACKAGED":           152,
		"MEDICINAL_PRODUCT_PHARMACEUTICAL":     153,
		"MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT": 154,
		"MESSAGE_DEFINITION":                   155,
		"MESSAGE_HEADER":                       156,
		"MOLECULAR_SEQUENCE":                   157,
		"NAMING_SYSTEM":                        158,
		"NUTRITION_ORDER":                      159,
		"OBSERVATION":                          160,
		"OBSERVATION_DEFINITION":               161,
		"OPERATION_DEFINITION":                 162,
		"OPERATION_OUTCOME":                    163,
		"ORGANIZATION":                         164,
		"ORGANIZATION_AFFILIATION":             165,
		"PARAMETERS":                           166,
		"PATIENT":                              167,
		"PAYMENT_NOTICE":                       168,
		"PAYMENT_RECONCILIATION":               169,
		"PERSON":                               170,
		"PLAN_DEFINITION":                      171,
		"PRACTITIONER":                         172,
		"PRACTITIONER_ROLE":                    173,
		"PROCEDURE":                            174,
		"PROVENANCE":                           175,
		"QUESTIONNAIRE":                        176,
		"QUESTIONNAIRE_RESPONSE":               177,
		"RELATED_PERSON":                       178,
		"REQUEST_GROUP":                        179,
		"RESEARCH_DEFINITION":                  180,
		"RESEARCH_ELEMENT_DEFINITION":          181,
		"RESEARCH_STUDY":                       182,
		"RESEARCH_SUBJECT":                     183,
		"RESOURCE":                             184,
		"RISK_ASSESSMENT":                      185,
		"RISK_EVIDENCE_SYNTHESIS":              186,
		"SCHEDULE":                             187,
		"SEARCH_PARAMETER":                     188,
		"SERVICE_REQUEST":                      189,
		"SLOT":                                 190,
		"SPECIMEN":                             191,
		"SPECIMEN_DEFINITION":                  192,
		"STRUCTURE_DEFINITION":                 193,
		"STRUCTURE_MAP":                        194,
		"SUBSCRIPTION":                         195,
		"SUBSTANCE":                            196,
		"SUBSTANCE_NUCLEIC_ACID":               197,
		"SUBSTANCE_POLYMER":                    198,
		"SUBSTANCE_PROTEIN":                    199,
		"SUBSTANCE_REFERENCE_INFORMATION":      200,
		"SUBSTANCE_SOURCE_MATERIAL":            201,
		"SUBSTANCE_SPECIFICATION":              202,
		"SUPPLY_DELIVERY":                      203,
		"SUPPLY_REQUEST":                       204,
		"TASK":                                 205,
		"TERMINOLOGY_CAPABILITIES":             206,
		"TEST_REPORT":                          207,
		"TEST_SCRIPT":                          208,
		"VALUE_SET":                            209,
		"VERIFICATION_RESULT":                  210,
		"VISION_PRESCRIPTION":                  211,
	}
)

func (x FHIRDefinedTypeValueSet_Value) Enum() *FHIRDefinedTypeValueSet_Value {
	p := new(FHIRDefinedTypeValueSet_Value)
	*p = x
	return p
}

func (x FHIRDefinedTypeValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRDefinedTypeValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[9].Descriptor()
}

func (FHIRDefinedTypeValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[9]
}

func (x FHIRDefinedTypeValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRDefinedTypeValueSet_Value.Descriptor instead.
func (FHIRDefinedTypeValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{9, 0}
}

type HumanNameAssemblyOrderValueSet_Value int32

const (
	HumanNameAssemblyOrderValueSet_INVALID_UNINITIALIZED HumanNameAssemblyOrderValueSet_Value = 0
	HumanNameAssemblyOrderValueSet_NL1                   HumanNameAssemblyOrderValueSet_Value = 1
	HumanNameAssemblyOrderValueSet_NL2                   HumanNameAssemblyOrderValueSet_Value = 2
	HumanNameAssemblyOrderValueSet_NL3                   HumanNameAssemblyOrderValueSet_Value = 3
	HumanNameAssemblyOrderValueSet_NL4                   HumanNameAssemblyOrderValueSet_Value = 4
	HumanNameAssemblyOrderValueSet_F                     HumanNameAssemblyOrderValueSet_Value = 5
	HumanNameAssemblyOrderValueSet_G                     HumanNameAssemblyOrderValueSet_Value = 6
	HumanNameAssemblyOrderValueSet_UNK                   HumanNameAssemblyOrderValueSet_Value = 7
)

// Enum value maps for HumanNameAssemblyOrderValueSet_Value.
var (
	HumanNameAssemblyOrderValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NL1",
		2: "NL2",
		3: "NL3",
		4: "NL4",
		5: "F",
		6: "G",
		7: "UNK",
	}
	HumanNameAssemblyOrderValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NL1":                   1,
		"NL2":                   2,
		"NL3":                   3,
		"NL4":                   4,
		"F":                     5,
		"G":                     6,
		"UNK":                   7,
	}
)

func (x HumanNameAssemblyOrderValueSet_Value) Enum() *HumanNameAssemblyOrderValueSet_Value {
	p := new(HumanNameAssemblyOrderValueSet_Value)
	*p = x
	return p
}

func (x HumanNameAssemblyOrderValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanNameAssemblyOrderValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[10].Descriptor()
}

func (HumanNameAssemblyOrderValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[10]
}

func (x HumanNameAssemblyOrderValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanNameAssemblyOrderValueSet_Value.Descriptor instead.
func (HumanNameAssemblyOrderValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{10, 0}
}

type ImmunizationEvaluationStatusCodesValueSet_Value int32

const (
	ImmunizationEvaluationStatusCodesValueSet_INVALID_UNINITIALIZED ImmunizationEvaluationStatusCodesValueSet_Value = 0
	ImmunizationEvaluationStatusCodesValueSet_COMPLETED             ImmunizationEvaluationStatusCodesValueSet_Value = 1
	ImmunizationEvaluationStatusCodesValueSet_ENTERED_IN_ERROR      ImmunizationEvaluationStatusCodesValueSet_Value = 2
)

// Enum value maps for ImmunizationEvaluationStatusCodesValueSet_Value.
var (
	ImmunizationEvaluationStatusCodesValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETED",
		2: "ENTERED_IN_ERROR",
	}
	ImmunizationEvaluationStatusCodesValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETED":             1,
		"ENTERED_IN_ERROR":      2,
	}
)

func (x ImmunizationEvaluationStatusCodesValueSet_Value) Enum() *ImmunizationEvaluationStatusCodesValueSet_Value {
	p := new(ImmunizationEvaluationStatusCodesValueSet_Value)
	*p = x
	return p
}

func (x ImmunizationEvaluationStatusCodesValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmunizationEvaluationStatusCodesValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[11].Descriptor()
}

func (ImmunizationEvaluationStatusCodesValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[11]
}

func (x ImmunizationEvaluationStatusCodesValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmunizationEvaluationStatusCodesValueSet_Value.Descriptor instead.
func (ImmunizationEvaluationStatusCodesValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{11, 0}
}

type ImmunizationStatusCodesValueSet_Value int32

const (
	ImmunizationStatusCodesValueSet_INVALID_UNINITIALIZED ImmunizationStatusCodesValueSet_Value = 0
	ImmunizationStatusCodesValueSet_COMPLETED             ImmunizationStatusCodesValueSet_Value = 1
	ImmunizationStatusCodesValueSet_ENTERED_IN_ERROR      ImmunizationStatusCodesValueSet_Value = 2
	ImmunizationStatusCodesValueSet_NOT_DONE              ImmunizationStatusCodesValueSet_Value = 3
)

// Enum value maps for ImmunizationStatusCodesValueSet_Value.
var (
	ImmunizationStatusCodesValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETED",
		2: "ENTERED_IN_ERROR",
		3: "NOT_DONE",
	}
	ImmunizationStatusCodesValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETED":             1,
		"ENTERED_IN_ERROR":      2,
		"NOT_DONE":              3,
	}
)

func (x ImmunizationStatusCodesValueSet_Value) Enum() *ImmunizationStatusCodesValueSet_Value {
	p := new(ImmunizationStatusCodesValueSet_Value)
	*p = x
	return p
}

func (x ImmunizationStatusCodesValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImmunizationStatusCodesValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[12].Descriptor()
}

func (ImmunizationStatusCodesValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[12]
}

func (x ImmunizationStatusCodesValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImmunizationStatusCodesValueSet_Value.Descriptor instead.
func (ImmunizationStatusCodesValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{12, 0}
}

type LDLCodesValueSet_Value int32

const (
	LDLCodesValueSet_INVALID_UNINITIALIZED                                            LDLCodesValueSet_Value = 0
	LDLCodesValueSet_LDL_CHOLESTEROL_ASSAY                                            LDLCodesValueSet_Value = 1
	LDLCodesValueSet_CHOLESTEROL_IN_LDL_MASS_VOLUME_IN_SERUM_OR_PLASMA_BY_CALCULATION LDLCodesValueSet_Value = 2
)

// Enum value maps for LDLCodesValueSet_Value.
var (
	LDLCodesValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LDL_CHOLESTEROL_ASSAY",
		2: "CHOLESTEROL_IN_LDL_MASS_VOLUME_IN_SERUM_OR_PLASMA_BY_CALCULATION",
	}
	LDLCodesValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LDL_CHOLESTEROL_ASSAY": 1,
		"CHOLESTEROL_IN_LDL_MASS_VOLUME_IN_SERUM_OR_PLASMA_BY_CALCULATION": 2,
	}
)

func (x LDLCodesValueSet_Value) Enum() *LDLCodesValueSet_Value {
	p := new(LDLCodesValueSet_Value)
	*p = x
	return p
}

func (x LDLCodesValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LDLCodesValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[13].Descriptor()
}

func (LDLCodesValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[13]
}

func (x LDLCodesValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LDLCodesValueSet_Value.Descriptor instead.
func (LDLCodesValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{13, 0}
}

type NameRepresentationUseValueSet_Value int32

const (
	NameRepresentationUseValueSet_INVALID_UNINITIALIZED NameRepresentationUseValueSet_Value = 0
	NameRepresentationUseValueSet_ABC                   NameRepresentationUseValueSet_Value = 1
	NameRepresentationUseValueSet_IDE                   NameRepresentationUseValueSet_Value = 2
	NameRepresentationUseValueSet_SYL                   NameRepresentationUseValueSet_Value = 3
)

// Enum value maps for NameRepresentationUseValueSet_Value.
var (
	NameRepresentationUseValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ABC",
		2: "IDE",
		3: "SYL",
	}
	NameRepresentationUseValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ABC":                   1,
		"IDE":                   2,
		"SYL":                   3,
	}
)

func (x NameRepresentationUseValueSet_Value) Enum() *NameRepresentationUseValueSet_Value {
	p := new(NameRepresentationUseValueSet_Value)
	*p = x
	return p
}

func (x NameRepresentationUseValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameRepresentationUseValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[14].Descriptor()
}

func (NameRepresentationUseValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[14]
}

func (x NameRepresentationUseValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameRepresentationUseValueSet_Value.Descriptor instead.
func (NameRepresentationUseValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{14, 0}
}

type ParentRelationshipCodesValueSet_Value int32

const (
	ParentRelationshipCodesValueSet_INVALID_UNINITIALIZED ParentRelationshipCodesValueSet_Value = 0
	ParentRelationshipCodesValueSet_PRN                   ParentRelationshipCodesValueSet_Value = 1
	ParentRelationshipCodesValueSet_ADOPTP                ParentRelationshipCodesValueSet_Value = 2
	ParentRelationshipCodesValueSet_ADOPTF                ParentRelationshipCodesValueSet_Value = 3
	ParentRelationshipCodesValueSet_ADOPTM                ParentRelationshipCodesValueSet_Value = 4
	ParentRelationshipCodesValueSet_FTH                   ParentRelationshipCodesValueSet_Value = 5
	ParentRelationshipCodesValueSet_FTHFOST               ParentRelationshipCodesValueSet_Value = 6
	ParentRelationshipCodesValueSet_NFTH                  ParentRelationshipCodesValueSet_Value = 7
	ParentRelationshipCodesValueSet_NFTHF                 ParentRelationshipCodesValueSet_Value = 8
	ParentRelationshipCodesValueSet_STPFTH                ParentRelationshipCodesValueSet_Value = 9
	ParentRelationshipCodesValueSet_MTH                   ParentRelationshipCodesValueSet_Value = 10
	ParentRelationshipCodesValueSet_GESTM                 ParentRelationshipCodesValueSet_Value = 11
	ParentRelationshipCodesValueSet_MTHFOST               ParentRelationshipCodesValueSet_Value = 12
	ParentRelationshipCodesValueSet_NMTH                  ParentRelationshipCodesValueSet_Value = 13
	ParentRelationshipCodesValueSet_NMTHF                 ParentRelationshipCodesValueSet_Value = 14
	ParentRelationshipCodesValueSet_STPMTH                ParentRelationshipCodesValueSet_Value = 15
	ParentRelationshipCodesValueSet_NPRN                  ParentRelationshipCodesValueSet_Value = 16
	ParentRelationshipCodesValueSet_PRNFOST               ParentRelationshipCodesValueSet_Value = 17
	ParentRelationshipCodesValueSet_STPPRN                ParentRelationshipCodesValueSet_Value = 18
	ParentRelationshipCodesValueSet_TWIN                  ParentRelationshipCodesValueSet_Value = 19
	ParentRelationshipCodesValueSet_FTWIN                 ParentRelationshipCodesValueSet_Value = 20
	ParentRelationshipCodesValueSet_ITWIN                 ParentRelationshipCodesValueSet_Value = 21
)

// Enum value maps for ParentRelationshipCodesValueSet_Value.
var (
	ParentRelationshipCodesValueSet_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PRN",
		2:  "ADOPTP",
		3:  "ADOPTF",
		4:  "ADOPTM",
		5:  "FTH",
		6:  "FTHFOST",
		7:  "NFTH",
		8:  "NFTHF",
		9:  "STPFTH",
		10: "MTH",
		11: "GESTM",
		12: "MTHFOST",
		13: "NMTH",
		14: "NMTHF",
		15: "STPMTH",
		16: "NPRN",
		17: "PRNFOST",
		18: "STPPRN",
		19: "TWIN",
		20: "FTWIN",
		21: "ITWIN",
	}
	ParentRelationshipCodesValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRN":                   1,
		"ADOPTP":                2,
		"ADOPTF":                3,
		"ADOPTM":                4,
		"FTH":                   5,
		"FTHFOST":               6,
		"NFTH":                  7,
		"NFTHF":                 8,
		"STPFTH":                9,
		"MTH":                   10,
		"GESTM":                 11,
		"MTHFOST":               12,
		"NMTH":                  13,
		"NMTHF":                 14,
		"STPMTH":                15,
		"NPRN":                  16,
		"PRNFOST":               17,
		"STPPRN":                18,
		"TWIN":                  19,
		"FTWIN":                 20,
		"ITWIN":                 21,
	}
)

func (x ParentRelationshipCodesValueSet_Value) Enum() *ParentRelationshipCodesValueSet_Value {
	p := new(ParentRelationshipCodesValueSet_Value)
	*p = x
	return p
}

func (x ParentRelationshipCodesValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentRelationshipCodesValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[15].Descriptor()
}

func (ParentRelationshipCodesValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[15]
}

func (x ParentRelationshipCodesValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentRelationshipCodesValueSet_Value.Descriptor instead.
func (ParentRelationshipCodesValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{15, 0}
}

type PostalAddressUseValueSet_Value int32

const (
	PostalAddressUseValueSet_INVALID_UNINITIALIZED PostalAddressUseValueSet_Value = 0
	PostalAddressUseValueSet_BAD                   PostalAddressUseValueSet_Value = 1
	PostalAddressUseValueSet_CONF                  PostalAddressUseValueSet_Value = 2
	PostalAddressUseValueSet_HP                    PostalAddressUseValueSet_Value = 3
	PostalAddressUseValueSet_HV                    PostalAddressUseValueSet_Value = 4
	PostalAddressUseValueSet_DIR                   PostalAddressUseValueSet_Value = 5
	PostalAddressUseValueSet_PUB                   PostalAddressUseValueSet_Value = 6
	PostalAddressUseValueSet_PHYS                  PostalAddressUseValueSet_Value = 7
	PostalAddressUseValueSet_PST                   PostalAddressUseValueSet_Value = 8
)

// Enum value maps for PostalAddressUseValueSet_Value.
var (
	PostalAddressUseValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BAD",
		2: "CONF",
		3: "HP",
		4: "HV",
		5: "DIR",
		6: "PUB",
		7: "PHYS",
		8: "PST",
	}
	PostalAddressUseValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BAD":                   1,
		"CONF":                  2,
		"HP":                    3,
		"HV":                    4,
		"DIR":                   5,
		"PUB":                   6,
		"PHYS":                  7,
		"PST":                   8,
	}
)

func (x PostalAddressUseValueSet_Value) Enum() *PostalAddressUseValueSet_Value {
	p := new(PostalAddressUseValueSet_Value)
	*p = x
	return p
}

func (x PostalAddressUseValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostalAddressUseValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[16].Descriptor()
}

func (PostalAddressUseValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[16]
}

func (x PostalAddressUseValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostalAddressUseValueSet_Value.Descriptor instead.
func (PostalAddressUseValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{16, 0}
}

type ProbabilityDistributionTypeValueSet_Value int32

const (
	ProbabilityDistributionTypeValueSet_INVALID_UNINITIALIZED ProbabilityDistributionTypeValueSet_Value = 0
	ProbabilityDistributionTypeValueSet_B                     ProbabilityDistributionTypeValueSet_Value = 1
	ProbabilityDistributionTypeValueSet_E                     ProbabilityDistributionTypeValueSet_Value = 2
	ProbabilityDistributionTypeValueSet_F                     ProbabilityDistributionTypeValueSet_Value = 3
	ProbabilityDistributionTypeValueSet_G                     ProbabilityDistributionTypeValueSet_Value = 4
	ProbabilityDistributionTypeValueSet_LN                    ProbabilityDistributionTypeValueSet_Value = 5
	ProbabilityDistributionTypeValueSet_N                     ProbabilityDistributionTypeValueSet_Value = 6
	ProbabilityDistributionTypeValueSet_T                     ProbabilityDistributionTypeValueSet_Value = 7
	ProbabilityDistributionTypeValueSet_U                     ProbabilityDistributionTypeValueSet_Value = 8
	ProbabilityDistributionTypeValueSet_X2                    ProbabilityDistributionTypeValueSet_Value = 9
)

// Enum value maps for ProbabilityDistributionTypeValueSet_Value.
var (
	ProbabilityDistributionTypeValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "B",
		2: "E",
		3: "F",
		4: "G",
		5: "LN",
		6: "N",
		7: "T",
		8: "U",
		9: "X2",
	}
	ProbabilityDistributionTypeValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"B":                     1,
		"E":                     2,
		"F":                     3,
		"G":                     4,
		"LN":                    5,
		"N":                     6,
		"T":                     7,
		"U":                     8,
		"X2":                    9,
	}
)

func (x ProbabilityDistributionTypeValueSet_Value) Enum() *ProbabilityDistributionTypeValueSet_Value {
	p := new(ProbabilityDistributionTypeValueSet_Value)
	*p = x
	return p
}

func (x ProbabilityDistributionTypeValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbabilityDistributionTypeValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[17].Descriptor()
}

func (ProbabilityDistributionTypeValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[17]
}

func (x ProbabilityDistributionTypeValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProbabilityDistributionTypeValueSet_Value.Descriptor instead.
func (ProbabilityDistributionTypeValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{17, 0}
}

type QuestionnaireResponseModeValueSet_Value int32

const (
	QuestionnaireResponseModeValueSet_INVALID_UNINITIALIZED QuestionnaireResponseModeValueSet_Value = 0
	QuestionnaireResponseModeValueSet_ELECTRONIC            QuestionnaireResponseModeValueSet_Value = 1
	QuestionnaireResponseModeValueSet_VERBAL                QuestionnaireResponseModeValueSet_Value = 2
	QuestionnaireResponseModeValueSet_WRITTEN               QuestionnaireResponseModeValueSet_Value = 3
)

// Enum value maps for QuestionnaireResponseModeValueSet_Value.
var (
	QuestionnaireResponseModeValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ELECTRONIC",
		2: "VERBAL",
		3: "WRITTEN",
	}
	QuestionnaireResponseModeValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ELECTRONIC":            1,
		"VERBAL":                2,
		"WRITTEN":               3,
	}
)

func (x QuestionnaireResponseModeValueSet_Value) Enum() *QuestionnaireResponseModeValueSet_Value {
	p := new(QuestionnaireResponseModeValueSet_Value)
	*p = x
	return p
}

func (x QuestionnaireResponseModeValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireResponseModeValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[18].Descriptor()
}

func (QuestionnaireResponseModeValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[18]
}

func (x QuestionnaireResponseModeValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireResponseModeValueSet_Value.Descriptor instead.
func (QuestionnaireResponseModeValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{18, 0}
}

type SiblingRelationshipCodesValueSet_Value int32

const (
	SiblingRelationshipCodesValueSet_INVALID_UNINITIALIZED SiblingRelationshipCodesValueSet_Value = 0
	SiblingRelationshipCodesValueSet_SIB                   SiblingRelationshipCodesValueSet_Value = 1
	SiblingRelationshipCodesValueSet_BRO                   SiblingRelationshipCodesValueSet_Value = 2
	SiblingRelationshipCodesValueSet_HBRO                  SiblingRelationshipCodesValueSet_Value = 3
	SiblingRelationshipCodesValueSet_NBRO                  SiblingRelationshipCodesValueSet_Value = 4
	SiblingRelationshipCodesValueSet_TWINBRO               SiblingRelationshipCodesValueSet_Value = 5
	SiblingRelationshipCodesValueSet_FTWINBRO              SiblingRelationshipCodesValueSet_Value = 6
	SiblingRelationshipCodesValueSet_ITWINBRO              SiblingRelationshipCodesValueSet_Value = 7
	SiblingRelationshipCodesValueSet_STPBRO                SiblingRelationshipCodesValueSet_Value = 8
	SiblingRelationshipCodesValueSet_HSIB                  SiblingRelationshipCodesValueSet_Value = 9
	SiblingRelationshipCodesValueSet_HSIS                  SiblingRelationshipCodesValueSet_Value = 10
	SiblingRelationshipCodesValueSet_NSIB                  SiblingRelationshipCodesValueSet_Value = 11
	SiblingRelationshipCodesValueSet_NSIS                  SiblingRelationshipCodesValueSet_Value = 12
	SiblingRelationshipCodesValueSet_TWINSIS               SiblingRelationshipCodesValueSet_Value = 13
	SiblingRelationshipCodesValueSet_FTWINSIS              SiblingRelationshipCodesValueSet_Value = 14
	SiblingRelationshipCodesValueSet_ITWINSIS              SiblingRelationshipCodesValueSet_Value = 15
	SiblingRelationshipCodesValueSet_TWIN                  SiblingRelationshipCodesValueSet_Value = 16
	SiblingRelationshipCodesValueSet_FTWIN                 SiblingRelationshipCodesValueSet_Value = 17
	SiblingRelationshipCodesValueSet_ITWIN                 SiblingRelationshipCodesValueSet_Value = 18
	SiblingRelationshipCodesValueSet_SIS                   SiblingRelationshipCodesValueSet_Value = 19
	SiblingRelationshipCodesValueSet_STPSIS                SiblingRelationshipCodesValueSet_Value = 20
	SiblingRelationshipCodesValueSet_STPSIB                SiblingRelationshipCodesValueSet_Value = 21
)

// Enum value maps for SiblingRelationshipCodesValueSet_Value.
var (
	SiblingRelationshipCodesValueSet_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "SIB",
		2:  "BRO",
		3:  "HBRO",
		4:  "NBRO",
		5:  "TWINBRO",
		6:  "FTWINBRO",
		7:  "ITWINBRO",
		8:  "STPBRO",
		9:  "HSIB",
		10: "HSIS",
		11: "NSIB",
		12: "NSIS",
		13: "TWINSIS",
		14: "FTWINSIS",
		15: "ITWINSIS",
		16: "TWIN",
		17: "FTWIN",
		18: "ITWIN",
		19: "SIS",
		20: "STPSIS",
		21: "STPSIB",
	}
	SiblingRelationshipCodesValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SIB":                   1,
		"BRO":                   2,
		"HBRO":                  3,
		"NBRO":                  4,
		"TWINBRO":               5,
		"FTWINBRO":              6,
		"ITWINBRO":              7,
		"STPBRO":                8,
		"HSIB":                  9,
		"HSIS":                  10,
		"NSIB":                  11,
		"NSIS":                  12,
		"TWINSIS":               13,
		"FTWINSIS":              14,
		"ITWINSIS":              15,
		"TWIN":                  16,
		"FTWIN":                 17,
		"ITWIN":                 18,
		"SIS":                   19,
		"STPSIS":                20,
		"STPSIB":                21,
	}
)

func (x SiblingRelationshipCodesValueSet_Value) Enum() *SiblingRelationshipCodesValueSet_Value {
	p := new(SiblingRelationshipCodesValueSet_Value)
	*p = x
	return p
}

func (x SiblingRelationshipCodesValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiblingRelationshipCodesValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[19].Descriptor()
}

func (SiblingRelationshipCodesValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[19]
}

func (x SiblingRelationshipCodesValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SiblingRelationshipCodesValueSet_Value.Descriptor instead.
func (SiblingRelationshipCodesValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{19, 0}
}

type SystemRestfulInteractionValueSet_Value int32

const (
	SystemRestfulInteractionValueSet_INVALID_UNINITIALIZED SystemRestfulInteractionValueSet_Value = 0
	SystemRestfulInteractionValueSet_TRANSACTION           SystemRestfulInteractionValueSet_Value = 1
	SystemRestfulInteractionValueSet_BATCH                 SystemRestfulInteractionValueSet_Value = 2
	SystemRestfulInteractionValueSet_SEARCH_SYSTEM         SystemRestfulInteractionValueSet_Value = 3
	SystemRestfulInteractionValueSet_HISTORY_SYSTEM        SystemRestfulInteractionValueSet_Value = 4
)

// Enum value maps for SystemRestfulInteractionValueSet_Value.
var (
	SystemRestfulInteractionValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TRANSACTION",
		2: "BATCH",
		3: "SEARCH_SYSTEM",
		4: "HISTORY_SYSTEM",
	}
	SystemRestfulInteractionValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TRANSACTION":           1,
		"BATCH":                 2,
		"SEARCH_SYSTEM":         3,
		"HISTORY_SYSTEM":        4,
	}
)

func (x SystemRestfulInteractionValueSet_Value) Enum() *SystemRestfulInteractionValueSet_Value {
	p := new(SystemRestfulInteractionValueSet_Value)
	*p = x
	return p
}

func (x SystemRestfulInteractionValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemRestfulInteractionValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[20].Descriptor()
}

func (SystemRestfulInteractionValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[20]
}

func (x SystemRestfulInteractionValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemRestfulInteractionValueSet_Value.Descriptor instead.
func (SystemRestfulInteractionValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{20, 0}
}

type TaskIntentValueSet_Value int32

const (
	TaskIntentValueSet_INVALID_UNINITIALIZED TaskIntentValueSet_Value = 0
	TaskIntentValueSet_UNKNOWN               TaskIntentValueSet_Value = 1
	TaskIntentValueSet_PROPOSAL              TaskIntentValueSet_Value = 2
	TaskIntentValueSet_PLAN                  TaskIntentValueSet_Value = 3
	TaskIntentValueSet_ORDER                 TaskIntentValueSet_Value = 4
	TaskIntentValueSet_ORIGINAL_ORDER        TaskIntentValueSet_Value = 5
	TaskIntentValueSet_REFLEX_ORDER          TaskIntentValueSet_Value = 6
	TaskIntentValueSet_FILLER_ORDER          TaskIntentValueSet_Value = 7
	TaskIntentValueSet_INSTANCE_ORDER        TaskIntentValueSet_Value = 8
	TaskIntentValueSet_OPTION                TaskIntentValueSet_Value = 9
)

// Enum value maps for TaskIntentValueSet_Value.
var (
	TaskIntentValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNKNOWN",
		2: "PROPOSAL",
		3: "PLAN",
		4: "ORDER",
		5: "ORIGINAL_ORDER",
		6: "REFLEX_ORDER",
		7: "FILLER_ORDER",
		8: "INSTANCE_ORDER",
		9: "OPTION",
	}
	TaskIntentValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
		"PROPOSAL":              2,
		"PLAN":                  3,
		"ORDER":                 4,
		"ORIGINAL_ORDER":        5,
		"REFLEX_ORDER":          6,
		"FILLER_ORDER":          7,
		"INSTANCE_ORDER":        8,
		"OPTION":                9,
	}
)

func (x TaskIntentValueSet_Value) Enum() *TaskIntentValueSet_Value {
	p := new(TaskIntentValueSet_Value)
	*p = x
	return p
}

func (x TaskIntentValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskIntentValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[21].Descriptor()
}

func (TaskIntentValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[21]
}

func (x TaskIntentValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskIntentValueSet_Value.Descriptor instead.
func (TaskIntentValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{21, 0}
}

type TemplateStatusCodeValueSet_Value int32

const (
	TemplateStatusCodeValueSet_INVALID_UNINITIALIZED TemplateStatusCodeValueSet_Value = 0
	TemplateStatusCodeValueSet_DRAFT                 TemplateStatusCodeValueSet_Value = 1
	TemplateStatusCodeValueSet_PENDING               TemplateStatusCodeValueSet_Value = 2
	TemplateStatusCodeValueSet_ACTIVE                TemplateStatusCodeValueSet_Value = 3
	TemplateStatusCodeValueSet_REVIEW                TemplateStatusCodeValueSet_Value = 4
	TemplateStatusCodeValueSet_CANCELLED             TemplateStatusCodeValueSet_Value = 5
	TemplateStatusCodeValueSet_REJECTED              TemplateStatusCodeValueSet_Value = 6
	TemplateStatusCodeValueSet_RETIRED               TemplateStatusCodeValueSet_Value = 7
	TemplateStatusCodeValueSet_TERMINATED            TemplateStatusCodeValueSet_Value = 8
)

// Enum value maps for TemplateStatusCodeValueSet_Value.
var (
	TemplateStatusCodeValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "PENDING",
		3: "ACTIVE",
		4: "REVIEW",
		5: "CANCELLED",
		6: "REJECTED",
		7: "RETIRED",
		8: "TERMINATED",
	}
	TemplateStatusCodeValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"PENDING":               2,
		"ACTIVE":                3,
		"REVIEW":                4,
		"CANCELLED":             5,
		"REJECTED":              6,
		"RETIRED":               7,
		"TERMINATED":            8,
	}
)

func (x TemplateStatusCodeValueSet_Value) Enum() *TemplateStatusCodeValueSet_Value {
	p := new(TemplateStatusCodeValueSet_Value)
	*p = x
	return p
}

func (x TemplateStatusCodeValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateStatusCodeValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[22].Descriptor()
}

func (TemplateStatusCodeValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[22]
}

func (x TemplateStatusCodeValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateStatusCodeValueSet_Value.Descriptor instead.
func (TemplateStatusCodeValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{22, 0}
}

type TypeRestfulInteractionValueSet_Value int32

const (
	TypeRestfulInteractionValueSet_INVALID_UNINITIALIZED TypeRestfulInteractionValueSet_Value = 0
	TypeRestfulInteractionValueSet_READ                  TypeRestfulInteractionValueSet_Value = 1
	TypeRestfulInteractionValueSet_VREAD                 TypeRestfulInteractionValueSet_Value = 2
	TypeRestfulInteractionValueSet_UPDATE                TypeRestfulInteractionValueSet_Value = 3
	TypeRestfulInteractionValueSet_PATCH                 TypeRestfulInteractionValueSet_Value = 4
	TypeRestfulInteractionValueSet_DELETE                TypeRestfulInteractionValueSet_Value = 5
	TypeRestfulInteractionValueSet_HISTORY_INSTANCE      TypeRestfulInteractionValueSet_Value = 6
	TypeRestfulInteractionValueSet_HISTORY_TYPE          TypeRestfulInteractionValueSet_Value = 7
	TypeRestfulInteractionValueSet_CREATE                TypeRestfulInteractionValueSet_Value = 8
	TypeRestfulInteractionValueSet_SEARCH_TYPE           TypeRestfulInteractionValueSet_Value = 9
)

// Enum value maps for TypeRestfulInteractionValueSet_Value.
var (
	TypeRestfulInteractionValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "READ",
		2: "VREAD",
		3: "UPDATE",
		4: "PATCH",
		5: "DELETE",
		6: "HISTORY_INSTANCE",
		7: "HISTORY_TYPE",
		8: "CREATE",
		9: "SEARCH_TYPE",
	}
	TypeRestfulInteractionValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"READ":                  1,
		"VREAD":                 2,
		"UPDATE":                3,
		"PATCH":                 4,
		"DELETE":                5,
		"HISTORY_INSTANCE":      6,
		"HISTORY_TYPE":          7,
		"CREATE":                8,
		"SEARCH_TYPE":           9,
	}
)

func (x TypeRestfulInteractionValueSet_Value) Enum() *TypeRestfulInteractionValueSet_Value {
	p := new(TypeRestfulInteractionValueSet_Value)
	*p = x
	return p
}

func (x TypeRestfulInteractionValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeRestfulInteractionValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[23].Descriptor()
}

func (TypeRestfulInteractionValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[23]
}

func (x TypeRestfulInteractionValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeRestfulInteractionValueSet_Value.Descriptor instead.
func (TypeRestfulInteractionValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{23, 0}
}

type UnitsOfTimeValueSet_Value int32

const (
	UnitsOfTimeValueSet_INVALID_UNINITIALIZED UnitsOfTimeValueSet_Value = 0
	UnitsOfTimeValueSet_S                     UnitsOfTimeValueSet_Value = 1
	UnitsOfTimeValueSet_MIN                   UnitsOfTimeValueSet_Value = 2
	UnitsOfTimeValueSet_H                     UnitsOfTimeValueSet_Value = 3
	UnitsOfTimeValueSet_D                     UnitsOfTimeValueSet_Value = 4
	UnitsOfTimeValueSet_WK                    UnitsOfTimeValueSet_Value = 5
	UnitsOfTimeValueSet_MO                    UnitsOfTimeValueSet_Value = 6
	UnitsOfTimeValueSet_A                     UnitsOfTimeValueSet_Value = 7
)

// Enum value maps for UnitsOfTimeValueSet_Value.
var (
	UnitsOfTimeValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "S",
		2: "MIN",
		3: "H",
		4: "D",
		5: "WK",
		6: "MO",
		7: "A",
	}
	UnitsOfTimeValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"S":                     1,
		"MIN":                   2,
		"H":                     3,
		"D":                     4,
		"WK":                    5,
		"MO":                    6,
		"A":                     7,
	}
)

func (x UnitsOfTimeValueSet_Value) Enum() *UnitsOfTimeValueSet_Value {
	p := new(UnitsOfTimeValueSet_Value)
	*p = x
	return p
}

func (x UnitsOfTimeValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitsOfTimeValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[24].Descriptor()
}

func (UnitsOfTimeValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[24]
}

func (x UnitsOfTimeValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitsOfTimeValueSet_Value.Descriptor instead.
func (UnitsOfTimeValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{24, 0}
}

type V3ConfidentialityClassificationValueSet_Value int32

const (
	V3ConfidentialityClassificationValueSet_INVALID_UNINITIALIZED V3ConfidentialityClassificationValueSet_Value = 0
	V3ConfidentialityClassificationValueSet_U                     V3ConfidentialityClassificationValueSet_Value = 1
	V3ConfidentialityClassificationValueSet_L                     V3ConfidentialityClassificationValueSet_Value = 2
	V3ConfidentialityClassificationValueSet_M                     V3ConfidentialityClassificationValueSet_Value = 3
	V3ConfidentialityClassificationValueSet_N                     V3ConfidentialityClassificationValueSet_Value = 4
	V3ConfidentialityClassificationValueSet_R                     V3ConfidentialityClassificationValueSet_Value = 5
	V3ConfidentialityClassificationValueSet_V                     V3ConfidentialityClassificationValueSet_Value = 6
)

// Enum value maps for V3ConfidentialityClassificationValueSet_Value.
var (
	V3ConfidentialityClassificationValueSet_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "U",
		2: "L",
		3: "M",
		4: "N",
		5: "R",
		6: "V",
	}
	V3ConfidentialityClassificationValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"U":                     1,
		"L":                     2,
		"M":                     3,
		"N":                     4,
		"R":                     5,
		"V":                     6,
	}
)

func (x V3ConfidentialityClassificationValueSet_Value) Enum() *V3ConfidentialityClassificationValueSet_Value {
	p := new(V3ConfidentialityClassificationValueSet_Value)
	*p = x
	return p
}

func (x V3ConfidentialityClassificationValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3ConfidentialityClassificationValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[25].Descriptor()
}

func (V3ConfidentialityClassificationValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[25]
}

func (x V3ConfidentialityClassificationValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3ConfidentialityClassificationValueSet_Value.Descriptor instead.
func (V3ConfidentialityClassificationValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{25, 0}
}

type VitalSignsUnitsValueSet_Value int32

const (
	VitalSignsUnitsValueSet_INVALID_UNINITIALIZED VitalSignsUnitsValueSet_Value = 0
	VitalSignsUnitsValueSet_PERCENT               VitalSignsUnitsValueSet_Value = 1
	VitalSignsUnitsValueSet_CM                    VitalSignsUnitsValueSet_Value = 2
	VitalSignsUnitsValueSet_IN_I                  VitalSignsUnitsValueSet_Value = 3
	VitalSignsUnitsValueSet_KG                    VitalSignsUnitsValueSet_Value = 4
	VitalSignsUnitsValueSet_G                     VitalSignsUnitsValueSet_Value = 5
	VitalSignsUnitsValueSet_LB_AV                 VitalSignsUnitsValueSet_Value = 6
	VitalSignsUnitsValueSet_CEL                   VitalSignsUnitsValueSet_Value = 7
	VitalSignsUnitsValueSet_DEG_F                 VitalSignsUnitsValueSet_Value = 8
	VitalSignsUnitsValueSet_MM_HG                 VitalSignsUnitsValueSet_Value = 9
	VitalSignsUnitsValueSet_PER_MIN               VitalSignsUnitsValueSet_Value = 10
	VitalSignsUnitsValueSet_KG_M2                 VitalSignsUnitsValueSet_Value = 11
	VitalSignsUnitsValueSet_M2                    VitalSignsUnitsValueSet_Value = 12
)

// Enum value maps for VitalSignsUnitsValueSet_Value.
var (
	VitalSignsUnitsValueSet_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PERCENT",
		2:  "CM",
		3:  "IN_I",
		4:  "KG",
		5:  "G",
		6:  "LB_AV",
		7:  "CEL",
		8:  "DEG_F",
		9:  "MM_HG",
		10: "PER_MIN",
		11: "KG_M2",
		12: "M2",
	}
	VitalSignsUnitsValueSet_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERCENT":               1,
		"CM":                    2,
		"IN_I":                  3,
		"KG":                    4,
		"G":                     5,
		"LB_AV":                 6,
		"CEL":                   7,
		"DEG_F":                 8,
		"MM_HG":                 9,
		"PER_MIN":               10,
		"KG_M2":                 11,
		"M2":                    12,
	}
)

func (x VitalSignsUnitsValueSet_Value) Enum() *VitalSignsUnitsValueSet_Value {
	p := new(VitalSignsUnitsValueSet_Value)
	*p = x
	return p
}

func (x VitalSignsUnitsValueSet_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VitalSignsUnitsValueSet_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[26].Descriptor()
}

func (VitalSignsUnitsValueSet_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes[26]
}

func (x VitalSignsUnitsValueSet_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VitalSignsUnitsValueSet_Value.Descriptor instead.
func (VitalSignsUnitsValueSet_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{26, 0}
}

// UCUM units for recording body length measures such as height and head
// circumference See http://hl7.org/fhir/ValueSet/ucum-bodylength
type BodyLengthUnitsValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BodyLengthUnitsValueSet) Reset() {
	*x = BodyLengthUnitsValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyLengthUnitsValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyLengthUnitsValueSet) ProtoMessage() {}

func (x *BodyLengthUnitsValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyLengthUnitsValueSet.ProtoReflect.Descriptor instead.
func (*BodyLengthUnitsValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{0}
}

// UCUM units for recording Body Temperature
// See http://hl7.org/fhir/ValueSet/ucum-bodytemp
type BodyTemperatureUnitsValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BodyTemperatureUnitsValueSet) Reset() {
	*x = BodyTemperatureUnitsValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyTemperatureUnitsValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyTemperatureUnitsValueSet) ProtoMessage() {}

func (x *BodyTemperatureUnitsValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyTemperatureUnitsValueSet.ProtoReflect.Descriptor instead.
func (*BodyTemperatureUnitsValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{1}
}

// UCUM units for recording Body Weight
// See http://hl7.org/fhir/ValueSet/ucum-bodyweight
type BodyWeightUnitsValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BodyWeightUnitsValueSet) Reset() {
	*x = BodyWeightUnitsValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyWeightUnitsValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyWeightUnitsValueSet) ProtoMessage() {}

func (x *BodyWeightUnitsValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyWeightUnitsValueSet.ProtoReflect.Descriptor instead.
func (*BodyWeightUnitsValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{2}
}

// Resource types defined as part of FHIR that can be represented as in-line
// definitions of a care plan activity. See
// http://hl7.org/fhir/ValueSet/care-plan-activity-kind
type CarePlanActivityKindValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CarePlanActivityKindValueSet) Reset() {
	*x = CarePlanActivityKindValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanActivityKindValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanActivityKindValueSet) ProtoMessage() {}

func (x *CarePlanActivityKindValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanActivityKindValueSet.ProtoReflect.Descriptor instead.
func (*CarePlanActivityKindValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{3}
}

// Codes indicating the degree of authority/intentionality associated with a
// care plan. See http://hl7.org/fhir/ValueSet/care-plan-intent
type CarePlanIntentValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CarePlanIntentValueSet) Reset() {
	*x = CarePlanIntentValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanIntentValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanIntentValueSet) ProtoMessage() {}

func (x *CarePlanIntentValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanIntentValueSet.ProtoReflect.Descriptor instead.
func (*CarePlanIntentValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{4}
}

// Codes that reflect the current state of a clinical impression within its
// overall lifecycle. See http://hl7.org/fhir/ValueSet/clinicalimpression-status
type ClinicalImpressionStatusValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClinicalImpressionStatusValueSet) Reset() {
	*x = ClinicalImpressionStatusValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpressionStatusValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpressionStatusValueSet) ProtoMessage() {}

func (x *ClinicalImpressionStatusValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpressionStatusValueSet.ProtoReflect.Descriptor instead.
func (*ClinicalImpressionStatusValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{5}
}

// A set of codes each of which specifies a certain subcategory of the name part
// in addition to the main name part type. See
// http://hl7.org/fhir/ValueSet/name-part-qualifier
type EntityNamePartQualifierValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntityNamePartQualifierValueSet) Reset() {
	*x = EntityNamePartQualifierValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityNamePartQualifierValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityNamePartQualifierValueSet) ProtoMessage() {}

func (x *EntityNamePartQualifierValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityNamePartQualifierValueSet.ProtoReflect.Descriptor instead.
func (*EntityNamePartQualifierValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{6}
}

// Real world event relating to the schedule.
// See http://hl7.org/fhir/ValueSet/event-timing
type EventTimingValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventTimingValueSet) Reset() {
	*x = EventTimingValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimingValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimingValueSet) ProtoMessage() {}

func (x *EventTimingValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimingValueSet.ProtoReflect.Descriptor instead.
func (*EventTimingValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{7}
}

// A list of all the concrete types defined in this version of the FHIR
// specification - Abstract Types, Data Types and Resource Types. See
// http://hl7.org/fhir/ValueSet/all-types
type FHIRAllTypesValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRAllTypesValueSet) Reset() {
	*x = FHIRAllTypesValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRAllTypesValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRAllTypesValueSet) ProtoMessage() {}

func (x *FHIRAllTypesValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRAllTypesValueSet.ProtoReflect.Descriptor instead.
func (*FHIRAllTypesValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{8}
}

// A list of all the concrete types defined in this version of the FHIR
// specification - Data Types and Resource Types. See
// http://hl7.org/fhir/ValueSet/defined-types
type FHIRDefinedTypeValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRDefinedTypeValueSet) Reset() {
	*x = FHIRDefinedTypeValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDefinedTypeValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDefinedTypeValueSet) ProtoMessage() {}

func (x *FHIRDefinedTypeValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDefinedTypeValueSet.ProtoReflect.Descriptor instead.
func (*FHIRDefinedTypeValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{9}
}

// A code that represents the preferred display order of the components of a
// human name. See http://hl7.org/fhir/ValueSet/name-assembly-order
type HumanNameAssemblyOrderValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HumanNameAssemblyOrderValueSet) Reset() {
	*x = HumanNameAssemblyOrderValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameAssemblyOrderValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameAssemblyOrderValueSet) ProtoMessage() {}

func (x *HumanNameAssemblyOrderValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameAssemblyOrderValueSet.ProtoReflect.Descriptor instead.
func (*HumanNameAssemblyOrderValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{10}
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts to
// support describing the current status of the evaluation for vaccine
// administration event. See
// http://hl7.org/fhir/ValueSet/immunization-evaluation-status
type ImmunizationEvaluationStatusCodesValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImmunizationEvaluationStatusCodesValueSet) Reset() {
	*x = ImmunizationEvaluationStatusCodesValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationEvaluationStatusCodesValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationEvaluationStatusCodesValueSet) ProtoMessage() {}

func (x *ImmunizationEvaluationStatusCodesValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationEvaluationStatusCodesValueSet.ProtoReflect.Descriptor instead.
func (*ImmunizationEvaluationStatusCodesValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{11}
}

// The value set to instantiate this attribute should be drawn from a
// terminologically robust code system that consists of or contains concepts to
// support describing the current status of the administered dose of vaccine.
// See http://hl7.org/fhir/ValueSet/immunization-status
type ImmunizationStatusCodesValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImmunizationStatusCodesValueSet) Reset() {
	*x = ImmunizationStatusCodesValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationStatusCodesValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationStatusCodesValueSet) ProtoMessage() {}

func (x *ImmunizationStatusCodesValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationStatusCodesValueSet.ProtoReflect.Descriptor instead.
func (*ImmunizationStatusCodesValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{12}
}

// LDL Cholesterol codes - measured or calculated
// See http://hl7.org/fhir/ValueSet/ldlcholesterol-codes
type LDLCodesValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LDLCodesValueSet) Reset() {
	*x = LDLCodesValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDLCodesValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDLCodesValueSet) ProtoMessage() {}

func (x *LDLCodesValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDLCodesValueSet.ProtoReflect.Descriptor instead.
func (*LDLCodesValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{13}
}

// A set of codes for each different representation of a name.
// See http://hl7.org/fhir/ValueSet/name-v3-representation
type NameRepresentationUseValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NameRepresentationUseValueSet) Reset() {
	*x = NameRepresentationUseValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameRepresentationUseValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRepresentationUseValueSet) ProtoMessage() {}

func (x *NameRepresentationUseValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRepresentationUseValueSet.ProtoReflect.Descriptor instead.
func (*NameRepresentationUseValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{14}
}

// The value set includes the v3 RoleCode PRN (parent), TWIN (twin) and all of
// their specializations.  It covers the relationships needed to establish
// genetic pedigree relationships between family members. See
// http://hl7.org/fhir/ValueSet/parent-relationship-codes
type ParentRelationshipCodesValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParentRelationshipCodesValueSet) Reset() {
	*x = ParentRelationshipCodesValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentRelationshipCodesValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentRelationshipCodesValueSet) ProtoMessage() {}

func (x *ParentRelationshipCodesValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentRelationshipCodesValueSet.ProtoReflect.Descriptor instead.
func (*ParentRelationshipCodesValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{15}
}

// Uses of an address not included in Address.use.
// See http://hl7.org/fhir/ValueSet/postal-address-use
type PostalAddressUseValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostalAddressUseValueSet) Reset() {
	*x = PostalAddressUseValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostalAddressUseValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostalAddressUseValueSet) ProtoMessage() {}

func (x *PostalAddressUseValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostalAddressUseValueSet.ProtoReflect.Descriptor instead.
func (*PostalAddressUseValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{16}
}

// Codes specifying the type of probability distribution.
// See http://hl7.org/fhir/ValueSet/probability-distribution-type
type ProbabilityDistributionTypeValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProbabilityDistributionTypeValueSet) Reset() {
	*x = ProbabilityDistributionTypeValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbabilityDistributionTypeValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbabilityDistributionTypeValueSet) ProtoMessage() {}

func (x *ProbabilityDistributionTypeValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbabilityDistributionTypeValueSet.ProtoReflect.Descriptor instead.
func (*ProbabilityDistributionTypeValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{17}
}

// Codes describing how the QuestionnaireResponse was populated
// See http://hl7.org/fhir/ValueSet/questionnaireresponse-mode
type QuestionnaireResponseModeValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireResponseModeValueSet) Reset() {
	*x = QuestionnaireResponseModeValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseModeValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseModeValueSet) ProtoMessage() {}

func (x *QuestionnaireResponseModeValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseModeValueSet.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseModeValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{18}
}

// The value set includes the v3 RoleCode SIB (sibling) and all of its
// specializations.  It covers the relationships needed to establish genetic
// pedigree relationships between family members. See
// http://hl7.org/fhir/ValueSet/sibling-relationship-codes
type SiblingRelationshipCodesValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SiblingRelationshipCodesValueSet) Reset() {
	*x = SiblingRelationshipCodesValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiblingRelationshipCodesValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiblingRelationshipCodesValueSet) ProtoMessage() {}

func (x *SiblingRelationshipCodesValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiblingRelationshipCodesValueSet.ProtoReflect.Descriptor instead.
func (*SiblingRelationshipCodesValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{19}
}

// Operations supported by REST at the system level.
// See http://hl7.org/fhir/ValueSet/system-restful-interaction
type SystemRestfulInteractionValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemRestfulInteractionValueSet) Reset() {
	*x = SystemRestfulInteractionValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemRestfulInteractionValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemRestfulInteractionValueSet) ProtoMessage() {}

func (x *SystemRestfulInteractionValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemRestfulInteractionValueSet.ProtoReflect.Descriptor instead.
func (*SystemRestfulInteractionValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{20}
}

// Distinguishes whether the task is a proposal, plan or full order.
// See http://hl7.org/fhir/ValueSet/task-intent
type TaskIntentValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskIntentValueSet) Reset() {
	*x = TaskIntentValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIntentValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIntentValueSet) ProtoMessage() {}

func (x *TaskIntentValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIntentValueSet.ProtoReflect.Descriptor instead.
func (*TaskIntentValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{21}
}

// The status indicates the level of maturity of the design and may be used to
// manage the use of the design. See
// http://hl7.org/fhir/ValueSet/template-status-code
type TemplateStatusCodeValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TemplateStatusCodeValueSet) Reset() {
	*x = TemplateStatusCodeValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateStatusCodeValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateStatusCodeValueSet) ProtoMessage() {}

func (x *TemplateStatusCodeValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateStatusCodeValueSet.ProtoReflect.Descriptor instead.
func (*TemplateStatusCodeValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{22}
}

// Operations supported by REST at the type or instance level.
// See http://hl7.org/fhir/ValueSet/type-restful-interaction
type TypeRestfulInteractionValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TypeRestfulInteractionValueSet) Reset() {
	*x = TypeRestfulInteractionValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRestfulInteractionValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRestfulInteractionValueSet) ProtoMessage() {}

func (x *TypeRestfulInteractionValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRestfulInteractionValueSet.ProtoReflect.Descriptor instead.
func (*TypeRestfulInteractionValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{23}
}

// A unit of time (units from UCUM).
// See http://hl7.org/fhir/ValueSet/units-of-time
type UnitsOfTimeValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnitsOfTimeValueSet) Reset() {
	*x = UnitsOfTimeValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitsOfTimeValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitsOfTimeValueSet) ProtoMessage() {}

func (x *UnitsOfTimeValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitsOfTimeValueSet.ProtoReflect.Descriptor instead.
func (*UnitsOfTimeValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{24}
}

//  Set of codes used to value Act.Confidentiality and Role.Confidentiality
//  attribute in accordance with the definition for concept domain
//  "Confidentiality".
// See http://terminology.hl7.org/ValueSet/v3-ConfidentialityClassification
type V3ConfidentialityClassificationValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3ConfidentialityClassificationValueSet) Reset() {
	*x = V3ConfidentialityClassificationValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3ConfidentialityClassificationValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3ConfidentialityClassificationValueSet) ProtoMessage() {}

func (x *V3ConfidentialityClassificationValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3ConfidentialityClassificationValueSet.ProtoReflect.Descriptor instead.
func (*V3ConfidentialityClassificationValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{25}
}

// Common UCUM units for recording Vital Signs
// See http://hl7.org/fhir/ValueSet/ucum-vitals-common
type VitalSignsUnitsValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VitalSignsUnitsValueSet) Reset() {
	*x = VitalSignsUnitsValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VitalSignsUnitsValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VitalSignsUnitsValueSet) ProtoMessage() {}

func (x *VitalSignsUnitsValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VitalSignsUnitsValueSet.ProtoReflect.Descriptor instead.
func (*VitalSignsUnitsValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP(), []int{26}
}

var File_proto_google_fhir_proto_r4_core_valuesets_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xb6, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x27, 0x0a, 0x02, 0x43, 0x4d, 0x10, 0x01, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x49,
	0x4e, 0x5f, 0x49, 0x10, 0x02, 0x1a, 0x2b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x5b, 0x69, 0x6e,
	0x5f, 0x69, 0x5d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x1a, 0x32, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x63, 0x75, 0x6d, 0x2d, 0x62, 0x6f, 0x64, 0x79,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x42, 0x6f, 0x64, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x03,
	0x43, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x28, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43, 0x65, 0x6c,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12,
	0x36, 0x0a, 0x05, 0x44, 0x45, 0x47, 0x5f, 0x46, 0x10, 0x02, 0x1a, 0x2b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x5b, 0x64, 0x65, 0x67, 0x46, 0x5d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x30, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x63, 0x75, 0x6d,
	0x2d, 0x62, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x42, 0x6f,
	0x64, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x02, 0x4b, 0x47,
	0x10, 0x01, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x4c, 0x42, 0x5f, 0x41, 0x56, 0x10, 0x02, 0x1a, 0x2c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5b, 0x6c, 0x62, 0x5f, 0x61, 0x76, 0x5d, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f,
	0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x26, 0x0a, 0x01,
	0x47, 0x10, 0x03, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x32, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x63, 0x75, 0x6d, 0x2d, 0x62, 0x6f,
	0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x06, 0x0a, 0x1c, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xf2, 0x05, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4a,
	0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x3b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x04, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x06,
	0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08,
	0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x1a, 0x3a, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xc9,
	0x02, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xae, 0x02, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x36,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x28, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02,
	0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x28, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x33, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x20, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22,
	0x8e, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x26, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x26, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x26, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x3c, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb8, 0x09, 0x0a, 0x1f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x22, 0x94, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x58, 0x0a, 0x02, 0x4c, 0x53, 0x10,
	0x01, 0x1a, 0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x32, 0x12, 0x58, 0x0a, 0x02, 0x41, 0x43, 0x10, 0x02, 0x1a, 0x50, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x41, 0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x58, 0x0a,
	0x02, 0x4e, 0x42, 0x10, 0x03, 0x1a, 0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x42, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x58, 0x0a, 0x02, 0x50, 0x52, 0x10, 0x04, 0x1a,
	0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x52, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x32, 0x12, 0x5a, 0x0a, 0x03, 0x48, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x48, 0x4f, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x58, 0x0a,
	0x02, 0x42, 0x52, 0x10, 0x06, 0x1a, 0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x42, 0x52, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x58, 0x0a, 0x02, 0x41, 0x44, 0x10, 0x07, 0x1a,
	0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x44, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x32, 0x12, 0x58, 0x0a, 0x02, 0x53, 0x50, 0x10, 0x08, 0x1a, 0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x53, 0x50, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x5a, 0x0a, 0x03, 0x4d,
	0x49, 0x44, 0x10, 0x09, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x49, 0x44, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x58, 0x0a, 0x02, 0x43, 0x4c, 0x10, 0x0a, 0x1a,
	0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x4c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x32, 0x12, 0x58, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x0b, 0x1a, 0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x49, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x12, 0x56, 0x0a, 0x02, 0x56,
	0x56, 0x10, 0x0c, 0x1a, 0x4e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x56, 0x56, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0x36, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x70, 0x61, 0x72,
	0x74, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa7, 0x0f, 0x0a, 0x13,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x22, 0x8f, 0x0f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x4d, 0x4f, 0x52, 0x4e,
	0x10, 0x01, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x4f, 0x52, 0x4e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x4d, 0x4f, 0x52, 0x4e, 0x5f, 0x45, 0x41, 0x52,
	0x4c, 0x59, 0x10, 0x02, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x4f, 0x52, 0x4e,
	0x2e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09,
	0x4d, 0x4f, 0x52, 0x4e, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x35, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x4d, 0x4f, 0x52, 0x4e, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x30, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4f, 0x4f, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38,
	0x0a, 0x03, 0x41, 0x46, 0x54, 0x10, 0x05, 0x1a, 0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41,
	0x46, 0x54, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09, 0x41, 0x46, 0x54, 0x5f,
	0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x06, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x41,
	0x46, 0x54, 0x2e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42,
	0x0a, 0x08, 0x41, 0x46, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x34, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x41, 0x46, 0x54, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x45, 0x56, 0x45, 0x10, 0x08, 0x1a, 0x2f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x45, 0x56, 0x45, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x09,
	0x45, 0x56, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x09, 0x1a, 0x35, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x45, 0x56, 0x45, 0x2e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x42, 0x0a, 0x08, 0x45, 0x56, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0a,
	0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x56, 0x45, 0x2e, 0x6c, 0x61, 0x74, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x0b, 0x1a, 0x31, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x50, 0x48, 0x53, 0x10, 0x0c, 0x1a, 0x2f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x48, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4a,
	0x0a, 0x02, 0x48, 0x53, 0x10, 0x0d, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x53,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x57, 0x41,
	0x4b, 0x45, 0x10, 0x0e, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x57, 0x41, 0x4b, 0x45,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x01, 0x43, 0x10,
	0x0f, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x43, 0x4d, 0x10, 0x10, 0x1a, 0x42, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x43, 0x4d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4a, 0x0a, 0x02, 0x43, 0x44, 0x10, 0x11, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x43, 0x44, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33,
	0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x02,
	0x43, 0x56, 0x10, 0x12, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x56, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x41, 0x43, 0x10, 0x13,
	0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x03, 0x41, 0x43, 0x4d, 0x10, 0x14, 0x1a, 0x43, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x43, 0x4d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x03, 0x41, 0x43, 0x44, 0x10, 0x15, 0x1a, 0x43, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x41, 0x43, 0x44, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x03, 0x41, 0x43, 0x56, 0x10, 0x16, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x41, 0x43, 0x56, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x02, 0x50, 0x43, 0x10, 0x17, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x43,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x03, 0x50, 0x43,
	0x4d, 0x10, 0x18, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x4d, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x03, 0x50, 0x43, 0x44, 0x10,
	0x19, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x44, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x03, 0x50, 0x43, 0x56, 0x10, 0x1a, 0x1a,
	0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x56, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x34,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x29, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xb0, 0x84, 0x01, 0x0a, 0x14, 0x46, 0x48, 0x49, 0x52, 0x41,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22,
	0x96, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x1a, 0x31, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x2d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x34, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x04, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x42, 0x41, 0x43,
	0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a,
	0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x4f,
	0x44, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x06,
	0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x1a, 0x37, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43,
	0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52,
	0x10, 0x0a, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x1a, 0x39, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x0d, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x0e, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x10, 0x1a, 0x31, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11,
	0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x34, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x13, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x48, 0x55, 0x4d, 0x41, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x15, 0x1a, 0x34, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x16, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x17, 0x1a, 0x2e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x65, 0x74, 0x61, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x18, 0x1a, 0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x19, 0x1a, 0x37, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x4e, 0x41, 0x52, 0x52, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x1a, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1b, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x1c, 0x1a,
	0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x1d, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x44, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x1e,
	0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46, 0x5f,
	0x4c, 0x49, 0x46, 0x45, 0x10, 0x1f, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x20,
	0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x21, 0x1a,
	0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x22, 0x1a, 0x2f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x23, 0x1a, 0x33, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x10, 0x24, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x25, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x26, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x27, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x10, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x28, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x2a, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x0d, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x2b, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d,
	0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x2c, 0x1a,
	0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x10, 0x2d, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x2e, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x2f, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x30, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x31, 0x1a, 0x32,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x32, 0x1a,
	0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x33, 0x1a, 0x24, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x34,
	0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x10, 0x35, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x41, 0x52,
	0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x36, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x03, 0x4f, 0x49, 0x44, 0x10, 0x37, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x38, 0x1a, 0x35,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x39, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x3a, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x55, 0x4e, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x3b, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x3c, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x3d, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x3e, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x3f, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x40, 0x1a, 0x35, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x1a, 0x40, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0d, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x42, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a,
	0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x43, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x44, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x45, 0x1a, 0x41,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x46, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x47, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42,
	0x61, 0x73, 0x69, 0x63, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x48, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6a,
	0x0a, 0x1c, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x44,
	0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x49,
	0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x42, 0x4f,
	0x44, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x4a, 0x1a, 0x3b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x42,
	0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x4b, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5b, 0x0a,
	0x14, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x4c, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x41,
	0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x4d, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x4e,
	0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x4f, 0x1a, 0x3a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x50, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x51, 0x1a, 0x42,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x52, 0x1a, 0x33, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x53, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x54, 0x1a, 0x40, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x55, 0x1a,
	0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x56, 0x1a, 0x3b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x57, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x58, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x59, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x5a, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5b, 0x1a,
	0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x5c, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x5d, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x5e,
	0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x5f, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x1a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x1d, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x60, 0x1a, 0x49, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1b, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x61, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x62, 0x1a,
	0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x63, 0x1a, 0x3e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x64, 0x1a,
	0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x65, 0x1a,
	0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x14,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x66, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x47,
	0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x67, 0x1a,
	0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49,
	0x46, 0x45, 0x53, 0x54, 0x10, 0x68, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x69, 0x1a, 0x3f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x6a, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x49,
	0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x53, 0x49, 0x53, 0x10,
	0x6b, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x6c, 0x1a, 0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x6d, 0x1a, 0x36,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x6e, 0x1a, 0x3f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x59, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6f, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x45, 0x50,
	0x49, 0x53, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x70, 0x1a,
	0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x10,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x71, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x72, 0x1a,
	0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x45, 0x56, 0x49, 0x44, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x73, 0x1a, 0x3e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53,
	0x0a, 0x10, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52,
	0x49, 0x4f, 0x10, 0x74, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x10, 0x75, 0x1a,
	0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x76, 0x1a, 0x41,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x77, 0x1a, 0x32, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x78, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x47, 0x6f, 0x61, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x79, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x7a, 0x1a, 0x33, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x7b, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x7c, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63,
	0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x55, 0x44, 0x59, 0x10, 0x7d, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x7e, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x17, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7f, 0x1a, 0x44, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x16, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x80, 0x01, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x81, 0x01, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e,
	0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x82,
	0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x83, 0x01, 0x1a, 0x35, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x84,
	0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b,
	0x41, 0x47, 0x45, 0x10, 0x85, 0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x86, 0x01, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x88,
	0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x89, 0x01, 0x1a, 0x3b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x10, 0x8a, 0x01, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x4d,
	0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8b, 0x01, 0x1a, 0x38, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x8c, 0x01, 0x1a, 0x46, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x8d, 0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44,
	0x47, 0x45, 0x10, 0x8e, 0x01, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x8f,
	0x01, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x90, 0x01, 0x1a, 0x41, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x91, 0x01, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x1f, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x92, 0x01, 0x1a, 0x4b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x4d,
	0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x93, 0x01, 0x1a, 0x4e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x20, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x94, 0x01, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x95, 0x01, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6d,
	0x0a, 0x1d, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x96, 0x01, 0x1a, 0x49, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6f, 0x0a,
	0x1e, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10,
	0x97, 0x01, 0x1a, 0x4a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x67,
	0x0a, 0x1a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x44, 0x10, 0x98, 0x01, 0x1a,
	0x46, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x20, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x41,
	0x52, 0x4d, 0x41, 0x43, 0x45, 0x55, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x99, 0x01, 0x1a, 0x4c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x24,
	0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x49, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x10, 0x9a, 0x01, 0x1a, 0x4f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x21, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x9b,
	0x01, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x9c, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x4d, 0x4f, 0x4c, 0x45, 0x43, 0x55, 0x4c, 0x41,
	0x52, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x9d, 0x01, 0x1a, 0x3f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x9e, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x9f, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xa0, 0x01, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x60, 0x0a, 0x16, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa1, 0x01, 0x1a, 0x43, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x5c, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa2, 0x01, 0x1a, 0x41, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54,
	0x43, 0x4f, 0x4d, 0x45, 0x10, 0xa3, 0x01, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa4, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xa5, 0x01, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xa6, 0x01, 0x1a, 0x38, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0xa7, 0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0xa8,
	0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x60,
	0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43,
	0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa9, 0x01, 0x1a, 0x43, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0xaa, 0x01, 0x1a, 0x34, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xab, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0xac, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0xad, 0x01, 0x1a, 0x3e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0xae, 0x01, 0x1a, 0x37,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xaf, 0x01, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41,
	0x49, 0x52, 0x45, 0x10, 0xb0, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e,
	0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xb1, 0x01,
	0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0xb2, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xb3, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb4,
	0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xb5, 0x01, 0x1a, 0x47, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59,
	0x10, 0xb6, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x54, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0xb7, 0x01, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0xb8, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0xb9, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x17, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x53, 0x49, 0x53, 0x10, 0xba, 0x01, 0x1a,
	0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0xbb, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10,
	0xbc, 0x01, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xbd, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0xbe, 0x01,
	0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e,
	0x10, 0xbf, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xc0, 0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xc1, 0x01, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0xc2, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc3, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0xc4, 0x01, 0x1a, 0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x16, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45,
	0x49, 0x43, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x10, 0xc5, 0x01, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65,
	0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x11, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59,
	0x4d, 0x45, 0x52, 0x10, 0xc6, 0x01, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x10, 0xc7, 0x01, 0x1a, 0x3e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x71,
	0x0a, 0x1f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xc8, 0x01, 0x1a, 0x4b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x65, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0xc9,
	0x01, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xca, 0x01, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10,
	0xcb, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x50, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0xcc, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0xcd, 0x01, 0x1a, 0x32, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x64, 0x0a, 0x18, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
	0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0xce, 0x01,
	0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xcf, 0x01, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x10, 0xd0, 0x01, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0xd1, 0x01, 0x1a,
	0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xd2,
	0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd3, 0x01, 0x1a, 0x40, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0xd4, 0x01, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x54, 0x79, 0x70, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0xd5, 0x01, 0x1a, 0x31, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x41, 0x6e, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x2c, 0xca, 0xa5, 0x9a,
	0xa0, 0x08, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x6c, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xbb, 0x83, 0x01, 0x0a, 0x17, 0x46,
	0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x9e, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x07,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x31, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x03,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x2d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x67, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x10, 0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61,
	0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x06, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a, 0x30,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0x08, 0x1a, 0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09,
	0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x2f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x0c, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0d, 0x1a, 0x32, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x1a, 0x30, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x32, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x1a, 0x31, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x0a, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x1a, 0x33,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x10, 0x15, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x16, 0x1a,
	0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x4d, 0x45,
	0x54, 0x41, 0x10, 0x17, 0x1a, 0x2e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x65, 0x74, 0x61,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x18, 0x1a,
	0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x10, 0x19, 0x1a, 0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x09, 0x4e, 0x41, 0x52, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1a, 0x1a, 0x33, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x1a, 0x3d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x10, 0x1c, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x50, 0x4f, 0x50, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x13, 0x50, 0x52, 0x4f, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x1e, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x50,
	0x72, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x10, 0x1f, 0x1a, 0x3a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x4c, 0x69, 0x66, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x20, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x21, 0x1a, 0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x10, 0x22, 0x1a, 0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x23, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x24, 0x1a, 0x39, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x25, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x26,
	0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x27, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x28, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x29, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x1a, 0x3b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x2b, 0x1a, 0x36, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x2c, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x2d, 0x1a, 0x24, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x2e,
	0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x2f,
	0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x30,
	0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x31, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x32, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x02,
	0x49, 0x44, 0x10, 0x33, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x34, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x35, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x36, 0x1a, 0x24,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10, 0x37, 0x1a, 0x24, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x10, 0x38, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x39, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3a, 0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x0c, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x3b,
	0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x3c,
	0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x3d, 0x1a,
	0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x3e, 0x1a,
	0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x3f,
	0x1a, 0x24, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x40, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x41, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x41, 0x44, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x42, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x43, 0x1a, 0x40, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x44,
	0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x41,
	0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x45, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x46, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x47, 0x1a, 0x33,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x48, 0x1a,
	0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x49, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x42,
	0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x4a, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x4b, 0x1a, 0x34,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x4c, 0x1a, 0x41,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x4d,
	0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x4e, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x4f, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x50, 0x1a,
	0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x51, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x10, 0x52, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x53, 0x1a, 0x3b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x43, 0x4c,
	0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x54, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x55, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x56, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x5d, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x57, 0x1a, 0x42, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x58, 0x1a, 0x43, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x59, 0x1a, 0x39, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0b,
	0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x5a, 0x1a, 0x38, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5b, 0x1a, 0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x5c, 0x1a, 0x35, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x5d, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x5e, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x6a, 0x0a, 0x1c, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x47,
	0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x5f, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x1d, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x60, 0x1a, 0x49,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1b, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x61, 0x1a, 0x3b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x62, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x63, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x10, 0x64, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x65, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x66, 0x1a, 0x40, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x67, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x68, 0x1a, 0x3e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x69, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x6a, 0x1a, 0x3c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e,
	0x54, 0x48, 0x45, 0x53, 0x49, 0x53, 0x10, 0x6b, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x6c, 0x1a, 0x37,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x6d, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x6e, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6f, 0x1a,
	0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x0f, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f,
	0x43, 0x41, 0x52, 0x45, 0x10, 0x70, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x71, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x45, 0x56, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x72, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x11, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x73, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0x74, 0x1a, 0x3d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x45, 0x58,
	0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e,
	0x45, 0x46, 0x49, 0x54, 0x10, 0x75, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x76, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47,
	0x10, 0x77, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x78,
	0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x79, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x7a, 0x1a, 0x33, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x55, 0x49,
	0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x7b,
	0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x57, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x7c, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x49, 0x4d, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x7d, 0x1a, 0x3a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x49, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7e, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x7f, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x49, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x49, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x80, 0x01, 0x1a, 0x48, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x81, 0x01,
	0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x82, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x10, 0x83, 0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x84, 0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x85, 0x01, 0x1a, 0x35, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x86, 0x01, 0x1a,
	0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4c, 0x69, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x87, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x88, 0x01, 0x1a, 0x35, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0e, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x89, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x05, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x8a, 0x01, 0x1a, 0x33, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x8b, 0x01, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8c, 0x01, 0x1a, 0x46, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x8d, 0x01, 0x1a,
	0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x5c, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x10, 0x8e, 0x01, 0x1a, 0x41, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x8f, 0x01, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x4d, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x90, 0x01, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x91, 0x01, 0x1a,
	0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x71, 0x0a, 0x1f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x92, 0x01, 0x1a, 0x4b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x77, 0x0a, 0x22, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x93, 0x01, 0x1a, 0x4e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x4d,
	0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x94, 0x01, 0x1a, 0x48,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e,
	0x47, 0x52, 0x45, 0x44, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x95, 0x01, 0x1a, 0x48, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x1d, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x96, 0x01, 0x1a, 0x49, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x1e, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41,
	0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x97, 0x01, 0x1a, 0x4a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x1a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x44, 0x10, 0x98, 0x01, 0x1a, 0x46, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x73,
	0x0a, 0x20, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x41, 0x43, 0x45, 0x55, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x99, 0x01, 0x1a, 0x4c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x24, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x49, 0x52,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x9a, 0x01, 0x1a, 0x4f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x21, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x9b, 0x01, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x9c, 0x01, 0x1a, 0x3b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x4d,
	0x4f, 0x4c, 0x45, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0x9d, 0x01, 0x1a, 0x3f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x6f, 0x6c, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x9e, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x9f, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa0, 0x01, 0x1a, 0x39, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xa1, 0x01, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xa2, 0x01, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0xa3, 0x01, 0x1a, 0x3e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa4,
	0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x64, 0x0a,
	0x18, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46,
	0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa5, 0x01, 0x1a, 0x45, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x17, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x53, 0x10, 0xa6, 0x01, 0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0xa7, 0x01, 0x1a, 0x35, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0xa8, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xa9, 0x01, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0xaa, 0x01, 0x1a, 0x34, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x50, 0x4c,
	0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xab, 0x01,
	0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d,
	0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0xac,
	0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x11, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x10, 0xad, 0x01, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55,
	0x52, 0x45, 0x10, 0xae, 0x01, 0x1a, 0x37, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xaf, 0x01, 0x1a,
	0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x10, 0xb0, 0x01, 0x1a, 0x3b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0xb1, 0x01, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0xb2,
	0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x0d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0xb3, 0x01, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x13, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb4, 0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1b, 0x52, 0x45,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb5, 0x01, 0x1a, 0x47, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x19, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0xb6, 0x01, 0x1a, 0x3b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xb7, 0x01, 0x1a, 0x3d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0xb8, 0x01, 0x1a, 0x36, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xb9, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45,
	0x53, 0x49, 0x53, 0x10, 0xba, 0x01, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x52, 0x69,
	0x73, 0x6b, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0xbb, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xbc, 0x01, 0x1a, 0x3d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xbd, 0x01, 0x1a, 0x3c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04,
	0x53, 0x4c, 0x4f, 0x54, 0x10, 0xbe, 0x01, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53,
	0x6c, 0x6f, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0xbf, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc0, 0x01, 0x1a, 0x40, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x14, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc1, 0x01, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0xc2, 0x01,
	0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x70, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc3, 0x01, 0x1a,
	0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xc4, 0x01, 0x1a, 0x37, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x10, 0xc5,
	0x01, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x4d, 0x45, 0x52, 0x10, 0xc6, 0x01, 0x1a, 0x3e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x6c, 0x79, 0x6d, 0x65, 0x72, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x11, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x49, 0x4e, 0x10, 0xc7, 0x01, 0x1a, 0x3e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x1f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc8, 0x01, 0x1a, 0x4b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0xc9, 0x01, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x62, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xca, 0x01, 0x1a, 0x44, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x16, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0xcb, 0x01, 0x1a, 0x3c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcc, 0x01, 0x1a, 0x3b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0xcd, 0x01, 0x1a, 0x32, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x49, 0x45, 0x53, 0x10, 0xce, 0x01, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xcf, 0x01,
	0x1a, 0x38, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0xd0, 0x01, 0x1a, 0x38, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0xd1, 0x01, 0x1a, 0x36, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xd2, 0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xd3, 0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x30, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x9c, 0x05, 0x0a, 0x1e, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xf9, 0x04, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x51, 0x0a, 0x03, 0x4e, 0x4c, 0x31, 0x10, 0x01, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x4e, 0x4c, 0x31, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x03, 0x4e, 0x4c, 0x32, 0x10, 0x02, 0x1a, 0x48, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x32, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x39, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x03, 0x4e, 0x4c, 0x33, 0x10, 0x03, 0x1a,
	0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x33, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x03, 0x4e, 0x4c, 0x34,
	0x10, 0x04, 0x1a, 0x48, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x34, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x01,
	0x46, 0x10, 0x05, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x46, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x32, 0x2d, 0x30, 0x34, 0x34, 0x34, 0x12,
	0x41, 0x0a, 0x01, 0x47, 0x10, 0x06, 0x1a, 0x3a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x47, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x32, 0x2d, 0x30, 0x34,
	0x34, 0x34, 0x12, 0x4b, 0x0a, 0x03, 0x55, 0x4e, 0x4b, 0x10, 0x07, 0x1a, 0x42, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x55, 0x4e, 0x4b, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x1a,
	0x36, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc2, 0x02, 0x0a, 0x29, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x1a, 0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x3d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x41, 0xca, 0xa5, 0x9a, 0xa0, 0x08,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x02, 0x0a,
	0x1f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x22, 0x85, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x26, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x1a, 0x26, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x4e, 0x4f,
	0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0x26, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x36, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x10, 0x4c, 0x44, 0x4c,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x86, 0x02,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x3e, 0x0a, 0x15, 0x4c, 0x44, 0x4c, 0x5f, 0x43, 0x48, 0x4f, 0x4c, 0x45, 0x53,
	0x54, 0x45, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x23, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x31, 0x38, 0x32, 0x36, 0x32, 0x2d, 0x36, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f,
	0x72, 0x67, 0x12, 0x69, 0x0a, 0x40, 0x43, 0x48, 0x4f, 0x4c, 0x45, 0x53, 0x54, 0x45, 0x52, 0x4f,
	0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x44, 0x4c, 0x5f, 0x4d, 0x41, 0x53, 0x53, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x55, 0x4d, 0x5f, 0x4f, 0x52,
	0x5f, 0x50, 0x4c, 0x41, 0x53, 0x4d, 0x41, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x23, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x31, 0x33, 0x34, 0x35, 0x37, 0x2d, 0x37, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x10, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0x1a, 0x37, 0xca,
	0xa5, 0x9a, 0xa0, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6c, 0x64, 0x6c, 0x63, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x1d, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xcd, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4e, 0x0a,
	0x03, 0x41, 0x42, 0x43, 0x10, 0x01, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x42,
	0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x03, 0x49, 0x44, 0x45, 0x10, 0x02, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x44,
	0x45, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x03, 0x53, 0x59, 0x4c, 0x10, 0x03, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x59,
	0x4c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x1a, 0x39, 0xca,
	0xa5, 0x9a, 0xa0, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x76, 0x33, 0x2d, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x0e, 0x0a, 0x1f, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xdf, 0x0d, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x49, 0x0a, 0x03, 0x50, 0x52, 0x4e, 0x10, 0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x50, 0x52, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x41, 0x44, 0x4f, 0x50, 0x54, 0x50, 0x10, 0x02, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x41, 0x44, 0x4f, 0x50, 0x54, 0x50, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x46, 0x10, 0x03, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x46, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x4d, 0x10, 0x04, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x4d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x03, 0x46, 0x54, 0x48, 0x10, 0x05, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x46, 0x54, 0x48, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x46, 0x54,
	0x48, 0x46, 0x4f, 0x53, 0x54, 0x10, 0x06, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x46,
	0x54, 0x48, 0x46, 0x4f, 0x53, 0x54, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x04, 0x4e, 0x46, 0x54, 0x48, 0x10, 0x07, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e,
	0x46, 0x54, 0x48, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x4e, 0x46,
	0x54, 0x48, 0x46, 0x10, 0x08, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x46, 0x54,
	0x48, 0x46, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33,
	0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x53, 0x54, 0x50,
	0x46, 0x54, 0x48, 0x10, 0x09, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50,
	0x46, 0x54, 0x48, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x03, 0x4d, 0x54,
	0x48, 0x10, 0x0a, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x54, 0x48, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x47, 0x45, 0x53, 0x54, 0x4d, 0x10, 0x0b,
	0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x45, 0x53, 0x54, 0x4d, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x4d, 0x54, 0x48, 0x46, 0x4f, 0x53, 0x54, 0x10,
	0x0c, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x54, 0x48, 0x46, 0x4f, 0x53, 0x54,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52,
	0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x4e, 0x4d, 0x54, 0x48, 0x10,
	0x0d, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4d, 0x54, 0x48, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x4e, 0x4d, 0x54, 0x48, 0x46, 0x10, 0x0e, 0x1a,
	0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x4d, 0x54, 0x48, 0x46, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x4d, 0x54, 0x48, 0x10, 0x0f, 0x1a,
	0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x4d, 0x54, 0x48, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x4e, 0x50, 0x52, 0x4e, 0x10, 0x10, 0x1a, 0x41,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x50, 0x52, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x51, 0x0a, 0x07, 0x50, 0x52, 0x4e, 0x46, 0x4f, 0x53, 0x54, 0x10, 0x11, 0x1a, 0x44,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x52, 0x4e, 0x46, 0x4f, 0x53, 0x54, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4e, 0x10, 0x12,
	0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4e, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x13, 0x1a,
	0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x57, 0x49, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x14, 0x1a, 0x42, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46, 0x54, 0x57, 0x49, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x05, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x15, 0x1a, 0x42, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x49, 0x54, 0x57, 0x49, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x3c, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xde,
	0x05, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x55, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xc1, 0x05, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x4b, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x01, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x42, 0x41, 0x44, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x76, 0x33, 0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x04, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x02, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43,
	0x4f, 0x4e, 0x46, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x02,
	0x48, 0x50, 0x10, 0x03, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x50, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x02, 0x48, 0x56, 0x10, 0x04, 0x1a,
	0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x56, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x03, 0x44, 0x49, 0x52, 0x10, 0x05, 0x1a, 0x42, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x44, 0x49, 0x52, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x03, 0x50, 0x55, 0x42, 0x10, 0x06, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x50, 0x55, 0x42, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04,
	0x50, 0x48, 0x59, 0x53, 0x10, 0x07, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x48,
	0x59, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33,
	0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x03, 0x50,
	0x53, 0x54, 0x10, 0x08, 0x1a, 0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x53, 0x54, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x1a, 0x35, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x22,
	0xba, 0x07, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x92, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x58, 0x0a, 0x01,
	0x42, 0x10, 0x01, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x42, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x01, 0x45, 0x10, 0x02, 0x1a, 0x51, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x01, 0x46, 0x10, 0x03, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x46,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x01, 0x47, 0x10,
	0x04, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x47, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x02, 0x4c, 0x4e, 0x10, 0x05, 0x1a, 0x52, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x01, 0x4e, 0x10, 0x06, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x01, 0x54, 0x10,
	0x07, 0x1a, 0x51, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x54, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x01, 0x55, 0x10, 0x08, 0x1a, 0x51, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x55, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x76, 0x33, 0x2d, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a,
	0x0a, 0x02, 0x58, 0x32, 0x10, 0x09, 0x1a, 0x52, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x58, 0x32,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x40, 0xca, 0xa5, 0x9a, 0xa0,
	0x08, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x03, 0x0a,
	0x21, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x60, 0x0a, 0x0a, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x52, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x50, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x56, 0x45, 0x52,
	0x42, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x4c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x56, 0x45, 0x52,
	0x42, 0x41, 0x4c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x03,
	0x1a, 0x4d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x3d, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8d,
	0x0e, 0x0a, 0x20, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x22, 0xe8, 0x0d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x49, 0x0a, 0x03, 0x53, 0x49, 0x42, 0x10,
	0x01, 0x1a, 0x40, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x49, 0x42, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x03, 0x42, 0x52, 0x4f, 0x10, 0x02, 0x1a, 0x40, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x42, 0x52, 0x4f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b,
	0x0a, 0x04, 0x48, 0x42, 0x52, 0x4f, 0x10, 0x03, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x48, 0x42, 0x52, 0x4f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x4e,
	0x42, 0x52, 0x4f, 0x10, 0x04, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x42, 0x52,
	0x4f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x4e,
	0x42, 0x52, 0x4f, 0x10, 0x05, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x54, 0x57, 0x49,
	0x4e, 0x42, 0x52, 0x4f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x46,
	0x54, 0x57, 0x49, 0x4e, 0x42, 0x52, 0x4f, 0x10, 0x06, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52, 0x4f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52, 0x4f, 0x10, 0x07, 0x1a, 0x45,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52, 0x4f, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x42, 0x52, 0x4f, 0x10,
	0x08, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x42, 0x52, 0x4f, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x48, 0x53, 0x49, 0x42, 0x10, 0x09,
	0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x53, 0x49, 0x42, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x48, 0x53, 0x49, 0x53, 0x10, 0x0a, 0x1a, 0x41, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x53, 0x49, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4b, 0x0a, 0x04, 0x4e, 0x53, 0x49, 0x42, 0x10, 0x0b, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4e, 0x53, 0x49, 0x42, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a,
	0x04, 0x4e, 0x53, 0x49, 0x53, 0x10, 0x0c, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e,
	0x53, 0x49, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x54, 0x57,
	0x49, 0x4e, 0x53, 0x49, 0x53, 0x10, 0x0d, 0x1a, 0x44, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x54,
	0x57, 0x49, 0x4e, 0x53, 0x49, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a,
	0x08, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x49, 0x53, 0x10, 0x0e, 0x1a, 0x45, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x49, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x49, 0x53, 0x10, 0x0f,
	0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x49, 0x53,
	0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52,
	0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x54, 0x57, 0x49, 0x4e, 0x10,
	0x10, 0x1a, 0x41, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x57, 0x49, 0x4e, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x11, 0x1a,
	0x42, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46, 0x54, 0x57, 0x49, 0x4e, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x10, 0x12, 0x1a, 0x42,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49, 0x54, 0x57, 0x49, 0x4e, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x49, 0x0a, 0x03, 0x53, 0x49, 0x53, 0x10, 0x13, 0x1a, 0x40, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x53, 0x49, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x53, 0x10, 0x14, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x53, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x42, 0x10, 0x15, 0x1a, 0x43, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x42, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a,
	0x3d, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x85,
	0x03, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x22, 0xe0, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x02, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x03, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x37, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x04, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xd1, 0x04,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x1a,
	0x25, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x10, 0x02, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x28, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x28, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x58, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x07, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x08, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x1a, 0x28, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x1a, 0x2e, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xdc, 0x04, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x22, 0xbd, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01,
	0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a,
	0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38,
	0x33, 0x2e, 0x33, 0x2e, 0x31, 0x39, 0x33, 0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x12,
	0x3a, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x2d, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x32, 0x2e, 0x31, 0x36,
	0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38, 0x33, 0x2e, 0x33, 0x2e,
	0x31, 0x39, 0x33, 0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x12, 0x39, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x75,
	0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e,
	0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38, 0x33, 0x2e, 0x33, 0x2e, 0x31, 0x39, 0x33, 0x37, 0x2e,
	0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x12, 0x39, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x04, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69,
	0x64, 0x3a, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33,
	0x38, 0x38, 0x33, 0x2e, 0x33, 0x2e, 0x31, 0x39, 0x33, 0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e,
	0x38, 0x12, 0x3c, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a,
	0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38,
	0x33, 0x2e, 0x33, 0x2e, 0x31, 0x39, 0x33, 0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x12,
	0x3b, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x2d, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x32, 0x2e, 0x31,
	0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38, 0x33, 0x2e, 0x33,
	0x2e, 0x31, 0x39, 0x33, 0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x12, 0x3a, 0x0a, 0x07,
	0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34,
	0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38, 0x33, 0x2e, 0x33, 0x2e, 0x31, 0x39, 0x33,
	0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x12, 0x3d, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27,
	0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38, 0x34, 0x30,
	0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38, 0x33, 0x2e, 0x33, 0x2e, 0x31, 0x39, 0x33, 0x37,
	0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x1a, 0x37, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xa6, 0x05, 0x0a, 0x1e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x22, 0x83, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x01, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x05, 0x56, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x1a, 0x2d, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x04, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x1a, 0x2d, 0xca, 0xdf,
	0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x06, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0c, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x07, 0x1a, 0x2d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x08, 0x1a, 0x2d, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x1a, 0x2d, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0xca, 0xa5,
	0x9a, 0xa0, 0x08, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x03, 0x0a, 0x13, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x22, 0xf0, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x01, 0x53, 0x10, 0x01, 0x1a, 0x1f, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x28,
	0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x26, 0x0a, 0x01, 0x48, 0x10, 0x03, 0x1a,
	0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x12, 0x26, 0x0a, 0x01, 0x44, 0x10, 0x04, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x57, 0x4b, 0x10, 0x05,
	0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x12, 0x27, 0x0a, 0x02, 0x4d, 0x4f, 0x10, 0x06, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x26, 0x0a, 0x01, 0x41, 0x10,
	0x07, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x67, 0x1a, 0x30, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2d, 0x6f, 0x66, 0x2d,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xee, 0x04, 0x0a, 0x27, 0x56, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x22, 0xc2, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4c, 0x0a, 0x01, 0x55, 0x10, 0x01, 0x1a, 0x45, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x55, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x01, 0x4c, 0x10, 0x02, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x4c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76,
	0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x4c, 0x0a, 0x01, 0x4d, 0x10, 0x03, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x4d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x4c, 0x0a, 0x01, 0x4e, 0x10, 0x04, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e, 0xca,
	0xdf, 0xdb, 0x99, 0x08, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a,
	0x01, 0x52, 0x10, 0x05, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x01, 0x56,
	0x10, 0x06, 0x1a, 0x45, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x56, 0xca, 0xdf, 0xdb, 0x99, 0x08,
	0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x4a, 0xca, 0xa5, 0x9a, 0xa0, 0x08,
	0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x05, 0x0a, 0x17, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x22, 0xb3, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x1a, 0x26, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x25, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x43,
	0x4d, 0x10, 0x02, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x4e, 0x5f, 0x49, 0x10, 0x03, 0x1a, 0x2b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x5b, 0x69, 0x6e, 0x5f, 0x69, 0x5d, 0xca, 0xdf, 0xdb, 0x99,
	0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x4b,
	0x47, 0x10, 0x04, 0x1a, 0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x67, 0x12, 0x26, 0x0a, 0x01, 0x47, 0x10, 0x05, 0x1a, 0x1f, 0xca, 0xdf, 0xdb,
	0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f,
	0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x37, 0x0a, 0x05,
	0x4c, 0x42, 0x5f, 0x41, 0x56, 0x10, 0x06, 0x1a, 0x2c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5b,
	0x6c, 0x62, 0x5f, 0x61, 0x76, 0x5d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x03, 0x43, 0x45, 0x4c, 0x10, 0x07, 0x1a, 0x28,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43, 0x65, 0x6c, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x44, 0x45, 0x47, 0x5f,
	0x46, 0x10, 0x08, 0x1a, 0x2b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x5b, 0x64, 0x65, 0x67, 0x46,
	0x5d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x12, 0x36, 0x0a, 0x05, 0x4d, 0x4d, 0x5f, 0x48, 0x47, 0x10, 0x09, 0x1a, 0x2b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x6d, 0x6d, 0x5b, 0x48, 0x67, 0x5d, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x0a, 0x1a, 0x29, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x2f, 0x6d, 0x69,
	0x6e, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x12, 0x35, 0x0a, 0x05, 0x4b, 0x47, 0x5f, 0x4d, 0x32, 0x10, 0x0b, 0x1a, 0x2a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x6b, 0x67, 0x2f, 0x6d, 0x32, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x12, 0x27, 0x0a, 0x02, 0x4d, 0x32, 0x10, 0x0c, 0x1a,
	0x1f, 0xca, 0xdf, 0xdb, 0x99, 0x08, 0x19, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x67,
	0x1a, 0x35, 0xca, 0xa5, 0x9a, 0xa0, 0x08, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x63, 0x75, 0x6d, 0x2d, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x69, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescData = file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_proto_google_fhir_proto_r4_core_valuesets_proto_goTypes = []interface{}{
	(BodyLengthUnitsValueSet_Value)(0),                   // 0: google.fhir.r4.core.BodyLengthUnitsValueSet.Value
	(BodyTemperatureUnitsValueSet_Value)(0),              // 1: google.fhir.r4.core.BodyTemperatureUnitsValueSet.Value
	(BodyWeightUnitsValueSet_Value)(0),                   // 2: google.fhir.r4.core.BodyWeightUnitsValueSet.Value
	(CarePlanActivityKindValueSet_Value)(0),              // 3: google.fhir.r4.core.CarePlanActivityKindValueSet.Value
	(CarePlanIntentValueSet_Value)(0),                    // 4: google.fhir.r4.core.CarePlanIntentValueSet.Value
	(ClinicalImpressionStatusValueSet_Value)(0),          // 5: google.fhir.r4.core.ClinicalImpressionStatusValueSet.Value
	(EntityNamePartQualifierValueSet_Value)(0),           // 6: google.fhir.r4.core.EntityNamePartQualifierValueSet.Value
	(EventTimingValueSet_Value)(0),                       // 7: google.fhir.r4.core.EventTimingValueSet.Value
	(FHIRAllTypesValueSet_Value)(0),                      // 8: google.fhir.r4.core.FHIRAllTypesValueSet.Value
	(FHIRDefinedTypeValueSet_Value)(0),                   // 9: google.fhir.r4.core.FHIRDefinedTypeValueSet.Value
	(HumanNameAssemblyOrderValueSet_Value)(0),            // 10: google.fhir.r4.core.HumanNameAssemblyOrderValueSet.Value
	(ImmunizationEvaluationStatusCodesValueSet_Value)(0), // 11: google.fhir.r4.core.ImmunizationEvaluationStatusCodesValueSet.Value
	(ImmunizationStatusCodesValueSet_Value)(0),           // 12: google.fhir.r4.core.ImmunizationStatusCodesValueSet.Value
	(LDLCodesValueSet_Value)(0),                          // 13: google.fhir.r4.core.LDLCodesValueSet.Value
	(NameRepresentationUseValueSet_Value)(0),             // 14: google.fhir.r4.core.NameRepresentationUseValueSet.Value
	(ParentRelationshipCodesValueSet_Value)(0),           // 15: google.fhir.r4.core.ParentRelationshipCodesValueSet.Value
	(PostalAddressUseValueSet_Value)(0),                  // 16: google.fhir.r4.core.PostalAddressUseValueSet.Value
	(ProbabilityDistributionTypeValueSet_Value)(0),       // 17: google.fhir.r4.core.ProbabilityDistributionTypeValueSet.Value
	(QuestionnaireResponseModeValueSet_Value)(0),         // 18: google.fhir.r4.core.QuestionnaireResponseModeValueSet.Value
	(SiblingRelationshipCodesValueSet_Value)(0),          // 19: google.fhir.r4.core.SiblingRelationshipCodesValueSet.Value
	(SystemRestfulInteractionValueSet_Value)(0),          // 20: google.fhir.r4.core.SystemRestfulInteractionValueSet.Value
	(TaskIntentValueSet_Value)(0),                        // 21: google.fhir.r4.core.TaskIntentValueSet.Value
	(TemplateStatusCodeValueSet_Value)(0),                // 22: google.fhir.r4.core.TemplateStatusCodeValueSet.Value
	(TypeRestfulInteractionValueSet_Value)(0),            // 23: google.fhir.r4.core.TypeRestfulInteractionValueSet.Value
	(UnitsOfTimeValueSet_Value)(0),                       // 24: google.fhir.r4.core.UnitsOfTimeValueSet.Value
	(V3ConfidentialityClassificationValueSet_Value)(0),   // 25: google.fhir.r4.core.V3ConfidentialityClassificationValueSet.Value
	(VitalSignsUnitsValueSet_Value)(0),                   // 26: google.fhir.r4.core.VitalSignsUnitsValueSet.Value
	(*BodyLengthUnitsValueSet)(nil),                      // 27: google.fhir.r4.core.BodyLengthUnitsValueSet
	(*BodyTemperatureUnitsValueSet)(nil),                 // 28: google.fhir.r4.core.BodyTemperatureUnitsValueSet
	(*BodyWeightUnitsValueSet)(nil),                      // 29: google.fhir.r4.core.BodyWeightUnitsValueSet
	(*CarePlanActivityKindValueSet)(nil),                 // 30: google.fhir.r4.core.CarePlanActivityKindValueSet
	(*CarePlanIntentValueSet)(nil),                       // 31: google.fhir.r4.core.CarePlanIntentValueSet
	(*ClinicalImpressionStatusValueSet)(nil),             // 32: google.fhir.r4.core.ClinicalImpressionStatusValueSet
	(*EntityNamePartQualifierValueSet)(nil),              // 33: google.fhir.r4.core.EntityNamePartQualifierValueSet
	(*EventTimingValueSet)(nil),                          // 34: google.fhir.r4.core.EventTimingValueSet
	(*FHIRAllTypesValueSet)(nil),                         // 35: google.fhir.r4.core.FHIRAllTypesValueSet
	(*FHIRDefinedTypeValueSet)(nil),                      // 36: google.fhir.r4.core.FHIRDefinedTypeValueSet
	(*HumanNameAssemblyOrderValueSet)(nil),               // 37: google.fhir.r4.core.HumanNameAssemblyOrderValueSet
	(*ImmunizationEvaluationStatusCodesValueSet)(nil),    // 38: google.fhir.r4.core.ImmunizationEvaluationStatusCodesValueSet
	(*ImmunizationStatusCodesValueSet)(nil),              // 39: google.fhir.r4.core.ImmunizationStatusCodesValueSet
	(*LDLCodesValueSet)(nil),                             // 40: google.fhir.r4.core.LDLCodesValueSet
	(*NameRepresentationUseValueSet)(nil),                // 41: google.fhir.r4.core.NameRepresentationUseValueSet
	(*ParentRelationshipCodesValueSet)(nil),              // 42: google.fhir.r4.core.ParentRelationshipCodesValueSet
	(*PostalAddressUseValueSet)(nil),                     // 43: google.fhir.r4.core.PostalAddressUseValueSet
	(*ProbabilityDistributionTypeValueSet)(nil),          // 44: google.fhir.r4.core.ProbabilityDistributionTypeValueSet
	(*QuestionnaireResponseModeValueSet)(nil),            // 45: google.fhir.r4.core.QuestionnaireResponseModeValueSet
	(*SiblingRelationshipCodesValueSet)(nil),             // 46: google.fhir.r4.core.SiblingRelationshipCodesValueSet
	(*SystemRestfulInteractionValueSet)(nil),             // 47: google.fhir.r4.core.SystemRestfulInteractionValueSet
	(*TaskIntentValueSet)(nil),                           // 48: google.fhir.r4.core.TaskIntentValueSet
	(*TemplateStatusCodeValueSet)(nil),                   // 49: google.fhir.r4.core.TemplateStatusCodeValueSet
	(*TypeRestfulInteractionValueSet)(nil),               // 50: google.fhir.r4.core.TypeRestfulInteractionValueSet
	(*UnitsOfTimeValueSet)(nil),                          // 51: google.fhir.r4.core.UnitsOfTimeValueSet
	(*V3ConfidentialityClassificationValueSet)(nil),      // 52: google.fhir.r4.core.V3ConfidentialityClassificationValueSet
	(*VitalSignsUnitsValueSet)(nil),                      // 53: google.fhir.r4.core.VitalSignsUnitsValueSet
}
var file_proto_google_fhir_proto_r4_core_valuesets_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_valuesets_proto_init() }
func file_proto_google_fhir_proto_r4_core_valuesets_proto_init() {
	if File_proto_google_fhir_proto_r4_core_valuesets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyLengthUnitsValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyTemperatureUnitsValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyWeightUnitsValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanActivityKindValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanIntentValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpressionStatusValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityNamePartQualifierValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimingValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRAllTypesValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDefinedTypeValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameAssemblyOrderValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationEvaluationStatusCodesValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationStatusCodesValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDLCodesValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameRepresentationUseValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentRelationshipCodesValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostalAddressUseValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbabilityDistributionTypeValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseModeValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiblingRelationshipCodesValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemRestfulInteractionValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIntentValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateStatusCodeValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRestfulInteractionValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitsOfTimeValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3ConfidentialityClassificationValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VitalSignsUnitsValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDesc,
			NumEnums:      27,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_valuesets_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_valuesets_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_r4_core_valuesets_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_valuesets_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_valuesets_proto = out.File
	file_proto_google_fhir_proto_r4_core_valuesets_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_valuesets_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_valuesets_proto_depIdxs = nil
}
