//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/stu3/metadatatypes.proto

package metadatatypes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for BackboneElement, last updated
// 2017-04-19T07:44:43.294+10:00. Base for elements defined inside a resource.
// See http://hl7.org/fhir/StructureDefinition/BackboneElement
type BackboneElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
}

func (x *BackboneElement) Reset() {
	*x = BackboneElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackboneElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackboneElement) ProtoMessage() {}

func (x *BackboneElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackboneElement.ProtoReflect.Descriptor instead.
func (*BackboneElement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{0}
}

func (x *BackboneElement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackboneElement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *BackboneElement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

// Auto-generated from StructureDefinition for ContactDetail, last updated
// 2017-04-19T07:44:43.294+10:00. Contact information. See
// http://hl7.org/fhir/StructureDefinition/ContactDetail
type ContactDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name of an individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or organization
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,4,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *ContactDetail) Reset() {
	*x = ContactDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactDetail) ProtoMessage() {}

func (x *ContactDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactDetail.ProtoReflect.Descriptor instead.
func (*ContactDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{1}
}

func (x *ContactDetail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactDetail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ContactDetail) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ContactDetail) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Auto-generated from StructureDefinition for Contributor, last updated
// 2017-04-19T07:44:43.294+10:00. Contributor information. See
// http://hl7.org/fhir/StructureDefinition/Contributor
type Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// author | editor | reviewer | endorser
	Type *codes_go_proto.ContributorTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Who contributed the content
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details of the contributor
	Contact []*ContactDetail `protobuf:"bytes,5,rep,name=contact,proto3" json:"contact,omitempty"`
}

func (x *Contributor) Reset() {
	*x = Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor) ProtoMessage() {}

func (x *Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor.ProtoReflect.Descriptor instead.
func (*Contributor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{2}
}

func (x *Contributor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contributor) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contributor) GetType() *codes_go_proto.ContributorTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contributor) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Contributor) GetContact() []*ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

// Auto-generated from StructureDefinition for DataRequirement, last updated
// 2017-04-19T07:44:43.294+10:00. Describes a required data item. See
// http://hl7.org/fhir/StructureDefinition/DataRequirement
type DataRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The type of the required data
	Type *codes_go_proto.FHIRAllTypesCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The profile of the required data
	Profile []*datatypes_go_proto.Uri `protobuf:"bytes,4,rep,name=profile,proto3" json:"profile,omitempty"`
	// Indicates that specific structure elements are referenced by the knowledge
	// module
	MustSupport []*datatypes_go_proto.String  `protobuf:"bytes,5,rep,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	CodeFilter  []*DataRequirement_CodeFilter `protobuf:"bytes,6,rep,name=code_filter,json=codeFilter,proto3" json:"code_filter,omitempty"`
	DateFilter  []*DataRequirement_DateFilter `protobuf:"bytes,7,rep,name=date_filter,json=dateFilter,proto3" json:"date_filter,omitempty"`
}

func (x *DataRequirement) Reset() {
	*x = DataRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement) ProtoMessage() {}

func (x *DataRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement.ProtoReflect.Descriptor instead.
func (*DataRequirement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{3}
}

func (x *DataRequirement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement) GetType() *codes_go_proto.FHIRAllTypesCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DataRequirement) GetProfile() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *DataRequirement) GetMustSupport() []*datatypes_go_proto.String {
	if x != nil {
		return x.MustSupport
	}
	return nil
}

func (x *DataRequirement) GetCodeFilter() []*DataRequirement_CodeFilter {
	if x != nil {
		return x.CodeFilter
	}
	return nil
}

func (x *DataRequirement) GetDateFilter() []*DataRequirement_DateFilter {
	if x != nil {
		return x.DateFilter
	}
	return nil
}

// Auto-generated from StructureDefinition for Element, last updated
// 2017-04-19T07:44:43.294+10:00. Base for all elements. See
// http://hl7.org/fhir/StructureDefinition/Element
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{4}
}

func (x *Element) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Element) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for ElementDefinition, last updated
// 2017-04-19T07:44:43.294+10:00. Definition of an element in a resource or
// extension. See http://hl7.org/fhir/StructureDefinition/ElementDefinition
type ElementDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path of the element in the hierarchy of elements
	Path *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// xmlAttr | xmlText | typeAttr | cdaText | xhtml
	Representation []*codes_go_proto.PropertyRepresentationCode `protobuf:"bytes,4,rep,name=representation,proto3" json:"representation,omitempty"`
	// Name for this particular element (in a set of slices)
	SliceName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=slice_name,json=sliceName,proto3" json:"slice_name,omitempty"`
	// Name for element to display with or prompt for element
	Label *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// Corresponding codes in terminologies
	Code    []*datatypes_go_proto.Coding `protobuf:"bytes,7,rep,name=code,proto3" json:"code,omitempty"`
	Slicing *ElementDefinition_Slicing   `protobuf:"bytes,8,opt,name=slicing,proto3" json:"slicing,omitempty"`
	// Concise definition for space-constrained presentation
	Short *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=short,proto3" json:"short,omitempty"`
	// Full formal definition as narrative text
	Definition *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
	// Comments about the use of this element
	Comment *datatypes_go_proto.Markdown `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// Why this resource has been created
	Requirements *datatypes_go_proto.Markdown `protobuf:"bytes,12,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Other names
	Alias []*datatypes_go_proto.String `protobuf:"bytes,13,rep,name=alias,proto3" json:"alias,omitempty"`
	// Minimum Cardinality
	Min *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum Cardinality (a number or *)
	Max  *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=max,proto3" json:"max,omitempty"`
	Base *ElementDefinition_Base    `protobuf:"bytes,16,opt,name=base,proto3" json:"base,omitempty"`
	// Reference to definition of content for the element
	ContentReference *datatypes_go_proto.Uri         `protobuf:"bytes,17,opt,name=content_reference,json=contentReference,proto3" json:"content_reference,omitempty"`
	Type             []*ElementDefinition_TypeRef    `protobuf:"bytes,18,rep,name=type,proto3" json:"type,omitempty"`
	DefaultValue     *ElementDefinition_DefaultValue `protobuf:"bytes,19,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Implicit meaning when this element is missing
	MeaningWhenMissing *datatypes_go_proto.Markdown `protobuf:"bytes,20,opt,name=meaning_when_missing,json=meaningWhenMissing,proto3" json:"meaning_when_missing,omitempty"`
	// What the order of the elements means
	OrderMeaning *datatypes_go_proto.String   `protobuf:"bytes,21,opt,name=order_meaning,json=orderMeaning,proto3" json:"order_meaning,omitempty"`
	Fixed        *ElementDefinition_Fixed     `protobuf:"bytes,22,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Pattern      *ElementDefinition_Pattern   `protobuf:"bytes,23,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Example      []*ElementDefinition_Example `protobuf:"bytes,24,rep,name=example,proto3" json:"example,omitempty"`
	MinValue     *ElementDefinition_MinValue  `protobuf:"bytes,25,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue     *ElementDefinition_MaxValue  `protobuf:"bytes,26,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Max length for strings
	MaxLength *datatypes_go_proto.Integer `protobuf:"bytes,27,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Reference to invariant about presence
	Condition  []*datatypes_go_proto.Id        `protobuf:"bytes,28,rep,name=condition,proto3" json:"condition,omitempty"`
	Constraint []*ElementDefinition_Constraint `protobuf:"bytes,29,rep,name=constraint,proto3" json:"constraint,omitempty"`
	// If the element must supported
	MustSupport *datatypes_go_proto.Boolean `protobuf:"bytes,30,opt,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	// If this modifies the meaning of other elements
	IsModifier *datatypes_go_proto.Boolean `protobuf:"bytes,31,opt,name=is_modifier,json=isModifier,proto3" json:"is_modifier,omitempty"`
	// Include when _summary = true?
	IsSummary *datatypes_go_proto.Boolean                 `protobuf:"bytes,32,opt,name=is_summary,json=isSummary,proto3" json:"is_summary,omitempty"`
	Binding   *ElementDefinition_ElementDefinitionBinding `protobuf:"bytes,33,opt,name=binding,proto3" json:"binding,omitempty"`
	Mapping   []*ElementDefinition_Mapping                `protobuf:"bytes,34,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *ElementDefinition) Reset() {
	*x = ElementDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition) ProtoMessage() {}

func (x *ElementDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition.ProtoReflect.Descriptor instead.
func (*ElementDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5}
}

func (x *ElementDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementDefinition) GetRepresentation() []*codes_go_proto.PropertyRepresentationCode {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *ElementDefinition) GetSliceName() *datatypes_go_proto.String {
	if x != nil {
		return x.SliceName
	}
	return nil
}

func (x *ElementDefinition) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementDefinition) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition) GetSlicing() *ElementDefinition_Slicing {
	if x != nil {
		return x.Slicing
	}
	return nil
}

func (x *ElementDefinition) GetShort() *datatypes_go_proto.String {
	if x != nil {
		return x.Short
	}
	return nil
}

func (x *ElementDefinition) GetDefinition() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ElementDefinition) GetComment() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ElementDefinition) GetRequirements() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementDefinition) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ElementDefinition) GetMin() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementDefinition) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ElementDefinition) GetBase() *ElementDefinition_Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ElementDefinition) GetContentReference() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ContentReference
	}
	return nil
}

func (x *ElementDefinition) GetType() []*ElementDefinition_TypeRef {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ElementDefinition) GetDefaultValue() *ElementDefinition_DefaultValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ElementDefinition) GetMeaningWhenMissing() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.MeaningWhenMissing
	}
	return nil
}

func (x *ElementDefinition) GetOrderMeaning() *datatypes_go_proto.String {
	if x != nil {
		return x.OrderMeaning
	}
	return nil
}

func (x *ElementDefinition) GetFixed() *ElementDefinition_Fixed {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *ElementDefinition) GetPattern() *ElementDefinition_Pattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *ElementDefinition) GetExample() []*ElementDefinition_Example {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *ElementDefinition) GetMinValue() *ElementDefinition_MinValue {
	if x != nil {
		return x.MinValue
	}
	return nil
}

func (x *ElementDefinition) GetMaxValue() *ElementDefinition_MaxValue {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

func (x *ElementDefinition) GetMaxLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *ElementDefinition) GetCondition() []*datatypes_go_proto.Id {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ElementDefinition) GetConstraint() []*ElementDefinition_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *ElementDefinition) GetMustSupport() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.MustSupport
	}
	return nil
}

func (x *ElementDefinition) GetIsModifier() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsModifier
	}
	return nil
}

func (x *ElementDefinition) GetIsSummary() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsSummary
	}
	return nil
}

func (x *ElementDefinition) GetBinding() *ElementDefinition_ElementDefinitionBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *ElementDefinition) GetMapping() []*ElementDefinition_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

// Auto-generated from StructureDefinition for Narrative, last updated
// 2017-04-19T07:44:43.294+10:00. A human-readable formatted text, including
// images. See http://hl7.org/fhir/StructureDefinition/Narrative
type Narrative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// generated | extensions | additional | empty
	Status *codes_go_proto.NarrativeStatusCode `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Limited xhtml content
	Div *datatypes_go_proto.Xhtml `protobuf:"bytes,4,opt,name=div,proto3" json:"div,omitempty"`
}

func (x *Narrative) Reset() {
	*x = Narrative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Narrative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Narrative) ProtoMessage() {}

func (x *Narrative) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Narrative.ProtoReflect.Descriptor instead.
func (*Narrative) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{6}
}

func (x *Narrative) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Narrative) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Narrative) GetStatus() *codes_go_proto.NarrativeStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Narrative) GetDiv() *datatypes_go_proto.Xhtml {
	if x != nil {
		return x.Div
	}
	return nil
}

// Auto-generated from StructureDefinition for ParameterDefinition, last updated
// 2017-04-19T07:44:43.294+10:00. Definition of a parameter to a module. See
// http://hl7.org/fhir/StructureDefinition/ParameterDefinition
type ParameterDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name used to access the parameter value
	Name *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// in | out
	Use *codes_go_proto.OperationParameterUseCode `protobuf:"bytes,4,opt,name=use,proto3" json:"use,omitempty"`
	// Minimum cardinality
	Min *datatypes_go_proto.Integer `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum cardinality (a number of *)
	Max *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=max,proto3" json:"max,omitempty"`
	// A brief description of the parameter
	Documentation *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// What type of value
	Type *codes_go_proto.FHIRAllTypesCode `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// What profile the value is expected to be
	Profile *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ParameterDefinition) Reset() {
	*x = ParameterDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDefinition) ProtoMessage() {}

func (x *ParameterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDefinition.ProtoReflect.Descriptor instead.
func (*ParameterDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{7}
}

func (x *ParameterDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParameterDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ParameterDefinition) GetName() *datatypes_go_proto.Code {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ParameterDefinition) GetUse() *codes_go_proto.OperationParameterUseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *ParameterDefinition) GetMin() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ParameterDefinition) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ParameterDefinition) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *ParameterDefinition) GetType() *codes_go_proto.FHIRAllTypesCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ParameterDefinition) GetProfile() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Auto-generated from StructureDefinition for RelatedArtifact, last updated
// 2017-04-19T07:44:43.294+10:00. Related artifacts for a knowledge resource.
// See http://hl7.org/fhir/StructureDefinition/RelatedArtifact
type RelatedArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// documentation | justification | citation | predecessor | successor |
	// derived-from | depends-on | composed-of
	Type *codes_go_proto.RelatedArtifactTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Brief description of the related artifact
	Display *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
	// Bibliographic citation for the artifact
	Citation *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=citation,proto3" json:"citation,omitempty"`
	// Where the artifact can be accessed
	Url *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// What document is being referenced
	Document *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=document,proto3" json:"document,omitempty"`
	// What resource is being referenced
	Resource *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *RelatedArtifact) Reset() {
	*x = RelatedArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifact) ProtoMessage() {}

func (x *RelatedArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifact.ProtoReflect.Descriptor instead.
func (*RelatedArtifact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{8}
}

func (x *RelatedArtifact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedArtifact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RelatedArtifact) GetType() *codes_go_proto.RelatedArtifactTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RelatedArtifact) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *RelatedArtifact) GetCitation() *datatypes_go_proto.String {
	if x != nil {
		return x.Citation
	}
	return nil
}

func (x *RelatedArtifact) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *RelatedArtifact) GetDocument() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *RelatedArtifact) GetResource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Resource
	}
	return nil
}

// Auto-generated from StructureDefinition for TriggerDefinition, last updated
// 2017-04-19T07:44:43.294+10:00. Defines an expected trigger for a module. See
// http://hl7.org/fhir/StructureDefinition/TriggerDefinition
type TriggerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// named-event | periodic | data-added | data-modified | data-removed |
	// data-accessed | data-access-ended
	Type *codes_go_proto.TriggerTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Triggering event name
	EventName   *datatypes_go_proto.String     `protobuf:"bytes,4,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	EventTiming *TriggerDefinition_EventTiming `protobuf:"bytes,5,opt,name=event_timing,json=eventTiming,proto3" json:"event_timing,omitempty"`
	// Triggering data of the event
	EventData *DataRequirement `protobuf:"bytes,6,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
}

func (x *TriggerDefinition) Reset() {
	*x = TriggerDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDefinition) ProtoMessage() {}

func (x *TriggerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDefinition.ProtoReflect.Descriptor instead.
func (*TriggerDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{9}
}

func (x *TriggerDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TriggerDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TriggerDefinition) GetType() *codes_go_proto.TriggerTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TriggerDefinition) GetEventName() *datatypes_go_proto.String {
	if x != nil {
		return x.EventName
	}
	return nil
}

func (x *TriggerDefinition) GetEventTiming() *TriggerDefinition_EventTiming {
	if x != nil {
		return x.EventTiming
	}
	return nil
}

func (x *TriggerDefinition) GetEventData() *DataRequirement {
	if x != nil {
		return x.EventData
	}
	return nil
}

// Auto-generated from StructureDefinition for UsageContext, last updated
// 2017-04-19T07:44:43.294+10:00. Describes the context of use for a conformance
// or knowledge resource. See
// http://hl7.org/fhir/StructureDefinition/UsageContext
type UsageContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Type of context being specified
	Code  *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Value *UsageContext_Value        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UsageContext) Reset() {
	*x = UsageContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageContext) ProtoMessage() {}

func (x *UsageContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageContext.ProtoReflect.Descriptor instead.
func (*UsageContext) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{10}
}

func (x *UsageContext) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsageContext) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsageContext) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsageContext) GetValue() *UsageContext_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// What codes are expected
type DataRequirement_CodeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The code-valued attribute of the filter
	Path     *datatypes_go_proto.String           `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	ValueSet *DataRequirement_CodeFilter_ValueSet `protobuf:"bytes,4,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	// What code is expected
	ValueCode []*datatypes_go_proto.Code `protobuf:"bytes,5,rep,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
	// What Coding is expected
	ValueCoding []*datatypes_go_proto.Coding `protobuf:"bytes,6,rep,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
	// What CodeableConcept is expected
	ValueCodeableConcept []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *DataRequirement_CodeFilter) Reset() {
	*x = DataRequirement_CodeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_CodeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_CodeFilter) ProtoMessage() {}

func (x *DataRequirement_CodeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_CodeFilter.ProtoReflect.Descriptor instead.
func (*DataRequirement_CodeFilter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DataRequirement_CodeFilter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetValueSet() *DataRequirement_CodeFilter_ValueSet {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetValueCode() []*datatypes_go_proto.Code {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetValueCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetValueCodeableConcept() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// What dates/date ranges are expected
type DataRequirement_DateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The date-valued attribute of the filter
	Path  *datatypes_go_proto.String        `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Value *DataRequirement_DateFilter_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataRequirement_DateFilter) Reset() {
	*x = DataRequirement_DateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_DateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_DateFilter) ProtoMessage() {}

func (x *DataRequirement_DateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_DateFilter.ProtoReflect.Descriptor instead.
func (*DataRequirement_DateFilter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{3, 1}
}

func (x *DataRequirement_DateFilter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetValue() *DataRequirement_DateFilter_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Valueset for the filter
type DataRequirement_CodeFilter_ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueSet:
	//	*DataRequirement_CodeFilter_ValueSet_StringValue
	//	*DataRequirement_CodeFilter_ValueSet_Reference
	ValueSet isDataRequirement_CodeFilter_ValueSet_ValueSet `protobuf_oneof:"value_set"`
}

func (x *DataRequirement_CodeFilter_ValueSet) Reset() {
	*x = DataRequirement_CodeFilter_ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_CodeFilter_ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_CodeFilter_ValueSet) ProtoMessage() {}

func (x *DataRequirement_CodeFilter_ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_CodeFilter_ValueSet.ProtoReflect.Descriptor instead.
func (*DataRequirement_CodeFilter_ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (m *DataRequirement_CodeFilter_ValueSet) GetValueSet() isDataRequirement_CodeFilter_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (x *DataRequirement_CodeFilter_ValueSet) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValueSet().(*DataRequirement_CodeFilter_ValueSet_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *DataRequirement_CodeFilter_ValueSet) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValueSet().(*DataRequirement_CodeFilter_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

type isDataRequirement_CodeFilter_ValueSet_ValueSet interface {
	isDataRequirement_CodeFilter_ValueSet_ValueSet()
}

type DataRequirement_CodeFilter_ValueSet_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type DataRequirement_CodeFilter_ValueSet_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*DataRequirement_CodeFilter_ValueSet_StringValue) isDataRequirement_CodeFilter_ValueSet_ValueSet() {
}

func (*DataRequirement_CodeFilter_ValueSet_Reference) isDataRequirement_CodeFilter_ValueSet_ValueSet() {
}

// The value of the filter, as a Period, DateTime, or Duration value
type DataRequirement_DateFilter_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*DataRequirement_DateFilter_Value_DateTime
	//	*DataRequirement_DateFilter_Value_Period
	//	*DataRequirement_DateFilter_Value_Duration
	Value isDataRequirement_DateFilter_Value_Value `protobuf_oneof:"value"`
}

func (x *DataRequirement_DateFilter_Value) Reset() {
	*x = DataRequirement_DateFilter_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_DateFilter_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_DateFilter_Value) ProtoMessage() {}

func (x *DataRequirement_DateFilter_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_DateFilter_Value.ProtoReflect.Descriptor instead.
func (*DataRequirement_DateFilter_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{3, 1, 0}
}

func (m *DataRequirement_DateFilter_Value) GetValue() isDataRequirement_DateFilter_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DataRequirement_DateFilter_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*DataRequirement_DateFilter_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *DataRequirement_DateFilter_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*DataRequirement_DateFilter_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (x *DataRequirement_DateFilter_Value) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetValue().(*DataRequirement_DateFilter_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

type isDataRequirement_DateFilter_Value_Value interface {
	isDataRequirement_DateFilter_Value_Value()
}

type DataRequirement_DateFilter_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type DataRequirement_DateFilter_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type DataRequirement_DateFilter_Value_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

func (*DataRequirement_DateFilter_Value_DateTime) isDataRequirement_DateFilter_Value_Value() {}

func (*DataRequirement_DateFilter_Value_Period) isDataRequirement_DateFilter_Value_Value() {}

func (*DataRequirement_DateFilter_Value_Duration) isDataRequirement_DateFilter_Value_Value() {}

// This element is sliced - slices follow
type ElementDefinition_Slicing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension     []*datatypes_go_proto.Extension            `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Discriminator []*ElementDefinition_Slicing_Discriminator `protobuf:"bytes,3,rep,name=discriminator,proto3" json:"discriminator,omitempty"`
	// Text description of how slicing works (or not)
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// If elements must be in same order as slices
	Ordered *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=ordered,proto3" json:"ordered,omitempty"`
	// closed | open | openAtEnd
	Rules *codes_go_proto.SlicingRulesCode `protobuf:"bytes,6,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ElementDefinition_Slicing) Reset() {
	*x = ElementDefinition_Slicing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing) ProtoMessage() {}

func (x *ElementDefinition_Slicing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ElementDefinition_Slicing) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetDiscriminator() []*ElementDefinition_Slicing_Discriminator {
	if x != nil {
		return x.Discriminator
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetOrdered() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Ordered
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetRules() *codes_go_proto.SlicingRulesCode {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Base definition information for tools
type ElementDefinition_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path that identifies the base element
	Path *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Min cardinality of the base element
	Min *datatypes_go_proto.UnsignedInt `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	// Max cardinality of the base element
	Max *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ElementDefinition_Base) Reset() {
	*x = ElementDefinition_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Base) ProtoMessage() {}

func (x *ElementDefinition_Base) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Base.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Base) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ElementDefinition_Base) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Base) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Base) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementDefinition_Base) GetMin() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementDefinition_Base) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

// Data type and Profile for this element
type ElementDefinition_TypeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Data type or Resource (reference to definition)
	Code *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Profile (StructureDefinition) to apply (or IG)
	Profile *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	// Profile (StructureDefinition) to apply to reference target (or IG)
	TargetProfile *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=target_profile,json=targetProfile,proto3" json:"target_profile,omitempty"`
	// contained | referenced | bundled - how aggregated
	Aggregation []*codes_go_proto.AggregationModeCode `protobuf:"bytes,6,rep,name=aggregation,proto3" json:"aggregation,omitempty"`
	// either | independent | specific
	Versioning *codes_go_proto.ReferenceVersionRulesCode `protobuf:"bytes,7,opt,name=versioning,proto3" json:"versioning,omitempty"`
}

func (x *ElementDefinition_TypeRef) Reset() {
	*x = ElementDefinition_TypeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_TypeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_TypeRef) ProtoMessage() {}

func (x *ElementDefinition_TypeRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_TypeRef.ProtoReflect.Descriptor instead.
func (*ElementDefinition_TypeRef) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ElementDefinition_TypeRef) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetCode() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetProfile() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetTargetProfile() *datatypes_go_proto.Uri {
	if x != nil {
		return x.TargetProfile
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetAggregation() []*codes_go_proto.AggregationModeCode {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetVersioning() *codes_go_proto.ReferenceVersionRulesCode {
	if x != nil {
		return x.Versioning
	}
	return nil
}

// Specified value if missing from instance
type ElementDefinition_DefaultValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DefaultValue:
	//	*ElementDefinition_DefaultValue_Base64Binary
	//	*ElementDefinition_DefaultValue_Boolean
	//	*ElementDefinition_DefaultValue_Code
	//	*ElementDefinition_DefaultValue_Date
	//	*ElementDefinition_DefaultValue_DateTime
	//	*ElementDefinition_DefaultValue_Decimal
	//	*ElementDefinition_DefaultValue_Id
	//	*ElementDefinition_DefaultValue_Instant
	//	*ElementDefinition_DefaultValue_Integer
	//	*ElementDefinition_DefaultValue_Markdown
	//	*ElementDefinition_DefaultValue_Oid
	//	*ElementDefinition_DefaultValue_PositiveInt
	//	*ElementDefinition_DefaultValue_StringValue
	//	*ElementDefinition_DefaultValue_Time
	//	*ElementDefinition_DefaultValue_UnsignedInt
	//	*ElementDefinition_DefaultValue_Uri
	//	*ElementDefinition_DefaultValue_Address
	//	*ElementDefinition_DefaultValue_Age
	//	*ElementDefinition_DefaultValue_Annotation
	//	*ElementDefinition_DefaultValue_Attachment
	//	*ElementDefinition_DefaultValue_CodeableConcept
	//	*ElementDefinition_DefaultValue_Coding
	//	*ElementDefinition_DefaultValue_ContactPoint
	//	*ElementDefinition_DefaultValue_Count
	//	*ElementDefinition_DefaultValue_Distance
	//	*ElementDefinition_DefaultValue_Duration
	//	*ElementDefinition_DefaultValue_HumanName
	//	*ElementDefinition_DefaultValue_Identifier
	//	*ElementDefinition_DefaultValue_Money
	//	*ElementDefinition_DefaultValue_Period
	//	*ElementDefinition_DefaultValue_Quantity
	//	*ElementDefinition_DefaultValue_Range
	//	*ElementDefinition_DefaultValue_Ratio
	//	*ElementDefinition_DefaultValue_Reference
	//	*ElementDefinition_DefaultValue_SampledData
	//	*ElementDefinition_DefaultValue_Signature
	//	*ElementDefinition_DefaultValue_Timing
	//	*ElementDefinition_DefaultValue_Meta
	DefaultValue isElementDefinition_DefaultValue_DefaultValue `protobuf_oneof:"default_value"`
}

func (x *ElementDefinition_DefaultValue) Reset() {
	*x = ElementDefinition_DefaultValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_DefaultValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_DefaultValue) ProtoMessage() {}

func (x *ElementDefinition_DefaultValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_DefaultValue.ProtoReflect.Descriptor instead.
func (*ElementDefinition_DefaultValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 3}
}

func (m *ElementDefinition_DefaultValue) GetDefaultValue() isElementDefinition_DefaultValue_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_DefaultValue_DefaultValue interface {
	isElementDefinition_DefaultValue_DefaultValue()
}

type ElementDefinition_DefaultValue_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_DefaultValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_DefaultValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_DefaultValue_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_DefaultValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_DefaultValue_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_DefaultValue_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_DefaultValue_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_DefaultValue_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_DefaultValue_Base64Binary) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Boolean) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Code) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Date) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_DateTime) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Decimal) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Id) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Instant) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Integer) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Markdown) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Oid) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_PositiveInt) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_StringValue) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Time) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_UnsignedInt) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Uri) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Address) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Age) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Annotation) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Attachment) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_CodeableConcept) isElementDefinition_DefaultValue_DefaultValue() {
}

func (*ElementDefinition_DefaultValue_Coding) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_ContactPoint) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Count) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Distance) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Duration) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_HumanName) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Identifier) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Money) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Period) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Quantity) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Range) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Ratio) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Reference) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_SampledData) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Signature) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Timing) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Meta) isElementDefinition_DefaultValue_DefaultValue() {}

// Value must be exactly this
type ElementDefinition_Fixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Fixed:
	//	*ElementDefinition_Fixed_Base64Binary
	//	*ElementDefinition_Fixed_Boolean
	//	*ElementDefinition_Fixed_Code
	//	*ElementDefinition_Fixed_Date
	//	*ElementDefinition_Fixed_DateTime
	//	*ElementDefinition_Fixed_Decimal
	//	*ElementDefinition_Fixed_Id
	//	*ElementDefinition_Fixed_Instant
	//	*ElementDefinition_Fixed_Integer
	//	*ElementDefinition_Fixed_Markdown
	//	*ElementDefinition_Fixed_Oid
	//	*ElementDefinition_Fixed_PositiveInt
	//	*ElementDefinition_Fixed_StringValue
	//	*ElementDefinition_Fixed_Time
	//	*ElementDefinition_Fixed_UnsignedInt
	//	*ElementDefinition_Fixed_Uri
	//	*ElementDefinition_Fixed_Address
	//	*ElementDefinition_Fixed_Age
	//	*ElementDefinition_Fixed_Annotation
	//	*ElementDefinition_Fixed_Attachment
	//	*ElementDefinition_Fixed_CodeableConcept
	//	*ElementDefinition_Fixed_Coding
	//	*ElementDefinition_Fixed_ContactPoint
	//	*ElementDefinition_Fixed_Count
	//	*ElementDefinition_Fixed_Distance
	//	*ElementDefinition_Fixed_Duration
	//	*ElementDefinition_Fixed_HumanName
	//	*ElementDefinition_Fixed_Identifier
	//	*ElementDefinition_Fixed_Money
	//	*ElementDefinition_Fixed_Period
	//	*ElementDefinition_Fixed_Quantity
	//	*ElementDefinition_Fixed_Range
	//	*ElementDefinition_Fixed_Ratio
	//	*ElementDefinition_Fixed_Reference
	//	*ElementDefinition_Fixed_SampledData
	//	*ElementDefinition_Fixed_Signature
	//	*ElementDefinition_Fixed_Timing
	//	*ElementDefinition_Fixed_Meta
	Fixed isElementDefinition_Fixed_Fixed `protobuf_oneof:"fixed"`
}

func (x *ElementDefinition_Fixed) Reset() {
	*x = ElementDefinition_Fixed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Fixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Fixed) ProtoMessage() {}

func (x *ElementDefinition_Fixed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Fixed.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Fixed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 4}
}

func (m *ElementDefinition_Fixed) GetFixed() isElementDefinition_Fixed_Fixed {
	if m != nil {
		return m.Fixed
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Fixed_Fixed interface {
	isElementDefinition_Fixed_Fixed()
}

type ElementDefinition_Fixed_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Fixed_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Fixed_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Fixed_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Fixed_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Fixed_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Fixed_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Fixed_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Fixed_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Fixed_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Fixed_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Fixed_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Fixed_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Fixed_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Fixed_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Fixed_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Fixed_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Fixed_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Fixed_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Fixed_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Fixed_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Fixed_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Fixed_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Fixed_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Fixed_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Fixed_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Fixed_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Fixed_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Fixed_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Fixed_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Fixed_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Fixed_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Fixed_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Fixed_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Fixed_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Fixed_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Fixed_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Fixed_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Fixed_Base64Binary) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Boolean) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Code) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Date) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_DateTime) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Decimal) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Id) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Instant) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Integer) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Markdown) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Oid) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_PositiveInt) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_StringValue) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Time) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_UnsignedInt) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Uri) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Address) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Age) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Annotation) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Attachment) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_CodeableConcept) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Coding) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_ContactPoint) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Count) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Distance) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Duration) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_HumanName) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Identifier) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Money) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Period) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Quantity) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Range) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Ratio) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Reference) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_SampledData) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Signature) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Timing) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Meta) isElementDefinition_Fixed_Fixed() {}

// Value must have at least these property values
type ElementDefinition_Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pattern:
	//	*ElementDefinition_Pattern_Base64Binary
	//	*ElementDefinition_Pattern_Boolean
	//	*ElementDefinition_Pattern_Code
	//	*ElementDefinition_Pattern_Date
	//	*ElementDefinition_Pattern_DateTime
	//	*ElementDefinition_Pattern_Decimal
	//	*ElementDefinition_Pattern_Id
	//	*ElementDefinition_Pattern_Instant
	//	*ElementDefinition_Pattern_Integer
	//	*ElementDefinition_Pattern_Markdown
	//	*ElementDefinition_Pattern_Oid
	//	*ElementDefinition_Pattern_PositiveInt
	//	*ElementDefinition_Pattern_StringValue
	//	*ElementDefinition_Pattern_Time
	//	*ElementDefinition_Pattern_UnsignedInt
	//	*ElementDefinition_Pattern_Uri
	//	*ElementDefinition_Pattern_Address
	//	*ElementDefinition_Pattern_Age
	//	*ElementDefinition_Pattern_Annotation
	//	*ElementDefinition_Pattern_Attachment
	//	*ElementDefinition_Pattern_CodeableConcept
	//	*ElementDefinition_Pattern_Coding
	//	*ElementDefinition_Pattern_ContactPoint
	//	*ElementDefinition_Pattern_Count
	//	*ElementDefinition_Pattern_Distance
	//	*ElementDefinition_Pattern_Duration
	//	*ElementDefinition_Pattern_HumanName
	//	*ElementDefinition_Pattern_Identifier
	//	*ElementDefinition_Pattern_Money
	//	*ElementDefinition_Pattern_Period
	//	*ElementDefinition_Pattern_Quantity
	//	*ElementDefinition_Pattern_Range
	//	*ElementDefinition_Pattern_Ratio
	//	*ElementDefinition_Pattern_Reference
	//	*ElementDefinition_Pattern_SampledData
	//	*ElementDefinition_Pattern_Signature
	//	*ElementDefinition_Pattern_Timing
	//	*ElementDefinition_Pattern_Meta
	Pattern isElementDefinition_Pattern_Pattern `protobuf_oneof:"pattern"`
}

func (x *ElementDefinition_Pattern) Reset() {
	*x = ElementDefinition_Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Pattern) ProtoMessage() {}

func (x *ElementDefinition_Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Pattern.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Pattern) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 5}
}

func (m *ElementDefinition_Pattern) GetPattern() isElementDefinition_Pattern_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Pattern_Pattern interface {
	isElementDefinition_Pattern_Pattern()
}

type ElementDefinition_Pattern_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Pattern_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Pattern_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Pattern_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Pattern_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Pattern_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Pattern_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Pattern_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Pattern_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Pattern_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Pattern_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Pattern_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Pattern_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Pattern_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Pattern_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Pattern_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Pattern_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Pattern_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Pattern_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Pattern_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Pattern_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Pattern_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Pattern_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Pattern_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Pattern_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Pattern_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Pattern_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Pattern_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Pattern_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Pattern_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Pattern_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Pattern_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Pattern_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Pattern_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Pattern_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Pattern_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Pattern_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Pattern_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Pattern_Base64Binary) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Boolean) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Code) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Date) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_DateTime) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Decimal) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Id) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Instant) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Integer) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Markdown) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Oid) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_PositiveInt) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_StringValue) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Time) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_UnsignedInt) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Uri) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Address) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Age) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Annotation) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Attachment) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_CodeableConcept) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Coding) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_ContactPoint) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Count) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Distance) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Duration) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_HumanName) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Identifier) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Money) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Period) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Quantity) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Range) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Ratio) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Reference) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_SampledData) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Signature) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Timing) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Meta) isElementDefinition_Pattern_Pattern() {}

// Example value (as defined for type)
type ElementDefinition_Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Describes the purpose of this example
	Label *datatypes_go_proto.String       `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Value *ElementDefinition_Example_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinition_Example) Reset() {
	*x = ElementDefinition_Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Example) ProtoMessage() {}

func (x *ElementDefinition_Example) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Example.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Example) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 6}
}

func (x *ElementDefinition_Example) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Example) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Example) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementDefinition_Example) GetValue() *ElementDefinition_Example_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Minimum Allowed Value (for some types)
type ElementDefinition_MinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MinValue:
	//	*ElementDefinition_MinValue_Date
	//	*ElementDefinition_MinValue_DateTime
	//	*ElementDefinition_MinValue_Instant
	//	*ElementDefinition_MinValue_Time
	//	*ElementDefinition_MinValue_Decimal
	//	*ElementDefinition_MinValue_Integer
	//	*ElementDefinition_MinValue_PositiveInt
	//	*ElementDefinition_MinValue_UnsignedInt
	//	*ElementDefinition_MinValue_Quantity
	MinValue isElementDefinition_MinValue_MinValue `protobuf_oneof:"min_value"`
}

func (x *ElementDefinition_MinValue) Reset() {
	*x = ElementDefinition_MinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_MinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_MinValue) ProtoMessage() {}

func (x *ElementDefinition_MinValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_MinValue.ProtoReflect.Descriptor instead.
func (*ElementDefinition_MinValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 7}
}

func (m *ElementDefinition_MinValue) GetMinValue() isElementDefinition_MinValue_MinValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isElementDefinition_MinValue_MinValue interface {
	isElementDefinition_MinValue_MinValue()
}

type ElementDefinition_MinValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MinValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MinValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MinValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MinValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MinValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MinValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MinValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MinValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementDefinition_MinValue_Date) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_DateTime) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Instant) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Time) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Decimal) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Integer) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_PositiveInt) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_UnsignedInt) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Quantity) isElementDefinition_MinValue_MinValue() {}

// Maximum Allowed Value (for some types)
type ElementDefinition_MaxValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MaxValue:
	//	*ElementDefinition_MaxValue_Date
	//	*ElementDefinition_MaxValue_DateTime
	//	*ElementDefinition_MaxValue_Instant
	//	*ElementDefinition_MaxValue_Time
	//	*ElementDefinition_MaxValue_Decimal
	//	*ElementDefinition_MaxValue_Integer
	//	*ElementDefinition_MaxValue_PositiveInt
	//	*ElementDefinition_MaxValue_UnsignedInt
	//	*ElementDefinition_MaxValue_Quantity
	MaxValue isElementDefinition_MaxValue_MaxValue `protobuf_oneof:"max_value"`
}

func (x *ElementDefinition_MaxValue) Reset() {
	*x = ElementDefinition_MaxValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_MaxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_MaxValue) ProtoMessage() {}

func (x *ElementDefinition_MaxValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_MaxValue.ProtoReflect.Descriptor instead.
func (*ElementDefinition_MaxValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 8}
}

func (m *ElementDefinition_MaxValue) GetMaxValue() isElementDefinition_MaxValue_MaxValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isElementDefinition_MaxValue_MaxValue interface {
	isElementDefinition_MaxValue_MaxValue()
}

type ElementDefinition_MaxValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MaxValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MaxValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MaxValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MaxValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MaxValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MaxValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MaxValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MaxValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementDefinition_MaxValue_Date) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_DateTime) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Instant) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Time) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Decimal) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Integer) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_PositiveInt) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_UnsignedInt) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Quantity) isElementDefinition_MaxValue_MaxValue() {}

// Condition that must evaluate to true
type ElementDefinition_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Target of 'condition' reference above
	Key *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Why this constraint is necessary or appropriate
	Requirements *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// error | warning
	Severity *codes_go_proto.ConstraintSeverityCode `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	// Human description of constraint
	Human *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=human,proto3" json:"human,omitempty"`
	// FHIRPath expression of constraint
	Expression *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=expression,proto3" json:"expression,omitempty"`
	// XPath expression of constraint
	Xpath *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=xpath,proto3" json:"xpath,omitempty"`
	// Reference to original source of constraint
	Source *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ElementDefinition_Constraint) Reset() {
	*x = ElementDefinition_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Constraint) ProtoMessage() {}

func (x *ElementDefinition_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Constraint.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Constraint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 9}
}

func (x *ElementDefinition_Constraint) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetKey() *datatypes_go_proto.Id {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetSeverity() *codes_go_proto.ConstraintSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetHuman() *datatypes_go_proto.String {
	if x != nil {
		return x.Human
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetExpression() *datatypes_go_proto.String {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetXpath() *datatypes_go_proto.String {
	if x != nil {
		return x.Xpath
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetSource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Source
	}
	return nil
}

// ValueSet details if this is coded
type ElementDefinition_ElementDefinitionBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// required | extensible | preferred | example
	Strength *codes_go_proto.BindingStrengthCode `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	// Human explanation of the value set
	Description *datatypes_go_proto.String                           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ValueSet    *ElementDefinition_ElementDefinitionBinding_ValueSet `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *ElementDefinition_ElementDefinitionBinding) Reset() {
	*x = ElementDefinition_ElementDefinitionBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_ElementDefinitionBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_ElementDefinitionBinding) ProtoMessage() {}

func (x *ElementDefinition_ElementDefinitionBinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_ElementDefinitionBinding.ProtoReflect.Descriptor instead.
func (*ElementDefinition_ElementDefinitionBinding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 10}
}

func (x *ElementDefinition_ElementDefinitionBinding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetStrength() *codes_go_proto.BindingStrengthCode {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetValueSet() *ElementDefinition_ElementDefinitionBinding_ValueSet {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// Map element to another set of definitions
type ElementDefinition_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reference to mapping declaration
	Identity *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Computable language of mapping
	Language *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details of the mapping
	Map *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=map,proto3" json:"map,omitempty"`
	// Comments about the mapping or its use
	Comment *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ElementDefinition_Mapping) Reset() {
	*x = ElementDefinition_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Mapping) ProtoMessage() {}

func (x *ElementDefinition_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Mapping.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 11}
}

func (x *ElementDefinition_Mapping) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetIdentity() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetLanguage() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetMap() *datatypes_go_proto.String {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Element values that are used to distinguish the slices
type ElementDefinition_Slicing_Discriminator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// value | exists | pattern | type | profile
	Type *codes_go_proto.DiscriminatorTypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Path to element value
	Path *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ElementDefinition_Slicing_Discriminator) Reset() {
	*x = ElementDefinition_Slicing_Discriminator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing_Discriminator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing_Discriminator) ProtoMessage() {}

func (x *ElementDefinition_Slicing_Discriminator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing_Discriminator.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing_Discriminator) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *ElementDefinition_Slicing_Discriminator) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator) GetType() *codes_go_proto.DiscriminatorTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

// Value of Example (one of allowed types)
type ElementDefinition_Example_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementDefinition_Example_Value_Base64Binary
	//	*ElementDefinition_Example_Value_Boolean
	//	*ElementDefinition_Example_Value_Code
	//	*ElementDefinition_Example_Value_Date
	//	*ElementDefinition_Example_Value_DateTime
	//	*ElementDefinition_Example_Value_Decimal
	//	*ElementDefinition_Example_Value_Id
	//	*ElementDefinition_Example_Value_Instant
	//	*ElementDefinition_Example_Value_Integer
	//	*ElementDefinition_Example_Value_Markdown
	//	*ElementDefinition_Example_Value_Oid
	//	*ElementDefinition_Example_Value_PositiveInt
	//	*ElementDefinition_Example_Value_StringValue
	//	*ElementDefinition_Example_Value_Time
	//	*ElementDefinition_Example_Value_UnsignedInt
	//	*ElementDefinition_Example_Value_Uri
	//	*ElementDefinition_Example_Value_Address
	//	*ElementDefinition_Example_Value_Age
	//	*ElementDefinition_Example_Value_Annotation
	//	*ElementDefinition_Example_Value_Attachment
	//	*ElementDefinition_Example_Value_CodeableConcept
	//	*ElementDefinition_Example_Value_Coding
	//	*ElementDefinition_Example_Value_ContactPoint
	//	*ElementDefinition_Example_Value_Count
	//	*ElementDefinition_Example_Value_Distance
	//	*ElementDefinition_Example_Value_Duration
	//	*ElementDefinition_Example_Value_HumanName
	//	*ElementDefinition_Example_Value_Identifier
	//	*ElementDefinition_Example_Value_Money
	//	*ElementDefinition_Example_Value_Period
	//	*ElementDefinition_Example_Value_Quantity
	//	*ElementDefinition_Example_Value_Range
	//	*ElementDefinition_Example_Value_Ratio
	//	*ElementDefinition_Example_Value_Reference
	//	*ElementDefinition_Example_Value_SampledData
	//	*ElementDefinition_Example_Value_Signature
	//	*ElementDefinition_Example_Value_Timing
	//	*ElementDefinition_Example_Value_Meta
	Value isElementDefinition_Example_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementDefinition_Example_Value) Reset() {
	*x = ElementDefinition_Example_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Example_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Example_Value) ProtoMessage() {}

func (x *ElementDefinition_Example_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Example_Value.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Example_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 6, 0}
}

func (m *ElementDefinition_Example_Value) GetValue() isElementDefinition_Example_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Example_Value) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetValue().(*ElementDefinition_Example_Value_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Example_Value_Value interface {
	isElementDefinition_Example_Value_Value()
}

type ElementDefinition_Example_Value_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Example_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Example_Value_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Example_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Example_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Example_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Example_Value_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Example_Value_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Example_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Example_Value_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Example_Value_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Example_Value_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Example_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Example_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Example_Value_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Example_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Example_Value_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Example_Value_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Example_Value_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Example_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Example_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Example_Value_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Example_Value_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Example_Value_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Example_Value_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Example_Value_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Example_Value_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Example_Value_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Example_Value_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Example_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Example_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Example_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Example_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Example_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Example_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Example_Value_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Example_Value_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Example_Value_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Example_Value_Base64Binary) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Boolean) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Code) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Date) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_DateTime) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Decimal) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Id) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Instant) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Integer) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Markdown) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Oid) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_PositiveInt) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_StringValue) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Time) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_UnsignedInt) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Uri) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Address) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Age) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Annotation) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Attachment) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_CodeableConcept) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Coding) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_ContactPoint) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Count) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Distance) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Duration) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_HumanName) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Identifier) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Money) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Period) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Quantity) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Range) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Ratio) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Reference) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_SampledData) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Signature) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Timing) isElementDefinition_Example_Value_Value() {}

func (*ElementDefinition_Example_Value_Meta) isElementDefinition_Example_Value_Value() {}

// Source of value set
type ElementDefinition_ElementDefinitionBinding_ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueSet:
	//	*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri
	//	*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference
	ValueSet isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet `protobuf_oneof:"value_set"`
}

func (x *ElementDefinition_ElementDefinitionBinding_ValueSet) Reset() {
	*x = ElementDefinition_ElementDefinitionBinding_ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_ElementDefinitionBinding_ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_ElementDefinitionBinding_ValueSet) ProtoMessage() {}

func (x *ElementDefinition_ElementDefinitionBinding_ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_ElementDefinitionBinding_ValueSet.ProtoReflect.Descriptor instead.
func (*ElementDefinition_ElementDefinitionBinding_ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{5, 10, 0}
}

func (m *ElementDefinition_ElementDefinitionBinding_ValueSet) GetValueSet() isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_ValueSet) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValueSet().(*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_ValueSet) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValueSet().(*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet interface {
	isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet()
}

type ElementDefinition_ElementDefinitionBinding_ValueSet_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_ElementDefinitionBinding_ValueSet_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri) isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet() {
}

func (*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference) isElementDefinition_ElementDefinitionBinding_ValueSet_ValueSet() {
}

// Timing of the event
type TriggerDefinition_EventTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventTiming:
	//	*TriggerDefinition_EventTiming_Timing
	//	*TriggerDefinition_EventTiming_Reference
	//	*TriggerDefinition_EventTiming_Date
	//	*TriggerDefinition_EventTiming_DateTime
	EventTiming isTriggerDefinition_EventTiming_EventTiming `protobuf_oneof:"event_timing"`
}

func (x *TriggerDefinition_EventTiming) Reset() {
	*x = TriggerDefinition_EventTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDefinition_EventTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDefinition_EventTiming) ProtoMessage() {}

func (x *TriggerDefinition_EventTiming) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDefinition_EventTiming.ProtoReflect.Descriptor instead.
func (*TriggerDefinition_EventTiming) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{9, 0}
}

func (m *TriggerDefinition_EventTiming) GetEventTiming() isTriggerDefinition_EventTiming_EventTiming {
	if m != nil {
		return m.EventTiming
	}
	return nil
}

func (x *TriggerDefinition_EventTiming) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetEventTiming().(*TriggerDefinition_EventTiming_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *TriggerDefinition_EventTiming) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetEventTiming().(*TriggerDefinition_EventTiming_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *TriggerDefinition_EventTiming) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetEventTiming().(*TriggerDefinition_EventTiming_Date); ok {
		return x.Date
	}
	return nil
}

func (x *TriggerDefinition_EventTiming) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEventTiming().(*TriggerDefinition_EventTiming_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isTriggerDefinition_EventTiming_EventTiming interface {
	isTriggerDefinition_EventTiming_EventTiming()
}

type TriggerDefinition_EventTiming_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type TriggerDefinition_EventTiming_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

type TriggerDefinition_EventTiming_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=date,proto3,oneof"`
}

type TriggerDefinition_EventTiming_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*TriggerDefinition_EventTiming_Timing) isTriggerDefinition_EventTiming_EventTiming() {}

func (*TriggerDefinition_EventTiming_Reference) isTriggerDefinition_EventTiming_EventTiming() {}

func (*TriggerDefinition_EventTiming_Date) isTriggerDefinition_EventTiming_EventTiming() {}

func (*TriggerDefinition_EventTiming_DateTime) isTriggerDefinition_EventTiming_EventTiming() {}

// Value that defines the context
type UsageContext_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*UsageContext_Value_CodeableConcept
	//	*UsageContext_Value_Quantity
	//	*UsageContext_Value_Range
	Value isUsageContext_Value_Value `protobuf_oneof:"value"`
}

func (x *UsageContext_Value) Reset() {
	*x = UsageContext_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageContext_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageContext_Value) ProtoMessage() {}

func (x *UsageContext_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageContext_Value.ProtoReflect.Descriptor instead.
func (*UsageContext_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UsageContext_Value) GetValue() isUsageContext_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UsageContext_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*UsageContext_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsageContext_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*UsageContext_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *UsageContext_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*UsageContext_Value_Range); ok {
		return x.Range
	}
	return nil
}

type isUsageContext_Value_Value interface {
	isUsageContext_Value_Value()
}

type UsageContext_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsageContext_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type UsageContext_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

func (*UsageContext_Value_CodeableConcept) isUsageContext_Value_Value() {}

func (*UsageContext_Value_Quantity) isUsageContext_Value_Value() {}

func (*UsageContext_Value_Range) isUsageContext_Value_Value() {}

var File_proto_google_fhir_proto_stu3_metadatatypes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x74, 0x75, 0x33, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02,
	0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x49, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xf0, 0xec, 0xc5, 0xe6,
	0x06, 0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xb7, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x85, 0x03, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x22, 0xbd, 0x0d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48,
	0x49, 0x52, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0xa7, 0x05, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0xb2, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x1a, 0xdf, 0x03, 0x0a, 0x0a, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x43, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xbd, 0x01, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x41,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xf0, 0xec, 0xc5, 0xe6, 0x06, 0x01, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x99, 0x83, 0x01, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x73,
	0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x42,
	0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x35,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x27, 0x2a,
	0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x29, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x42, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x42, 0x31, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x3d, 0x20, 0x27, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x27, 0x29, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68,
	0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x12, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x6e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x05, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x4b, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0xa2, 0x02, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0xc3, 0x01, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x29, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x8d, 0x01, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x69, 0x73, 0x28, 0x75,
	0x72, 0x69, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x61, 0x73, 0x28, 0x75, 0x72, 0x69, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x27,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x61, 0x73,
	0x28, 0x75, 0x72, 0x69, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x28, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x61, 0x73, 0x28, 0x75, 0x72, 0x69, 0x29, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x27, 0x29,
	0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0xb0, 0x05, 0x0a, 0x07, 0x53, 0x6c, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a,
	0x87, 0x02, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0xac, 0x02, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x3d, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x38,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0xd0, 0x03, 0x0a, 0x07, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xde, 0x12, 0x0a, 0x0c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3b,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x12, 0x0a,
	0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2f,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x41, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x1a, 0xd3,
	0x12, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x1a, 0xe1, 0x14, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x12, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3, 0x04, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3,
	0x04, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3b,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbc, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x12, 0x46, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x78, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x1a, 0xae, 0x04, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x1a, 0xa3,
	0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x51, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x1a, 0xf0, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5,
	0x02, 0x0a, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x03, 0x64, 0x69,
	0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x58, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x28, 0x29,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x28, 0x29, 0x52, 0x03, 0x64, 0x69, 0x76, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x97, 0x05, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x48, 0x49, 0x52, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x56, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc8, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x08,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x9b, 0x06, 0x0a, 0x11,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x46, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xa7, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x04, 0x0a, 0x0c, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xe5, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x73, 0x0a, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x74, 0x75, 0x33, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x02,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescData = file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDesc
)

func file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDescData
}

var file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_proto_google_fhir_proto_stu3_metadatatypes_proto_goTypes = []interface{}{
	(*BackboneElement)(nil),                                     // 0: google.fhir.stu3.proto.BackboneElement
	(*ContactDetail)(nil),                                       // 1: google.fhir.stu3.proto.ContactDetail
	(*Contributor)(nil),                                         // 2: google.fhir.stu3.proto.Contributor
	(*DataRequirement)(nil),                                     // 3: google.fhir.stu3.proto.DataRequirement
	(*Element)(nil),                                             // 4: google.fhir.stu3.proto.Element
	(*ElementDefinition)(nil),                                   // 5: google.fhir.stu3.proto.ElementDefinition
	(*Narrative)(nil),                                           // 6: google.fhir.stu3.proto.Narrative
	(*ParameterDefinition)(nil),                                 // 7: google.fhir.stu3.proto.ParameterDefinition
	(*RelatedArtifact)(nil),                                     // 8: google.fhir.stu3.proto.RelatedArtifact
	(*TriggerDefinition)(nil),                                   // 9: google.fhir.stu3.proto.TriggerDefinition
	(*UsageContext)(nil),                                        // 10: google.fhir.stu3.proto.UsageContext
	(*DataRequirement_CodeFilter)(nil),                          // 11: google.fhir.stu3.proto.DataRequirement.CodeFilter
	(*DataRequirement_DateFilter)(nil),                          // 12: google.fhir.stu3.proto.DataRequirement.DateFilter
	(*DataRequirement_CodeFilter_ValueSet)(nil),                 // 13: google.fhir.stu3.proto.DataRequirement.CodeFilter.ValueSet
	(*DataRequirement_DateFilter_Value)(nil),                    // 14: google.fhir.stu3.proto.DataRequirement.DateFilter.Value
	(*ElementDefinition_Slicing)(nil),                           // 15: google.fhir.stu3.proto.ElementDefinition.Slicing
	(*ElementDefinition_Base)(nil),                              // 16: google.fhir.stu3.proto.ElementDefinition.Base
	(*ElementDefinition_TypeRef)(nil),                           // 17: google.fhir.stu3.proto.ElementDefinition.TypeRef
	(*ElementDefinition_DefaultValue)(nil),                      // 18: google.fhir.stu3.proto.ElementDefinition.DefaultValue
	(*ElementDefinition_Fixed)(nil),                             // 19: google.fhir.stu3.proto.ElementDefinition.Fixed
	(*ElementDefinition_Pattern)(nil),                           // 20: google.fhir.stu3.proto.ElementDefinition.Pattern
	(*ElementDefinition_Example)(nil),                           // 21: google.fhir.stu3.proto.ElementDefinition.Example
	(*ElementDefinition_MinValue)(nil),                          // 22: google.fhir.stu3.proto.ElementDefinition.MinValue
	(*ElementDefinition_MaxValue)(nil),                          // 23: google.fhir.stu3.proto.ElementDefinition.MaxValue
	(*ElementDefinition_Constraint)(nil),                        // 24: google.fhir.stu3.proto.ElementDefinition.Constraint
	(*ElementDefinition_ElementDefinitionBinding)(nil),          // 25: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding
	(*ElementDefinition_Mapping)(nil),                           // 26: google.fhir.stu3.proto.ElementDefinition.Mapping
	(*ElementDefinition_Slicing_Discriminator)(nil),             // 27: google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator
	(*ElementDefinition_Example_Value)(nil),                     // 28: google.fhir.stu3.proto.ElementDefinition.Example.Value
	(*ElementDefinition_ElementDefinitionBinding_ValueSet)(nil), // 29: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.ValueSet
	(*TriggerDefinition_EventTiming)(nil),                       // 30: google.fhir.stu3.proto.TriggerDefinition.EventTiming
	(*UsageContext_Value)(nil),                                  // 31: google.fhir.stu3.proto.UsageContext.Value
	(*datatypes_go_proto.String)(nil),                           // 32: google.fhir.stu3.proto.String
	(*datatypes_go_proto.Extension)(nil),                        // 33: google.fhir.stu3.proto.Extension
	(*datatypes_go_proto.ContactPoint)(nil),                     // 34: google.fhir.stu3.proto.ContactPoint
	(*codes_go_proto.ContributorTypeCode)(nil),                  // 35: google.fhir.stu3.proto.ContributorTypeCode
	(*codes_go_proto.FHIRAllTypesCode)(nil),                     // 36: google.fhir.stu3.proto.FHIRAllTypesCode
	(*datatypes_go_proto.Uri)(nil),                              // 37: google.fhir.stu3.proto.Uri
	(*codes_go_proto.PropertyRepresentationCode)(nil),           // 38: google.fhir.stu3.proto.PropertyRepresentationCode
	(*datatypes_go_proto.Coding)(nil),                           // 39: google.fhir.stu3.proto.Coding
	(*datatypes_go_proto.Markdown)(nil),                         // 40: google.fhir.stu3.proto.Markdown
	(*datatypes_go_proto.UnsignedInt)(nil),                      // 41: google.fhir.stu3.proto.UnsignedInt
	(*datatypes_go_proto.Integer)(nil),                          // 42: google.fhir.stu3.proto.Integer
	(*datatypes_go_proto.Id)(nil),                               // 43: google.fhir.stu3.proto.Id
	(*datatypes_go_proto.Boolean)(nil),                          // 44: google.fhir.stu3.proto.Boolean
	(*codes_go_proto.NarrativeStatusCode)(nil),                  // 45: google.fhir.stu3.proto.NarrativeStatusCode
	(*datatypes_go_proto.Xhtml)(nil),                            // 46: google.fhir.stu3.proto.Xhtml
	(*datatypes_go_proto.Code)(nil),                             // 47: google.fhir.stu3.proto.Code
	(*codes_go_proto.OperationParameterUseCode)(nil),            // 48: google.fhir.stu3.proto.OperationParameterUseCode
	(*datatypes_go_proto.Reference)(nil),                        // 49: google.fhir.stu3.proto.Reference
	(*codes_go_proto.RelatedArtifactTypeCode)(nil),              // 50: google.fhir.stu3.proto.RelatedArtifactTypeCode
	(*datatypes_go_proto.Attachment)(nil),                       // 51: google.fhir.stu3.proto.Attachment
	(*codes_go_proto.TriggerTypeCode)(nil),                      // 52: google.fhir.stu3.proto.TriggerTypeCode
	(*datatypes_go_proto.CodeableConcept)(nil),                  // 53: google.fhir.stu3.proto.CodeableConcept
	(*datatypes_go_proto.DateTime)(nil),                         // 54: google.fhir.stu3.proto.DateTime
	(*datatypes_go_proto.Period)(nil),                           // 55: google.fhir.stu3.proto.Period
	(*datatypes_go_proto.Duration)(nil),                         // 56: google.fhir.stu3.proto.Duration
	(*codes_go_proto.SlicingRulesCode)(nil),                     // 57: google.fhir.stu3.proto.SlicingRulesCode
	(*codes_go_proto.AggregationModeCode)(nil),                  // 58: google.fhir.stu3.proto.AggregationModeCode
	(*codes_go_proto.ReferenceVersionRulesCode)(nil),            // 59: google.fhir.stu3.proto.ReferenceVersionRulesCode
	(*datatypes_go_proto.Base64Binary)(nil),                     // 60: google.fhir.stu3.proto.Base64Binary
	(*datatypes_go_proto.Date)(nil),                             // 61: google.fhir.stu3.proto.Date
	(*datatypes_go_proto.Decimal)(nil),                          // 62: google.fhir.stu3.proto.Decimal
	(*datatypes_go_proto.Instant)(nil),                          // 63: google.fhir.stu3.proto.Instant
	(*datatypes_go_proto.Oid)(nil),                              // 64: google.fhir.stu3.proto.Oid
	(*datatypes_go_proto.PositiveInt)(nil),                      // 65: google.fhir.stu3.proto.PositiveInt
	(*datatypes_go_proto.Time)(nil),                             // 66: google.fhir.stu3.proto.Time
	(*datatypes_go_proto.Address)(nil),                          // 67: google.fhir.stu3.proto.Address
	(*datatypes_go_proto.Age)(nil),                              // 68: google.fhir.stu3.proto.Age
	(*datatypes_go_proto.Annotation)(nil),                       // 69: google.fhir.stu3.proto.Annotation
	(*datatypes_go_proto.Count)(nil),                            // 70: google.fhir.stu3.proto.Count
	(*datatypes_go_proto.Distance)(nil),                         // 71: google.fhir.stu3.proto.Distance
	(*datatypes_go_proto.HumanName)(nil),                        // 72: google.fhir.stu3.proto.HumanName
	(*datatypes_go_proto.Identifier)(nil),                       // 73: google.fhir.stu3.proto.Identifier
	(*datatypes_go_proto.Money)(nil),                            // 74: google.fhir.stu3.proto.Money
	(*datatypes_go_proto.Quantity)(nil),                         // 75: google.fhir.stu3.proto.Quantity
	(*datatypes_go_proto.Range)(nil),                            // 76: google.fhir.stu3.proto.Range
	(*datatypes_go_proto.Ratio)(nil),                            // 77: google.fhir.stu3.proto.Ratio
	(*datatypes_go_proto.SampledData)(nil),                      // 78: google.fhir.stu3.proto.SampledData
	(*datatypes_go_proto.Signature)(nil),                        // 79: google.fhir.stu3.proto.Signature
	(*datatypes_go_proto.Timing)(nil),                           // 80: google.fhir.stu3.proto.Timing
	(*datatypes_go_proto.Meta)(nil),                             // 81: google.fhir.stu3.proto.Meta
	(*codes_go_proto.ConstraintSeverityCode)(nil),               // 82: google.fhir.stu3.proto.ConstraintSeverityCode
	(*codes_go_proto.BindingStrengthCode)(nil),                  // 83: google.fhir.stu3.proto.BindingStrengthCode
	(*datatypes_go_proto.MimeTypeCode)(nil),                     // 84: google.fhir.stu3.proto.MimeTypeCode
	(*codes_go_proto.DiscriminatorTypeCode)(nil),                // 85: google.fhir.stu3.proto.DiscriminatorTypeCode
}
var file_proto_google_fhir_proto_stu3_metadatatypes_proto_depIdxs = []int32{
	32,  // 0: google.fhir.stu3.proto.BackboneElement.id:type_name -> google.fhir.stu3.proto.String
	33,  // 1: google.fhir.stu3.proto.BackboneElement.extension:type_name -> google.fhir.stu3.proto.Extension
	33,  // 2: google.fhir.stu3.proto.BackboneElement.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 3: google.fhir.stu3.proto.ContactDetail.id:type_name -> google.fhir.stu3.proto.String
	33,  // 4: google.fhir.stu3.proto.ContactDetail.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 5: google.fhir.stu3.proto.ContactDetail.name:type_name -> google.fhir.stu3.proto.String
	34,  // 6: google.fhir.stu3.proto.ContactDetail.telecom:type_name -> google.fhir.stu3.proto.ContactPoint
	32,  // 7: google.fhir.stu3.proto.Contributor.id:type_name -> google.fhir.stu3.proto.String
	33,  // 8: google.fhir.stu3.proto.Contributor.extension:type_name -> google.fhir.stu3.proto.Extension
	35,  // 9: google.fhir.stu3.proto.Contributor.type:type_name -> google.fhir.stu3.proto.ContributorTypeCode
	32,  // 10: google.fhir.stu3.proto.Contributor.name:type_name -> google.fhir.stu3.proto.String
	1,   // 11: google.fhir.stu3.proto.Contributor.contact:type_name -> google.fhir.stu3.proto.ContactDetail
	32,  // 12: google.fhir.stu3.proto.DataRequirement.id:type_name -> google.fhir.stu3.proto.String
	33,  // 13: google.fhir.stu3.proto.DataRequirement.extension:type_name -> google.fhir.stu3.proto.Extension
	36,  // 14: google.fhir.stu3.proto.DataRequirement.type:type_name -> google.fhir.stu3.proto.FHIRAllTypesCode
	37,  // 15: google.fhir.stu3.proto.DataRequirement.profile:type_name -> google.fhir.stu3.proto.Uri
	32,  // 16: google.fhir.stu3.proto.DataRequirement.must_support:type_name -> google.fhir.stu3.proto.String
	11,  // 17: google.fhir.stu3.proto.DataRequirement.code_filter:type_name -> google.fhir.stu3.proto.DataRequirement.CodeFilter
	12,  // 18: google.fhir.stu3.proto.DataRequirement.date_filter:type_name -> google.fhir.stu3.proto.DataRequirement.DateFilter
	32,  // 19: google.fhir.stu3.proto.Element.id:type_name -> google.fhir.stu3.proto.String
	33,  // 20: google.fhir.stu3.proto.Element.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 21: google.fhir.stu3.proto.ElementDefinition.id:type_name -> google.fhir.stu3.proto.String
	33,  // 22: google.fhir.stu3.proto.ElementDefinition.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 23: google.fhir.stu3.proto.ElementDefinition.path:type_name -> google.fhir.stu3.proto.String
	38,  // 24: google.fhir.stu3.proto.ElementDefinition.representation:type_name -> google.fhir.stu3.proto.PropertyRepresentationCode
	32,  // 25: google.fhir.stu3.proto.ElementDefinition.slice_name:type_name -> google.fhir.stu3.proto.String
	32,  // 26: google.fhir.stu3.proto.ElementDefinition.label:type_name -> google.fhir.stu3.proto.String
	39,  // 27: google.fhir.stu3.proto.ElementDefinition.code:type_name -> google.fhir.stu3.proto.Coding
	15,  // 28: google.fhir.stu3.proto.ElementDefinition.slicing:type_name -> google.fhir.stu3.proto.ElementDefinition.Slicing
	32,  // 29: google.fhir.stu3.proto.ElementDefinition.short:type_name -> google.fhir.stu3.proto.String
	40,  // 30: google.fhir.stu3.proto.ElementDefinition.definition:type_name -> google.fhir.stu3.proto.Markdown
	40,  // 31: google.fhir.stu3.proto.ElementDefinition.comment:type_name -> google.fhir.stu3.proto.Markdown
	40,  // 32: google.fhir.stu3.proto.ElementDefinition.requirements:type_name -> google.fhir.stu3.proto.Markdown
	32,  // 33: google.fhir.stu3.proto.ElementDefinition.alias:type_name -> google.fhir.stu3.proto.String
	41,  // 34: google.fhir.stu3.proto.ElementDefinition.min:type_name -> google.fhir.stu3.proto.UnsignedInt
	32,  // 35: google.fhir.stu3.proto.ElementDefinition.max:type_name -> google.fhir.stu3.proto.String
	16,  // 36: google.fhir.stu3.proto.ElementDefinition.base:type_name -> google.fhir.stu3.proto.ElementDefinition.Base
	37,  // 37: google.fhir.stu3.proto.ElementDefinition.content_reference:type_name -> google.fhir.stu3.proto.Uri
	17,  // 38: google.fhir.stu3.proto.ElementDefinition.type:type_name -> google.fhir.stu3.proto.ElementDefinition.TypeRef
	18,  // 39: google.fhir.stu3.proto.ElementDefinition.default_value:type_name -> google.fhir.stu3.proto.ElementDefinition.DefaultValue
	40,  // 40: google.fhir.stu3.proto.ElementDefinition.meaning_when_missing:type_name -> google.fhir.stu3.proto.Markdown
	32,  // 41: google.fhir.stu3.proto.ElementDefinition.order_meaning:type_name -> google.fhir.stu3.proto.String
	19,  // 42: google.fhir.stu3.proto.ElementDefinition.fixed:type_name -> google.fhir.stu3.proto.ElementDefinition.Fixed
	20,  // 43: google.fhir.stu3.proto.ElementDefinition.pattern:type_name -> google.fhir.stu3.proto.ElementDefinition.Pattern
	21,  // 44: google.fhir.stu3.proto.ElementDefinition.example:type_name -> google.fhir.stu3.proto.ElementDefinition.Example
	22,  // 45: google.fhir.stu3.proto.ElementDefinition.min_value:type_name -> google.fhir.stu3.proto.ElementDefinition.MinValue
	23,  // 46: google.fhir.stu3.proto.ElementDefinition.max_value:type_name -> google.fhir.stu3.proto.ElementDefinition.MaxValue
	42,  // 47: google.fhir.stu3.proto.ElementDefinition.max_length:type_name -> google.fhir.stu3.proto.Integer
	43,  // 48: google.fhir.stu3.proto.ElementDefinition.condition:type_name -> google.fhir.stu3.proto.Id
	24,  // 49: google.fhir.stu3.proto.ElementDefinition.constraint:type_name -> google.fhir.stu3.proto.ElementDefinition.Constraint
	44,  // 50: google.fhir.stu3.proto.ElementDefinition.must_support:type_name -> google.fhir.stu3.proto.Boolean
	44,  // 51: google.fhir.stu3.proto.ElementDefinition.is_modifier:type_name -> google.fhir.stu3.proto.Boolean
	44,  // 52: google.fhir.stu3.proto.ElementDefinition.is_summary:type_name -> google.fhir.stu3.proto.Boolean
	25,  // 53: google.fhir.stu3.proto.ElementDefinition.binding:type_name -> google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding
	26,  // 54: google.fhir.stu3.proto.ElementDefinition.mapping:type_name -> google.fhir.stu3.proto.ElementDefinition.Mapping
	32,  // 55: google.fhir.stu3.proto.Narrative.id:type_name -> google.fhir.stu3.proto.String
	33,  // 56: google.fhir.stu3.proto.Narrative.extension:type_name -> google.fhir.stu3.proto.Extension
	45,  // 57: google.fhir.stu3.proto.Narrative.status:type_name -> google.fhir.stu3.proto.NarrativeStatusCode
	46,  // 58: google.fhir.stu3.proto.Narrative.div:type_name -> google.fhir.stu3.proto.Xhtml
	32,  // 59: google.fhir.stu3.proto.ParameterDefinition.id:type_name -> google.fhir.stu3.proto.String
	33,  // 60: google.fhir.stu3.proto.ParameterDefinition.extension:type_name -> google.fhir.stu3.proto.Extension
	47,  // 61: google.fhir.stu3.proto.ParameterDefinition.name:type_name -> google.fhir.stu3.proto.Code
	48,  // 62: google.fhir.stu3.proto.ParameterDefinition.use:type_name -> google.fhir.stu3.proto.OperationParameterUseCode
	42,  // 63: google.fhir.stu3.proto.ParameterDefinition.min:type_name -> google.fhir.stu3.proto.Integer
	32,  // 64: google.fhir.stu3.proto.ParameterDefinition.max:type_name -> google.fhir.stu3.proto.String
	32,  // 65: google.fhir.stu3.proto.ParameterDefinition.documentation:type_name -> google.fhir.stu3.proto.String
	36,  // 66: google.fhir.stu3.proto.ParameterDefinition.type:type_name -> google.fhir.stu3.proto.FHIRAllTypesCode
	49,  // 67: google.fhir.stu3.proto.ParameterDefinition.profile:type_name -> google.fhir.stu3.proto.Reference
	32,  // 68: google.fhir.stu3.proto.RelatedArtifact.id:type_name -> google.fhir.stu3.proto.String
	33,  // 69: google.fhir.stu3.proto.RelatedArtifact.extension:type_name -> google.fhir.stu3.proto.Extension
	50,  // 70: google.fhir.stu3.proto.RelatedArtifact.type:type_name -> google.fhir.stu3.proto.RelatedArtifactTypeCode
	32,  // 71: google.fhir.stu3.proto.RelatedArtifact.display:type_name -> google.fhir.stu3.proto.String
	32,  // 72: google.fhir.stu3.proto.RelatedArtifact.citation:type_name -> google.fhir.stu3.proto.String
	37,  // 73: google.fhir.stu3.proto.RelatedArtifact.url:type_name -> google.fhir.stu3.proto.Uri
	51,  // 74: google.fhir.stu3.proto.RelatedArtifact.document:type_name -> google.fhir.stu3.proto.Attachment
	49,  // 75: google.fhir.stu3.proto.RelatedArtifact.resource:type_name -> google.fhir.stu3.proto.Reference
	32,  // 76: google.fhir.stu3.proto.TriggerDefinition.id:type_name -> google.fhir.stu3.proto.String
	33,  // 77: google.fhir.stu3.proto.TriggerDefinition.extension:type_name -> google.fhir.stu3.proto.Extension
	52,  // 78: google.fhir.stu3.proto.TriggerDefinition.type:type_name -> google.fhir.stu3.proto.TriggerTypeCode
	32,  // 79: google.fhir.stu3.proto.TriggerDefinition.event_name:type_name -> google.fhir.stu3.proto.String
	30,  // 80: google.fhir.stu3.proto.TriggerDefinition.event_timing:type_name -> google.fhir.stu3.proto.TriggerDefinition.EventTiming
	3,   // 81: google.fhir.stu3.proto.TriggerDefinition.event_data:type_name -> google.fhir.stu3.proto.DataRequirement
	32,  // 82: google.fhir.stu3.proto.UsageContext.id:type_name -> google.fhir.stu3.proto.String
	33,  // 83: google.fhir.stu3.proto.UsageContext.extension:type_name -> google.fhir.stu3.proto.Extension
	39,  // 84: google.fhir.stu3.proto.UsageContext.code:type_name -> google.fhir.stu3.proto.Coding
	31,  // 85: google.fhir.stu3.proto.UsageContext.value:type_name -> google.fhir.stu3.proto.UsageContext.Value
	32,  // 86: google.fhir.stu3.proto.DataRequirement.CodeFilter.id:type_name -> google.fhir.stu3.proto.String
	33,  // 87: google.fhir.stu3.proto.DataRequirement.CodeFilter.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 88: google.fhir.stu3.proto.DataRequirement.CodeFilter.path:type_name -> google.fhir.stu3.proto.String
	13,  // 89: google.fhir.stu3.proto.DataRequirement.CodeFilter.value_set:type_name -> google.fhir.stu3.proto.DataRequirement.CodeFilter.ValueSet
	47,  // 90: google.fhir.stu3.proto.DataRequirement.CodeFilter.value_code:type_name -> google.fhir.stu3.proto.Code
	39,  // 91: google.fhir.stu3.proto.DataRequirement.CodeFilter.value_coding:type_name -> google.fhir.stu3.proto.Coding
	53,  // 92: google.fhir.stu3.proto.DataRequirement.CodeFilter.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	32,  // 93: google.fhir.stu3.proto.DataRequirement.DateFilter.id:type_name -> google.fhir.stu3.proto.String
	33,  // 94: google.fhir.stu3.proto.DataRequirement.DateFilter.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 95: google.fhir.stu3.proto.DataRequirement.DateFilter.path:type_name -> google.fhir.stu3.proto.String
	14,  // 96: google.fhir.stu3.proto.DataRequirement.DateFilter.value:type_name -> google.fhir.stu3.proto.DataRequirement.DateFilter.Value
	32,  // 97: google.fhir.stu3.proto.DataRequirement.CodeFilter.ValueSet.string_value:type_name -> google.fhir.stu3.proto.String
	49,  // 98: google.fhir.stu3.proto.DataRequirement.CodeFilter.ValueSet.reference:type_name -> google.fhir.stu3.proto.Reference
	54,  // 99: google.fhir.stu3.proto.DataRequirement.DateFilter.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	55,  // 100: google.fhir.stu3.proto.DataRequirement.DateFilter.Value.period:type_name -> google.fhir.stu3.proto.Period
	56,  // 101: google.fhir.stu3.proto.DataRequirement.DateFilter.Value.duration:type_name -> google.fhir.stu3.proto.Duration
	32,  // 102: google.fhir.stu3.proto.ElementDefinition.Slicing.id:type_name -> google.fhir.stu3.proto.String
	33,  // 103: google.fhir.stu3.proto.ElementDefinition.Slicing.extension:type_name -> google.fhir.stu3.proto.Extension
	27,  // 104: google.fhir.stu3.proto.ElementDefinition.Slicing.discriminator:type_name -> google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator
	32,  // 105: google.fhir.stu3.proto.ElementDefinition.Slicing.description:type_name -> google.fhir.stu3.proto.String
	44,  // 106: google.fhir.stu3.proto.ElementDefinition.Slicing.ordered:type_name -> google.fhir.stu3.proto.Boolean
	57,  // 107: google.fhir.stu3.proto.ElementDefinition.Slicing.rules:type_name -> google.fhir.stu3.proto.SlicingRulesCode
	32,  // 108: google.fhir.stu3.proto.ElementDefinition.Base.id:type_name -> google.fhir.stu3.proto.String
	33,  // 109: google.fhir.stu3.proto.ElementDefinition.Base.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 110: google.fhir.stu3.proto.ElementDefinition.Base.path:type_name -> google.fhir.stu3.proto.String
	41,  // 111: google.fhir.stu3.proto.ElementDefinition.Base.min:type_name -> google.fhir.stu3.proto.UnsignedInt
	32,  // 112: google.fhir.stu3.proto.ElementDefinition.Base.max:type_name -> google.fhir.stu3.proto.String
	32,  // 113: google.fhir.stu3.proto.ElementDefinition.TypeRef.id:type_name -> google.fhir.stu3.proto.String
	33,  // 114: google.fhir.stu3.proto.ElementDefinition.TypeRef.extension:type_name -> google.fhir.stu3.proto.Extension
	37,  // 115: google.fhir.stu3.proto.ElementDefinition.TypeRef.code:type_name -> google.fhir.stu3.proto.Uri
	37,  // 116: google.fhir.stu3.proto.ElementDefinition.TypeRef.profile:type_name -> google.fhir.stu3.proto.Uri
	37,  // 117: google.fhir.stu3.proto.ElementDefinition.TypeRef.target_profile:type_name -> google.fhir.stu3.proto.Uri
	58,  // 118: google.fhir.stu3.proto.ElementDefinition.TypeRef.aggregation:type_name -> google.fhir.stu3.proto.AggregationModeCode
	59,  // 119: google.fhir.stu3.proto.ElementDefinition.TypeRef.versioning:type_name -> google.fhir.stu3.proto.ReferenceVersionRulesCode
	60,  // 120: google.fhir.stu3.proto.ElementDefinition.DefaultValue.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	44,  // 121: google.fhir.stu3.proto.ElementDefinition.DefaultValue.boolean:type_name -> google.fhir.stu3.proto.Boolean
	47,  // 122: google.fhir.stu3.proto.ElementDefinition.DefaultValue.code:type_name -> google.fhir.stu3.proto.Code
	61,  // 123: google.fhir.stu3.proto.ElementDefinition.DefaultValue.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 124: google.fhir.stu3.proto.ElementDefinition.DefaultValue.date_time:type_name -> google.fhir.stu3.proto.DateTime
	62,  // 125: google.fhir.stu3.proto.ElementDefinition.DefaultValue.decimal:type_name -> google.fhir.stu3.proto.Decimal
	43,  // 126: google.fhir.stu3.proto.ElementDefinition.DefaultValue.id:type_name -> google.fhir.stu3.proto.Id
	63,  // 127: google.fhir.stu3.proto.ElementDefinition.DefaultValue.instant:type_name -> google.fhir.stu3.proto.Instant
	42,  // 128: google.fhir.stu3.proto.ElementDefinition.DefaultValue.integer:type_name -> google.fhir.stu3.proto.Integer
	40,  // 129: google.fhir.stu3.proto.ElementDefinition.DefaultValue.markdown:type_name -> google.fhir.stu3.proto.Markdown
	64,  // 130: google.fhir.stu3.proto.ElementDefinition.DefaultValue.oid:type_name -> google.fhir.stu3.proto.Oid
	65,  // 131: google.fhir.stu3.proto.ElementDefinition.DefaultValue.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	32,  // 132: google.fhir.stu3.proto.ElementDefinition.DefaultValue.string_value:type_name -> google.fhir.stu3.proto.String
	66,  // 133: google.fhir.stu3.proto.ElementDefinition.DefaultValue.time:type_name -> google.fhir.stu3.proto.Time
	41,  // 134: google.fhir.stu3.proto.ElementDefinition.DefaultValue.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	37,  // 135: google.fhir.stu3.proto.ElementDefinition.DefaultValue.uri:type_name -> google.fhir.stu3.proto.Uri
	67,  // 136: google.fhir.stu3.proto.ElementDefinition.DefaultValue.address:type_name -> google.fhir.stu3.proto.Address
	68,  // 137: google.fhir.stu3.proto.ElementDefinition.DefaultValue.age:type_name -> google.fhir.stu3.proto.Age
	69,  // 138: google.fhir.stu3.proto.ElementDefinition.DefaultValue.annotation:type_name -> google.fhir.stu3.proto.Annotation
	51,  // 139: google.fhir.stu3.proto.ElementDefinition.DefaultValue.attachment:type_name -> google.fhir.stu3.proto.Attachment
	53,  // 140: google.fhir.stu3.proto.ElementDefinition.DefaultValue.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	39,  // 141: google.fhir.stu3.proto.ElementDefinition.DefaultValue.coding:type_name -> google.fhir.stu3.proto.Coding
	34,  // 142: google.fhir.stu3.proto.ElementDefinition.DefaultValue.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	70,  // 143: google.fhir.stu3.proto.ElementDefinition.DefaultValue.count:type_name -> google.fhir.stu3.proto.Count
	71,  // 144: google.fhir.stu3.proto.ElementDefinition.DefaultValue.distance:type_name -> google.fhir.stu3.proto.Distance
	56,  // 145: google.fhir.stu3.proto.ElementDefinition.DefaultValue.duration:type_name -> google.fhir.stu3.proto.Duration
	72,  // 146: google.fhir.stu3.proto.ElementDefinition.DefaultValue.human_name:type_name -> google.fhir.stu3.proto.HumanName
	73,  // 147: google.fhir.stu3.proto.ElementDefinition.DefaultValue.identifier:type_name -> google.fhir.stu3.proto.Identifier
	74,  // 148: google.fhir.stu3.proto.ElementDefinition.DefaultValue.money:type_name -> google.fhir.stu3.proto.Money
	55,  // 149: google.fhir.stu3.proto.ElementDefinition.DefaultValue.period:type_name -> google.fhir.stu3.proto.Period
	75,  // 150: google.fhir.stu3.proto.ElementDefinition.DefaultValue.quantity:type_name -> google.fhir.stu3.proto.Quantity
	76,  // 151: google.fhir.stu3.proto.ElementDefinition.DefaultValue.range:type_name -> google.fhir.stu3.proto.Range
	77,  // 152: google.fhir.stu3.proto.ElementDefinition.DefaultValue.ratio:type_name -> google.fhir.stu3.proto.Ratio
	49,  // 153: google.fhir.stu3.proto.ElementDefinition.DefaultValue.reference:type_name -> google.fhir.stu3.proto.Reference
	78,  // 154: google.fhir.stu3.proto.ElementDefinition.DefaultValue.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	79,  // 155: google.fhir.stu3.proto.ElementDefinition.DefaultValue.signature:type_name -> google.fhir.stu3.proto.Signature
	80,  // 156: google.fhir.stu3.proto.ElementDefinition.DefaultValue.timing:type_name -> google.fhir.stu3.proto.Timing
	81,  // 157: google.fhir.stu3.proto.ElementDefinition.DefaultValue.meta:type_name -> google.fhir.stu3.proto.Meta
	60,  // 158: google.fhir.stu3.proto.ElementDefinition.Fixed.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	44,  // 159: google.fhir.stu3.proto.ElementDefinition.Fixed.boolean:type_name -> google.fhir.stu3.proto.Boolean
	47,  // 160: google.fhir.stu3.proto.ElementDefinition.Fixed.code:type_name -> google.fhir.stu3.proto.Code
	61,  // 161: google.fhir.stu3.proto.ElementDefinition.Fixed.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 162: google.fhir.stu3.proto.ElementDefinition.Fixed.date_time:type_name -> google.fhir.stu3.proto.DateTime
	62,  // 163: google.fhir.stu3.proto.ElementDefinition.Fixed.decimal:type_name -> google.fhir.stu3.proto.Decimal
	43,  // 164: google.fhir.stu3.proto.ElementDefinition.Fixed.id:type_name -> google.fhir.stu3.proto.Id
	63,  // 165: google.fhir.stu3.proto.ElementDefinition.Fixed.instant:type_name -> google.fhir.stu3.proto.Instant
	42,  // 166: google.fhir.stu3.proto.ElementDefinition.Fixed.integer:type_name -> google.fhir.stu3.proto.Integer
	40,  // 167: google.fhir.stu3.proto.ElementDefinition.Fixed.markdown:type_name -> google.fhir.stu3.proto.Markdown
	64,  // 168: google.fhir.stu3.proto.ElementDefinition.Fixed.oid:type_name -> google.fhir.stu3.proto.Oid
	65,  // 169: google.fhir.stu3.proto.ElementDefinition.Fixed.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	32,  // 170: google.fhir.stu3.proto.ElementDefinition.Fixed.string_value:type_name -> google.fhir.stu3.proto.String
	66,  // 171: google.fhir.stu3.proto.ElementDefinition.Fixed.time:type_name -> google.fhir.stu3.proto.Time
	41,  // 172: google.fhir.stu3.proto.ElementDefinition.Fixed.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	37,  // 173: google.fhir.stu3.proto.ElementDefinition.Fixed.uri:type_name -> google.fhir.stu3.proto.Uri
	67,  // 174: google.fhir.stu3.proto.ElementDefinition.Fixed.address:type_name -> google.fhir.stu3.proto.Address
	68,  // 175: google.fhir.stu3.proto.ElementDefinition.Fixed.age:type_name -> google.fhir.stu3.proto.Age
	69,  // 176: google.fhir.stu3.proto.ElementDefinition.Fixed.annotation:type_name -> google.fhir.stu3.proto.Annotation
	51,  // 177: google.fhir.stu3.proto.ElementDefinition.Fixed.attachment:type_name -> google.fhir.stu3.proto.Attachment
	53,  // 178: google.fhir.stu3.proto.ElementDefinition.Fixed.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	39,  // 179: google.fhir.stu3.proto.ElementDefinition.Fixed.coding:type_name -> google.fhir.stu3.proto.Coding
	34,  // 180: google.fhir.stu3.proto.ElementDefinition.Fixed.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	70,  // 181: google.fhir.stu3.proto.ElementDefinition.Fixed.count:type_name -> google.fhir.stu3.proto.Count
	71,  // 182: google.fhir.stu3.proto.ElementDefinition.Fixed.distance:type_name -> google.fhir.stu3.proto.Distance
	56,  // 183: google.fhir.stu3.proto.ElementDefinition.Fixed.duration:type_name -> google.fhir.stu3.proto.Duration
	72,  // 184: google.fhir.stu3.proto.ElementDefinition.Fixed.human_name:type_name -> google.fhir.stu3.proto.HumanName
	73,  // 185: google.fhir.stu3.proto.ElementDefinition.Fixed.identifier:type_name -> google.fhir.stu3.proto.Identifier
	74,  // 186: google.fhir.stu3.proto.ElementDefinition.Fixed.money:type_name -> google.fhir.stu3.proto.Money
	55,  // 187: google.fhir.stu3.proto.ElementDefinition.Fixed.period:type_name -> google.fhir.stu3.proto.Period
	75,  // 188: google.fhir.stu3.proto.ElementDefinition.Fixed.quantity:type_name -> google.fhir.stu3.proto.Quantity
	76,  // 189: google.fhir.stu3.proto.ElementDefinition.Fixed.range:type_name -> google.fhir.stu3.proto.Range
	77,  // 190: google.fhir.stu3.proto.ElementDefinition.Fixed.ratio:type_name -> google.fhir.stu3.proto.Ratio
	49,  // 191: google.fhir.stu3.proto.ElementDefinition.Fixed.reference:type_name -> google.fhir.stu3.proto.Reference
	78,  // 192: google.fhir.stu3.proto.ElementDefinition.Fixed.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	79,  // 193: google.fhir.stu3.proto.ElementDefinition.Fixed.signature:type_name -> google.fhir.stu3.proto.Signature
	80,  // 194: google.fhir.stu3.proto.ElementDefinition.Fixed.timing:type_name -> google.fhir.stu3.proto.Timing
	81,  // 195: google.fhir.stu3.proto.ElementDefinition.Fixed.meta:type_name -> google.fhir.stu3.proto.Meta
	60,  // 196: google.fhir.stu3.proto.ElementDefinition.Pattern.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	44,  // 197: google.fhir.stu3.proto.ElementDefinition.Pattern.boolean:type_name -> google.fhir.stu3.proto.Boolean
	47,  // 198: google.fhir.stu3.proto.ElementDefinition.Pattern.code:type_name -> google.fhir.stu3.proto.Code
	61,  // 199: google.fhir.stu3.proto.ElementDefinition.Pattern.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 200: google.fhir.stu3.proto.ElementDefinition.Pattern.date_time:type_name -> google.fhir.stu3.proto.DateTime
	62,  // 201: google.fhir.stu3.proto.ElementDefinition.Pattern.decimal:type_name -> google.fhir.stu3.proto.Decimal
	43,  // 202: google.fhir.stu3.proto.ElementDefinition.Pattern.id:type_name -> google.fhir.stu3.proto.Id
	63,  // 203: google.fhir.stu3.proto.ElementDefinition.Pattern.instant:type_name -> google.fhir.stu3.proto.Instant
	42,  // 204: google.fhir.stu3.proto.ElementDefinition.Pattern.integer:type_name -> google.fhir.stu3.proto.Integer
	40,  // 205: google.fhir.stu3.proto.ElementDefinition.Pattern.markdown:type_name -> google.fhir.stu3.proto.Markdown
	64,  // 206: google.fhir.stu3.proto.ElementDefinition.Pattern.oid:type_name -> google.fhir.stu3.proto.Oid
	65,  // 207: google.fhir.stu3.proto.ElementDefinition.Pattern.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	32,  // 208: google.fhir.stu3.proto.ElementDefinition.Pattern.string_value:type_name -> google.fhir.stu3.proto.String
	66,  // 209: google.fhir.stu3.proto.ElementDefinition.Pattern.time:type_name -> google.fhir.stu3.proto.Time
	41,  // 210: google.fhir.stu3.proto.ElementDefinition.Pattern.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	37,  // 211: google.fhir.stu3.proto.ElementDefinition.Pattern.uri:type_name -> google.fhir.stu3.proto.Uri
	67,  // 212: google.fhir.stu3.proto.ElementDefinition.Pattern.address:type_name -> google.fhir.stu3.proto.Address
	68,  // 213: google.fhir.stu3.proto.ElementDefinition.Pattern.age:type_name -> google.fhir.stu3.proto.Age
	69,  // 214: google.fhir.stu3.proto.ElementDefinition.Pattern.annotation:type_name -> google.fhir.stu3.proto.Annotation
	51,  // 215: google.fhir.stu3.proto.ElementDefinition.Pattern.attachment:type_name -> google.fhir.stu3.proto.Attachment
	53,  // 216: google.fhir.stu3.proto.ElementDefinition.Pattern.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	39,  // 217: google.fhir.stu3.proto.ElementDefinition.Pattern.coding:type_name -> google.fhir.stu3.proto.Coding
	34,  // 218: google.fhir.stu3.proto.ElementDefinition.Pattern.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	70,  // 219: google.fhir.stu3.proto.ElementDefinition.Pattern.count:type_name -> google.fhir.stu3.proto.Count
	71,  // 220: google.fhir.stu3.proto.ElementDefinition.Pattern.distance:type_name -> google.fhir.stu3.proto.Distance
	56,  // 221: google.fhir.stu3.proto.ElementDefinition.Pattern.duration:type_name -> google.fhir.stu3.proto.Duration
	72,  // 222: google.fhir.stu3.proto.ElementDefinition.Pattern.human_name:type_name -> google.fhir.stu3.proto.HumanName
	73,  // 223: google.fhir.stu3.proto.ElementDefinition.Pattern.identifier:type_name -> google.fhir.stu3.proto.Identifier
	74,  // 224: google.fhir.stu3.proto.ElementDefinition.Pattern.money:type_name -> google.fhir.stu3.proto.Money
	55,  // 225: google.fhir.stu3.proto.ElementDefinition.Pattern.period:type_name -> google.fhir.stu3.proto.Period
	75,  // 226: google.fhir.stu3.proto.ElementDefinition.Pattern.quantity:type_name -> google.fhir.stu3.proto.Quantity
	76,  // 227: google.fhir.stu3.proto.ElementDefinition.Pattern.range:type_name -> google.fhir.stu3.proto.Range
	77,  // 228: google.fhir.stu3.proto.ElementDefinition.Pattern.ratio:type_name -> google.fhir.stu3.proto.Ratio
	49,  // 229: google.fhir.stu3.proto.ElementDefinition.Pattern.reference:type_name -> google.fhir.stu3.proto.Reference
	78,  // 230: google.fhir.stu3.proto.ElementDefinition.Pattern.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	79,  // 231: google.fhir.stu3.proto.ElementDefinition.Pattern.signature:type_name -> google.fhir.stu3.proto.Signature
	80,  // 232: google.fhir.stu3.proto.ElementDefinition.Pattern.timing:type_name -> google.fhir.stu3.proto.Timing
	81,  // 233: google.fhir.stu3.proto.ElementDefinition.Pattern.meta:type_name -> google.fhir.stu3.proto.Meta
	32,  // 234: google.fhir.stu3.proto.ElementDefinition.Example.id:type_name -> google.fhir.stu3.proto.String
	33,  // 235: google.fhir.stu3.proto.ElementDefinition.Example.extension:type_name -> google.fhir.stu3.proto.Extension
	32,  // 236: google.fhir.stu3.proto.ElementDefinition.Example.label:type_name -> google.fhir.stu3.proto.String
	28,  // 237: google.fhir.stu3.proto.ElementDefinition.Example.value:type_name -> google.fhir.stu3.proto.ElementDefinition.Example.Value
	61,  // 238: google.fhir.stu3.proto.ElementDefinition.MinValue.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 239: google.fhir.stu3.proto.ElementDefinition.MinValue.date_time:type_name -> google.fhir.stu3.proto.DateTime
	63,  // 240: google.fhir.stu3.proto.ElementDefinition.MinValue.instant:type_name -> google.fhir.stu3.proto.Instant
	66,  // 241: google.fhir.stu3.proto.ElementDefinition.MinValue.time:type_name -> google.fhir.stu3.proto.Time
	62,  // 242: google.fhir.stu3.proto.ElementDefinition.MinValue.decimal:type_name -> google.fhir.stu3.proto.Decimal
	42,  // 243: google.fhir.stu3.proto.ElementDefinition.MinValue.integer:type_name -> google.fhir.stu3.proto.Integer
	65,  // 244: google.fhir.stu3.proto.ElementDefinition.MinValue.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	41,  // 245: google.fhir.stu3.proto.ElementDefinition.MinValue.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	75,  // 246: google.fhir.stu3.proto.ElementDefinition.MinValue.quantity:type_name -> google.fhir.stu3.proto.Quantity
	61,  // 247: google.fhir.stu3.proto.ElementDefinition.MaxValue.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 248: google.fhir.stu3.proto.ElementDefinition.MaxValue.date_time:type_name -> google.fhir.stu3.proto.DateTime
	63,  // 249: google.fhir.stu3.proto.ElementDefinition.MaxValue.instant:type_name -> google.fhir.stu3.proto.Instant
	66,  // 250: google.fhir.stu3.proto.ElementDefinition.MaxValue.time:type_name -> google.fhir.stu3.proto.Time
	62,  // 251: google.fhir.stu3.proto.ElementDefinition.MaxValue.decimal:type_name -> google.fhir.stu3.proto.Decimal
	42,  // 252: google.fhir.stu3.proto.ElementDefinition.MaxValue.integer:type_name -> google.fhir.stu3.proto.Integer
	65,  // 253: google.fhir.stu3.proto.ElementDefinition.MaxValue.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	41,  // 254: google.fhir.stu3.proto.ElementDefinition.MaxValue.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	75,  // 255: google.fhir.stu3.proto.ElementDefinition.MaxValue.quantity:type_name -> google.fhir.stu3.proto.Quantity
	32,  // 256: google.fhir.stu3.proto.ElementDefinition.Constraint.id:type_name -> google.fhir.stu3.proto.String
	33,  // 257: google.fhir.stu3.proto.ElementDefinition.Constraint.extension:type_name -> google.fhir.stu3.proto.Extension
	43,  // 258: google.fhir.stu3.proto.ElementDefinition.Constraint.key:type_name -> google.fhir.stu3.proto.Id
	32,  // 259: google.fhir.stu3.proto.ElementDefinition.Constraint.requirements:type_name -> google.fhir.stu3.proto.String
	82,  // 260: google.fhir.stu3.proto.ElementDefinition.Constraint.severity:type_name -> google.fhir.stu3.proto.ConstraintSeverityCode
	32,  // 261: google.fhir.stu3.proto.ElementDefinition.Constraint.human:type_name -> google.fhir.stu3.proto.String
	32,  // 262: google.fhir.stu3.proto.ElementDefinition.Constraint.expression:type_name -> google.fhir.stu3.proto.String
	32,  // 263: google.fhir.stu3.proto.ElementDefinition.Constraint.xpath:type_name -> google.fhir.stu3.proto.String
	37,  // 264: google.fhir.stu3.proto.ElementDefinition.Constraint.source:type_name -> google.fhir.stu3.proto.Uri
	32,  // 265: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.id:type_name -> google.fhir.stu3.proto.String
	33,  // 266: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.extension:type_name -> google.fhir.stu3.proto.Extension
	83,  // 267: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.strength:type_name -> google.fhir.stu3.proto.BindingStrengthCode
	32,  // 268: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.description:type_name -> google.fhir.stu3.proto.String
	29,  // 269: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.value_set:type_name -> google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.ValueSet
	32,  // 270: google.fhir.stu3.proto.ElementDefinition.Mapping.id:type_name -> google.fhir.stu3.proto.String
	33,  // 271: google.fhir.stu3.proto.ElementDefinition.Mapping.extension:type_name -> google.fhir.stu3.proto.Extension
	43,  // 272: google.fhir.stu3.proto.ElementDefinition.Mapping.identity:type_name -> google.fhir.stu3.proto.Id
	84,  // 273: google.fhir.stu3.proto.ElementDefinition.Mapping.language:type_name -> google.fhir.stu3.proto.MimeTypeCode
	32,  // 274: google.fhir.stu3.proto.ElementDefinition.Mapping.map:type_name -> google.fhir.stu3.proto.String
	32,  // 275: google.fhir.stu3.proto.ElementDefinition.Mapping.comment:type_name -> google.fhir.stu3.proto.String
	32,  // 276: google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator.id:type_name -> google.fhir.stu3.proto.String
	33,  // 277: google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator.extension:type_name -> google.fhir.stu3.proto.Extension
	85,  // 278: google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator.type:type_name -> google.fhir.stu3.proto.DiscriminatorTypeCode
	32,  // 279: google.fhir.stu3.proto.ElementDefinition.Slicing.Discriminator.path:type_name -> google.fhir.stu3.proto.String
	60,  // 280: google.fhir.stu3.proto.ElementDefinition.Example.Value.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	44,  // 281: google.fhir.stu3.proto.ElementDefinition.Example.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	47,  // 282: google.fhir.stu3.proto.ElementDefinition.Example.Value.code:type_name -> google.fhir.stu3.proto.Code
	61,  // 283: google.fhir.stu3.proto.ElementDefinition.Example.Value.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 284: google.fhir.stu3.proto.ElementDefinition.Example.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	62,  // 285: google.fhir.stu3.proto.ElementDefinition.Example.Value.decimal:type_name -> google.fhir.stu3.proto.Decimal
	43,  // 286: google.fhir.stu3.proto.ElementDefinition.Example.Value.id:type_name -> google.fhir.stu3.proto.Id
	63,  // 287: google.fhir.stu3.proto.ElementDefinition.Example.Value.instant:type_name -> google.fhir.stu3.proto.Instant
	42,  // 288: google.fhir.stu3.proto.ElementDefinition.Example.Value.integer:type_name -> google.fhir.stu3.proto.Integer
	40,  // 289: google.fhir.stu3.proto.ElementDefinition.Example.Value.markdown:type_name -> google.fhir.stu3.proto.Markdown
	64,  // 290: google.fhir.stu3.proto.ElementDefinition.Example.Value.oid:type_name -> google.fhir.stu3.proto.Oid
	65,  // 291: google.fhir.stu3.proto.ElementDefinition.Example.Value.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	32,  // 292: google.fhir.stu3.proto.ElementDefinition.Example.Value.string_value:type_name -> google.fhir.stu3.proto.String
	66,  // 293: google.fhir.stu3.proto.ElementDefinition.Example.Value.time:type_name -> google.fhir.stu3.proto.Time
	41,  // 294: google.fhir.stu3.proto.ElementDefinition.Example.Value.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	37,  // 295: google.fhir.stu3.proto.ElementDefinition.Example.Value.uri:type_name -> google.fhir.stu3.proto.Uri
	67,  // 296: google.fhir.stu3.proto.ElementDefinition.Example.Value.address:type_name -> google.fhir.stu3.proto.Address
	68,  // 297: google.fhir.stu3.proto.ElementDefinition.Example.Value.age:type_name -> google.fhir.stu3.proto.Age
	69,  // 298: google.fhir.stu3.proto.ElementDefinition.Example.Value.annotation:type_name -> google.fhir.stu3.proto.Annotation
	51,  // 299: google.fhir.stu3.proto.ElementDefinition.Example.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	53,  // 300: google.fhir.stu3.proto.ElementDefinition.Example.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	39,  // 301: google.fhir.stu3.proto.ElementDefinition.Example.Value.coding:type_name -> google.fhir.stu3.proto.Coding
	34,  // 302: google.fhir.stu3.proto.ElementDefinition.Example.Value.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	70,  // 303: google.fhir.stu3.proto.ElementDefinition.Example.Value.count:type_name -> google.fhir.stu3.proto.Count
	71,  // 304: google.fhir.stu3.proto.ElementDefinition.Example.Value.distance:type_name -> google.fhir.stu3.proto.Distance
	56,  // 305: google.fhir.stu3.proto.ElementDefinition.Example.Value.duration:type_name -> google.fhir.stu3.proto.Duration
	72,  // 306: google.fhir.stu3.proto.ElementDefinition.Example.Value.human_name:type_name -> google.fhir.stu3.proto.HumanName
	73,  // 307: google.fhir.stu3.proto.ElementDefinition.Example.Value.identifier:type_name -> google.fhir.stu3.proto.Identifier
	74,  // 308: google.fhir.stu3.proto.ElementDefinition.Example.Value.money:type_name -> google.fhir.stu3.proto.Money
	55,  // 309: google.fhir.stu3.proto.ElementDefinition.Example.Value.period:type_name -> google.fhir.stu3.proto.Period
	75,  // 310: google.fhir.stu3.proto.ElementDefinition.Example.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	76,  // 311: google.fhir.stu3.proto.ElementDefinition.Example.Value.range:type_name -> google.fhir.stu3.proto.Range
	77,  // 312: google.fhir.stu3.proto.ElementDefinition.Example.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	49,  // 313: google.fhir.stu3.proto.ElementDefinition.Example.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	78,  // 314: google.fhir.stu3.proto.ElementDefinition.Example.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	79,  // 315: google.fhir.stu3.proto.ElementDefinition.Example.Value.signature:type_name -> google.fhir.stu3.proto.Signature
	80,  // 316: google.fhir.stu3.proto.ElementDefinition.Example.Value.timing:type_name -> google.fhir.stu3.proto.Timing
	81,  // 317: google.fhir.stu3.proto.ElementDefinition.Example.Value.meta:type_name -> google.fhir.stu3.proto.Meta
	37,  // 318: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.ValueSet.uri:type_name -> google.fhir.stu3.proto.Uri
	49,  // 319: google.fhir.stu3.proto.ElementDefinition.ElementDefinitionBinding.ValueSet.reference:type_name -> google.fhir.stu3.proto.Reference
	80,  // 320: google.fhir.stu3.proto.TriggerDefinition.EventTiming.timing:type_name -> google.fhir.stu3.proto.Timing
	49,  // 321: google.fhir.stu3.proto.TriggerDefinition.EventTiming.reference:type_name -> google.fhir.stu3.proto.Reference
	61,  // 322: google.fhir.stu3.proto.TriggerDefinition.EventTiming.date:type_name -> google.fhir.stu3.proto.Date
	54,  // 323: google.fhir.stu3.proto.TriggerDefinition.EventTiming.date_time:type_name -> google.fhir.stu3.proto.DateTime
	53,  // 324: google.fhir.stu3.proto.UsageContext.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	75,  // 325: google.fhir.stu3.proto.UsageContext.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	76,  // 326: google.fhir.stu3.proto.UsageContext.Value.range:type_name -> google.fhir.stu3.proto.Range
	327, // [327:327] is the sub-list for method output_type
	327, // [327:327] is the sub-list for method input_type
	327, // [327:327] is the sub-list for extension type_name
	327, // [327:327] is the sub-list for extension extendee
	0,   // [0:327] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_stu3_metadatatypes_proto_init() }
func file_proto_google_fhir_proto_stu3_metadatatypes_proto_init() {
	if File_proto_google_fhir_proto_stu3_metadatatypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackboneElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Narrative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_CodeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_DateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_CodeFilter_ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_DateFilter_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_TypeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_DefaultValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Fixed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_MinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_MaxValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_ElementDefinitionBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing_Discriminator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Example_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_ElementDefinitionBinding_ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDefinition_EventTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageContext_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DataRequirement_CodeFilter_ValueSet_StringValue)(nil),
		(*DataRequirement_CodeFilter_ValueSet_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*DataRequirement_DateFilter_Value_DateTime)(nil),
		(*DataRequirement_DateFilter_Value_Period)(nil),
		(*DataRequirement_DateFilter_Value_Duration)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ElementDefinition_DefaultValue_Base64Binary)(nil),
		(*ElementDefinition_DefaultValue_Boolean)(nil),
		(*ElementDefinition_DefaultValue_Code)(nil),
		(*ElementDefinition_DefaultValue_Date)(nil),
		(*ElementDefinition_DefaultValue_DateTime)(nil),
		(*ElementDefinition_DefaultValue_Decimal)(nil),
		(*ElementDefinition_DefaultValue_Id)(nil),
		(*ElementDefinition_DefaultValue_Instant)(nil),
		(*ElementDefinition_DefaultValue_Integer)(nil),
		(*ElementDefinition_DefaultValue_Markdown)(nil),
		(*ElementDefinition_DefaultValue_Oid)(nil),
		(*ElementDefinition_DefaultValue_PositiveInt)(nil),
		(*ElementDefinition_DefaultValue_StringValue)(nil),
		(*ElementDefinition_DefaultValue_Time)(nil),
		(*ElementDefinition_DefaultValue_UnsignedInt)(nil),
		(*ElementDefinition_DefaultValue_Uri)(nil),
		(*ElementDefinition_DefaultValue_Address)(nil),
		(*ElementDefinition_DefaultValue_Age)(nil),
		(*ElementDefinition_DefaultValue_Annotation)(nil),
		(*ElementDefinition_DefaultValue_Attachment)(nil),
		(*ElementDefinition_DefaultValue_CodeableConcept)(nil),
		(*ElementDefinition_DefaultValue_Coding)(nil),
		(*ElementDefinition_DefaultValue_ContactPoint)(nil),
		(*ElementDefinition_DefaultValue_Count)(nil),
		(*ElementDefinition_DefaultValue_Distance)(nil),
		(*ElementDefinition_DefaultValue_Duration)(nil),
		(*ElementDefinition_DefaultValue_HumanName)(nil),
		(*ElementDefinition_DefaultValue_Identifier)(nil),
		(*ElementDefinition_DefaultValue_Money)(nil),
		(*ElementDefinition_DefaultValue_Period)(nil),
		(*ElementDefinition_DefaultValue_Quantity)(nil),
		(*ElementDefinition_DefaultValue_Range)(nil),
		(*ElementDefinition_DefaultValue_Ratio)(nil),
		(*ElementDefinition_DefaultValue_Reference)(nil),
		(*ElementDefinition_DefaultValue_SampledData)(nil),
		(*ElementDefinition_DefaultValue_Signature)(nil),
		(*ElementDefinition_DefaultValue_Timing)(nil),
		(*ElementDefinition_DefaultValue_Meta)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ElementDefinition_Fixed_Base64Binary)(nil),
		(*ElementDefinition_Fixed_Boolean)(nil),
		(*ElementDefinition_Fixed_Code)(nil),
		(*ElementDefinition_Fixed_Date)(nil),
		(*ElementDefinition_Fixed_DateTime)(nil),
		(*ElementDefinition_Fixed_Decimal)(nil),
		(*ElementDefinition_Fixed_Id)(nil),
		(*ElementDefinition_Fixed_Instant)(nil),
		(*ElementDefinition_Fixed_Integer)(nil),
		(*ElementDefinition_Fixed_Markdown)(nil),
		(*ElementDefinition_Fixed_Oid)(nil),
		(*ElementDefinition_Fixed_PositiveInt)(nil),
		(*ElementDefinition_Fixed_StringValue)(nil),
		(*ElementDefinition_Fixed_Time)(nil),
		(*ElementDefinition_Fixed_UnsignedInt)(nil),
		(*ElementDefinition_Fixed_Uri)(nil),
		(*ElementDefinition_Fixed_Address)(nil),
		(*ElementDefinition_Fixed_Age)(nil),
		(*ElementDefinition_Fixed_Annotation)(nil),
		(*ElementDefinition_Fixed_Attachment)(nil),
		(*ElementDefinition_Fixed_CodeableConcept)(nil),
		(*ElementDefinition_Fixed_Coding)(nil),
		(*ElementDefinition_Fixed_ContactPoint)(nil),
		(*ElementDefinition_Fixed_Count)(nil),
		(*ElementDefinition_Fixed_Distance)(nil),
		(*ElementDefinition_Fixed_Duration)(nil),
		(*ElementDefinition_Fixed_HumanName)(nil),
		(*ElementDefinition_Fixed_Identifier)(nil),
		(*ElementDefinition_Fixed_Money)(nil),
		(*ElementDefinition_Fixed_Period)(nil),
		(*ElementDefinition_Fixed_Quantity)(nil),
		(*ElementDefinition_Fixed_Range)(nil),
		(*ElementDefinition_Fixed_Ratio)(nil),
		(*ElementDefinition_Fixed_Reference)(nil),
		(*ElementDefinition_Fixed_SampledData)(nil),
		(*ElementDefinition_Fixed_Signature)(nil),
		(*ElementDefinition_Fixed_Timing)(nil),
		(*ElementDefinition_Fixed_Meta)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ElementDefinition_Pattern_Base64Binary)(nil),
		(*ElementDefinition_Pattern_Boolean)(nil),
		(*ElementDefinition_Pattern_Code)(nil),
		(*ElementDefinition_Pattern_Date)(nil),
		(*ElementDefinition_Pattern_DateTime)(nil),
		(*ElementDefinition_Pattern_Decimal)(nil),
		(*ElementDefinition_Pattern_Id)(nil),
		(*ElementDefinition_Pattern_Instant)(nil),
		(*ElementDefinition_Pattern_Integer)(nil),
		(*ElementDefinition_Pattern_Markdown)(nil),
		(*ElementDefinition_Pattern_Oid)(nil),
		(*ElementDefinition_Pattern_PositiveInt)(nil),
		(*ElementDefinition_Pattern_StringValue)(nil),
		(*ElementDefinition_Pattern_Time)(nil),
		(*ElementDefinition_Pattern_UnsignedInt)(nil),
		(*ElementDefinition_Pattern_Uri)(nil),
		(*ElementDefinition_Pattern_Address)(nil),
		(*ElementDefinition_Pattern_Age)(nil),
		(*ElementDefinition_Pattern_Annotation)(nil),
		(*ElementDefinition_Pattern_Attachment)(nil),
		(*ElementDefinition_Pattern_CodeableConcept)(nil),
		(*ElementDefinition_Pattern_Coding)(nil),
		(*ElementDefinition_Pattern_ContactPoint)(nil),
		(*ElementDefinition_Pattern_Count)(nil),
		(*ElementDefinition_Pattern_Distance)(nil),
		(*ElementDefinition_Pattern_Duration)(nil),
		(*ElementDefinition_Pattern_HumanName)(nil),
		(*ElementDefinition_Pattern_Identifier)(nil),
		(*ElementDefinition_Pattern_Money)(nil),
		(*ElementDefinition_Pattern_Period)(nil),
		(*ElementDefinition_Pattern_Quantity)(nil),
		(*ElementDefinition_Pattern_Range)(nil),
		(*ElementDefinition_Pattern_Ratio)(nil),
		(*ElementDefinition_Pattern_Reference)(nil),
		(*ElementDefinition_Pattern_SampledData)(nil),
		(*ElementDefinition_Pattern_Signature)(nil),
		(*ElementDefinition_Pattern_Timing)(nil),
		(*ElementDefinition_Pattern_Meta)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ElementDefinition_MinValue_Date)(nil),
		(*ElementDefinition_MinValue_DateTime)(nil),
		(*ElementDefinition_MinValue_Instant)(nil),
		(*ElementDefinition_MinValue_Time)(nil),
		(*ElementDefinition_MinValue_Decimal)(nil),
		(*ElementDefinition_MinValue_Integer)(nil),
		(*ElementDefinition_MinValue_PositiveInt)(nil),
		(*ElementDefinition_MinValue_UnsignedInt)(nil),
		(*ElementDefinition_MinValue_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*ElementDefinition_MaxValue_Date)(nil),
		(*ElementDefinition_MaxValue_DateTime)(nil),
		(*ElementDefinition_MaxValue_Instant)(nil),
		(*ElementDefinition_MaxValue_Time)(nil),
		(*ElementDefinition_MaxValue_Decimal)(nil),
		(*ElementDefinition_MaxValue_Integer)(nil),
		(*ElementDefinition_MaxValue_PositiveInt)(nil),
		(*ElementDefinition_MaxValue_UnsignedInt)(nil),
		(*ElementDefinition_MaxValue_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ElementDefinition_Example_Value_Base64Binary)(nil),
		(*ElementDefinition_Example_Value_Boolean)(nil),
		(*ElementDefinition_Example_Value_Code)(nil),
		(*ElementDefinition_Example_Value_Date)(nil),
		(*ElementDefinition_Example_Value_DateTime)(nil),
		(*ElementDefinition_Example_Value_Decimal)(nil),
		(*ElementDefinition_Example_Value_Id)(nil),
		(*ElementDefinition_Example_Value_Instant)(nil),
		(*ElementDefinition_Example_Value_Integer)(nil),
		(*ElementDefinition_Example_Value_Markdown)(nil),
		(*ElementDefinition_Example_Value_Oid)(nil),
		(*ElementDefinition_Example_Value_PositiveInt)(nil),
		(*ElementDefinition_Example_Value_StringValue)(nil),
		(*ElementDefinition_Example_Value_Time)(nil),
		(*ElementDefinition_Example_Value_UnsignedInt)(nil),
		(*ElementDefinition_Example_Value_Uri)(nil),
		(*ElementDefinition_Example_Value_Address)(nil),
		(*ElementDefinition_Example_Value_Age)(nil),
		(*ElementDefinition_Example_Value_Annotation)(nil),
		(*ElementDefinition_Example_Value_Attachment)(nil),
		(*ElementDefinition_Example_Value_CodeableConcept)(nil),
		(*ElementDefinition_Example_Value_Coding)(nil),
		(*ElementDefinition_Example_Value_ContactPoint)(nil),
		(*ElementDefinition_Example_Value_Count)(nil),
		(*ElementDefinition_Example_Value_Distance)(nil),
		(*ElementDefinition_Example_Value_Duration)(nil),
		(*ElementDefinition_Example_Value_HumanName)(nil),
		(*ElementDefinition_Example_Value_Identifier)(nil),
		(*ElementDefinition_Example_Value_Money)(nil),
		(*ElementDefinition_Example_Value_Period)(nil),
		(*ElementDefinition_Example_Value_Quantity)(nil),
		(*ElementDefinition_Example_Value_Range)(nil),
		(*ElementDefinition_Example_Value_Ratio)(nil),
		(*ElementDefinition_Example_Value_Reference)(nil),
		(*ElementDefinition_Example_Value_SampledData)(nil),
		(*ElementDefinition_Example_Value_Signature)(nil),
		(*ElementDefinition_Example_Value_Timing)(nil),
		(*ElementDefinition_Example_Value_Meta)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*ElementDefinition_ElementDefinitionBinding_ValueSet_Uri)(nil),
		(*ElementDefinition_ElementDefinitionBinding_ValueSet_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*TriggerDefinition_EventTiming_Timing)(nil),
		(*TriggerDefinition_EventTiming_Reference)(nil),
		(*TriggerDefinition_EventTiming_Date)(nil),
		(*TriggerDefinition_EventTiming_DateTime)(nil),
	}
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*UsageContext_Value_CodeableConcept)(nil),
		(*UsageContext_Value_Quantity)(nil),
		(*UsageContext_Value_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_stu3_metadatatypes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_stu3_metadatatypes_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_stu3_metadatatypes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_stu3_metadatatypes_proto = out.File
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_rawDesc = nil
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_goTypes = nil
	file_proto_google_fhir_proto_stu3_metadatatypes_proto_depIdxs = nil
}
