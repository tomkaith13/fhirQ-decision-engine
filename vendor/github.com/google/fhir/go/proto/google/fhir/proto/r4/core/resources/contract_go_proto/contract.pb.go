//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/contract.proto

package contract_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Contract, last updated
// 2019-11-01T09:29:23.356+11:00. Legal Agreement. See
// http://hl7.org/fhir/StructureDefinition/Contract
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract number
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Basal definition
	Url *datatypes_go_proto.Uri `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	// Business edition
	Version *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	Status  *Contract_StatusCode       `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Negotiation status
	LegalState *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=legal_state,json=legalState,proto3" json:"legal_state,omitempty"`
	// Source Contract Definition
	InstantiatesCanonical *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=instantiates_canonical,json=instantiatesCanonical,proto3" json:"instantiates_canonical,omitempty"`
	// External Contract Definition
	InstantiatesUri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=instantiates_uri,json=instantiatesUri,proto3" json:"instantiates_uri,omitempty"`
	// Content derived from the basal information
	ContentDerivative *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=content_derivative,json=contentDerivative,proto3" json:"content_derivative,omitempty"`
	// When this Contract was issued
	Issued *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=issued,proto3" json:"issued,omitempty"`
	// Effective time
	Applies *datatypes_go_proto.Period `protobuf:"bytes,19,opt,name=applies,proto3" json:"applies,omitempty"`
	// Contract cessation cause
	ExpirationType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=expiration_type,json=expirationType,proto3" json:"expiration_type,omitempty"`
	// Contract Target Entity
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=subject,proto3" json:"subject,omitempty"`
	// Authority under which this Contract has standing
	Authority []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=authority,proto3" json:"authority,omitempty"`
	// A sphere of control governed by an authoritative jurisdiction,
	// organization, or person
	Domain []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=domain,proto3" json:"domain,omitempty"`
	// Specific Location
	Site []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=site,proto3" json:"site,omitempty"`
	// Computer friendly designation
	Name *datatypes_go_proto.String `protobuf:"bytes,25,opt,name=name,proto3" json:"name,omitempty"`
	// Human Friendly name
	Title *datatypes_go_proto.String `protobuf:"bytes,26,opt,name=title,proto3" json:"title,omitempty"`
	// Subordinate Friendly name
	Subtitle *datatypes_go_proto.String `protobuf:"bytes,27,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// Acronym or short name
	Alias []*datatypes_go_proto.String `protobuf:"bytes,28,rep,name=alias,proto3" json:"alias,omitempty"`
	// Source of Contract
	Author *datatypes_go_proto.Reference `protobuf:"bytes,29,opt,name=author,proto3" json:"author,omitempty"`
	// Range of Legal Concerns
	Scope *datatypes_go_proto.CodeableConcept `protobuf:"bytes,30,opt,name=scope,proto3" json:"scope,omitempty"`
	Topic *Contract_TopicX                    `protobuf:"bytes,31,opt,name=topic,proto3" json:"topic,omitempty"`
	// Legal instrument category
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,opt,name=type,proto3" json:"type,omitempty"`
	// Subtype within the context of type
	SubType           []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,rep,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	ContentDefinition *Contract_ContentDefinition           `protobuf:"bytes,34,opt,name=content_definition,json=contentDefinition,proto3" json:"content_definition,omitempty"`
	Term              []*Contract_Term                      `protobuf:"bytes,35,rep,name=term,proto3" json:"term,omitempty"`
	// Extra Information
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,36,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Key event in Contract History
	RelevantHistory []*datatypes_go_proto.Reference `protobuf:"bytes,37,rep,name=relevant_history,json=relevantHistory,proto3" json:"relevant_history,omitempty"`
	Signer          []*Contract_Signatory           `protobuf:"bytes,38,rep,name=signer,proto3" json:"signer,omitempty"`
	Friendly        []*Contract_FriendlyLanguage    `protobuf:"bytes,39,rep,name=friendly,proto3" json:"friendly,omitempty"`
	Legal           []*Contract_LegalLanguage       `protobuf:"bytes,40,rep,name=legal,proto3" json:"legal,omitempty"`
	Rule            []*Contract_ComputableLanguage  `protobuf:"bytes,41,rep,name=rule,proto3" json:"rule,omitempty"`
	LegallyBinding  *Contract_LegallyBindingX       `protobuf:"bytes,42,opt,name=legally_binding,json=legallyBinding,proto3" json:"legally_binding,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0}
}

func (x *Contract) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Contract) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Contract) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Contract) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Contract) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Contract) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Contract) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Contract) GetStatus() *Contract_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Contract) GetLegalState() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalState
	}
	return nil
}

func (x *Contract) GetInstantiatesCanonical() *datatypes_go_proto.Reference {
	if x != nil {
		return x.InstantiatesCanonical
	}
	return nil
}

func (x *Contract) GetInstantiatesUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.InstantiatesUri
	}
	return nil
}

func (x *Contract) GetContentDerivative() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ContentDerivative
	}
	return nil
}

func (x *Contract) GetIssued() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Contract) GetApplies() *datatypes_go_proto.Period {
	if x != nil {
		return x.Applies
	}
	return nil
}

func (x *Contract) GetExpirationType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExpirationType
	}
	return nil
}

func (x *Contract) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Contract) GetAuthority() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Contract) GetDomain() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Contract) GetSite() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Contract) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Contract) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Contract) GetSubtitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *Contract) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *Contract) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Contract) GetScope() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Contract) GetTopic() *Contract_TopicX {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Contract) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract) GetSubType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *Contract) GetContentDefinition() *Contract_ContentDefinition {
	if x != nil {
		return x.ContentDefinition
	}
	return nil
}

func (x *Contract) GetTerm() []*Contract_Term {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *Contract) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *Contract) GetRelevantHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.RelevantHistory
	}
	return nil
}

func (x *Contract) GetSigner() []*Contract_Signatory {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *Contract) GetFriendly() []*Contract_FriendlyLanguage {
	if x != nil {
		return x.Friendly
	}
	return nil
}

func (x *Contract) GetLegal() []*Contract_LegalLanguage {
	if x != nil {
		return x.Legal
	}
	return nil
}

func (x *Contract) GetRule() []*Contract_ComputableLanguage {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Contract) GetLegallyBinding() *Contract_LegallyBindingX {
	if x != nil {
		return x.LegallyBinding
	}
	return nil
}

// amended | appended | cancelled | disputed | entered-in-error | executable |
// executed | negotiable | offered | policy | rejected | renewed | revoked |
// resolved | terminated
type Contract_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ContractResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ContractResourceStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Contract_StatusCode) Reset() {
	*x = Contract_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_StatusCode) ProtoMessage() {}

func (x *Contract_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_StatusCode.ProtoReflect.Descriptor instead.
func (*Contract_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Contract_StatusCode) GetValue() codes_go_proto.ContractResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ContractResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *Contract_StatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_StatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Focus of contract interest
type Contract_TopicX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_TopicX_CodeableConcept
	//	*Contract_TopicX_Reference
	Choice isContract_TopicX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_TopicX) Reset() {
	*x = Contract_TopicX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_TopicX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_TopicX) ProtoMessage() {}

func (x *Contract_TopicX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_TopicX.ProtoReflect.Descriptor instead.
func (*Contract_TopicX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Contract_TopicX) GetChoice() isContract_TopicX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_TopicX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Contract_TopicX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Contract_TopicX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_TopicX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_TopicX_Choice interface {
	isContract_TopicX_Choice()
}

type Contract_TopicX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Contract_TopicX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_TopicX_CodeableConcept) isContract_TopicX_Choice() {}

func (*Contract_TopicX_Reference) isContract_TopicX_Choice() {}

// Contract precursor content
type Contract_ContentDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Content structure and use
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Detailed Content Type Definition
	SubType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// Publisher Entity
	Publisher *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// When published
	PublicationDate   *datatypes_go_proto.DateTime                      `protobuf:"bytes,7,opt,name=publication_date,json=publicationDate,proto3" json:"publication_date,omitempty"`
	PublicationStatus *Contract_ContentDefinition_PublicationStatusCode `protobuf:"bytes,8,opt,name=publication_status,json=publicationStatus,proto3" json:"publication_status,omitempty"`
	// Publication Ownership
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,9,opt,name=copyright,proto3" json:"copyright,omitempty"`
}

func (x *Contract_ContentDefinition) Reset() {
	*x = Contract_ContentDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ContentDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ContentDefinition) ProtoMessage() {}

func (x *Contract_ContentDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ContentDefinition.ProtoReflect.Descriptor instead.
func (*Contract_ContentDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Contract_ContentDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_ContentDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_ContentDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_ContentDefinition) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_ContentDefinition) GetSubType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *Contract_ContentDefinition) GetPublisher() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Contract_ContentDefinition) GetPublicationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.PublicationDate
	}
	return nil
}

func (x *Contract_ContentDefinition) GetPublicationStatus() *Contract_ContentDefinition_PublicationStatusCode {
	if x != nil {
		return x.PublicationStatus
	}
	return nil
}

func (x *Contract_ContentDefinition) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

// Contract Term List
type Contract_Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract Term Number
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Contract Term Issue Date Time
	Issued *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=issued,proto3" json:"issued,omitempty"`
	// Contract Term Effective Time
	Applies *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=applies,proto3" json:"applies,omitempty"`
	Topic   *Contract_Term_TopicX      `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	// Contract Term Type or Form
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// Contract Term Type specific classification
	SubType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// Term Statement
	Text          *datatypes_go_proto.String     `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	SecurityLabel []*Contract_Term_SecurityLabel `protobuf:"bytes,11,rep,name=security_label,json=securityLabel,proto3" json:"security_label,omitempty"`
	Offer         *Contract_Term_ContractOffer   `protobuf:"bytes,12,opt,name=offer,proto3" json:"offer,omitempty"`
	Asset         []*Contract_Term_ContractAsset `protobuf:"bytes,13,rep,name=asset,proto3" json:"asset,omitempty"`
	Action        []*Contract_Term_Action        `protobuf:"bytes,14,rep,name=action,proto3" json:"action,omitempty"`
	// Nested Contract Term Group
	Group []*Contract_Term `protobuf:"bytes,15,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *Contract_Term) Reset() {
	*x = Contract_Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term) ProtoMessage() {}

func (x *Contract_Term) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term.ProtoReflect.Descriptor instead.
func (*Contract_Term) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Contract_Term) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract_Term) GetIssued() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Contract_Term) GetApplies() *datatypes_go_proto.Period {
	if x != nil {
		return x.Applies
	}
	return nil
}

func (x *Contract_Term) GetTopic() *Contract_Term_TopicX {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Contract_Term) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Term) GetSubType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *Contract_Term) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Contract_Term) GetSecurityLabel() []*Contract_Term_SecurityLabel {
	if x != nil {
		return x.SecurityLabel
	}
	return nil
}

func (x *Contract_Term) GetOffer() *Contract_Term_ContractOffer {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *Contract_Term) GetAsset() []*Contract_Term_ContractAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Contract_Term) GetAction() []*Contract_Term_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Contract_Term) GetGroup() []*Contract_Term {
	if x != nil {
		return x.Group
	}
	return nil
}

// Contract Signatory
type Contract_Signatory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract Signatory Role
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Contract Signatory Party
	Party *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=party,proto3" json:"party,omitempty"`
	// Contract Documentation Signature
	Signature []*datatypes_go_proto.Signature `protobuf:"bytes,6,rep,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Contract_Signatory) Reset() {
	*x = Contract_Signatory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Signatory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Signatory) ProtoMessage() {}

func (x *Contract_Signatory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Signatory.ProtoReflect.Descriptor instead.
func (*Contract_Signatory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Contract_Signatory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Signatory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Signatory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Signatory) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Signatory) GetParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Contract_Signatory) GetSignature() []*datatypes_go_proto.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Contract Friendly Language
type Contract_FriendlyLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension     `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Contract_FriendlyLanguage_ContentX `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Contract_FriendlyLanguage) Reset() {
	*x = Contract_FriendlyLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_FriendlyLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_FriendlyLanguage) ProtoMessage() {}

func (x *Contract_FriendlyLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_FriendlyLanguage.ProtoReflect.Descriptor instead.
func (*Contract_FriendlyLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Contract_FriendlyLanguage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_FriendlyLanguage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_FriendlyLanguage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_FriendlyLanguage) GetContent() *Contract_FriendlyLanguage_ContentX {
	if x != nil {
		return x.Content
	}
	return nil
}

// Contract Legal Language
type Contract_LegalLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Contract_LegalLanguage_ContentX `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Contract_LegalLanguage) Reset() {
	*x = Contract_LegalLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_LegalLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_LegalLanguage) ProtoMessage() {}

func (x *Contract_LegalLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_LegalLanguage.ProtoReflect.Descriptor instead.
func (*Contract_LegalLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Contract_LegalLanguage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_LegalLanguage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_LegalLanguage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_LegalLanguage) GetContent() *Contract_LegalLanguage_ContentX {
	if x != nil {
		return x.Content
	}
	return nil
}

// Computable Contract Language
type Contract_ComputableLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Contract_ComputableLanguage_ContentX `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Contract_ComputableLanguage) Reset() {
	*x = Contract_ComputableLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ComputableLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ComputableLanguage) ProtoMessage() {}

func (x *Contract_ComputableLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ComputableLanguage.ProtoReflect.Descriptor instead.
func (*Contract_ComputableLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Contract_ComputableLanguage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_ComputableLanguage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_ComputableLanguage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_ComputableLanguage) GetContent() *Contract_ComputableLanguage_ContentX {
	if x != nil {
		return x.Content
	}
	return nil
}

// Binding Contract
type Contract_LegallyBindingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_LegallyBindingX_Attachment
	//	*Contract_LegallyBindingX_Reference
	Choice isContract_LegallyBindingX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_LegallyBindingX) Reset() {
	*x = Contract_LegallyBindingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_LegallyBindingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_LegallyBindingX) ProtoMessage() {}

func (x *Contract_LegallyBindingX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_LegallyBindingX.ProtoReflect.Descriptor instead.
func (*Contract_LegallyBindingX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 8}
}

func (m *Contract_LegallyBindingX) GetChoice() isContract_LegallyBindingX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_LegallyBindingX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Contract_LegallyBindingX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_LegallyBindingX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_LegallyBindingX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_LegallyBindingX_Choice interface {
	isContract_LegallyBindingX_Choice()
}

type Contract_LegallyBindingX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_LegallyBindingX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_LegallyBindingX_Attachment) isContract_LegallyBindingX_Choice() {}

func (*Contract_LegallyBindingX_Reference) isContract_LegallyBindingX_Choice() {}

// amended | appended | cancelled | disputed | entered-in-error | executable
// | executed | negotiable | offered | policy | rejected | renewed | revoked
// | resolved | terminated
type Contract_ContentDefinition_PublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ContractResourcePublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.ContractResourcePublicationStatusCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                            `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Contract_ContentDefinition_PublicationStatusCode) Reset() {
	*x = Contract_ContentDefinition_PublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ContentDefinition_PublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ContentDefinition_PublicationStatusCode) ProtoMessage() {}

func (x *Contract_ContentDefinition_PublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ContentDefinition_PublicationStatusCode.ProtoReflect.Descriptor instead.
func (*Contract_ContentDefinition_PublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Contract_ContentDefinition_PublicationStatusCode) GetValue() codes_go_proto.ContractResourcePublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ContractResourcePublicationStatusCode_INVALID_UNINITIALIZED
}

func (x *Contract_ContentDefinition_PublicationStatusCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_ContentDefinition_PublicationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Term Concern
type Contract_Term_TopicX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_Term_TopicX_CodeableConcept
	//	*Contract_Term_TopicX_Reference
	Choice isContract_Term_TopicX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_Term_TopicX) Reset() {
	*x = Contract_Term_TopicX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_TopicX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_TopicX) ProtoMessage() {}

func (x *Contract_Term_TopicX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_TopicX.ProtoReflect.Descriptor instead.
func (*Contract_Term_TopicX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *Contract_Term_TopicX) GetChoice() isContract_Term_TopicX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_Term_TopicX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Contract_Term_TopicX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Contract_Term_TopicX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_Term_TopicX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Term_TopicX_Choice interface {
	isContract_Term_TopicX_Choice()
}

type Contract_Term_TopicX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Contract_Term_TopicX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Term_TopicX_CodeableConcept) isContract_Term_TopicX_Choice() {}

func (*Contract_Term_TopicX_Reference) isContract_Term_TopicX_Choice() {}

// Protection for the Term
type Contract_Term_SecurityLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Link to Security Labels
	Number []*datatypes_go_proto.UnsignedInt `protobuf:"bytes,4,rep,name=number,proto3" json:"number,omitempty"`
	// Confidentiality Protection
	Classification *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=classification,proto3" json:"classification,omitempty"`
	// Applicable Policy
	Category []*datatypes_go_proto.Coding `protobuf:"bytes,6,rep,name=category,proto3" json:"category,omitempty"`
	// Handling Instructions
	Control []*datatypes_go_proto.Coding `protobuf:"bytes,7,rep,name=control,proto3" json:"control,omitempty"`
}

func (x *Contract_Term_SecurityLabel) Reset() {
	*x = Contract_Term_SecurityLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_SecurityLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_SecurityLabel) ProtoMessage() {}

func (x *Contract_Term_SecurityLabel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_SecurityLabel.ProtoReflect.Descriptor instead.
func (*Contract_Term_SecurityLabel) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Contract_Term_SecurityLabel) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_SecurityLabel) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_SecurityLabel) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_SecurityLabel) GetNumber() []*datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *Contract_Term_SecurityLabel) GetClassification() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *Contract_Term_SecurityLabel) GetCategory() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Contract_Term_SecurityLabel) GetControl() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Control
	}
	return nil
}

// Context of the Contract term
type Contract_Term_ContractOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Offer business ID
	Identifier []*datatypes_go_proto.Identifier             `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Party      []*Contract_Term_ContractOffer_ContractParty `protobuf:"bytes,5,rep,name=party,proto3" json:"party,omitempty"`
	// Negotiable offer asset
	Topic *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=topic,proto3" json:"topic,omitempty"`
	// Contract Offer Type or Form
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// Accepting party choice
	Decision *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=decision,proto3" json:"decision,omitempty"`
	// How decision is conveyed
	DecisionMode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=decision_mode,json=decisionMode,proto3" json:"decision_mode,omitempty"`
	Answer       []*Contract_Term_ContractOffer_Answer `protobuf:"bytes,10,rep,name=answer,proto3" json:"answer,omitempty"`
	// Human readable offer text
	Text *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	// Pointer to text
	LinkId []*datatypes_go_proto.String `protobuf:"bytes,12,rep,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Offer restriction numbers
	SecurityLabelNumber []*datatypes_go_proto.UnsignedInt `protobuf:"bytes,13,rep,name=security_label_number,json=securityLabelNumber,proto3" json:"security_label_number,omitempty"`
}

func (x *Contract_Term_ContractOffer) Reset() {
	*x = Contract_Term_ContractOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractOffer) ProtoMessage() {}

func (x *Contract_Term_ContractOffer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractOffer.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractOffer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *Contract_Term_ContractOffer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetParty() []*Contract_Term_ContractOffer_ContractParty {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetTopic() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetDecision() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Decision
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetDecisionMode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DecisionMode
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetAnswer() []*Contract_Term_ContractOffer_Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Contract_Term_ContractOffer) GetSecurityLabelNumber() []*datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.SecurityLabelNumber
	}
	return nil
}

// Contract Term Asset List
type Contract_Term_ContractAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Range of asset
	Scope *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// Asset category
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=type,proto3" json:"type,omitempty"`
	// Associated entities
	TypeReference []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=type_reference,json=typeReference,proto3" json:"type_reference,omitempty"`
	// Asset sub-category
	Subtype []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=subtype,proto3" json:"subtype,omitempty"`
	// Kinship of the asset
	Relationship *datatypes_go_proto.Coding                  `protobuf:"bytes,8,opt,name=relationship,proto3" json:"relationship,omitempty"`
	Context      []*Contract_Term_ContractAsset_AssetContext `protobuf:"bytes,9,rep,name=context,proto3" json:"context,omitempty"`
	// Quality desctiption of asset
	Condition *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
	// Asset availability types
	PeriodType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=period_type,json=periodType,proto3" json:"period_type,omitempty"`
	// Time period of the asset
	Period []*datatypes_go_proto.Period `protobuf:"bytes,12,rep,name=period,proto3" json:"period,omitempty"`
	// Time period
	UsePeriod []*datatypes_go_proto.Period `protobuf:"bytes,13,rep,name=use_period,json=usePeriod,proto3" json:"use_period,omitempty"`
	// Asset clause or question text
	Text *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=text,proto3" json:"text,omitempty"`
	// Pointer to asset text
	LinkId []*datatypes_go_proto.String `protobuf:"bytes,15,rep,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Response to assets
	Answer []*Contract_Term_ContractOffer_Answer `protobuf:"bytes,16,rep,name=answer,proto3" json:"answer,omitempty"`
	// Asset restriction numbers
	SecurityLabelNumber []*datatypes_go_proto.UnsignedInt         `protobuf:"bytes,17,rep,name=security_label_number,json=securityLabelNumber,proto3" json:"security_label_number,omitempty"`
	ValuedItem          []*Contract_Term_ContractAsset_ValuedItem `protobuf:"bytes,18,rep,name=valued_item,json=valuedItem,proto3" json:"valued_item,omitempty"`
}

func (x *Contract_Term_ContractAsset) Reset() {
	*x = Contract_Term_ContractAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractAsset) ProtoMessage() {}

func (x *Contract_Term_ContractAsset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractAsset.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractAsset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *Contract_Term_ContractAsset) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetScope() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetTypeReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.TypeReference
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetSubtype() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Subtype
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetRelationship() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetContext() []*Contract_Term_ContractAsset_AssetContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetCondition() *datatypes_go_proto.String {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetPeriodType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PeriodType
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetPeriod() []*datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetUsePeriod() []*datatypes_go_proto.Period {
	if x != nil {
		return x.UsePeriod
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetAnswer() []*Contract_Term_ContractOffer_Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetSecurityLabelNumber() []*datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.SecurityLabelNumber
	}
	return nil
}

func (x *Contract_Term_ContractAsset) GetValuedItem() []*Contract_Term_ContractAsset_ValuedItem {
	if x != nil {
		return x.ValuedItem
	}
	return nil
}

// Entity being ascribed responsibility
type Contract_Term_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// True if the term prohibits the  action
	DoNotPerform *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	// Type or form of the action
	Type    *datatypes_go_proto.CodeableConcept   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Subject []*Contract_Term_Action_ActionSubject `protobuf:"bytes,6,rep,name=subject,proto3" json:"subject,omitempty"`
	// Purpose for the Contract Term Action
	Intent *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=intent,proto3" json:"intent,omitempty"`
	// Pointer to specific item
	LinkId []*datatypes_go_proto.String `protobuf:"bytes,8,rep,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// State of the action
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// Episode associated with action
	Context *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
	// Pointer to specific item
	ContextLinkId []*datatypes_go_proto.String      `protobuf:"bytes,11,rep,name=context_link_id,json=contextLinkId,proto3" json:"context_link_id,omitempty"`
	Occurrence    *Contract_Term_Action_OccurrenceX `protobuf:"bytes,12,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	// Who asked for action
	Requester []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=requester,proto3" json:"requester,omitempty"`
	// Pointer to specific item
	RequesterLinkId []*datatypes_go_proto.String `protobuf:"bytes,14,rep,name=requester_link_id,json=requesterLinkId,proto3" json:"requester_link_id,omitempty"`
	// Kind of service performer
	PerformerType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Competency of the performer
	PerformerRole *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=performer_role,json=performerRole,proto3" json:"performer_role,omitempty"`
	// Actor that wil execute (or not) the action
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=performer,proto3" json:"performer,omitempty"`
	// Pointer to specific item
	PerformerLinkId []*datatypes_go_proto.String `protobuf:"bytes,18,rep,name=performer_link_id,json=performerLinkId,proto3" json:"performer_link_id,omitempty"`
	// Why is action (not) needed?
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why is action (not) needed?
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Why action is to be performed
	Reason []*datatypes_go_proto.String `protobuf:"bytes,21,rep,name=reason,proto3" json:"reason,omitempty"`
	// Pointer to specific item
	ReasonLinkId []*datatypes_go_proto.String `protobuf:"bytes,22,rep,name=reason_link_id,json=reasonLinkId,proto3" json:"reason_link_id,omitempty"`
	// Comments about the action
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,23,rep,name=note,proto3" json:"note,omitempty"`
	// Action restriction numbers
	SecurityLabelNumber []*datatypes_go_proto.UnsignedInt `protobuf:"bytes,24,rep,name=security_label_number,json=securityLabelNumber,proto3" json:"security_label_number,omitempty"`
}

func (x *Contract_Term_Action) Reset() {
	*x = Contract_Term_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_Action) ProtoMessage() {}

func (x *Contract_Term_Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_Action.ProtoReflect.Descriptor instead.
func (*Contract_Term_Action) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *Contract_Term_Action) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_Action) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_Action) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_Action) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *Contract_Term_Action) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Term_Action) GetSubject() []*Contract_Term_Action_ActionSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Contract_Term_Action) GetIntent() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *Contract_Term_Action) GetLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Contract_Term_Action) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Contract_Term_Action) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Contract_Term_Action) GetContextLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.ContextLinkId
	}
	return nil
}

func (x *Contract_Term_Action) GetOccurrence() *Contract_Term_Action_OccurrenceX {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *Contract_Term_Action) GetRequester() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *Contract_Term_Action) GetRequesterLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.RequesterLinkId
	}
	return nil
}

func (x *Contract_Term_Action) GetPerformerType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *Contract_Term_Action) GetPerformerRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerRole
	}
	return nil
}

func (x *Contract_Term_Action) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Contract_Term_Action) GetPerformerLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.PerformerLinkId
	}
	return nil
}

func (x *Contract_Term_Action) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *Contract_Term_Action) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *Contract_Term_Action) GetReason() []*datatypes_go_proto.String {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Contract_Term_Action) GetReasonLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.ReasonLinkId
	}
	return nil
}

func (x *Contract_Term_Action) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Contract_Term_Action) GetSecurityLabelNumber() []*datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.SecurityLabelNumber
	}
	return nil
}

// Offer Recipient
type Contract_Term_ContractOffer_ContractParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Referenced entity
	Reference []*datatypes_go_proto.Reference `protobuf:"bytes,4,rep,name=reference,proto3" json:"reference,omitempty"`
	// Participant engagement type
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Contract_Term_ContractOffer_ContractParty) Reset() {
	*x = Contract_Term_ContractOffer_ContractParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractOffer_ContractParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractOffer_ContractParty) ProtoMessage() {}

func (x *Contract_Term_ContractOffer_ContractParty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractOffer_ContractParty.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractOffer_ContractParty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *Contract_Term_ContractOffer_ContractParty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ContractOffer_ContractParty) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ContractOffer_ContractParty) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ContractOffer_ContractParty) GetReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Contract_Term_ContractOffer_ContractParty) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

// Response to offer text
type Contract_Term_ContractOffer_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension            `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Value             *Contract_Term_ContractOffer_Answer_ValueX `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Contract_Term_ContractOffer_Answer) Reset() {
	*x = Contract_Term_ContractOffer_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractOffer_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractOffer_Answer) ProtoMessage() {}

func (x *Contract_Term_ContractOffer_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractOffer_Answer.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractOffer_Answer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 2, 1}
}

func (x *Contract_Term_ContractOffer_Answer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer) GetValue() *Contract_Term_ContractOffer_Answer_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// The actual answer response
type Contract_Term_ContractOffer_Answer_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_Term_ContractOffer_Answer_ValueX_Boolean
	//	*Contract_Term_ContractOffer_Answer_ValueX_Decimal
	//	*Contract_Term_ContractOffer_Answer_ValueX_Integer
	//	*Contract_Term_ContractOffer_Answer_ValueX_Date
	//	*Contract_Term_ContractOffer_Answer_ValueX_DateTime
	//	*Contract_Term_ContractOffer_Answer_ValueX_Time
	//	*Contract_Term_ContractOffer_Answer_ValueX_StringValue
	//	*Contract_Term_ContractOffer_Answer_ValueX_Uri
	//	*Contract_Term_ContractOffer_Answer_ValueX_Attachment
	//	*Contract_Term_ContractOffer_Answer_ValueX_Coding
	//	*Contract_Term_ContractOffer_Answer_ValueX_Quantity
	//	*Contract_Term_ContractOffer_Answer_ValueX_Reference
	Choice isContract_Term_ContractOffer_Answer_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) Reset() {
	*x = Contract_Term_ContractOffer_Answer_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractOffer_Answer_ValueX) ProtoMessage() {}

func (x *Contract_Term_ContractOffer_Answer_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractOffer_Answer_ValueX.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractOffer_Answer_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 2, 1, 0}
}

func (m *Contract_Term_ContractOffer_Answer_ValueX) GetChoice() isContract_Term_ContractOffer_Answer_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Contract_Term_ContractOffer_Answer_ValueX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_Term_ContractOffer_Answer_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Term_ContractOffer_Answer_ValueX_Choice interface {
	isContract_Term_ContractOffer_Answer_ValueX_Choice()
}

type Contract_Term_ContractOffer_Answer_ValueX_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,2,opt,name=decimal,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=time,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=string_value,json=string,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,8,opt,name=uri,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,9,opt,name=attachment,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,10,opt,name=coding,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,11,opt,name=quantity,proto3,oneof"`
}

type Contract_Term_ContractOffer_Answer_ValueX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=reference,proto3,oneof"`
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Boolean) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Decimal) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Integer) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Date) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_DateTime) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Time) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_StringValue) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Uri) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Attachment) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Coding) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Quantity) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

func (*Contract_Term_ContractOffer_Answer_ValueX_Reference) isContract_Term_ContractOffer_Answer_ValueX_Choice() {
}

// Circumstance of the asset
type Contract_Term_ContractAsset_AssetContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Creator,custodian or owner
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// Codeable asset context
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=code,proto3" json:"code,omitempty"`
	// Context description
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Contract_Term_ContractAsset_AssetContext) Reset() {
	*x = Contract_Term_ContractAsset_AssetContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractAsset_AssetContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractAsset_AssetContext) ProtoMessage() {}

func (x *Contract_Term_ContractAsset_AssetContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractAsset_AssetContext.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractAsset_AssetContext) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 3, 0}
}

func (x *Contract_Term_ContractAsset_AssetContext) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ContractAsset_AssetContext) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ContractAsset_AssetContext) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ContractAsset_AssetContext) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Contract_Term_ContractAsset_AssetContext) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Contract_Term_ContractAsset_AssetContext) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Contract Valued Item List
type Contract_Term_ContractAsset_ValuedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Entity            *Contract_Term_ContractAsset_ValuedItem_EntityX `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity,omitempty"`
	// Contract Valued Item Number
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Contract Valued Item Effective Tiem
	EffectiveTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// Count of Contract Valued Items
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Contract Valued Item fee, charge, or cost
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,8,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Contract Valued Item Price Scaling Factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
	// Contract Valued Item Difficulty Scaling Factor
	Points *datatypes_go_proto.Decimal `protobuf:"bytes,10,opt,name=points,proto3" json:"points,omitempty"`
	// Total Contract Valued Item Value
	Net *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=net,proto3" json:"net,omitempty"`
	// Terms of valuation
	Payment *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=payment,proto3" json:"payment,omitempty"`
	// When payment is due
	PaymentDate *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	// Who will make payment
	Responsible *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=responsible,proto3" json:"responsible,omitempty"`
	// Who will receive payment
	Recipient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Pointer to specific item
	LinkId []*datatypes_go_proto.String `protobuf:"bytes,16,rep,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Security Labels that define affected terms
	SecurityLabelNumber []*datatypes_go_proto.UnsignedInt `protobuf:"bytes,17,rep,name=security_label_number,json=securityLabelNumber,proto3" json:"security_label_number,omitempty"`
}

func (x *Contract_Term_ContractAsset_ValuedItem) Reset() {
	*x = Contract_Term_ContractAsset_ValuedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractAsset_ValuedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractAsset_ValuedItem) ProtoMessage() {}

func (x *Contract_Term_ContractAsset_ValuedItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractAsset_ValuedItem.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractAsset_ValuedItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 3, 1}
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetEntity() *Contract_Term_ContractAsset_ValuedItem_EntityX {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetEffectiveTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetPoints() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetPayment() *datatypes_go_proto.String {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetPaymentDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetResponsible() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Responsible
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetRecipient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetLinkId() []*datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem) GetSecurityLabelNumber() []*datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.SecurityLabelNumber
	}
	return nil
}

// Contract Valued Item Type
type Contract_Term_ContractAsset_ValuedItem_EntityX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_Term_ContractAsset_ValuedItem_EntityX_CodeableConcept
	//	*Contract_Term_ContractAsset_ValuedItem_EntityX_Reference
	Choice isContract_Term_ContractAsset_ValuedItem_EntityX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_Term_ContractAsset_ValuedItem_EntityX) Reset() {
	*x = Contract_Term_ContractAsset_ValuedItem_EntityX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ContractAsset_ValuedItem_EntityX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ContractAsset_ValuedItem_EntityX) ProtoMessage() {}

func (x *Contract_Term_ContractAsset_ValuedItem_EntityX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ContractAsset_ValuedItem_EntityX.ProtoReflect.Descriptor instead.
func (*Contract_Term_ContractAsset_ValuedItem_EntityX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 3, 1, 0}
}

func (m *Contract_Term_ContractAsset_ValuedItem_EntityX) GetChoice() isContract_Term_ContractAsset_ValuedItem_EntityX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem_EntityX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*Contract_Term_ContractAsset_ValuedItem_EntityX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Contract_Term_ContractAsset_ValuedItem_EntityX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_Term_ContractAsset_ValuedItem_EntityX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Term_ContractAsset_ValuedItem_EntityX_Choice interface {
	isContract_Term_ContractAsset_ValuedItem_EntityX_Choice()
}

type Contract_Term_ContractAsset_ValuedItem_EntityX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Contract_Term_ContractAsset_ValuedItem_EntityX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Term_ContractAsset_ValuedItem_EntityX_CodeableConcept) isContract_Term_ContractAsset_ValuedItem_EntityX_Choice() {
}

func (*Contract_Term_ContractAsset_ValuedItem_EntityX_Reference) isContract_Term_ContractAsset_ValuedItem_EntityX_Choice() {
}

// Entity of the action
type Contract_Term_Action_ActionSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Entity of the action
	Reference []*datatypes_go_proto.Reference `protobuf:"bytes,4,rep,name=reference,proto3" json:"reference,omitempty"`
	// Role type of the agent
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Contract_Term_Action_ActionSubject) Reset() {
	*x = Contract_Term_Action_ActionSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_Action_ActionSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_Action_ActionSubject) ProtoMessage() {}

func (x *Contract_Term_Action_ActionSubject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_Action_ActionSubject.ProtoReflect.Descriptor instead.
func (*Contract_Term_Action_ActionSubject) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 4, 0}
}

func (x *Contract_Term_Action_ActionSubject) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_Action_ActionSubject) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_Action_ActionSubject) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_Action_ActionSubject) GetReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Contract_Term_Action_ActionSubject) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

// When action happens
type Contract_Term_Action_OccurrenceX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_Term_Action_OccurrenceX_DateTime
	//	*Contract_Term_Action_OccurrenceX_Period
	//	*Contract_Term_Action_OccurrenceX_Timing
	Choice isContract_Term_Action_OccurrenceX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_Term_Action_OccurrenceX) Reset() {
	*x = Contract_Term_Action_OccurrenceX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_Action_OccurrenceX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_Action_OccurrenceX) ProtoMessage() {}

func (x *Contract_Term_Action_OccurrenceX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_Action_OccurrenceX.ProtoReflect.Descriptor instead.
func (*Contract_Term_Action_OccurrenceX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 3, 4, 1}
}

func (m *Contract_Term_Action_OccurrenceX) GetChoice() isContract_Term_Action_OccurrenceX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_Term_Action_OccurrenceX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*Contract_Term_Action_OccurrenceX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Contract_Term_Action_OccurrenceX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*Contract_Term_Action_OccurrenceX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Contract_Term_Action_OccurrenceX) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetChoice().(*Contract_Term_Action_OccurrenceX_Timing); ok {
		return x.Timing
	}
	return nil
}

type isContract_Term_Action_OccurrenceX_Choice interface {
	isContract_Term_Action_OccurrenceX_Choice()
}

type Contract_Term_Action_OccurrenceX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Contract_Term_Action_OccurrenceX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type Contract_Term_Action_OccurrenceX_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

func (*Contract_Term_Action_OccurrenceX_DateTime) isContract_Term_Action_OccurrenceX_Choice() {}

func (*Contract_Term_Action_OccurrenceX_Period) isContract_Term_Action_OccurrenceX_Choice() {}

func (*Contract_Term_Action_OccurrenceX_Timing) isContract_Term_Action_OccurrenceX_Choice() {}

// Easily comprehended representation of this Contract
type Contract_FriendlyLanguage_ContentX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_FriendlyLanguage_ContentX_Attachment
	//	*Contract_FriendlyLanguage_ContentX_Reference
	Choice isContract_FriendlyLanguage_ContentX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_FriendlyLanguage_ContentX) Reset() {
	*x = Contract_FriendlyLanguage_ContentX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_FriendlyLanguage_ContentX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_FriendlyLanguage_ContentX) ProtoMessage() {}

func (x *Contract_FriendlyLanguage_ContentX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_FriendlyLanguage_ContentX.ProtoReflect.Descriptor instead.
func (*Contract_FriendlyLanguage_ContentX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (m *Contract_FriendlyLanguage_ContentX) GetChoice() isContract_FriendlyLanguage_ContentX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_FriendlyLanguage_ContentX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Contract_FriendlyLanguage_ContentX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_FriendlyLanguage_ContentX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_FriendlyLanguage_ContentX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_FriendlyLanguage_ContentX_Choice interface {
	isContract_FriendlyLanguage_ContentX_Choice()
}

type Contract_FriendlyLanguage_ContentX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_FriendlyLanguage_ContentX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_FriendlyLanguage_ContentX_Attachment) isContract_FriendlyLanguage_ContentX_Choice() {}

func (*Contract_FriendlyLanguage_ContentX_Reference) isContract_FriendlyLanguage_ContentX_Choice() {}

// Contract Legal Text
type Contract_LegalLanguage_ContentX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_LegalLanguage_ContentX_Attachment
	//	*Contract_LegalLanguage_ContentX_Reference
	Choice isContract_LegalLanguage_ContentX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_LegalLanguage_ContentX) Reset() {
	*x = Contract_LegalLanguage_ContentX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_LegalLanguage_ContentX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_LegalLanguage_ContentX) ProtoMessage() {}

func (x *Contract_LegalLanguage_ContentX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_LegalLanguage_ContentX.ProtoReflect.Descriptor instead.
func (*Contract_LegalLanguage_ContentX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (m *Contract_LegalLanguage_ContentX) GetChoice() isContract_LegalLanguage_ContentX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_LegalLanguage_ContentX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Contract_LegalLanguage_ContentX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_LegalLanguage_ContentX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_LegalLanguage_ContentX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_LegalLanguage_ContentX_Choice interface {
	isContract_LegalLanguage_ContentX_Choice()
}

type Contract_LegalLanguage_ContentX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_LegalLanguage_ContentX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_LegalLanguage_ContentX_Attachment) isContract_LegalLanguage_ContentX_Choice() {}

func (*Contract_LegalLanguage_ContentX_Reference) isContract_LegalLanguage_ContentX_Choice() {}

// Computable Contract Rules
type Contract_ComputableLanguage_ContentX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*Contract_ComputableLanguage_ContentX_Attachment
	//	*Contract_ComputableLanguage_ContentX_Reference
	Choice isContract_ComputableLanguage_ContentX_Choice `protobuf_oneof:"choice"`
}

func (x *Contract_ComputableLanguage_ContentX) Reset() {
	*x = Contract_ComputableLanguage_ContentX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ComputableLanguage_ContentX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ComputableLanguage_ContentX) ProtoMessage() {}

func (x *Contract_ComputableLanguage_ContentX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ComputableLanguage_ContentX.ProtoReflect.Descriptor instead.
func (*Contract_ComputableLanguage_ContentX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (m *Contract_ComputableLanguage_ContentX) GetChoice() isContract_ComputableLanguage_ContentX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Contract_ComputableLanguage_ContentX) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetChoice().(*Contract_ComputableLanguage_ContentX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_ComputableLanguage_ContentX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*Contract_ComputableLanguage_ContentX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_ComputableLanguage_ContentX_Choice interface {
	isContract_ComputableLanguage_ContentX_Choice()
}

type Contract_ComputableLanguage_ContentX_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_ComputableLanguage_ContentX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_ComputableLanguage_ContentX_Attachment) isContract_ComputableLanguage_ContentX_Choice() {
}

func (*Contract_ComputableLanguage_ContentX_Reference) isContract_ComputableLanguage_ContentX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_contract_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDesc = []byte{
	0x0a, 0x38, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x80, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0b,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x55, 0x72, 0x69, 0x12,
	0x53, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x47, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x58, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0x56, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x6c,
	0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x6c, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0xb0, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x6a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xbd, 0x01, 0x0a,
	0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xa3, 0x08, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x78, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x3a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x7c, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x11,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xd1,
	0x02, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xd4, 0x4c, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x58, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x05, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a,
	0xbd, 0x01, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4e, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xc0, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x1a, 0xc1, 0x12, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0xc3, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb5, 0x01, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x77, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xfd, 0x07, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xda, 0x05, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x41, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x96, 0x18, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x57, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x09, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a,
	0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x81, 0x03, 0x0a, 0x0c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xc0, 0x0b, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x58, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5a,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5a, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xbe,
	0x01, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4e, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xa7, 0x15, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f,
	0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a,
	0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x52, 0x0a, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x71, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0xd0,
	0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x91, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0xc6, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7b, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xbb, 0x03,
	0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb5, 0x01, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x77, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xcb, 0x01, 0x0a, 0x0b,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xdd, 0x03, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x60, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x8f, 0x04, 0x0a, 0x10, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0xe5, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58,
	0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x89, 0x04, 0x0a, 0x0d,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a,
	0xe5, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x41, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x83, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe6, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xb8, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x58, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0xfa, 0x01, 0x0a, 0x0f, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x6c, 0x79, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x58, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x51, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x3c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x42, 0x78, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x55,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_proto_google_fhir_proto_r4_core_resources_contract_proto_goTypes = []interface{}{
	(*Contract)(nil),                                                // 0: google.fhir.r4.core.Contract
	(*Contract_StatusCode)(nil),                                     // 1: google.fhir.r4.core.Contract.StatusCode
	(*Contract_TopicX)(nil),                                         // 2: google.fhir.r4.core.Contract.TopicX
	(*Contract_ContentDefinition)(nil),                              // 3: google.fhir.r4.core.Contract.ContentDefinition
	(*Contract_Term)(nil),                                           // 4: google.fhir.r4.core.Contract.Term
	(*Contract_Signatory)(nil),                                      // 5: google.fhir.r4.core.Contract.Signatory
	(*Contract_FriendlyLanguage)(nil),                               // 6: google.fhir.r4.core.Contract.FriendlyLanguage
	(*Contract_LegalLanguage)(nil),                                  // 7: google.fhir.r4.core.Contract.LegalLanguage
	(*Contract_ComputableLanguage)(nil),                             // 8: google.fhir.r4.core.Contract.ComputableLanguage
	(*Contract_LegallyBindingX)(nil),                                // 9: google.fhir.r4.core.Contract.LegallyBindingX
	(*Contract_ContentDefinition_PublicationStatusCode)(nil),        // 10: google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode
	(*Contract_Term_TopicX)(nil),                                    // 11: google.fhir.r4.core.Contract.Term.TopicX
	(*Contract_Term_SecurityLabel)(nil),                             // 12: google.fhir.r4.core.Contract.Term.SecurityLabel
	(*Contract_Term_ContractOffer)(nil),                             // 13: google.fhir.r4.core.Contract.Term.ContractOffer
	(*Contract_Term_ContractAsset)(nil),                             // 14: google.fhir.r4.core.Contract.Term.ContractAsset
	(*Contract_Term_Action)(nil),                                    // 15: google.fhir.r4.core.Contract.Term.Action
	(*Contract_Term_ContractOffer_ContractParty)(nil),               // 16: google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty
	(*Contract_Term_ContractOffer_Answer)(nil),                      // 17: google.fhir.r4.core.Contract.Term.ContractOffer.Answer
	(*Contract_Term_ContractOffer_Answer_ValueX)(nil),               // 18: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX
	(*Contract_Term_ContractAsset_AssetContext)(nil),                // 19: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext
	(*Contract_Term_ContractAsset_ValuedItem)(nil),                  // 20: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem
	(*Contract_Term_ContractAsset_ValuedItem_EntityX)(nil),          // 21: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX
	(*Contract_Term_Action_ActionSubject)(nil),                      // 22: google.fhir.r4.core.Contract.Term.Action.ActionSubject
	(*Contract_Term_Action_OccurrenceX)(nil),                        // 23: google.fhir.r4.core.Contract.Term.Action.OccurrenceX
	(*Contract_FriendlyLanguage_ContentX)(nil),                      // 24: google.fhir.r4.core.Contract.FriendlyLanguage.ContentX
	(*Contract_LegalLanguage_ContentX)(nil),                         // 25: google.fhir.r4.core.Contract.LegalLanguage.ContentX
	(*Contract_ComputableLanguage_ContentX)(nil),                    // 26: google.fhir.r4.core.Contract.ComputableLanguage.ContentX
	(*datatypes_go_proto.Id)(nil),                                   // 27: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                 // 28: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                  // 29: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                 // 30: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                            // 31: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                 // 32: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                            // 33: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                           // 34: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.String)(nil),                               // 35: google.fhir.r4.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),                      // 36: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                            // 37: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                             // 38: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.Period)(nil),                               // 39: google.fhir.r4.core.Period
	(codes_go_proto.ContractResourceStatusCode_Value)(0),            // 40: google.fhir.r4.core.ContractResourceStatusCode.Value
	(*datatypes_go_proto.Markdown)(nil),                             // 41: google.fhir.r4.core.Markdown
	(*datatypes_go_proto.Coding)(nil),                               // 42: google.fhir.r4.core.Coding
	(*datatypes_go_proto.Signature)(nil),                            // 43: google.fhir.r4.core.Signature
	(*datatypes_go_proto.Attachment)(nil),                           // 44: google.fhir.r4.core.Attachment
	(codes_go_proto.ContractResourcePublicationStatusCode_Value)(0), // 45: google.fhir.r4.core.ContractResourcePublicationStatusCode.Value
	(*datatypes_go_proto.UnsignedInt)(nil),                          // 46: google.fhir.r4.core.UnsignedInt
	(*datatypes_go_proto.Boolean)(nil),                              // 47: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.Annotation)(nil),                           // 48: google.fhir.r4.core.Annotation
	(*datatypes_go_proto.Decimal)(nil),                              // 49: google.fhir.r4.core.Decimal
	(*datatypes_go_proto.Integer)(nil),                              // 50: google.fhir.r4.core.Integer
	(*datatypes_go_proto.Date)(nil),                                 // 51: google.fhir.r4.core.Date
	(*datatypes_go_proto.Time)(nil),                                 // 52: google.fhir.r4.core.Time
	(*datatypes_go_proto.Quantity)(nil),                             // 53: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.SimpleQuantity)(nil),                       // 54: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Money)(nil),                                // 55: google.fhir.r4.core.Money
	(*datatypes_go_proto.Timing)(nil),                               // 56: google.fhir.r4.core.Timing
}
var file_proto_google_fhir_proto_r4_core_resources_contract_proto_depIdxs = []int32{
	27,  // 0: google.fhir.r4.core.Contract.id:type_name -> google.fhir.r4.core.Id
	28,  // 1: google.fhir.r4.core.Contract.meta:type_name -> google.fhir.r4.core.Meta
	29,  // 2: google.fhir.r4.core.Contract.implicit_rules:type_name -> google.fhir.r4.core.Uri
	30,  // 3: google.fhir.r4.core.Contract.language:type_name -> google.fhir.r4.core.Code
	31,  // 4: google.fhir.r4.core.Contract.text:type_name -> google.fhir.r4.core.Narrative
	32,  // 5: google.fhir.r4.core.Contract.contained:type_name -> google.protobuf.Any
	33,  // 6: google.fhir.r4.core.Contract.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 7: google.fhir.r4.core.Contract.modifier_extension:type_name -> google.fhir.r4.core.Extension
	34,  // 8: google.fhir.r4.core.Contract.identifier:type_name -> google.fhir.r4.core.Identifier
	29,  // 9: google.fhir.r4.core.Contract.url:type_name -> google.fhir.r4.core.Uri
	35,  // 10: google.fhir.r4.core.Contract.version:type_name -> google.fhir.r4.core.String
	1,   // 11: google.fhir.r4.core.Contract.status:type_name -> google.fhir.r4.core.Contract.StatusCode
	36,  // 12: google.fhir.r4.core.Contract.legal_state:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 13: google.fhir.r4.core.Contract.instantiates_canonical:type_name -> google.fhir.r4.core.Reference
	29,  // 14: google.fhir.r4.core.Contract.instantiates_uri:type_name -> google.fhir.r4.core.Uri
	36,  // 15: google.fhir.r4.core.Contract.content_derivative:type_name -> google.fhir.r4.core.CodeableConcept
	38,  // 16: google.fhir.r4.core.Contract.issued:type_name -> google.fhir.r4.core.DateTime
	39,  // 17: google.fhir.r4.core.Contract.applies:type_name -> google.fhir.r4.core.Period
	36,  // 18: google.fhir.r4.core.Contract.expiration_type:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 19: google.fhir.r4.core.Contract.subject:type_name -> google.fhir.r4.core.Reference
	37,  // 20: google.fhir.r4.core.Contract.authority:type_name -> google.fhir.r4.core.Reference
	37,  // 21: google.fhir.r4.core.Contract.domain:type_name -> google.fhir.r4.core.Reference
	37,  // 22: google.fhir.r4.core.Contract.site:type_name -> google.fhir.r4.core.Reference
	35,  // 23: google.fhir.r4.core.Contract.name:type_name -> google.fhir.r4.core.String
	35,  // 24: google.fhir.r4.core.Contract.title:type_name -> google.fhir.r4.core.String
	35,  // 25: google.fhir.r4.core.Contract.subtitle:type_name -> google.fhir.r4.core.String
	35,  // 26: google.fhir.r4.core.Contract.alias:type_name -> google.fhir.r4.core.String
	37,  // 27: google.fhir.r4.core.Contract.author:type_name -> google.fhir.r4.core.Reference
	36,  // 28: google.fhir.r4.core.Contract.scope:type_name -> google.fhir.r4.core.CodeableConcept
	2,   // 29: google.fhir.r4.core.Contract.topic:type_name -> google.fhir.r4.core.Contract.TopicX
	36,  // 30: google.fhir.r4.core.Contract.type:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 31: google.fhir.r4.core.Contract.sub_type:type_name -> google.fhir.r4.core.CodeableConcept
	3,   // 32: google.fhir.r4.core.Contract.content_definition:type_name -> google.fhir.r4.core.Contract.ContentDefinition
	4,   // 33: google.fhir.r4.core.Contract.term:type_name -> google.fhir.r4.core.Contract.Term
	37,  // 34: google.fhir.r4.core.Contract.supporting_info:type_name -> google.fhir.r4.core.Reference
	37,  // 35: google.fhir.r4.core.Contract.relevant_history:type_name -> google.fhir.r4.core.Reference
	5,   // 36: google.fhir.r4.core.Contract.signer:type_name -> google.fhir.r4.core.Contract.Signatory
	6,   // 37: google.fhir.r4.core.Contract.friendly:type_name -> google.fhir.r4.core.Contract.FriendlyLanguage
	7,   // 38: google.fhir.r4.core.Contract.legal:type_name -> google.fhir.r4.core.Contract.LegalLanguage
	8,   // 39: google.fhir.r4.core.Contract.rule:type_name -> google.fhir.r4.core.Contract.ComputableLanguage
	9,   // 40: google.fhir.r4.core.Contract.legally_binding:type_name -> google.fhir.r4.core.Contract.LegallyBindingX
	40,  // 41: google.fhir.r4.core.Contract.StatusCode.value:type_name -> google.fhir.r4.core.ContractResourceStatusCode.Value
	35,  // 42: google.fhir.r4.core.Contract.StatusCode.id:type_name -> google.fhir.r4.core.String
	33,  // 43: google.fhir.r4.core.Contract.StatusCode.extension:type_name -> google.fhir.r4.core.Extension
	36,  // 44: google.fhir.r4.core.Contract.TopicX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 45: google.fhir.r4.core.Contract.TopicX.reference:type_name -> google.fhir.r4.core.Reference
	35,  // 46: google.fhir.r4.core.Contract.ContentDefinition.id:type_name -> google.fhir.r4.core.String
	33,  // 47: google.fhir.r4.core.Contract.ContentDefinition.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 48: google.fhir.r4.core.Contract.ContentDefinition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	36,  // 49: google.fhir.r4.core.Contract.ContentDefinition.type:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 50: google.fhir.r4.core.Contract.ContentDefinition.sub_type:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 51: google.fhir.r4.core.Contract.ContentDefinition.publisher:type_name -> google.fhir.r4.core.Reference
	38,  // 52: google.fhir.r4.core.Contract.ContentDefinition.publication_date:type_name -> google.fhir.r4.core.DateTime
	10,  // 53: google.fhir.r4.core.Contract.ContentDefinition.publication_status:type_name -> google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode
	41,  // 54: google.fhir.r4.core.Contract.ContentDefinition.copyright:type_name -> google.fhir.r4.core.Markdown
	35,  // 55: google.fhir.r4.core.Contract.Term.id:type_name -> google.fhir.r4.core.String
	33,  // 56: google.fhir.r4.core.Contract.Term.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 57: google.fhir.r4.core.Contract.Term.modifier_extension:type_name -> google.fhir.r4.core.Extension
	34,  // 58: google.fhir.r4.core.Contract.Term.identifier:type_name -> google.fhir.r4.core.Identifier
	38,  // 59: google.fhir.r4.core.Contract.Term.issued:type_name -> google.fhir.r4.core.DateTime
	39,  // 60: google.fhir.r4.core.Contract.Term.applies:type_name -> google.fhir.r4.core.Period
	11,  // 61: google.fhir.r4.core.Contract.Term.topic:type_name -> google.fhir.r4.core.Contract.Term.TopicX
	36,  // 62: google.fhir.r4.core.Contract.Term.type:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 63: google.fhir.r4.core.Contract.Term.sub_type:type_name -> google.fhir.r4.core.CodeableConcept
	35,  // 64: google.fhir.r4.core.Contract.Term.text:type_name -> google.fhir.r4.core.String
	12,  // 65: google.fhir.r4.core.Contract.Term.security_label:type_name -> google.fhir.r4.core.Contract.Term.SecurityLabel
	13,  // 66: google.fhir.r4.core.Contract.Term.offer:type_name -> google.fhir.r4.core.Contract.Term.ContractOffer
	14,  // 67: google.fhir.r4.core.Contract.Term.asset:type_name -> google.fhir.r4.core.Contract.Term.ContractAsset
	15,  // 68: google.fhir.r4.core.Contract.Term.action:type_name -> google.fhir.r4.core.Contract.Term.Action
	4,   // 69: google.fhir.r4.core.Contract.Term.group:type_name -> google.fhir.r4.core.Contract.Term
	35,  // 70: google.fhir.r4.core.Contract.Signatory.id:type_name -> google.fhir.r4.core.String
	33,  // 71: google.fhir.r4.core.Contract.Signatory.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 72: google.fhir.r4.core.Contract.Signatory.modifier_extension:type_name -> google.fhir.r4.core.Extension
	42,  // 73: google.fhir.r4.core.Contract.Signatory.type:type_name -> google.fhir.r4.core.Coding
	37,  // 74: google.fhir.r4.core.Contract.Signatory.party:type_name -> google.fhir.r4.core.Reference
	43,  // 75: google.fhir.r4.core.Contract.Signatory.signature:type_name -> google.fhir.r4.core.Signature
	35,  // 76: google.fhir.r4.core.Contract.FriendlyLanguage.id:type_name -> google.fhir.r4.core.String
	33,  // 77: google.fhir.r4.core.Contract.FriendlyLanguage.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 78: google.fhir.r4.core.Contract.FriendlyLanguage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	24,  // 79: google.fhir.r4.core.Contract.FriendlyLanguage.content:type_name -> google.fhir.r4.core.Contract.FriendlyLanguage.ContentX
	35,  // 80: google.fhir.r4.core.Contract.LegalLanguage.id:type_name -> google.fhir.r4.core.String
	33,  // 81: google.fhir.r4.core.Contract.LegalLanguage.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 82: google.fhir.r4.core.Contract.LegalLanguage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	25,  // 83: google.fhir.r4.core.Contract.LegalLanguage.content:type_name -> google.fhir.r4.core.Contract.LegalLanguage.ContentX
	35,  // 84: google.fhir.r4.core.Contract.ComputableLanguage.id:type_name -> google.fhir.r4.core.String
	33,  // 85: google.fhir.r4.core.Contract.ComputableLanguage.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 86: google.fhir.r4.core.Contract.ComputableLanguage.modifier_extension:type_name -> google.fhir.r4.core.Extension
	26,  // 87: google.fhir.r4.core.Contract.ComputableLanguage.content:type_name -> google.fhir.r4.core.Contract.ComputableLanguage.ContentX
	44,  // 88: google.fhir.r4.core.Contract.LegallyBindingX.attachment:type_name -> google.fhir.r4.core.Attachment
	37,  // 89: google.fhir.r4.core.Contract.LegallyBindingX.reference:type_name -> google.fhir.r4.core.Reference
	45,  // 90: google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode.value:type_name -> google.fhir.r4.core.ContractResourcePublicationStatusCode.Value
	35,  // 91: google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode.id:type_name -> google.fhir.r4.core.String
	33,  // 92: google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode.extension:type_name -> google.fhir.r4.core.Extension
	36,  // 93: google.fhir.r4.core.Contract.Term.TopicX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 94: google.fhir.r4.core.Contract.Term.TopicX.reference:type_name -> google.fhir.r4.core.Reference
	35,  // 95: google.fhir.r4.core.Contract.Term.SecurityLabel.id:type_name -> google.fhir.r4.core.String
	33,  // 96: google.fhir.r4.core.Contract.Term.SecurityLabel.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 97: google.fhir.r4.core.Contract.Term.SecurityLabel.modifier_extension:type_name -> google.fhir.r4.core.Extension
	46,  // 98: google.fhir.r4.core.Contract.Term.SecurityLabel.number:type_name -> google.fhir.r4.core.UnsignedInt
	42,  // 99: google.fhir.r4.core.Contract.Term.SecurityLabel.classification:type_name -> google.fhir.r4.core.Coding
	42,  // 100: google.fhir.r4.core.Contract.Term.SecurityLabel.category:type_name -> google.fhir.r4.core.Coding
	42,  // 101: google.fhir.r4.core.Contract.Term.SecurityLabel.control:type_name -> google.fhir.r4.core.Coding
	35,  // 102: google.fhir.r4.core.Contract.Term.ContractOffer.id:type_name -> google.fhir.r4.core.String
	33,  // 103: google.fhir.r4.core.Contract.Term.ContractOffer.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 104: google.fhir.r4.core.Contract.Term.ContractOffer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	34,  // 105: google.fhir.r4.core.Contract.Term.ContractOffer.identifier:type_name -> google.fhir.r4.core.Identifier
	16,  // 106: google.fhir.r4.core.Contract.Term.ContractOffer.party:type_name -> google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty
	37,  // 107: google.fhir.r4.core.Contract.Term.ContractOffer.topic:type_name -> google.fhir.r4.core.Reference
	36,  // 108: google.fhir.r4.core.Contract.Term.ContractOffer.type:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 109: google.fhir.r4.core.Contract.Term.ContractOffer.decision:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 110: google.fhir.r4.core.Contract.Term.ContractOffer.decision_mode:type_name -> google.fhir.r4.core.CodeableConcept
	17,  // 111: google.fhir.r4.core.Contract.Term.ContractOffer.answer:type_name -> google.fhir.r4.core.Contract.Term.ContractOffer.Answer
	35,  // 112: google.fhir.r4.core.Contract.Term.ContractOffer.text:type_name -> google.fhir.r4.core.String
	35,  // 113: google.fhir.r4.core.Contract.Term.ContractOffer.link_id:type_name -> google.fhir.r4.core.String
	46,  // 114: google.fhir.r4.core.Contract.Term.ContractOffer.security_label_number:type_name -> google.fhir.r4.core.UnsignedInt
	35,  // 115: google.fhir.r4.core.Contract.Term.ContractAsset.id:type_name -> google.fhir.r4.core.String
	33,  // 116: google.fhir.r4.core.Contract.Term.ContractAsset.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 117: google.fhir.r4.core.Contract.Term.ContractAsset.modifier_extension:type_name -> google.fhir.r4.core.Extension
	36,  // 118: google.fhir.r4.core.Contract.Term.ContractAsset.scope:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 119: google.fhir.r4.core.Contract.Term.ContractAsset.type:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 120: google.fhir.r4.core.Contract.Term.ContractAsset.type_reference:type_name -> google.fhir.r4.core.Reference
	36,  // 121: google.fhir.r4.core.Contract.Term.ContractAsset.subtype:type_name -> google.fhir.r4.core.CodeableConcept
	42,  // 122: google.fhir.r4.core.Contract.Term.ContractAsset.relationship:type_name -> google.fhir.r4.core.Coding
	19,  // 123: google.fhir.r4.core.Contract.Term.ContractAsset.context:type_name -> google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext
	35,  // 124: google.fhir.r4.core.Contract.Term.ContractAsset.condition:type_name -> google.fhir.r4.core.String
	36,  // 125: google.fhir.r4.core.Contract.Term.ContractAsset.period_type:type_name -> google.fhir.r4.core.CodeableConcept
	39,  // 126: google.fhir.r4.core.Contract.Term.ContractAsset.period:type_name -> google.fhir.r4.core.Period
	39,  // 127: google.fhir.r4.core.Contract.Term.ContractAsset.use_period:type_name -> google.fhir.r4.core.Period
	35,  // 128: google.fhir.r4.core.Contract.Term.ContractAsset.text:type_name -> google.fhir.r4.core.String
	35,  // 129: google.fhir.r4.core.Contract.Term.ContractAsset.link_id:type_name -> google.fhir.r4.core.String
	17,  // 130: google.fhir.r4.core.Contract.Term.ContractAsset.answer:type_name -> google.fhir.r4.core.Contract.Term.ContractOffer.Answer
	46,  // 131: google.fhir.r4.core.Contract.Term.ContractAsset.security_label_number:type_name -> google.fhir.r4.core.UnsignedInt
	20,  // 132: google.fhir.r4.core.Contract.Term.ContractAsset.valued_item:type_name -> google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem
	35,  // 133: google.fhir.r4.core.Contract.Term.Action.id:type_name -> google.fhir.r4.core.String
	33,  // 134: google.fhir.r4.core.Contract.Term.Action.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 135: google.fhir.r4.core.Contract.Term.Action.modifier_extension:type_name -> google.fhir.r4.core.Extension
	47,  // 136: google.fhir.r4.core.Contract.Term.Action.do_not_perform:type_name -> google.fhir.r4.core.Boolean
	36,  // 137: google.fhir.r4.core.Contract.Term.Action.type:type_name -> google.fhir.r4.core.CodeableConcept
	22,  // 138: google.fhir.r4.core.Contract.Term.Action.subject:type_name -> google.fhir.r4.core.Contract.Term.Action.ActionSubject
	36,  // 139: google.fhir.r4.core.Contract.Term.Action.intent:type_name -> google.fhir.r4.core.CodeableConcept
	35,  // 140: google.fhir.r4.core.Contract.Term.Action.link_id:type_name -> google.fhir.r4.core.String
	36,  // 141: google.fhir.r4.core.Contract.Term.Action.status:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 142: google.fhir.r4.core.Contract.Term.Action.context:type_name -> google.fhir.r4.core.Reference
	35,  // 143: google.fhir.r4.core.Contract.Term.Action.context_link_id:type_name -> google.fhir.r4.core.String
	23,  // 144: google.fhir.r4.core.Contract.Term.Action.occurrence:type_name -> google.fhir.r4.core.Contract.Term.Action.OccurrenceX
	37,  // 145: google.fhir.r4.core.Contract.Term.Action.requester:type_name -> google.fhir.r4.core.Reference
	35,  // 146: google.fhir.r4.core.Contract.Term.Action.requester_link_id:type_name -> google.fhir.r4.core.String
	36,  // 147: google.fhir.r4.core.Contract.Term.Action.performer_type:type_name -> google.fhir.r4.core.CodeableConcept
	36,  // 148: google.fhir.r4.core.Contract.Term.Action.performer_role:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 149: google.fhir.r4.core.Contract.Term.Action.performer:type_name -> google.fhir.r4.core.Reference
	35,  // 150: google.fhir.r4.core.Contract.Term.Action.performer_link_id:type_name -> google.fhir.r4.core.String
	36,  // 151: google.fhir.r4.core.Contract.Term.Action.reason_code:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 152: google.fhir.r4.core.Contract.Term.Action.reason_reference:type_name -> google.fhir.r4.core.Reference
	35,  // 153: google.fhir.r4.core.Contract.Term.Action.reason:type_name -> google.fhir.r4.core.String
	35,  // 154: google.fhir.r4.core.Contract.Term.Action.reason_link_id:type_name -> google.fhir.r4.core.String
	48,  // 155: google.fhir.r4.core.Contract.Term.Action.note:type_name -> google.fhir.r4.core.Annotation
	46,  // 156: google.fhir.r4.core.Contract.Term.Action.security_label_number:type_name -> google.fhir.r4.core.UnsignedInt
	35,  // 157: google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty.id:type_name -> google.fhir.r4.core.String
	33,  // 158: google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 159: google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty.modifier_extension:type_name -> google.fhir.r4.core.Extension
	37,  // 160: google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty.reference:type_name -> google.fhir.r4.core.Reference
	36,  // 161: google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty.role:type_name -> google.fhir.r4.core.CodeableConcept
	35,  // 162: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.id:type_name -> google.fhir.r4.core.String
	33,  // 163: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 164: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.modifier_extension:type_name -> google.fhir.r4.core.Extension
	18,  // 165: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.value:type_name -> google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX
	47,  // 166: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.boolean:type_name -> google.fhir.r4.core.Boolean
	49,  // 167: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.decimal:type_name -> google.fhir.r4.core.Decimal
	50,  // 168: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.integer:type_name -> google.fhir.r4.core.Integer
	51,  // 169: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.date:type_name -> google.fhir.r4.core.Date
	38,  // 170: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.date_time:type_name -> google.fhir.r4.core.DateTime
	52,  // 171: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.time:type_name -> google.fhir.r4.core.Time
	35,  // 172: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.string_value:type_name -> google.fhir.r4.core.String
	29,  // 173: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.uri:type_name -> google.fhir.r4.core.Uri
	44,  // 174: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.attachment:type_name -> google.fhir.r4.core.Attachment
	42,  // 175: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.coding:type_name -> google.fhir.r4.core.Coding
	53,  // 176: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.quantity:type_name -> google.fhir.r4.core.Quantity
	37,  // 177: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.reference:type_name -> google.fhir.r4.core.Reference
	35,  // 178: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext.id:type_name -> google.fhir.r4.core.String
	33,  // 179: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 180: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext.modifier_extension:type_name -> google.fhir.r4.core.Extension
	37,  // 181: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext.reference:type_name -> google.fhir.r4.core.Reference
	36,  // 182: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext.code:type_name -> google.fhir.r4.core.CodeableConcept
	35,  // 183: google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext.text:type_name -> google.fhir.r4.core.String
	35,  // 184: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.id:type_name -> google.fhir.r4.core.String
	33,  // 185: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 186: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.modifier_extension:type_name -> google.fhir.r4.core.Extension
	21,  // 187: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.entity:type_name -> google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX
	34,  // 188: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.identifier:type_name -> google.fhir.r4.core.Identifier
	38,  // 189: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.effective_time:type_name -> google.fhir.r4.core.DateTime
	54,  // 190: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	55,  // 191: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.unit_price:type_name -> google.fhir.r4.core.Money
	49,  // 192: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.factor:type_name -> google.fhir.r4.core.Decimal
	49,  // 193: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.points:type_name -> google.fhir.r4.core.Decimal
	55,  // 194: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.net:type_name -> google.fhir.r4.core.Money
	35,  // 195: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.payment:type_name -> google.fhir.r4.core.String
	38,  // 196: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.payment_date:type_name -> google.fhir.r4.core.DateTime
	37,  // 197: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.responsible:type_name -> google.fhir.r4.core.Reference
	37,  // 198: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.recipient:type_name -> google.fhir.r4.core.Reference
	35,  // 199: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.link_id:type_name -> google.fhir.r4.core.String
	46,  // 200: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.security_label_number:type_name -> google.fhir.r4.core.UnsignedInt
	36,  // 201: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	37,  // 202: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX.reference:type_name -> google.fhir.r4.core.Reference
	35,  // 203: google.fhir.r4.core.Contract.Term.Action.ActionSubject.id:type_name -> google.fhir.r4.core.String
	33,  // 204: google.fhir.r4.core.Contract.Term.Action.ActionSubject.extension:type_name -> google.fhir.r4.core.Extension
	33,  // 205: google.fhir.r4.core.Contract.Term.Action.ActionSubject.modifier_extension:type_name -> google.fhir.r4.core.Extension
	37,  // 206: google.fhir.r4.core.Contract.Term.Action.ActionSubject.reference:type_name -> google.fhir.r4.core.Reference
	36,  // 207: google.fhir.r4.core.Contract.Term.Action.ActionSubject.role:type_name -> google.fhir.r4.core.CodeableConcept
	38,  // 208: google.fhir.r4.core.Contract.Term.Action.OccurrenceX.date_time:type_name -> google.fhir.r4.core.DateTime
	39,  // 209: google.fhir.r4.core.Contract.Term.Action.OccurrenceX.period:type_name -> google.fhir.r4.core.Period
	56,  // 210: google.fhir.r4.core.Contract.Term.Action.OccurrenceX.timing:type_name -> google.fhir.r4.core.Timing
	44,  // 211: google.fhir.r4.core.Contract.FriendlyLanguage.ContentX.attachment:type_name -> google.fhir.r4.core.Attachment
	37,  // 212: google.fhir.r4.core.Contract.FriendlyLanguage.ContentX.reference:type_name -> google.fhir.r4.core.Reference
	44,  // 213: google.fhir.r4.core.Contract.LegalLanguage.ContentX.attachment:type_name -> google.fhir.r4.core.Attachment
	37,  // 214: google.fhir.r4.core.Contract.LegalLanguage.ContentX.reference:type_name -> google.fhir.r4.core.Reference
	44,  // 215: google.fhir.r4.core.Contract.ComputableLanguage.ContentX.attachment:type_name -> google.fhir.r4.core.Attachment
	37,  // 216: google.fhir.r4.core.Contract.ComputableLanguage.ContentX.reference:type_name -> google.fhir.r4.core.Reference
	217, // [217:217] is the sub-list for method output_type
	217, // [217:217] is the sub-list for method input_type
	217, // [217:217] is the sub-list for extension type_name
	217, // [217:217] is the sub-list for extension extendee
	0,   // [0:217] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_contract_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_contract_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_TopicX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ContentDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Signatory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_FriendlyLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_LegalLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ComputableLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_LegallyBindingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ContentDefinition_PublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_TopicX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_SecurityLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractOffer_ContractParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractOffer_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractOffer_Answer_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractAsset_AssetContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractAsset_ValuedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ContractAsset_ValuedItem_EntityX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_Action_ActionSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_Action_OccurrenceX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_FriendlyLanguage_ContentX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_LegalLanguage_ContentX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ComputableLanguage_ContentX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Contract_TopicX_CodeableConcept)(nil),
		(*Contract_TopicX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Contract_LegallyBindingX_Attachment)(nil),
		(*Contract_LegallyBindingX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Contract_Term_TopicX_CodeableConcept)(nil),
		(*Contract_Term_TopicX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Contract_Term_ContractOffer_Answer_ValueX_Boolean)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Decimal)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Integer)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Date)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_DateTime)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Time)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_StringValue)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Uri)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Attachment)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Coding)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Quantity)(nil),
		(*Contract_Term_ContractOffer_Answer_ValueX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Contract_Term_ContractAsset_ValuedItem_EntityX_CodeableConcept)(nil),
		(*Contract_Term_ContractAsset_ValuedItem_EntityX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Contract_Term_Action_OccurrenceX_DateTime)(nil),
		(*Contract_Term_Action_OccurrenceX_Period)(nil),
		(*Contract_Term_Action_OccurrenceX_Timing)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Contract_FriendlyLanguage_ContentX_Attachment)(nil),
		(*Contract_FriendlyLanguage_ContentX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Contract_LegalLanguage_ContentX_Attachment)(nil),
		(*Contract_LegalLanguage_ContentX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Contract_ComputableLanguage_ContentX_Attachment)(nil),
		(*Contract_ComputableLanguage_ContentX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_contract_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_contract_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_contract_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_contract_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_contract_proto_depIdxs = nil
}
