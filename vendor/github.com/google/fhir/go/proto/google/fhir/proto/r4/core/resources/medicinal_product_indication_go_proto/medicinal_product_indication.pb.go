//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/medicinal_product_indication.proto

package medicinal_product_indication_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicinalProductIndication, last
// updated 2019-11-01T09:29:23.356+11:00. MedicinalProductIndication. See
// http://hl7.org/fhir/StructureDefinition/MedicinalProductIndication
type MedicinalProductIndication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The medication for which this is an indication
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=subject,proto3" json:"subject,omitempty"`
	// The disease, symptom or procedure that is the indication for treatment
	DiseaseSymptomProcedure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=disease_symptom_procedure,json=diseaseSymptomProcedure,proto3" json:"disease_symptom_procedure,omitempty"`
	// The status of the disease or symptom for which the indication applies
	DiseaseStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=disease_status,json=diseaseStatus,proto3" json:"disease_status,omitempty"`
	// Comorbidity (concurrent condition) or co-infection as part of the
	// indication
	Comorbidity []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=comorbidity,proto3" json:"comorbidity,omitempty"`
	// The intended effect, aim or strategy to be achieved by the indication
	IntendedEffect *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=intended_effect,json=intendedEffect,proto3" json:"intended_effect,omitempty"`
	// Timing or duration information as part of the indication
	Duration     *datatypes_go_proto.Quantity               `protobuf:"bytes,15,opt,name=duration,proto3" json:"duration,omitempty"`
	OtherTherapy []*MedicinalProductIndication_OtherTherapy `protobuf:"bytes,16,rep,name=other_therapy,json=otherTherapy,proto3" json:"other_therapy,omitempty"`
	// Describe the undesirable effects of the medicinal product
	UndesirableEffect []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=undesirable_effect,json=undesirableEffect,proto3" json:"undesirable_effect,omitempty"`
	// The population group to which this applies
	Population []*datatypes_go_proto.Population `protobuf:"bytes,18,rep,name=population,proto3" json:"population,omitempty"`
}

func (x *MedicinalProductIndication) Reset() {
	*x = MedicinalProductIndication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductIndication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductIndication) ProtoMessage() {}

func (x *MedicinalProductIndication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductIndication.ProtoReflect.Descriptor instead.
func (*MedicinalProductIndication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescGZIP(), []int{0}
}

func (x *MedicinalProductIndication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductIndication) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicinalProductIndication) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicinalProductIndication) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicinalProductIndication) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicinalProductIndication) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicinalProductIndication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductIndication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductIndication) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MedicinalProductIndication) GetDiseaseSymptomProcedure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiseaseSymptomProcedure
	}
	return nil
}

func (x *MedicinalProductIndication) GetDiseaseStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DiseaseStatus
	}
	return nil
}

func (x *MedicinalProductIndication) GetComorbidity() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Comorbidity
	}
	return nil
}

func (x *MedicinalProductIndication) GetIntendedEffect() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntendedEffect
	}
	return nil
}

func (x *MedicinalProductIndication) GetDuration() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *MedicinalProductIndication) GetOtherTherapy() []*MedicinalProductIndication_OtherTherapy {
	if x != nil {
		return x.OtherTherapy
	}
	return nil
}

func (x *MedicinalProductIndication) GetUndesirableEffect() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.UndesirableEffect
	}
	return nil
}

func (x *MedicinalProductIndication) GetPopulation() []*datatypes_go_proto.Population {
	if x != nil {
		return x.Population
	}
	return nil
}

// Information about the use of the medicinal product in relation to other
// therapies described as part of the indication
type MedicinalProductIndication_OtherTherapy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of relationship between the medicinal product indication or
	// contraindication and another therapy
	TherapyRelationshipType *datatypes_go_proto.CodeableConcept                  `protobuf:"bytes,4,opt,name=therapy_relationship_type,json=therapyRelationshipType,proto3" json:"therapy_relationship_type,omitempty"`
	Medication              *MedicinalProductIndication_OtherTherapy_MedicationX `protobuf:"bytes,5,opt,name=medication,proto3" json:"medication,omitempty"`
}

func (x *MedicinalProductIndication_OtherTherapy) Reset() {
	*x = MedicinalProductIndication_OtherTherapy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductIndication_OtherTherapy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductIndication_OtherTherapy) ProtoMessage() {}

func (x *MedicinalProductIndication_OtherTherapy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductIndication_OtherTherapy.ProtoReflect.Descriptor instead.
func (*MedicinalProductIndication_OtherTherapy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicinalProductIndication_OtherTherapy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductIndication_OtherTherapy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductIndication_OtherTherapy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductIndication_OtherTherapy) GetTherapyRelationshipType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TherapyRelationshipType
	}
	return nil
}

func (x *MedicinalProductIndication_OtherTherapy) GetMedication() *MedicinalProductIndication_OtherTherapy_MedicationX {
	if x != nil {
		return x.Medication
	}
	return nil
}

// Reference to a specific medication (active substance, medicinal product
// or class of products) as part of an indication or contraindication
type MedicinalProductIndication_OtherTherapy_MedicationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicinalProductIndication_OtherTherapy_MedicationX_CodeableConcept
	//	*MedicinalProductIndication_OtherTherapy_MedicationX_Reference
	Choice isMedicinalProductIndication_OtherTherapy_MedicationX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicinalProductIndication_OtherTherapy_MedicationX) Reset() {
	*x = MedicinalProductIndication_OtherTherapy_MedicationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductIndication_OtherTherapy_MedicationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductIndication_OtherTherapy_MedicationX) ProtoMessage() {}

func (x *MedicinalProductIndication_OtherTherapy_MedicationX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductIndication_OtherTherapy_MedicationX.ProtoReflect.Descriptor instead.
func (*MedicinalProductIndication_OtherTherapy_MedicationX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *MedicinalProductIndication_OtherTherapy_MedicationX) GetChoice() isMedicinalProductIndication_OtherTherapy_MedicationX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicinalProductIndication_OtherTherapy_MedicationX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*MedicinalProductIndication_OtherTherapy_MedicationX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicinalProductIndication_OtherTherapy_MedicationX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*MedicinalProductIndication_OtherTherapy_MedicationX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicinalProductIndication_OtherTherapy_MedicationX_Choice interface {
	isMedicinalProductIndication_OtherTherapy_MedicationX_Choice()
}

type MedicinalProductIndication_OtherTherapy_MedicationX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicinalProductIndication_OtherTherapy_MedicationX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicinalProductIndication_OtherTherapy_MedicationX_CodeableConcept) isMedicinalProductIndication_OtherTherapy_MedicationX_Choice() {
}

func (*MedicinalProductIndication_OtherTherapy_MedicationX_Reference) isMedicinalProductIndication_OtherTherapy_MedicationX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x0f, 0x0a, 0x1a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x26, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x60, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x70,
	0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x17, 0x64, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x61, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x61,
	0x70, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54,
	0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65,
	0x72, 0x61, 0x70, 0x79, 0x12, 0x76, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x21, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xad, 0x05,
	0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x19, 0x74, 0x68, 0x65, 0x72,
	0x61, 0x70, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x17, 0x74, 0x68, 0x65, 0x72, 0x61,
	0x70, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x70, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x68, 0x65,
	0x72, 0x61, 0x70, 0x79, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x86, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x51, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x16, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x4e, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x42, 0x8c, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50,
	0x01, 0x5a, 0x69, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5,
	0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_goTypes = []interface{}{
	(*MedicinalProductIndication)(nil),                          // 0: google.fhir.r4.core.MedicinalProductIndication
	(*MedicinalProductIndication_OtherTherapy)(nil),             // 1: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy
	(*MedicinalProductIndication_OtherTherapy_MedicationX)(nil), // 2: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX
	(*datatypes_go_proto.Id)(nil),                               // 3: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                             // 4: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                              // 5: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                             // 6: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                        // 7: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                             // 8: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                        // 9: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Reference)(nil),                        // 10: google.fhir.r4.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                  // 11: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Quantity)(nil),                         // 12: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.Population)(nil),                       // 13: google.fhir.r4.core.Population
	(*datatypes_go_proto.String)(nil),                           // 14: google.fhir.r4.core.String
}
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_depIdxs = []int32{
	3,  // 0: google.fhir.r4.core.MedicinalProductIndication.id:type_name -> google.fhir.r4.core.Id
	4,  // 1: google.fhir.r4.core.MedicinalProductIndication.meta:type_name -> google.fhir.r4.core.Meta
	5,  // 2: google.fhir.r4.core.MedicinalProductIndication.implicit_rules:type_name -> google.fhir.r4.core.Uri
	6,  // 3: google.fhir.r4.core.MedicinalProductIndication.language:type_name -> google.fhir.r4.core.Code
	7,  // 4: google.fhir.r4.core.MedicinalProductIndication.text:type_name -> google.fhir.r4.core.Narrative
	8,  // 5: google.fhir.r4.core.MedicinalProductIndication.contained:type_name -> google.protobuf.Any
	9,  // 6: google.fhir.r4.core.MedicinalProductIndication.extension:type_name -> google.fhir.r4.core.Extension
	9,  // 7: google.fhir.r4.core.MedicinalProductIndication.modifier_extension:type_name -> google.fhir.r4.core.Extension
	10, // 8: google.fhir.r4.core.MedicinalProductIndication.subject:type_name -> google.fhir.r4.core.Reference
	11, // 9: google.fhir.r4.core.MedicinalProductIndication.disease_symptom_procedure:type_name -> google.fhir.r4.core.CodeableConcept
	11, // 10: google.fhir.r4.core.MedicinalProductIndication.disease_status:type_name -> google.fhir.r4.core.CodeableConcept
	11, // 11: google.fhir.r4.core.MedicinalProductIndication.comorbidity:type_name -> google.fhir.r4.core.CodeableConcept
	11, // 12: google.fhir.r4.core.MedicinalProductIndication.intended_effect:type_name -> google.fhir.r4.core.CodeableConcept
	12, // 13: google.fhir.r4.core.MedicinalProductIndication.duration:type_name -> google.fhir.r4.core.Quantity
	1,  // 14: google.fhir.r4.core.MedicinalProductIndication.other_therapy:type_name -> google.fhir.r4.core.MedicinalProductIndication.OtherTherapy
	10, // 15: google.fhir.r4.core.MedicinalProductIndication.undesirable_effect:type_name -> google.fhir.r4.core.Reference
	13, // 16: google.fhir.r4.core.MedicinalProductIndication.population:type_name -> google.fhir.r4.core.Population
	14, // 17: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.id:type_name -> google.fhir.r4.core.String
	9,  // 18: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.extension:type_name -> google.fhir.r4.core.Extension
	9,  // 19: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.modifier_extension:type_name -> google.fhir.r4.core.Extension
	11, // 20: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.therapy_relationship_type:type_name -> google.fhir.r4.core.CodeableConcept
	2,  // 21: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.medication:type_name -> google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX
	11, // 22: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	10, // 23: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX.reference:type_name -> google.fhir.r4.core.Reference
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductIndication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductIndication_OtherTherapy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductIndication_OtherTherapy_MedicationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MedicinalProductIndication_OtherTherapy_MedicationX_CodeableConcept)(nil),
		(*MedicinalProductIndication_OtherTherapy_MedicationX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_indication_proto_depIdxs = nil
}
