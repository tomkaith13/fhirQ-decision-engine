//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/specimen_definition.proto

package specimen_definition_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SpecimenDefinition, last updated
// 2019-11-01T09:29:23.356+11:00. Kind of specimen. See
// http://hl7.org/fhir/StructureDefinition/SpecimenDefinition
type SpecimenDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier of a kind of specimen
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Kind of material to collect
	TypeCollected *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type_collected,json=typeCollected,proto3" json:"type_collected,omitempty"`
	// Patient preparation for collection
	PatientPreparation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=patient_preparation,json=patientPreparation,proto3" json:"patient_preparation,omitempty"`
	// Time aspect for collection
	TimeAspect *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=time_aspect,json=timeAspect,proto3" json:"time_aspect,omitempty"`
	// Specimen collection procedure
	Collection []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=collection,proto3" json:"collection,omitempty"`
	TypeTested []*SpecimenDefinition_TypeTested      `protobuf:"bytes,15,rep,name=type_tested,json=typeTested,proto3" json:"type_tested,omitempty"`
}

func (x *SpecimenDefinition) Reset() {
	*x = SpecimenDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition) ProtoMessage() {}

func (x *SpecimenDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0}
}

func (x *SpecimenDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SpecimenDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SpecimenDefinition) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SpecimenDefinition) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SpecimenDefinition) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SpecimenDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SpecimenDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SpecimenDefinition) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SpecimenDefinition) GetTypeCollected() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TypeCollected
	}
	return nil
}

func (x *SpecimenDefinition) GetPatientPreparation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PatientPreparation
	}
	return nil
}

func (x *SpecimenDefinition) GetTimeAspect() *datatypes_go_proto.String {
	if x != nil {
		return x.TimeAspect
	}
	return nil
}

func (x *SpecimenDefinition) GetCollection() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *SpecimenDefinition) GetTypeTested() []*SpecimenDefinition_TypeTested {
	if x != nil {
		return x.TypeTested
	}
	return nil
}

// Specimen in container intended for testing by lab
type SpecimenDefinition_TypeTested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Primary or secondary specimen
	IsDerived *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=is_derived,json=isDerived,proto3" json:"is_derived,omitempty"`
	// Type of intended specimen
	Type       *datatypes_go_proto.CodeableConcept           `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Preference *SpecimenDefinition_TypeTested_PreferenceCode `protobuf:"bytes,6,opt,name=preference,proto3" json:"preference,omitempty"`
	Container  *SpecimenDefinition_TypeTested_Container      `protobuf:"bytes,7,opt,name=container,proto3" json:"container,omitempty"`
	// Specimen requirements
	Requirement *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=requirement,proto3" json:"requirement,omitempty"`
	// Specimen retention time
	RetentionTime *datatypes_go_proto.Duration `protobuf:"bytes,9,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"`
	// Rejection criterion
	RejectionCriterion []*datatypes_go_proto.CodeableConcept     `protobuf:"bytes,10,rep,name=rejection_criterion,json=rejectionCriterion,proto3" json:"rejection_criterion,omitempty"`
	Handling           []*SpecimenDefinition_TypeTested_Handling `protobuf:"bytes,11,rep,name=handling,proto3" json:"handling,omitempty"`
}

func (x *SpecimenDefinition_TypeTested) Reset() {
	*x = SpecimenDefinition_TypeTested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SpecimenDefinition_TypeTested) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetIsDerived() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsDerived
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetPreference() *SpecimenDefinition_TypeTested_PreferenceCode {
	if x != nil {
		return x.Preference
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetContainer() *SpecimenDefinition_TypeTested_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetRequirement() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirement
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetRetentionTime() *datatypes_go_proto.Duration {
	if x != nil {
		return x.RetentionTime
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetRejectionCriterion() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.RejectionCriterion
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested) GetHandling() []*SpecimenDefinition_TypeTested_Handling {
	if x != nil {
		return x.Handling
	}
	return nil
}

// preferred | alternate
type SpecimenDefinition_TypeTested_PreferenceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SpecimenContainedPreferenceCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.SpecimenContainedPreferenceCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SpecimenDefinition_TypeTested_PreferenceCode) Reset() {
	*x = SpecimenDefinition_TypeTested_PreferenceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested_PreferenceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested_PreferenceCode) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested_PreferenceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested_PreferenceCode.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested_PreferenceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *SpecimenDefinition_TypeTested_PreferenceCode) GetValue() codes_go_proto.SpecimenContainedPreferenceCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SpecimenContainedPreferenceCode_INVALID_UNINITIALIZED
}

func (x *SpecimenDefinition_TypeTested_PreferenceCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_PreferenceCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The specimen's container
type SpecimenDefinition_TypeTested_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Container material
	Material *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=material,proto3" json:"material,omitempty"`
	// Kind of container associated with the kind of specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Color of container cap
	Cap *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=cap,proto3" json:"cap,omitempty"`
	// Container description
	Description *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Container capacity
	Capacity      *datatypes_go_proto.SimpleQuantity                      `protobuf:"bytes,8,opt,name=capacity,proto3" json:"capacity,omitempty"`
	MinimumVolume *SpecimenDefinition_TypeTested_Container_MinimumVolumeX `protobuf:"bytes,9,opt,name=minimum_volume,json=minimumVolume,proto3" json:"minimum_volume,omitempty"`
	Additive      []*SpecimenDefinition_TypeTested_Container_Additive     `protobuf:"bytes,10,rep,name=additive,proto3" json:"additive,omitempty"`
	// Specimen container preparation
	Preparation *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=preparation,proto3" json:"preparation,omitempty"`
}

func (x *SpecimenDefinition_TypeTested_Container) Reset() {
	*x = SpecimenDefinition_TypeTested_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested_Container) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested_Container) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested_Container.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested_Container) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *SpecimenDefinition_TypeTested_Container) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetMaterial() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetCap() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetCapacity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetMinimumVolume() *SpecimenDefinition_TypeTested_Container_MinimumVolumeX {
	if x != nil {
		return x.MinimumVolume
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetAdditive() []*SpecimenDefinition_TypeTested_Container_Additive {
	if x != nil {
		return x.Additive
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container) GetPreparation() *datatypes_go_proto.String {
	if x != nil {
		return x.Preparation
	}
	return nil
}

// Specimen handling before testing
type SpecimenDefinition_TypeTested_Handling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Temperature qualifier
	TemperatureQualifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=temperature_qualifier,json=temperatureQualifier,proto3" json:"temperature_qualifier,omitempty"`
	// Temperature range
	TemperatureRange *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=temperature_range,json=temperatureRange,proto3" json:"temperature_range,omitempty"`
	// Maximum preservation time
	MaxDuration *datatypes_go_proto.Duration `protobuf:"bytes,6,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
	// Preservation instruction
	Instruction *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *SpecimenDefinition_TypeTested_Handling) Reset() {
	*x = SpecimenDefinition_TypeTested_Handling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested_Handling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested_Handling) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested_Handling) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested_Handling.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested_Handling) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *SpecimenDefinition_TypeTested_Handling) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Handling) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Handling) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Handling) GetTemperatureQualifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TemperatureQualifier
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Handling) GetTemperatureRange() *datatypes_go_proto.Range {
	if x != nil {
		return x.TemperatureRange
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Handling) GetMaxDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.MaxDuration
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Handling) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Minimum volume
type SpecimenDefinition_TypeTested_Container_MinimumVolumeX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_Quantity
	//	*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_StringValue
	Choice isSpecimenDefinition_TypeTested_Container_MinimumVolumeX_Choice `protobuf_oneof:"choice"`
}

func (x *SpecimenDefinition_TypeTested_Container_MinimumVolumeX) Reset() {
	*x = SpecimenDefinition_TypeTested_Container_MinimumVolumeX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested_Container_MinimumVolumeX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested_Container_MinimumVolumeX) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested_Container_MinimumVolumeX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested_Container_MinimumVolumeX.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested_Container_MinimumVolumeX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (m *SpecimenDefinition_TypeTested_Container_MinimumVolumeX) GetChoice() isSpecimenDefinition_TypeTested_Container_MinimumVolumeX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_MinimumVolumeX) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetChoice().(*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_MinimumVolumeX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isSpecimenDefinition_TypeTested_Container_MinimumVolumeX_Choice interface {
	isSpecimenDefinition_TypeTested_Container_MinimumVolumeX_Choice()
}

type SpecimenDefinition_TypeTested_Container_MinimumVolumeX_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type SpecimenDefinition_TypeTested_Container_MinimumVolumeX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_Quantity) isSpecimenDefinition_TypeTested_Container_MinimumVolumeX_Choice() {
}

func (*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_StringValue) isSpecimenDefinition_TypeTested_Container_MinimumVolumeX_Choice() {
}

// Additive associated with container
type SpecimenDefinition_TypeTested_Container_Additive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension                             `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Additive          *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX `protobuf:"bytes,4,opt,name=additive,proto3" json:"additive,omitempty"`
}

func (x *SpecimenDefinition_TypeTested_Container_Additive) Reset() {
	*x = SpecimenDefinition_TypeTested_Container_Additive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested_Container_Additive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested_Container_Additive) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested_Container_Additive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested_Container_Additive.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested_Container_Additive) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *SpecimenDefinition_TypeTested_Container_Additive) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_Additive) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_Additive) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_Additive) GetAdditive() *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX {
	if x != nil {
		return x.Additive
	}
	return nil
}

// Additive associated with container
type SpecimenDefinition_TypeTested_Container_Additive_AdditiveX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_CodeableConcept
	//	*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Reference
	Choice isSpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Choice `protobuf_oneof:"choice"`
}

func (x *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) Reset() {
	*x = SpecimenDefinition_TypeTested_Container_Additive_AdditiveX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) ProtoMessage() {}

func (x *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenDefinition_TypeTested_Container_Additive_AdditiveX.ProtoReflect.Descriptor instead.
func (*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP(), []int{0, 0, 1, 1, 0}
}

func (m *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) GetChoice() isSpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetChoice().(*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *SpecimenDefinition_TypeTested_Container_Additive_AdditiveX) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetChoice().(*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isSpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Choice interface {
	isSpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Choice()
}

type SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_CodeableConcept) isSpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Choice() {
}

func (*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Reference) isSpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e,
	0x20, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0xa6, 0x18, 0x0a, 0x0a, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x08, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x1a, 0xc7, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x78, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb4,
	0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x58, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x61,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xa2, 0x01, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x58, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xfd, 0x03, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x58, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x58, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xe9, 0x03, 0x0a, 0x08, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x15,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42,
	0x83, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x60, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98,
	0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_goTypes = []interface{}{
	(*SpecimenDefinition)(nil),                                         // 0: google.fhir.r4.core.SpecimenDefinition
	(*SpecimenDefinition_TypeTested)(nil),                              // 1: google.fhir.r4.core.SpecimenDefinition.TypeTested
	(*SpecimenDefinition_TypeTested_PreferenceCode)(nil),               // 2: google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode
	(*SpecimenDefinition_TypeTested_Container)(nil),                    // 3: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container
	(*SpecimenDefinition_TypeTested_Handling)(nil),                     // 4: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling
	(*SpecimenDefinition_TypeTested_Container_MinimumVolumeX)(nil),     // 5: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX
	(*SpecimenDefinition_TypeTested_Container_Additive)(nil),           // 6: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive
	(*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX)(nil), // 7: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX
	(*datatypes_go_proto.Id)(nil),                                      // 8: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                    // 9: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                     // 10: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                    // 11: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                               // 12: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                    // 13: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                               // 14: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                              // 15: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                         // 16: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.String)(nil),                                  // 17: google.fhir.r4.core.String
	(*datatypes_go_proto.Boolean)(nil),                                 // 18: google.fhir.r4.core.Boolean
	(*datatypes_go_proto.Duration)(nil),                                // 19: google.fhir.r4.core.Duration
	(codes_go_proto.SpecimenContainedPreferenceCode_Value)(0),          // 20: google.fhir.r4.core.SpecimenContainedPreferenceCode.Value
	(*datatypes_go_proto.SimpleQuantity)(nil),                          // 21: google.fhir.r4.core.SimpleQuantity
	(*datatypes_go_proto.Range)(nil),                                   // 22: google.fhir.r4.core.Range
	(*datatypes_go_proto.Reference)(nil),                               // 23: google.fhir.r4.core.Reference
}
var file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_depIdxs = []int32{
	8,  // 0: google.fhir.r4.core.SpecimenDefinition.id:type_name -> google.fhir.r4.core.Id
	9,  // 1: google.fhir.r4.core.SpecimenDefinition.meta:type_name -> google.fhir.r4.core.Meta
	10, // 2: google.fhir.r4.core.SpecimenDefinition.implicit_rules:type_name -> google.fhir.r4.core.Uri
	11, // 3: google.fhir.r4.core.SpecimenDefinition.language:type_name -> google.fhir.r4.core.Code
	12, // 4: google.fhir.r4.core.SpecimenDefinition.text:type_name -> google.fhir.r4.core.Narrative
	13, // 5: google.fhir.r4.core.SpecimenDefinition.contained:type_name -> google.protobuf.Any
	14, // 6: google.fhir.r4.core.SpecimenDefinition.extension:type_name -> google.fhir.r4.core.Extension
	14, // 7: google.fhir.r4.core.SpecimenDefinition.modifier_extension:type_name -> google.fhir.r4.core.Extension
	15, // 8: google.fhir.r4.core.SpecimenDefinition.identifier:type_name -> google.fhir.r4.core.Identifier
	16, // 9: google.fhir.r4.core.SpecimenDefinition.type_collected:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 10: google.fhir.r4.core.SpecimenDefinition.patient_preparation:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 11: google.fhir.r4.core.SpecimenDefinition.time_aspect:type_name -> google.fhir.r4.core.String
	16, // 12: google.fhir.r4.core.SpecimenDefinition.collection:type_name -> google.fhir.r4.core.CodeableConcept
	1,  // 13: google.fhir.r4.core.SpecimenDefinition.type_tested:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested
	17, // 14: google.fhir.r4.core.SpecimenDefinition.TypeTested.id:type_name -> google.fhir.r4.core.String
	14, // 15: google.fhir.r4.core.SpecimenDefinition.TypeTested.extension:type_name -> google.fhir.r4.core.Extension
	14, // 16: google.fhir.r4.core.SpecimenDefinition.TypeTested.modifier_extension:type_name -> google.fhir.r4.core.Extension
	18, // 17: google.fhir.r4.core.SpecimenDefinition.TypeTested.is_derived:type_name -> google.fhir.r4.core.Boolean
	16, // 18: google.fhir.r4.core.SpecimenDefinition.TypeTested.type:type_name -> google.fhir.r4.core.CodeableConcept
	2,  // 19: google.fhir.r4.core.SpecimenDefinition.TypeTested.preference:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode
	3,  // 20: google.fhir.r4.core.SpecimenDefinition.TypeTested.container:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested.Container
	17, // 21: google.fhir.r4.core.SpecimenDefinition.TypeTested.requirement:type_name -> google.fhir.r4.core.String
	19, // 22: google.fhir.r4.core.SpecimenDefinition.TypeTested.retention_time:type_name -> google.fhir.r4.core.Duration
	16, // 23: google.fhir.r4.core.SpecimenDefinition.TypeTested.rejection_criterion:type_name -> google.fhir.r4.core.CodeableConcept
	4,  // 24: google.fhir.r4.core.SpecimenDefinition.TypeTested.handling:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling
	20, // 25: google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode.value:type_name -> google.fhir.r4.core.SpecimenContainedPreferenceCode.Value
	17, // 26: google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode.id:type_name -> google.fhir.r4.core.String
	14, // 27: google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode.extension:type_name -> google.fhir.r4.core.Extension
	17, // 28: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.id:type_name -> google.fhir.r4.core.String
	14, // 29: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.extension:type_name -> google.fhir.r4.core.Extension
	14, // 30: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 31: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.material:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 32: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.type:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 33: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.cap:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 34: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.description:type_name -> google.fhir.r4.core.String
	21, // 35: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.capacity:type_name -> google.fhir.r4.core.SimpleQuantity
	5,  // 36: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.minimum_volume:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX
	6,  // 37: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.additive:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive
	17, // 38: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.preparation:type_name -> google.fhir.r4.core.String
	17, // 39: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.id:type_name -> google.fhir.r4.core.String
	14, // 40: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.extension:type_name -> google.fhir.r4.core.Extension
	14, // 41: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 42: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.temperature_qualifier:type_name -> google.fhir.r4.core.CodeableConcept
	22, // 43: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.temperature_range:type_name -> google.fhir.r4.core.Range
	19, // 44: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.max_duration:type_name -> google.fhir.r4.core.Duration
	17, // 45: google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.instruction:type_name -> google.fhir.r4.core.String
	21, // 46: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX.quantity:type_name -> google.fhir.r4.core.SimpleQuantity
	17, // 47: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX.string_value:type_name -> google.fhir.r4.core.String
	17, // 48: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.id:type_name -> google.fhir.r4.core.String
	14, // 49: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.extension:type_name -> google.fhir.r4.core.Extension
	14, // 50: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.modifier_extension:type_name -> google.fhir.r4.core.Extension
	7,  // 51: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.additive:type_name -> google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX
	16, // 52: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX.codeable_concept:type_name -> google.fhir.r4.core.CodeableConcept
	23, // 53: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX.reference:type_name -> google.fhir.r4.core.Reference
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested_PreferenceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested_Handling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested_Container_MinimumVolumeX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested_Container_Additive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_Quantity)(nil),
		(*SpecimenDefinition_TypeTested_Container_MinimumVolumeX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_CodeableConcept)(nil),
		(*SpecimenDefinition_TypeTested_Container_Additive_AdditiveX_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_specimen_definition_proto_depIdxs = nil
}
