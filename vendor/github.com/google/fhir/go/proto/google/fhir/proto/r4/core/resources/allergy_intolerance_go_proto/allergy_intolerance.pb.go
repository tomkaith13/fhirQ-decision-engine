//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/allergy_intolerance.proto

package allergy_intolerance_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for AllergyIntolerance, last updated
// 2019-11-01T09:29:23.356+11:00. Allergy or Intolerance (generally: Risk of
// adverse reaction to a substance). See
// http://hl7.org/fhir/StructureDefinition/AllergyIntolerance
type AllergyIntolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | inactive | resolved
	ClinicalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// unconfirmed | confirmed | refuted | entered-in-error
	VerificationStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	Type               *AllergyIntolerance_TypeCode        `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	Category           []*AllergyIntolerance_CategoryCode  `protobuf:"bytes,14,rep,name=category,proto3" json:"category,omitempty"`
	Criticality        *AllergyIntolerance_CriticalityCode `protobuf:"bytes,15,opt,name=criticality,proto3" json:"criticality,omitempty"`
	// Code that identifies the allergy or intolerance
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=code,proto3" json:"code,omitempty"`
	// Who the sensitivity is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter when the allergy or intolerance was asserted
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Onset     *AllergyIntolerance_OnsetX    `protobuf:"bytes,19,opt,name=onset,proto3" json:"onset,omitempty"`
	// Date first version of the resource instance was recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Who recorded the sensitivity
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Source of the information about the allergy
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=asserter,proto3" json:"asserter,omitempty"`
	// Date(/time) of last known occurrence of a reaction
	LastOccurrence *datatypes_go_proto.DateTime `protobuf:"bytes,23,opt,name=last_occurrence,json=lastOccurrence,proto3" json:"last_occurrence,omitempty"`
	// Additional text not captured in other fields
	Note     []*datatypes_go_proto.Annotation `protobuf:"bytes,24,rep,name=note,proto3" json:"note,omitempty"`
	Reaction []*AllergyIntolerance_Reaction   `protobuf:"bytes,25,rep,name=reaction,proto3" json:"reaction,omitempty"`
}

func (x *AllergyIntolerance) Reset() {
	*x = AllergyIntolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance) ProtoMessage() {}

func (x *AllergyIntolerance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0}
}

func (x *AllergyIntolerance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AllergyIntolerance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *AllergyIntolerance) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *AllergyIntolerance) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *AllergyIntolerance) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *AllergyIntolerance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AllergyIntolerance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AllergyIntolerance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AllergyIntolerance) GetClinicalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *AllergyIntolerance) GetVerificationStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *AllergyIntolerance) GetType() *AllergyIntolerance_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AllergyIntolerance) GetCategory() []*AllergyIntolerance_CategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *AllergyIntolerance) GetCriticality() *AllergyIntolerance_CriticalityCode {
	if x != nil {
		return x.Criticality
	}
	return nil
}

func (x *AllergyIntolerance) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *AllergyIntolerance) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *AllergyIntolerance) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *AllergyIntolerance) GetOnset() *AllergyIntolerance_OnsetX {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *AllergyIntolerance) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *AllergyIntolerance) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *AllergyIntolerance) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *AllergyIntolerance) GetLastOccurrence() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.LastOccurrence
	}
	return nil
}

func (x *AllergyIntolerance) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *AllergyIntolerance) GetReaction() []*AllergyIntolerance_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

// allergy | intolerance - Underlying mechanism (if known)
type AllergyIntolerance_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceTypeCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntolerance_TypeCode) Reset() {
	*x = AllergyIntolerance_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_TypeCode) ProtoMessage() {}

func (x *AllergyIntolerance_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_TypeCode.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AllergyIntolerance_TypeCode) GetValue() codes_go_proto.AllergyIntoleranceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntolerance_TypeCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance_TypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// food | medication | environment | biologic
type AllergyIntolerance_CategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceCategoryCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntolerance_CategoryCode) Reset() {
	*x = AllergyIntolerance_CategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_CategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_CategoryCode) ProtoMessage() {}

func (x *AllergyIntolerance_CategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_CategoryCode.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_CategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AllergyIntolerance_CategoryCode) GetValue() codes_go_proto.AllergyIntoleranceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntolerance_CategoryCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance_CategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// low | high | unable-to-assess
type AllergyIntolerance_CriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceCriticalityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceCriticalityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntolerance_CriticalityCode) Reset() {
	*x = AllergyIntolerance_CriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_CriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_CriticalityCode) ProtoMessage() {}

func (x *AllergyIntolerance_CriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_CriticalityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_CriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AllergyIntolerance_CriticalityCode) GetValue() codes_go_proto.AllergyIntoleranceCriticalityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntolerance_CriticalityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance_CriticalityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// When allergy or intolerance was identified
type AllergyIntolerance_OnsetX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*AllergyIntolerance_OnsetX_DateTime
	//	*AllergyIntolerance_OnsetX_Age
	//	*AllergyIntolerance_OnsetX_Period
	//	*AllergyIntolerance_OnsetX_Range
	//	*AllergyIntolerance_OnsetX_StringValue
	Choice isAllergyIntolerance_OnsetX_Choice `protobuf_oneof:"choice"`
}

func (x *AllergyIntolerance_OnsetX) Reset() {
	*x = AllergyIntolerance_OnsetX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_OnsetX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_OnsetX) ProtoMessage() {}

func (x *AllergyIntolerance_OnsetX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_OnsetX.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_OnsetX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0, 3}
}

func (m *AllergyIntolerance_OnsetX) GetChoice() isAllergyIntolerance_OnsetX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *AllergyIntolerance_OnsetX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*AllergyIntolerance_OnsetX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *AllergyIntolerance_OnsetX) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetChoice().(*AllergyIntolerance_OnsetX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *AllergyIntolerance_OnsetX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*AllergyIntolerance_OnsetX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *AllergyIntolerance_OnsetX) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetChoice().(*AllergyIntolerance_OnsetX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *AllergyIntolerance_OnsetX) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetChoice().(*AllergyIntolerance_OnsetX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isAllergyIntolerance_OnsetX_Choice interface {
	isAllergyIntolerance_OnsetX_Choice()
}

type AllergyIntolerance_OnsetX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type AllergyIntolerance_OnsetX_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type AllergyIntolerance_OnsetX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type AllergyIntolerance_OnsetX_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type AllergyIntolerance_OnsetX_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*AllergyIntolerance_OnsetX_DateTime) isAllergyIntolerance_OnsetX_Choice() {}

func (*AllergyIntolerance_OnsetX_Age) isAllergyIntolerance_OnsetX_Choice() {}

func (*AllergyIntolerance_OnsetX_Period) isAllergyIntolerance_OnsetX_Choice() {}

func (*AllergyIntolerance_OnsetX_Range) isAllergyIntolerance_OnsetX_Choice() {}

func (*AllergyIntolerance_OnsetX_StringValue) isAllergyIntolerance_OnsetX_Choice() {}

// Adverse Reaction Events linked to exposure to substance
type AllergyIntolerance_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific substance or pharmaceutical product considered to be responsible
	// for event
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// Clinical symptoms/signs associated with the Event
	Manifestation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=manifestation,proto3" json:"manifestation,omitempty"`
	// Description of the event as a whole
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Date(/time) when manifestations showed
	Onset    *datatypes_go_proto.DateTime              `protobuf:"bytes,7,opt,name=onset,proto3" json:"onset,omitempty"`
	Severity *AllergyIntolerance_Reaction_SeverityCode `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"`
	// How the subject was exposed to the substance
	ExposureRoute *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=exposure_route,json=exposureRoute,proto3" json:"exposure_route,omitempty"`
	// Text about event not captured in other fields
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,10,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *AllergyIntolerance_Reaction) Reset() {
	*x = AllergyIntolerance_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_Reaction) ProtoMessage() {}

func (x *AllergyIntolerance_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_Reaction.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AllergyIntolerance_Reaction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetManifestation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Manifestation
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetOnset() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetSeverity() *AllergyIntolerance_Reaction_SeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetExposureRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExposureRoute
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// mild | moderate | severe (of event as a whole)
type AllergyIntolerance_Reaction_SeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AllergyIntoleranceSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r4.core.AllergyIntoleranceSeverityCode_Value" json:"value,omitempty"`
	Id        *datatypes_go_proto.String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*datatypes_go_proto.Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntolerance_Reaction_SeverityCode) Reset() {
	*x = AllergyIntolerance_Reaction_SeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_Reaction_SeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_Reaction_SeverityCode) ProtoMessage() {}

func (x *AllergyIntolerance_Reaction_SeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_Reaction_SeverityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_Reaction_SeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *AllergyIntolerance_Reaction_SeverityCode) GetValue() codes_go_proto.AllergyIntoleranceSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntolerance_Reaction_SeverityCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance_Reaction_SeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0,
	0x23, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x05,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x52, 0x05, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x84, 0x01,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x48, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xb7, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xc3, 0x02, 0x0a, 0x0c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xcc, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xae,
	0x02, 0x0a, 0x06, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xee, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x12, 0x59, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a,
	0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a,
	0xbe, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x3a, 0xb8, 0x03, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xb3, 0x01,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x27, 0x29, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xb1, 0x01, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69,
	0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x27, 0x29, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x42, 0x83, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a,
	0x60, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_goTypes = []interface{}{
	(*AllergyIntolerance)(nil),                                  // 0: google.fhir.r4.core.AllergyIntolerance
	(*AllergyIntolerance_TypeCode)(nil),                         // 1: google.fhir.r4.core.AllergyIntolerance.TypeCode
	(*AllergyIntolerance_CategoryCode)(nil),                     // 2: google.fhir.r4.core.AllergyIntolerance.CategoryCode
	(*AllergyIntolerance_CriticalityCode)(nil),                  // 3: google.fhir.r4.core.AllergyIntolerance.CriticalityCode
	(*AllergyIntolerance_OnsetX)(nil),                           // 4: google.fhir.r4.core.AllergyIntolerance.OnsetX
	(*AllergyIntolerance_Reaction)(nil),                         // 5: google.fhir.r4.core.AllergyIntolerance.Reaction
	(*AllergyIntolerance_Reaction_SeverityCode)(nil),            // 6: google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode
	(*datatypes_go_proto.Id)(nil),                               // 7: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                             // 8: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                              // 9: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                             // 10: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                        // 11: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                             // 12: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                        // 13: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                       // 14: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),                  // 15: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Reference)(nil),                        // 16: google.fhir.r4.core.Reference
	(*datatypes_go_proto.DateTime)(nil),                         // 17: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.Annotation)(nil),                       // 18: google.fhir.r4.core.Annotation
	(codes_go_proto.AllergyIntoleranceTypeCode_Value)(0),        // 19: google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	(*datatypes_go_proto.String)(nil),                           // 20: google.fhir.r4.core.String
	(codes_go_proto.AllergyIntoleranceCategoryCode_Value)(0),    // 21: google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	(codes_go_proto.AllergyIntoleranceCriticalityCode_Value)(0), // 22: google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	(*datatypes_go_proto.Age)(nil),                              // 23: google.fhir.r4.core.Age
	(*datatypes_go_proto.Period)(nil),                           // 24: google.fhir.r4.core.Period
	(*datatypes_go_proto.Range)(nil),                            // 25: google.fhir.r4.core.Range
	(codes_go_proto.AllergyIntoleranceSeverityCode_Value)(0),    // 26: google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
}
var file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_depIdxs = []int32{
	7,  // 0: google.fhir.r4.core.AllergyIntolerance.id:type_name -> google.fhir.r4.core.Id
	8,  // 1: google.fhir.r4.core.AllergyIntolerance.meta:type_name -> google.fhir.r4.core.Meta
	9,  // 2: google.fhir.r4.core.AllergyIntolerance.implicit_rules:type_name -> google.fhir.r4.core.Uri
	10, // 3: google.fhir.r4.core.AllergyIntolerance.language:type_name -> google.fhir.r4.core.Code
	11, // 4: google.fhir.r4.core.AllergyIntolerance.text:type_name -> google.fhir.r4.core.Narrative
	12, // 5: google.fhir.r4.core.AllergyIntolerance.contained:type_name -> google.protobuf.Any
	13, // 6: google.fhir.r4.core.AllergyIntolerance.extension:type_name -> google.fhir.r4.core.Extension
	13, // 7: google.fhir.r4.core.AllergyIntolerance.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 8: google.fhir.r4.core.AllergyIntolerance.identifier:type_name -> google.fhir.r4.core.Identifier
	15, // 9: google.fhir.r4.core.AllergyIntolerance.clinical_status:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 10: google.fhir.r4.core.AllergyIntolerance.verification_status:type_name -> google.fhir.r4.core.CodeableConcept
	1,  // 11: google.fhir.r4.core.AllergyIntolerance.type:type_name -> google.fhir.r4.core.AllergyIntolerance.TypeCode
	2,  // 12: google.fhir.r4.core.AllergyIntolerance.category:type_name -> google.fhir.r4.core.AllergyIntolerance.CategoryCode
	3,  // 13: google.fhir.r4.core.AllergyIntolerance.criticality:type_name -> google.fhir.r4.core.AllergyIntolerance.CriticalityCode
	15, // 14: google.fhir.r4.core.AllergyIntolerance.code:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 15: google.fhir.r4.core.AllergyIntolerance.patient:type_name -> google.fhir.r4.core.Reference
	16, // 16: google.fhir.r4.core.AllergyIntolerance.encounter:type_name -> google.fhir.r4.core.Reference
	4,  // 17: google.fhir.r4.core.AllergyIntolerance.onset:type_name -> google.fhir.r4.core.AllergyIntolerance.OnsetX
	17, // 18: google.fhir.r4.core.AllergyIntolerance.recorded_date:type_name -> google.fhir.r4.core.DateTime
	16, // 19: google.fhir.r4.core.AllergyIntolerance.recorder:type_name -> google.fhir.r4.core.Reference
	16, // 20: google.fhir.r4.core.AllergyIntolerance.asserter:type_name -> google.fhir.r4.core.Reference
	17, // 21: google.fhir.r4.core.AllergyIntolerance.last_occurrence:type_name -> google.fhir.r4.core.DateTime
	18, // 22: google.fhir.r4.core.AllergyIntolerance.note:type_name -> google.fhir.r4.core.Annotation
	5,  // 23: google.fhir.r4.core.AllergyIntolerance.reaction:type_name -> google.fhir.r4.core.AllergyIntolerance.Reaction
	19, // 24: google.fhir.r4.core.AllergyIntolerance.TypeCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	20, // 25: google.fhir.r4.core.AllergyIntolerance.TypeCode.id:type_name -> google.fhir.r4.core.String
	13, // 26: google.fhir.r4.core.AllergyIntolerance.TypeCode.extension:type_name -> google.fhir.r4.core.Extension
	21, // 27: google.fhir.r4.core.AllergyIntolerance.CategoryCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	20, // 28: google.fhir.r4.core.AllergyIntolerance.CategoryCode.id:type_name -> google.fhir.r4.core.String
	13, // 29: google.fhir.r4.core.AllergyIntolerance.CategoryCode.extension:type_name -> google.fhir.r4.core.Extension
	22, // 30: google.fhir.r4.core.AllergyIntolerance.CriticalityCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	20, // 31: google.fhir.r4.core.AllergyIntolerance.CriticalityCode.id:type_name -> google.fhir.r4.core.String
	13, // 32: google.fhir.r4.core.AllergyIntolerance.CriticalityCode.extension:type_name -> google.fhir.r4.core.Extension
	17, // 33: google.fhir.r4.core.AllergyIntolerance.OnsetX.date_time:type_name -> google.fhir.r4.core.DateTime
	23, // 34: google.fhir.r4.core.AllergyIntolerance.OnsetX.age:type_name -> google.fhir.r4.core.Age
	24, // 35: google.fhir.r4.core.AllergyIntolerance.OnsetX.period:type_name -> google.fhir.r4.core.Period
	25, // 36: google.fhir.r4.core.AllergyIntolerance.OnsetX.range:type_name -> google.fhir.r4.core.Range
	20, // 37: google.fhir.r4.core.AllergyIntolerance.OnsetX.string_value:type_name -> google.fhir.r4.core.String
	20, // 38: google.fhir.r4.core.AllergyIntolerance.Reaction.id:type_name -> google.fhir.r4.core.String
	13, // 39: google.fhir.r4.core.AllergyIntolerance.Reaction.extension:type_name -> google.fhir.r4.core.Extension
	13, // 40: google.fhir.r4.core.AllergyIntolerance.Reaction.modifier_extension:type_name -> google.fhir.r4.core.Extension
	15, // 41: google.fhir.r4.core.AllergyIntolerance.Reaction.substance:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 42: google.fhir.r4.core.AllergyIntolerance.Reaction.manifestation:type_name -> google.fhir.r4.core.CodeableConcept
	20, // 43: google.fhir.r4.core.AllergyIntolerance.Reaction.description:type_name -> google.fhir.r4.core.String
	17, // 44: google.fhir.r4.core.AllergyIntolerance.Reaction.onset:type_name -> google.fhir.r4.core.DateTime
	6,  // 45: google.fhir.r4.core.AllergyIntolerance.Reaction.severity:type_name -> google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode
	15, // 46: google.fhir.r4.core.AllergyIntolerance.Reaction.exposure_route:type_name -> google.fhir.r4.core.CodeableConcept
	18, // 47: google.fhir.r4.core.AllergyIntolerance.Reaction.note:type_name -> google.fhir.r4.core.Annotation
	26, // 48: google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode.value:type_name -> google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
	20, // 49: google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode.id:type_name -> google.fhir.r4.core.String
	13, // 50: google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode.extension:type_name -> google.fhir.r4.core.Extension
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_CategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_CriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_OnsetX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_Reaction_SeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AllergyIntolerance_OnsetX_DateTime)(nil),
		(*AllergyIntolerance_OnsetX_Age)(nil),
		(*AllergyIntolerance_OnsetX_Period)(nil),
		(*AllergyIntolerance_OnsetX_Range)(nil),
		(*AllergyIntolerance_OnsetX_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_allergy_intolerance_proto_depIdxs = nil
}
