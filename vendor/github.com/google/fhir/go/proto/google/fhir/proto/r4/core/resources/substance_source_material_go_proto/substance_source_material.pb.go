//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/substance_source_material.proto

package substance_source_material_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for SubstanceSourceMaterial, last
// updated 2019-11-01T09:29:23.356+11:00. Source material shall capture
// information on the taxonomic and anatomical origins as well as the fraction
// of a material that can result in or can be modified to form a substance. This
// set of data elements shall be used to define polymer substances isolated from
// biological matrices. Taxonomic and anatomical origins shall be described
// using a controlled vocabulary as required. This information is captured for
// naturally derived polymers ( . starch) and structurally diverse substances.
// For Organisms belonging to the Kingdom Plantae the Substance level defines
// the fresh material of a single species or infraspecies, the Herbal Drug and
// the Herbal preparation. For Herbal preparations, the fraction information
// will be captured at the Substance information level and additional
// information for herbal extracts will be captured at the Specified Substance
// Group 1 information level. See for further explanation the Substance Class:
// Structurally Diverse and the herbal annex. See
// http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial
type SubstanceSourceMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// General high level classification of the source material specific to the
	// origin of the material
	SourceMaterialClass *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=source_material_class,json=sourceMaterialClass,proto3" json:"source_material_class,omitempty"`
	// The type of the source material shall be specified based on a controlled
	// vocabulary. For vaccines, this subclause refers to the class of infectious
	// agent
	SourceMaterialType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=source_material_type,json=sourceMaterialType,proto3" json:"source_material_type,omitempty"`
	// The state of the source material when extracted
	SourceMaterialState *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=source_material_state,json=sourceMaterialState,proto3" json:"source_material_state,omitempty"`
	// The unique identifier associated with the source material parent organism
	// shall be specified
	OrganismId *datatypes_go_proto.Identifier `protobuf:"bytes,13,opt,name=organism_id,json=organismId,proto3" json:"organism_id,omitempty"`
	// The organism accepted Scientific name shall be provided based on the
	// organism taxonomy
	OrganismName *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=organism_name,json=organismName,proto3" json:"organism_name,omitempty"`
	// The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
	// the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
	ParentSubstanceId []*datatypes_go_proto.Identifier `protobuf:"bytes,15,rep,name=parent_substance_id,json=parentSubstanceId,proto3" json:"parent_substance_id,omitempty"`
	// The parent substance of the Herbal Drug, or Herbal preparation
	ParentSubstanceName []*datatypes_go_proto.String `protobuf:"bytes,16,rep,name=parent_substance_name,json=parentSubstanceName,proto3" json:"parent_substance_name,omitempty"`
	// The country where the plant material is harvested or the countries where
	// the plasma is sourced from as laid down in accordance with the Plasma
	// Master File. For “Plasma-derived substances” the attribute country of
	// origin provides information about the countries used for the manufacturing
	// of the Cryopoor plama or Crioprecipitate
	CountryOfOrigin []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,rep,name=country_of_origin,json=countryOfOrigin,proto3" json:"country_of_origin,omitempty"`
	// The place/region where the plant is harvested or the places/regions where
	// the animal source material has its habitat
	GeographicalLocation []*datatypes_go_proto.String `protobuf:"bytes,18,rep,name=geographical_location,json=geographicalLocation,proto3" json:"geographical_location,omitempty"`
	// Stage of life for animals, plants, insects and microorganisms. This
	// information shall be provided only when the substance is significantly
	// different in these stages (e.g. foetal bovine serum)
	DevelopmentStage    *datatypes_go_proto.CodeableConcept            `protobuf:"bytes,19,opt,name=development_stage,json=developmentStage,proto3" json:"development_stage,omitempty"`
	FractionDescription []*SubstanceSourceMaterial_FractionDescription `protobuf:"bytes,20,rep,name=fraction_description,json=fractionDescription,proto3" json:"fraction_description,omitempty"`
	Organism            *SubstanceSourceMaterial_Organism              `protobuf:"bytes,21,opt,name=organism,proto3" json:"organism,omitempty"`
	PartDescription     []*SubstanceSourceMaterial_PartDescription     `protobuf:"bytes,22,rep,name=part_description,json=partDescription,proto3" json:"part_description,omitempty"`
}

func (x *SubstanceSourceMaterial) Reset() {
	*x = SubstanceSourceMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial) ProtoMessage() {}

func (x *SubstanceSourceMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0}
}

func (x *SubstanceSourceMaterial) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetSourceMaterialClass() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SourceMaterialClass
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetSourceMaterialType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SourceMaterialType
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetSourceMaterialState() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SourceMaterialState
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetOrganismId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.OrganismId
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetOrganismName() *datatypes_go_proto.String {
	if x != nil {
		return x.OrganismName
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetParentSubstanceId() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.ParentSubstanceId
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetParentSubstanceName() []*datatypes_go_proto.String {
	if x != nil {
		return x.ParentSubstanceName
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetCountryOfOrigin() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CountryOfOrigin
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetGeographicalLocation() []*datatypes_go_proto.String {
	if x != nil {
		return x.GeographicalLocation
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetDevelopmentStage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DevelopmentStage
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetFractionDescription() []*SubstanceSourceMaterial_FractionDescription {
	if x != nil {
		return x.FractionDescription
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetOrganism() *SubstanceSourceMaterial_Organism {
	if x != nil {
		return x.Organism
	}
	return nil
}

func (x *SubstanceSourceMaterial) GetPartDescription() []*SubstanceSourceMaterial_PartDescription {
	if x != nil {
		return x.PartDescription
	}
	return nil
}

// Many complex materials are fractions of parts of plants, animals, or
// minerals. Fraction elements are often necessary to define both Substances
// and Specified Group 1 Substances. For substances derived from Plants,
// fraction information will be captured at the Substance information level (
// . Oils, Juices and Exudates). Additional information for Extracts, such as
// extraction solvent composition, will be captured at the Specified Substance
// Group 1 information level. For plasma-derived products fraction information
// will be captured at the Substance and the Specified Substance Group 1
// levels
type SubstanceSourceMaterial_FractionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// This element is capturing information about the fraction of a plant part,
	// or human plasma for fractionation
	Fraction *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=fraction,proto3" json:"fraction,omitempty"`
	// The specific type of the material constituting the component. For Herbal
	// preparations the particulars of the extracts (liquid/dry) is described in
	// Specified Substance Group 1
	MaterialType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=material_type,json=materialType,proto3" json:"material_type,omitempty"`
}

func (x *SubstanceSourceMaterial_FractionDescription) Reset() {
	*x = SubstanceSourceMaterial_FractionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial_FractionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial_FractionDescription) ProtoMessage() {}

func (x *SubstanceSourceMaterial_FractionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial_FractionDescription.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial_FractionDescription) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SubstanceSourceMaterial_FractionDescription) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial_FractionDescription) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial_FractionDescription) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial_FractionDescription) GetFraction() *datatypes_go_proto.String {
	if x != nil {
		return x.Fraction
	}
	return nil
}

func (x *SubstanceSourceMaterial_FractionDescription) GetMaterialType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MaterialType
	}
	return nil
}

// This subclause describes the organism which the substance is derived from.
// For vaccines, the parent organism shall be specified based on these
// subclause elements. As an example, full taxonomy will be described for the
// Substance Name: ., Leaf
type SubstanceSourceMaterial_Organism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The family of an organism shall be specified
	Family *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	// The genus of an organism shall be specified; refers to the Latin epithet
	// of the genus element of the plant/animal scientific name; it is present
	// in names for genera, species and infraspecies
	Genus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=genus,proto3" json:"genus,omitempty"`
	// The species of an organism shall be specified; refers to the Latin
	// epithet of the species of the plant/animal; it is present in names for
	// species and infraspecies
	Species *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=species,proto3" json:"species,omitempty"`
	// The Intraspecific type of an organism shall be specified
	IntraspecificType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=intraspecific_type,json=intraspecificType,proto3" json:"intraspecific_type,omitempty"`
	// The intraspecific description of an organism shall be specified based on
	// a controlled vocabulary. For Influenza Vaccine, the intraspecific
	// description shall contain the syntax of the antigen in line with the WHO
	// convention
	IntraspecificDescription *datatypes_go_proto.String                        `protobuf:"bytes,8,opt,name=intraspecific_description,json=intraspecificDescription,proto3" json:"intraspecific_description,omitempty"`
	Author                   []*SubstanceSourceMaterial_Organism_Author        `protobuf:"bytes,9,rep,name=author,proto3" json:"author,omitempty"`
	Hybrid                   *SubstanceSourceMaterial_Organism_Hybrid          `protobuf:"bytes,10,opt,name=hybrid,proto3" json:"hybrid,omitempty"`
	OrganismGeneral          *SubstanceSourceMaterial_Organism_OrganismGeneral `protobuf:"bytes,11,opt,name=organism_general,json=organismGeneral,proto3" json:"organism_general,omitempty"`
}

func (x *SubstanceSourceMaterial_Organism) Reset() {
	*x = SubstanceSourceMaterial_Organism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial_Organism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial_Organism) ProtoMessage() {}

func (x *SubstanceSourceMaterial_Organism) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial_Organism.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial_Organism) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SubstanceSourceMaterial_Organism) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetFamily() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetGenus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Genus
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetSpecies() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetIntraspecificType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.IntraspecificType
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetIntraspecificDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.IntraspecificDescription
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetAuthor() []*SubstanceSourceMaterial_Organism_Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetHybrid() *SubstanceSourceMaterial_Organism_Hybrid {
	if x != nil {
		return x.Hybrid
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism) GetOrganismGeneral() *SubstanceSourceMaterial_Organism_OrganismGeneral {
	if x != nil {
		return x.OrganismGeneral
	}
	return nil
}

// To do
type SubstanceSourceMaterial_PartDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Entity of anatomical origin of source material within an organism
	Part *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=part,proto3" json:"part,omitempty"`
	// The detailed anatomic location when the part can be extracted from
	// different anatomical locations of the organism. Multiple alternative
	// locations may apply
	PartLocation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=part_location,json=partLocation,proto3" json:"part_location,omitempty"`
}

func (x *SubstanceSourceMaterial_PartDescription) Reset() {
	*x = SubstanceSourceMaterial_PartDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial_PartDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial_PartDescription) ProtoMessage() {}

func (x *SubstanceSourceMaterial_PartDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial_PartDescription.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial_PartDescription) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SubstanceSourceMaterial_PartDescription) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial_PartDescription) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial_PartDescription) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial_PartDescription) GetPart() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Part
	}
	return nil
}

func (x *SubstanceSourceMaterial_PartDescription) GetPartLocation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PartLocation
	}
	return nil
}

// 4.9.13.6.1 Author type (Conditional)
type SubstanceSourceMaterial_Organism_Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of author of an organism species shall be specified. The
	// parenthetical author of an organism species refers to the first author
	// who published the plant/animal name (of any rank). The primary author
	// of an organism species refers to the first author(s), who validly
	// published the plant/animal name
	AuthorType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=author_type,json=authorType,proto3" json:"author_type,omitempty"`
	// The author of an organism species shall be specified. The author year
	// of an organism shall also be specified when applicable; refers to the
	// year in which the first author(s) published the infraspecific
	// plant/animal name (of any rank)
	AuthorDescription *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=author_description,json=authorDescription,proto3" json:"author_description,omitempty"`
}

func (x *SubstanceSourceMaterial_Organism_Author) Reset() {
	*x = SubstanceSourceMaterial_Organism_Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial_Organism_Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial_Organism_Author) ProtoMessage() {}

func (x *SubstanceSourceMaterial_Organism_Author) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial_Organism_Author.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial_Organism_Author) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *SubstanceSourceMaterial_Organism_Author) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Author) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Author) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Author) GetAuthorType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AuthorType
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Author) GetAuthorDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.AuthorDescription
	}
	return nil
}

// 4.9.13.8.1 Hybrid species maternal organism ID (Optional)
type SubstanceSourceMaterial_Organism_Hybrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The identifier of the maternal species constituting the hybrid organism
	// shall be specified based on a controlled vocabulary. For plants, the
	// parents aren’t always known, and it is unlikely that it will be known
	// which is maternal and which is paternal
	MaternalOrganismId *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=maternal_organism_id,json=maternalOrganismId,proto3" json:"maternal_organism_id,omitempty"`
	// The name of the maternal species constituting the hybrid organism shall
	// be specified. For plants, the parents aren’t always known, and it is
	// unlikely that it will be known which is maternal and which is paternal
	MaternalOrganismName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=maternal_organism_name,json=maternalOrganismName,proto3" json:"maternal_organism_name,omitempty"`
	// The identifier of the paternal species constituting the hybrid organism
	// shall be specified based on a controlled vocabulary
	PaternalOrganismId *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=paternal_organism_id,json=paternalOrganismId,proto3" json:"paternal_organism_id,omitempty"`
	// The name of the paternal species constituting the hybrid organism shall
	// be specified
	PaternalOrganismName *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=paternal_organism_name,json=paternalOrganismName,proto3" json:"paternal_organism_name,omitempty"`
	// The hybrid type of an organism shall be specified
	HybridType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=hybrid_type,json=hybridType,proto3" json:"hybrid_type,omitempty"`
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) Reset() {
	*x = SubstanceSourceMaterial_Organism_Hybrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial_Organism_Hybrid) ProtoMessage() {}

func (x *SubstanceSourceMaterial_Organism_Hybrid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial_Organism_Hybrid.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial_Organism_Hybrid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetMaternalOrganismId() *datatypes_go_proto.String {
	if x != nil {
		return x.MaternalOrganismId
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetMaternalOrganismName() *datatypes_go_proto.String {
	if x != nil {
		return x.MaternalOrganismName
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetPaternalOrganismId() *datatypes_go_proto.String {
	if x != nil {
		return x.PaternalOrganismId
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetPaternalOrganismName() *datatypes_go_proto.String {
	if x != nil {
		return x.PaternalOrganismName
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_Hybrid) GetHybridType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.HybridType
	}
	return nil
}

// 4.9.13.7.1 Kingdom (Conditional)
type SubstanceSourceMaterial_Organism_OrganismGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The kingdom of an organism shall be specified
	Kingdom *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=kingdom,proto3" json:"kingdom,omitempty"`
	// The phylum of an organism shall be specified
	Phylum *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=phylum,proto3" json:"phylum,omitempty"`
	// The class of an organism shall be specified
	ClassValue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// The order of an organism shall be specified,
	Order *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) Reset() {
	*x = SubstanceSourceMaterial_Organism_OrganismGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubstanceSourceMaterial_Organism_OrganismGeneral) ProtoMessage() {}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubstanceSourceMaterial_Organism_OrganismGeneral.ProtoReflect.Descriptor instead.
func (*SubstanceSourceMaterial_Organism_OrganismGeneral) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetKingdom() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Kingdom
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetPhylum() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Phylum
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetClassValue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *SubstanceSourceMaterial_Organism_OrganismGeneral) GetOrder() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Order
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDesc = []byte{
	0x0a, 0x49, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x23, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x13, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x15,
	0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x10, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x73, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52,
	0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x67, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xd3, 0x02, 0x0a, 0x13, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x0d, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xbd, 0x11, 0x0a, 0x08, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58,
	0x0a, 0x19, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x18,
	0x69, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x54,
	0x0a, 0x06, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x52, 0x06, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x12, 0x70, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x1a, 0xd5, 0x02, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcd,
	0x04, 0x0a, 0x06, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x14, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x12, 0x70, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x16, 0x70, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x14, 0x70, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xc7,
	0x03, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07,
	0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x07, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x06,
	0x70, 0x68, 0x79, 0x6c, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x06, 0x70, 0x68, 0x79, 0x6c, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0xd0, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74,
	0x12, 0x49, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4b, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x89,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x66, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_goTypes = []interface{}{
	(*SubstanceSourceMaterial)(nil),                          // 0: google.fhir.r4.core.SubstanceSourceMaterial
	(*SubstanceSourceMaterial_FractionDescription)(nil),      // 1: google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription
	(*SubstanceSourceMaterial_Organism)(nil),                 // 2: google.fhir.r4.core.SubstanceSourceMaterial.Organism
	(*SubstanceSourceMaterial_PartDescription)(nil),          // 3: google.fhir.r4.core.SubstanceSourceMaterial.PartDescription
	(*SubstanceSourceMaterial_Organism_Author)(nil),          // 4: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author
	(*SubstanceSourceMaterial_Organism_Hybrid)(nil),          // 5: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid
	(*SubstanceSourceMaterial_Organism_OrganismGeneral)(nil), // 6: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral
	(*datatypes_go_proto.Id)(nil),                            // 7: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                          // 8: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                           // 9: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                          // 10: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                     // 11: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                          // 12: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                     // 13: google.fhir.r4.core.Extension
	(*datatypes_go_proto.CodeableConcept)(nil),               // 14: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.Identifier)(nil),                    // 15: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.String)(nil),                        // 16: google.fhir.r4.core.String
}
var file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_depIdxs = []int32{
	7,  // 0: google.fhir.r4.core.SubstanceSourceMaterial.id:type_name -> google.fhir.r4.core.Id
	8,  // 1: google.fhir.r4.core.SubstanceSourceMaterial.meta:type_name -> google.fhir.r4.core.Meta
	9,  // 2: google.fhir.r4.core.SubstanceSourceMaterial.implicit_rules:type_name -> google.fhir.r4.core.Uri
	10, // 3: google.fhir.r4.core.SubstanceSourceMaterial.language:type_name -> google.fhir.r4.core.Code
	11, // 4: google.fhir.r4.core.SubstanceSourceMaterial.text:type_name -> google.fhir.r4.core.Narrative
	12, // 5: google.fhir.r4.core.SubstanceSourceMaterial.contained:type_name -> google.protobuf.Any
	13, // 6: google.fhir.r4.core.SubstanceSourceMaterial.extension:type_name -> google.fhir.r4.core.Extension
	13, // 7: google.fhir.r4.core.SubstanceSourceMaterial.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 8: google.fhir.r4.core.SubstanceSourceMaterial.source_material_class:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 9: google.fhir.r4.core.SubstanceSourceMaterial.source_material_type:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 10: google.fhir.r4.core.SubstanceSourceMaterial.source_material_state:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 11: google.fhir.r4.core.SubstanceSourceMaterial.organism_id:type_name -> google.fhir.r4.core.Identifier
	16, // 12: google.fhir.r4.core.SubstanceSourceMaterial.organism_name:type_name -> google.fhir.r4.core.String
	15, // 13: google.fhir.r4.core.SubstanceSourceMaterial.parent_substance_id:type_name -> google.fhir.r4.core.Identifier
	16, // 14: google.fhir.r4.core.SubstanceSourceMaterial.parent_substance_name:type_name -> google.fhir.r4.core.String
	14, // 15: google.fhir.r4.core.SubstanceSourceMaterial.country_of_origin:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 16: google.fhir.r4.core.SubstanceSourceMaterial.geographical_location:type_name -> google.fhir.r4.core.String
	14, // 17: google.fhir.r4.core.SubstanceSourceMaterial.development_stage:type_name -> google.fhir.r4.core.CodeableConcept
	1,  // 18: google.fhir.r4.core.SubstanceSourceMaterial.fraction_description:type_name -> google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription
	2,  // 19: google.fhir.r4.core.SubstanceSourceMaterial.organism:type_name -> google.fhir.r4.core.SubstanceSourceMaterial.Organism
	3,  // 20: google.fhir.r4.core.SubstanceSourceMaterial.part_description:type_name -> google.fhir.r4.core.SubstanceSourceMaterial.PartDescription
	16, // 21: google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription.id:type_name -> google.fhir.r4.core.String
	13, // 22: google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription.extension:type_name -> google.fhir.r4.core.Extension
	13, // 23: google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 24: google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription.fraction:type_name -> google.fhir.r4.core.String
	14, // 25: google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription.material_type:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 26: google.fhir.r4.core.SubstanceSourceMaterial.Organism.id:type_name -> google.fhir.r4.core.String
	13, // 27: google.fhir.r4.core.SubstanceSourceMaterial.Organism.extension:type_name -> google.fhir.r4.core.Extension
	13, // 28: google.fhir.r4.core.SubstanceSourceMaterial.Organism.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 29: google.fhir.r4.core.SubstanceSourceMaterial.Organism.family:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 30: google.fhir.r4.core.SubstanceSourceMaterial.Organism.genus:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 31: google.fhir.r4.core.SubstanceSourceMaterial.Organism.species:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 32: google.fhir.r4.core.SubstanceSourceMaterial.Organism.intraspecific_type:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 33: google.fhir.r4.core.SubstanceSourceMaterial.Organism.intraspecific_description:type_name -> google.fhir.r4.core.String
	4,  // 34: google.fhir.r4.core.SubstanceSourceMaterial.Organism.author:type_name -> google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author
	5,  // 35: google.fhir.r4.core.SubstanceSourceMaterial.Organism.hybrid:type_name -> google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid
	6,  // 36: google.fhir.r4.core.SubstanceSourceMaterial.Organism.organism_general:type_name -> google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral
	16, // 37: google.fhir.r4.core.SubstanceSourceMaterial.PartDescription.id:type_name -> google.fhir.r4.core.String
	13, // 38: google.fhir.r4.core.SubstanceSourceMaterial.PartDescription.extension:type_name -> google.fhir.r4.core.Extension
	13, // 39: google.fhir.r4.core.SubstanceSourceMaterial.PartDescription.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 40: google.fhir.r4.core.SubstanceSourceMaterial.PartDescription.part:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 41: google.fhir.r4.core.SubstanceSourceMaterial.PartDescription.part_location:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 42: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author.id:type_name -> google.fhir.r4.core.String
	13, // 43: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author.extension:type_name -> google.fhir.r4.core.Extension
	13, // 44: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 45: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author.author_type:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 46: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author.author_description:type_name -> google.fhir.r4.core.String
	16, // 47: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.id:type_name -> google.fhir.r4.core.String
	13, // 48: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.extension:type_name -> google.fhir.r4.core.Extension
	13, // 49: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.modifier_extension:type_name -> google.fhir.r4.core.Extension
	16, // 50: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.maternal_organism_id:type_name -> google.fhir.r4.core.String
	16, // 51: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.maternal_organism_name:type_name -> google.fhir.r4.core.String
	16, // 52: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.paternal_organism_id:type_name -> google.fhir.r4.core.String
	16, // 53: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.paternal_organism_name:type_name -> google.fhir.r4.core.String
	14, // 54: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid.hybrid_type:type_name -> google.fhir.r4.core.CodeableConcept
	16, // 55: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.id:type_name -> google.fhir.r4.core.String
	13, // 56: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.extension:type_name -> google.fhir.r4.core.Extension
	13, // 57: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.modifier_extension:type_name -> google.fhir.r4.core.Extension
	14, // 58: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.kingdom:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 59: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.phylum:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 60: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.class_value:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 61: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral.order:type_name -> google.fhir.r4.core.CodeableConcept
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial_FractionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial_Organism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial_PartDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial_Organism_Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial_Organism_Hybrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubstanceSourceMaterial_Organism_OrganismGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_substance_source_material_proto_depIdxs = nil
}
