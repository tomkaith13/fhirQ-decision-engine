//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/medicinal_product_packaged.proto

package medicinal_product_packaged_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicinalProductPackaged, last
// updated 2019-11-01T09:29:23.356+11:00. A medicinal product in a container or
// package. See http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged
type MedicinalProductPackaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The product with this is a pack for
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=subject,proto3" json:"subject,omitempty"`
	// Textual description
	Description *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// The legal status of supply of the medicinal product as classified by the
	// regulator
	LegalStatusOfSupply *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// Marketing information
	MarketingStatus []*datatypes_go_proto.MarketingStatus `protobuf:"bytes,14,rep,name=marketing_status,json=marketingStatus,proto3" json:"marketing_status,omitempty"`
	// Manufacturer of this Package Item
	MarketingAuthorization *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=marketing_authorization,json=marketingAuthorization,proto3" json:"marketing_authorization,omitempty"`
	// Manufacturer of this Package Item
	Manufacturer    []*datatypes_go_proto.Reference             `protobuf:"bytes,16,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	BatchIdentifier []*MedicinalProductPackaged_BatchIdentifier `protobuf:"bytes,17,rep,name=batch_identifier,json=batchIdentifier,proto3" json:"batch_identifier,omitempty"`
	PackageItem     []*MedicinalProductPackaged_PackageItem     `protobuf:"bytes,18,rep,name=package_item,json=packageItem,proto3" json:"package_item,omitempty"`
}

func (x *MedicinalProductPackaged) Reset() {
	*x = MedicinalProductPackaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductPackaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductPackaged) ProtoMessage() {}

func (x *MedicinalProductPackaged) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductPackaged.ProtoReflect.Descriptor instead.
func (*MedicinalProductPackaged) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescGZIP(), []int{0}
}

func (x *MedicinalProductPackaged) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductPackaged) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicinalProductPackaged) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicinalProductPackaged) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicinalProductPackaged) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicinalProductPackaged) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicinalProductPackaged) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductPackaged) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductPackaged) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductPackaged) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MedicinalProductPackaged) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *MedicinalProductPackaged) GetLegalStatusOfSupply() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *MedicinalProductPackaged) GetMarketingStatus() []*datatypes_go_proto.MarketingStatus {
	if x != nil {
		return x.MarketingStatus
	}
	return nil
}

func (x *MedicinalProductPackaged) GetMarketingAuthorization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.MarketingAuthorization
	}
	return nil
}

func (x *MedicinalProductPackaged) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *MedicinalProductPackaged) GetBatchIdentifier() []*MedicinalProductPackaged_BatchIdentifier {
	if x != nil {
		return x.BatchIdentifier
	}
	return nil
}

func (x *MedicinalProductPackaged) GetPackageItem() []*MedicinalProductPackaged_PackageItem {
	if x != nil {
		return x.PackageItem
	}
	return nil
}

// Batch numbering
type MedicinalProductPackaged_BatchIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A number appearing on the outer packaging of a specific batch
	OuterPackaging *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=outer_packaging,json=outerPackaging,proto3" json:"outer_packaging,omitempty"`
	// A number appearing on the immediate packaging (and not the outer
	// packaging)
	ImmediatePackaging *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=immediate_packaging,json=immediatePackaging,proto3" json:"immediate_packaging,omitempty"`
}

func (x *MedicinalProductPackaged_BatchIdentifier) Reset() {
	*x = MedicinalProductPackaged_BatchIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductPackaged_BatchIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductPackaged_BatchIdentifier) ProtoMessage() {}

func (x *MedicinalProductPackaged_BatchIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductPackaged_BatchIdentifier.ProtoReflect.Descriptor instead.
func (*MedicinalProductPackaged_BatchIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicinalProductPackaged_BatchIdentifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductPackaged_BatchIdentifier) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductPackaged_BatchIdentifier) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductPackaged_BatchIdentifier) GetOuterPackaging() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.OuterPackaging
	}
	return nil
}

func (x *MedicinalProductPackaged_BatchIdentifier) GetImmediatePackaging() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ImmediatePackaging
	}
	return nil
}

// A packaging item, as a contained for medicine, possibly with other
// packaging items within
type MedicinalProductPackaged_PackageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Including possibly Data Carrier Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The physical type of the container of the medicine
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The quantity of this package in the medicinal product, at the current
	// level of packaging. The outermost is always 1
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Material type of the package item
	Material []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=material,proto3" json:"material,omitempty"`
	// A possible alternate material for the packaging
	AlternateMaterial []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=alternate_material,json=alternateMaterial,proto3" json:"alternate_material,omitempty"`
	// A device accompanying a medicinal product
	Device []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=device,proto3" json:"device,omitempty"`
	// The manufactured item as contained in the packaged medicinal product
	ManufacturedItem []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=manufactured_item,json=manufacturedItem,proto3" json:"manufactured_item,omitempty"`
	// Allows containers within containers
	PackageItem []*MedicinalProductPackaged_PackageItem `protobuf:"bytes,11,rep,name=package_item,json=packageItem,proto3" json:"package_item,omitempty"`
	// Dimensions, color etc.
	PhysicalCharacteristics *datatypes_go_proto.ProdCharacteristic `protobuf:"bytes,12,opt,name=physical_characteristics,json=physicalCharacteristics,proto3" json:"physical_characteristics,omitempty"`
	// Other codeable characteristics
	OtherCharacteristics []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=other_characteristics,json=otherCharacteristics,proto3" json:"other_characteristics,omitempty"`
	// Shelf Life and storage information
	ShelfLifeStorage []*datatypes_go_proto.ProductShelfLife `protobuf:"bytes,14,rep,name=shelf_life_storage,json=shelfLifeStorage,proto3" json:"shelf_life_storage,omitempty"`
	// Manufacturer of this Package Item
	Manufacturer []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=manufacturer,proto3" json:"manufacturer,omitempty"`
}

func (x *MedicinalProductPackaged_PackageItem) Reset() {
	*x = MedicinalProductPackaged_PackageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductPackaged_PackageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductPackaged_PackageItem) ProtoMessage() {}

func (x *MedicinalProductPackaged_PackageItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductPackaged_PackageItem.ProtoReflect.Descriptor instead.
func (*MedicinalProductPackaged_PackageItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicinalProductPackaged_PackageItem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetQuantity() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetMaterial() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetAlternateMaterial() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AlternateMaterial
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetDevice() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetManufacturedItem() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ManufacturedItem
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetPackageItem() []*MedicinalProductPackaged_PackageItem {
	if x != nil {
		return x.PackageItem
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetPhysicalCharacteristics() *datatypes_go_proto.ProdCharacteristic {
	if x != nil {
		return x.PhysicalCharacteristics
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetOtherCharacteristics() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OtherCharacteristics
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetShelfLifeStorage() []*datatypes_go_proto.ProductShelfLife {
	if x != nil {
		return x.ShelfLifeStorage
	}
	return nil
}

func (x *MedicinalProductPackaged_PackageItem) GetManufacturer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

var File_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x16, 0x0a, 0x18, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x66, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x23, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x68,
	0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0xef,
	0x02, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x50,
	0x0a, 0x13, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x1a, 0xaf, 0x09, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5c, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x17, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x52, 0x10, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x4c,
	0x69, 0x66, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x3a, 0x4c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x8a, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0,
	0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_goTypes = []interface{}{
	(*MedicinalProductPackaged)(nil),                 // 0: google.fhir.r4.core.MedicinalProductPackaged
	(*MedicinalProductPackaged_BatchIdentifier)(nil), // 1: google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier
	(*MedicinalProductPackaged_PackageItem)(nil),     // 2: google.fhir.r4.core.MedicinalProductPackaged.PackageItem
	(*datatypes_go_proto.Id)(nil),                    // 3: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                  // 4: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                   // 5: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                  // 6: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),             // 7: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                  // 8: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),             // 9: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),            // 10: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.Reference)(nil),             // 11: google.fhir.r4.core.Reference
	(*datatypes_go_proto.String)(nil),                // 12: google.fhir.r4.core.String
	(*datatypes_go_proto.CodeableConcept)(nil),       // 13: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.MarketingStatus)(nil),       // 14: google.fhir.r4.core.MarketingStatus
	(*datatypes_go_proto.Quantity)(nil),              // 15: google.fhir.r4.core.Quantity
	(*datatypes_go_proto.ProdCharacteristic)(nil),    // 16: google.fhir.r4.core.ProdCharacteristic
	(*datatypes_go_proto.ProductShelfLife)(nil),      // 17: google.fhir.r4.core.ProductShelfLife
}
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_depIdxs = []int32{
	3,  // 0: google.fhir.r4.core.MedicinalProductPackaged.id:type_name -> google.fhir.r4.core.Id
	4,  // 1: google.fhir.r4.core.MedicinalProductPackaged.meta:type_name -> google.fhir.r4.core.Meta
	5,  // 2: google.fhir.r4.core.MedicinalProductPackaged.implicit_rules:type_name -> google.fhir.r4.core.Uri
	6,  // 3: google.fhir.r4.core.MedicinalProductPackaged.language:type_name -> google.fhir.r4.core.Code
	7,  // 4: google.fhir.r4.core.MedicinalProductPackaged.text:type_name -> google.fhir.r4.core.Narrative
	8,  // 5: google.fhir.r4.core.MedicinalProductPackaged.contained:type_name -> google.protobuf.Any
	9,  // 6: google.fhir.r4.core.MedicinalProductPackaged.extension:type_name -> google.fhir.r4.core.Extension
	9,  // 7: google.fhir.r4.core.MedicinalProductPackaged.modifier_extension:type_name -> google.fhir.r4.core.Extension
	10, // 8: google.fhir.r4.core.MedicinalProductPackaged.identifier:type_name -> google.fhir.r4.core.Identifier
	11, // 9: google.fhir.r4.core.MedicinalProductPackaged.subject:type_name -> google.fhir.r4.core.Reference
	12, // 10: google.fhir.r4.core.MedicinalProductPackaged.description:type_name -> google.fhir.r4.core.String
	13, // 11: google.fhir.r4.core.MedicinalProductPackaged.legal_status_of_supply:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 12: google.fhir.r4.core.MedicinalProductPackaged.marketing_status:type_name -> google.fhir.r4.core.MarketingStatus
	11, // 13: google.fhir.r4.core.MedicinalProductPackaged.marketing_authorization:type_name -> google.fhir.r4.core.Reference
	11, // 14: google.fhir.r4.core.MedicinalProductPackaged.manufacturer:type_name -> google.fhir.r4.core.Reference
	1,  // 15: google.fhir.r4.core.MedicinalProductPackaged.batch_identifier:type_name -> google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier
	2,  // 16: google.fhir.r4.core.MedicinalProductPackaged.package_item:type_name -> google.fhir.r4.core.MedicinalProductPackaged.PackageItem
	12, // 17: google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier.id:type_name -> google.fhir.r4.core.String
	9,  // 18: google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier.extension:type_name -> google.fhir.r4.core.Extension
	9,  // 19: google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier.modifier_extension:type_name -> google.fhir.r4.core.Extension
	10, // 20: google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier.outer_packaging:type_name -> google.fhir.r4.core.Identifier
	10, // 21: google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier.immediate_packaging:type_name -> google.fhir.r4.core.Identifier
	12, // 22: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.id:type_name -> google.fhir.r4.core.String
	9,  // 23: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.extension:type_name -> google.fhir.r4.core.Extension
	9,  // 24: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.modifier_extension:type_name -> google.fhir.r4.core.Extension
	10, // 25: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.identifier:type_name -> google.fhir.r4.core.Identifier
	13, // 26: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.type:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 27: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.quantity:type_name -> google.fhir.r4.core.Quantity
	13, // 28: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.material:type_name -> google.fhir.r4.core.CodeableConcept
	13, // 29: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.alternate_material:type_name -> google.fhir.r4.core.CodeableConcept
	11, // 30: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.device:type_name -> google.fhir.r4.core.Reference
	11, // 31: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.manufactured_item:type_name -> google.fhir.r4.core.Reference
	2,  // 32: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.package_item:type_name -> google.fhir.r4.core.MedicinalProductPackaged.PackageItem
	16, // 33: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.physical_characteristics:type_name -> google.fhir.r4.core.ProdCharacteristic
	13, // 34: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.other_characteristics:type_name -> google.fhir.r4.core.CodeableConcept
	17, // 35: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.shelf_life_storage:type_name -> google.fhir.r4.core.ProductShelfLife
	11, // 36: google.fhir.r4.core.MedicinalProductPackaged.PackageItem.manufacturer:type_name -> google.fhir.r4.core.Reference
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_init() }
func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductPackaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductPackaged_BatchIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductPackaged_PackageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_packaged_proto_depIdxs = nil
}
