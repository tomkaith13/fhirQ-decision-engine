//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/r4/core/resources/medicinal_product_authorization.proto

package medicinal_product_authorization_go_proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for MedicinalProductAuthorization,
// last updated 2019-11-01T09:29:23.356+11:00. The regulatory authorization of a
// medicinal product. See
// http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization
type MedicinalProductAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *datatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*any.Any `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,9,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for the marketing authorization, as assigned by a
	// regulator
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The medicinal product that is being authorized
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// The country in which the marketing authorization has been granted
	Country []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=country,proto3" json:"country,omitempty"`
	// Jurisdiction within a country
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// The status of the marketing authorization
	Status *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// The date at which the given status has become applicable
	StatusDate *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// The date when a suspended the marketing or the marketing authorization of
	// the product is anticipated to be restored
	RestoreDate *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=restore_date,json=restoreDate,proto3" json:"restore_date,omitempty"`
	// The beginning of the time period in which the marketing authorization is in
	// the specific status shall be specified A complete date consisting of day,
	// month and year shall be specified using the ISO 8601 date format
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,17,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// A period of time after authorization before generic product applicatiosn
	// can be submitted
	DataExclusivityPeriod *datatypes_go_proto.Period `protobuf:"bytes,18,opt,name=data_exclusivity_period,json=dataExclusivityPeriod,proto3" json:"data_exclusivity_period,omitempty"`
	// The date when the first authorization was granted by a Medicines Regulatory
	// Agency
	DateOfFirstAuthorization *datatypes_go_proto.DateTime `protobuf:"bytes,19,opt,name=date_of_first_authorization,json=dateOfFirstAuthorization,proto3" json:"date_of_first_authorization,omitempty"`
	// Date of first marketing authorization for a company's new medicinal product
	// in any country in the World
	InternationalBirthDate *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=international_birth_date,json=internationalBirthDate,proto3" json:"international_birth_date,omitempty"`
	// The legal framework against which this authorization is granted
	LegalBasis                  *datatypes_go_proto.CodeableConcept                          `protobuf:"bytes,21,opt,name=legal_basis,json=legalBasis,proto3" json:"legal_basis,omitempty"`
	JurisdictionalAuthorization []*MedicinalProductAuthorization_JurisdictionalAuthorization `protobuf:"bytes,22,rep,name=jurisdictional_authorization,json=jurisdictionalAuthorization,proto3" json:"jurisdictional_authorization,omitempty"`
	// Marketing Authorization Holder
	Holder *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=holder,proto3" json:"holder,omitempty"`
	// Medicines Regulatory Agency
	Regulator *datatypes_go_proto.Reference            `protobuf:"bytes,24,opt,name=regulator,proto3" json:"regulator,omitempty"`
	Procedure *MedicinalProductAuthorization_Procedure `protobuf:"bytes,25,opt,name=procedure,proto3" json:"procedure,omitempty"`
}

func (x *MedicinalProductAuthorization) Reset() {
	*x = MedicinalProductAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductAuthorization) ProtoMessage() {}

func (x *MedicinalProductAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductAuthorization.ProtoReflect.Descriptor instead.
func (*MedicinalProductAuthorization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescGZIP(), []int{0}
}

func (x *MedicinalProductAuthorization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetLanguage() *datatypes_go_proto.Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetText() *datatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetContained() []*any.Any {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetCountry() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetStatusDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetRestoreDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RestoreDate
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetDataExclusivityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.DataExclusivityPeriod
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetDateOfFirstAuthorization() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateOfFirstAuthorization
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetInternationalBirthDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.InternationalBirthDate
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetLegalBasis() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalBasis
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetJurisdictionalAuthorization() []*MedicinalProductAuthorization_JurisdictionalAuthorization {
	if x != nil {
		return x.JurisdictionalAuthorization
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetHolder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Holder
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetRegulator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Regulator
	}
	return nil
}

func (x *MedicinalProductAuthorization) GetProcedure() *MedicinalProductAuthorization_Procedure {
	if x != nil {
		return x.Procedure
	}
	return nil
}

// Authorization in areas within a country
type MedicinalProductAuthorization_JurisdictionalAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The assigned number for the marketing authorization
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Country of authorization
	Country *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	// Jurisdiction within a country
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// The legal status of supply in a jurisdiction or region
	LegalStatusOfSupply *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=legal_status_of_supply,json=legalStatusOfSupply,proto3" json:"legal_status_of_supply,omitempty"`
	// The start and expected end date of the authorization
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,8,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) Reset() {
	*x = MedicinalProductAuthorization_JurisdictionalAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductAuthorization_JurisdictionalAuthorization) ProtoMessage() {}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductAuthorization_JurisdictionalAuthorization.ProtoReflect.Descriptor instead.
func (*MedicinalProductAuthorization_JurisdictionalAuthorization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetCountry() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetLegalStatusOfSupply() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LegalStatusOfSupply
	}
	return nil
}

func (x *MedicinalProductAuthorization_JurisdictionalAuthorization) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

// The regulatory procedure for granting or amending a marketing authorization
type MedicinalProductAuthorization_Procedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier for this procedure
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Type of procedure
	Type *datatypes_go_proto.CodeableConcept            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Date *MedicinalProductAuthorization_Procedure_DateX `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	// Applcations submitted to obtain a marketing authorization
	Application []*MedicinalProductAuthorization_Procedure `protobuf:"bytes,7,rep,name=application,proto3" json:"application,omitempty"`
}

func (x *MedicinalProductAuthorization_Procedure) Reset() {
	*x = MedicinalProductAuthorization_Procedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductAuthorization_Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductAuthorization_Procedure) ProtoMessage() {}

func (x *MedicinalProductAuthorization_Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductAuthorization_Procedure.ProtoReflect.Descriptor instead.
func (*MedicinalProductAuthorization_Procedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MedicinalProductAuthorization_Procedure) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure) GetDate() *MedicinalProductAuthorization_Procedure_DateX {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure) GetApplication() []*MedicinalProductAuthorization_Procedure {
	if x != nil {
		return x.Application
	}
	return nil
}

// Date of procedure
type MedicinalProductAuthorization_Procedure_DateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*MedicinalProductAuthorization_Procedure_DateX_Period
	//	*MedicinalProductAuthorization_Procedure_DateX_DateTime
	Choice isMedicinalProductAuthorization_Procedure_DateX_Choice `protobuf_oneof:"choice"`
}

func (x *MedicinalProductAuthorization_Procedure_DateX) Reset() {
	*x = MedicinalProductAuthorization_Procedure_DateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicinalProductAuthorization_Procedure_DateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicinalProductAuthorization_Procedure_DateX) ProtoMessage() {}

func (x *MedicinalProductAuthorization_Procedure_DateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicinalProductAuthorization_Procedure_DateX.ProtoReflect.Descriptor instead.
func (*MedicinalProductAuthorization_Procedure_DateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *MedicinalProductAuthorization_Procedure_DateX) GetChoice() isMedicinalProductAuthorization_Procedure_DateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure_DateX) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetChoice().(*MedicinalProductAuthorization_Procedure_DateX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *MedicinalProductAuthorization_Procedure_DateX) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetChoice().(*MedicinalProductAuthorization_Procedure_DateX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isMedicinalProductAuthorization_Procedure_DateX_Choice interface {
	isMedicinalProductAuthorization_Procedure_DateX_Choice()
}

type MedicinalProductAuthorization_Procedure_DateX_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type MedicinalProductAuthorization_Procedure_DateX_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*MedicinalProductAuthorization_Procedure_DateX_Period) isMedicinalProductAuthorization_Procedure_DateX_Choice() {
}

func (*MedicinalProductAuthorization_Procedure_DateX_DateTime) isMedicinalProductAuthorization_Procedure_DateX_Choice() {
}

var File_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDesc = []byte{
	0x0a, 0x4f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x18,
	0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x34, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x53, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5c, 0x0a, 0x1b, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x18,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1b, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x06,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x1a, 0xc3, 0x04, 0x0a, 0x1b, 0x4a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x13, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x66,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x91, 0x05, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x5e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x8e, 0x01, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x65, 0x58, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x3a, 0x51, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0x8f, 0x01, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x6c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescData = file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_goTypes = []interface{}{
	(*MedicinalProductAuthorization)(nil),                             // 0: google.fhir.r4.core.MedicinalProductAuthorization
	(*MedicinalProductAuthorization_JurisdictionalAuthorization)(nil), // 1: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization
	(*MedicinalProductAuthorization_Procedure)(nil),                   // 2: google.fhir.r4.core.MedicinalProductAuthorization.Procedure
	(*MedicinalProductAuthorization_Procedure_DateX)(nil),             // 3: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX
	(*datatypes_go_proto.Id)(nil),                                     // 4: google.fhir.r4.core.Id
	(*datatypes_go_proto.Meta)(nil),                                   // 5: google.fhir.r4.core.Meta
	(*datatypes_go_proto.Uri)(nil),                                    // 6: google.fhir.r4.core.Uri
	(*datatypes_go_proto.Code)(nil),                                   // 7: google.fhir.r4.core.Code
	(*datatypes_go_proto.Narrative)(nil),                              // 8: google.fhir.r4.core.Narrative
	(*any.Any)(nil),                                                   // 9: google.protobuf.Any
	(*datatypes_go_proto.Extension)(nil),                              // 10: google.fhir.r4.core.Extension
	(*datatypes_go_proto.Identifier)(nil),                             // 11: google.fhir.r4.core.Identifier
	(*datatypes_go_proto.Reference)(nil),                              // 12: google.fhir.r4.core.Reference
	(*datatypes_go_proto.CodeableConcept)(nil),                        // 13: google.fhir.r4.core.CodeableConcept
	(*datatypes_go_proto.DateTime)(nil),                               // 14: google.fhir.r4.core.DateTime
	(*datatypes_go_proto.Period)(nil),                                 // 15: google.fhir.r4.core.Period
	(*datatypes_go_proto.String)(nil),                                 // 16: google.fhir.r4.core.String
}
var file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_depIdxs = []int32{
	4,  // 0: google.fhir.r4.core.MedicinalProductAuthorization.id:type_name -> google.fhir.r4.core.Id
	5,  // 1: google.fhir.r4.core.MedicinalProductAuthorization.meta:type_name -> google.fhir.r4.core.Meta
	6,  // 2: google.fhir.r4.core.MedicinalProductAuthorization.implicit_rules:type_name -> google.fhir.r4.core.Uri
	7,  // 3: google.fhir.r4.core.MedicinalProductAuthorization.language:type_name -> google.fhir.r4.core.Code
	8,  // 4: google.fhir.r4.core.MedicinalProductAuthorization.text:type_name -> google.fhir.r4.core.Narrative
	9,  // 5: google.fhir.r4.core.MedicinalProductAuthorization.contained:type_name -> google.protobuf.Any
	10, // 6: google.fhir.r4.core.MedicinalProductAuthorization.extension:type_name -> google.fhir.r4.core.Extension
	10, // 7: google.fhir.r4.core.MedicinalProductAuthorization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	11, // 8: google.fhir.r4.core.MedicinalProductAuthorization.identifier:type_name -> google.fhir.r4.core.Identifier
	12, // 9: google.fhir.r4.core.MedicinalProductAuthorization.subject:type_name -> google.fhir.r4.core.Reference
	13, // 10: google.fhir.r4.core.MedicinalProductAuthorization.country:type_name -> google.fhir.r4.core.CodeableConcept
	13, // 11: google.fhir.r4.core.MedicinalProductAuthorization.jurisdiction:type_name -> google.fhir.r4.core.CodeableConcept
	13, // 12: google.fhir.r4.core.MedicinalProductAuthorization.status:type_name -> google.fhir.r4.core.CodeableConcept
	14, // 13: google.fhir.r4.core.MedicinalProductAuthorization.status_date:type_name -> google.fhir.r4.core.DateTime
	14, // 14: google.fhir.r4.core.MedicinalProductAuthorization.restore_date:type_name -> google.fhir.r4.core.DateTime
	15, // 15: google.fhir.r4.core.MedicinalProductAuthorization.validity_period:type_name -> google.fhir.r4.core.Period
	15, // 16: google.fhir.r4.core.MedicinalProductAuthorization.data_exclusivity_period:type_name -> google.fhir.r4.core.Period
	14, // 17: google.fhir.r4.core.MedicinalProductAuthorization.date_of_first_authorization:type_name -> google.fhir.r4.core.DateTime
	14, // 18: google.fhir.r4.core.MedicinalProductAuthorization.international_birth_date:type_name -> google.fhir.r4.core.DateTime
	13, // 19: google.fhir.r4.core.MedicinalProductAuthorization.legal_basis:type_name -> google.fhir.r4.core.CodeableConcept
	1,  // 20: google.fhir.r4.core.MedicinalProductAuthorization.jurisdictional_authorization:type_name -> google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization
	12, // 21: google.fhir.r4.core.MedicinalProductAuthorization.holder:type_name -> google.fhir.r4.core.Reference
	12, // 22: google.fhir.r4.core.MedicinalProductAuthorization.regulator:type_name -> google.fhir.r4.core.Reference
	2,  // 23: google.fhir.r4.core.MedicinalProductAuthorization.procedure:type_name -> google.fhir.r4.core.MedicinalProductAuthorization.Procedure
	16, // 24: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.id:type_name -> google.fhir.r4.core.String
	10, // 25: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.extension:type_name -> google.fhir.r4.core.Extension
	10, // 26: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.modifier_extension:type_name -> google.fhir.r4.core.Extension
	11, // 27: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.identifier:type_name -> google.fhir.r4.core.Identifier
	13, // 28: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.country:type_name -> google.fhir.r4.core.CodeableConcept
	13, // 29: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.jurisdiction:type_name -> google.fhir.r4.core.CodeableConcept
	13, // 30: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.legal_status_of_supply:type_name -> google.fhir.r4.core.CodeableConcept
	15, // 31: google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization.validity_period:type_name -> google.fhir.r4.core.Period
	16, // 32: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.id:type_name -> google.fhir.r4.core.String
	10, // 33: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.extension:type_name -> google.fhir.r4.core.Extension
	10, // 34: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.modifier_extension:type_name -> google.fhir.r4.core.Extension
	11, // 35: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.identifier:type_name -> google.fhir.r4.core.Identifier
	13, // 36: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.type:type_name -> google.fhir.r4.core.CodeableConcept
	3,  // 37: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.date:type_name -> google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX
	2,  // 38: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.application:type_name -> google.fhir.r4.core.MedicinalProductAuthorization.Procedure
	15, // 39: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX.period:type_name -> google.fhir.r4.core.Period
	14, // 40: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX.date_time:type_name -> google.fhir.r4.core.DateTime
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() {
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_init()
}
func file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_init() {
	if File_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductAuthorization_JurisdictionalAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductAuthorization_Procedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicinalProductAuthorization_Procedure_DateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*MedicinalProductAuthorization_Procedure_DateX_Period)(nil),
		(*MedicinalProductAuthorization_Procedure_DateX_DateTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto = out.File
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_resources_medicinal_product_authorization_proto_depIdxs = nil
}
